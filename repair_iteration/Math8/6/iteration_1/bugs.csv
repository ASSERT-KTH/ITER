bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    (T[])out.toArray(new  T[out.size()  ]);  [CE]  not  a  statement  [FE]    ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]    (T[])out.toArray(new  T[out.size()  ]);  [BUGGY]  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	    (T[])out.toArray(new  T[out.size()  ]);		non-compiled	[CE]  not  a  statement	12	None	add
2	[BUG]  [BUGGY]    (T[])singletons.get(i);  [CE]  not  a  statement  [FE]      ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]    (T[])singletons.get(i);  [BUGGY]  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	    (T[])singletons.get(i);		non-compiled	[CE]  not  a  statement	12	None	add
3	[BUG]  [BUGGY]    (T[])singletons.get(i).remove(out);  [CE]  not  a  statement  [FE]        ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]    (T[])singletons.get(i).remove(out);  [BUGGY]  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	    (T[])singletons.get(i).remove(out);		non-compiled	[CE]  not  a  statement	12	None	add
4	[BUG]  [BUGGY]  out[i]  =  sample(i);  [CE]  incompatible  types  [FE]    ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]  out[i]  =  sample(i);  [BUGGY]  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(i);	out[i]  =  sample();  	non-compiled	[CE]  incompatible  types	11	None	replace
5	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]  out[i]  =  out[singletons.size()  ];  [BUGGY]  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	add	out[i]  =  out[singletons.size()  ];	out[i]  =  sample();  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
6	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  ];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]  out[i]  =  out[singletons.size()  ];  [BUGGY]  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  out[singletons.size()  ];	out[i]  =  sample();  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
7	[BUG]  [BUGGY]    (T[])singletons.get(i).invoke(out,  sampleSize);  [CE]  not  a  statement  [FE]    ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]    (T[])singletons.get(i).invoke(out,  sampleSize);  [BUGGY]  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	    (T[])singletons.get(i).invoke(out,  sampleSize);		non-compiled	[CE]  not  a  statement	12	None	add
8	[BUG]  [BUGGY]  out[i]  =  sample(out[i]);  [CE]  no  suitable  method  found  for  sample(T)  [FE]    ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]  out[i]  =  sample(out[i]);  [BUGGY]  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i]);	out[i]  =  sample();  	non-compiled	[CE]  no  suitable  method  found  for  sample(T)	11	None	replace
9	[BUG]  [BUGGY]  out[i]  =  sample(singletons[i].getClass());  [CE]  array  required,  but  List<T>  found  [FE]    ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]  out[i]  =  sample(singletons[i].getClass());  [BUGGY]  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(singletons[i].getClass());	out[i]  =  sample();  	non-compiled	[CE]  array  required,  but  List<T>  found	11	None	replace
10	[BUG]  [BUGGY]  out[i]  =  sample(singletons[i].doubleValue());  [CE]  array  required,  but  List<T>  found  [FE]      ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]  out[i]  =  sample(singletons[i].doubleValue());  [BUGGY]  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(singletons[i].doubleValue());	out[i]  =  sample();  	non-compiled	[CE]  array  required,  but  List<T>  found	11	None	replace
11	[BUG]  [BUGGY]    Sample  sample  =(T[])singletons.get(i);  [CE]  cannot  find  symbol  [FE]    ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]    Sample  sample  =(T[])singletons.get(i);  [BUGGY]  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	    Sample  sample  =(T[])singletons.get(i);		non-compiled	[CE]  cannot  find  symbol	12	None	add
12	[BUG]  [BUGGY]    Sample  sample  =(T[])singletons.get(i).toArray(out);  [CE]  cannot  find  symbol  [FE]      ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]    Sample  sample  =(T[])singletons.get(i).toArray(out);  [BUGGY]  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	    Sample  sample  =(T[])singletons.get(i).toArray(out);		non-compiled	[CE]  cannot  find  symbol	12	None	add
13	[BUG]  [BUGGY]    sample(i,  randomGenerator.nextInt(sampleSize));  [CE]  cannot  find  symbol  randomGenerator  [FE]        ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  [BUGGY]    sample(i,  randomGenerator.nextInt(sampleSize));  [BUGGY]  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	    sample(i,  randomGenerator.nextInt(sampleSize));		non-compiled	[CE]  cannot  find  symbol  randomGenerator	12	None	add
