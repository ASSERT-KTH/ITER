bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out[i]  =  sample(out[i].doubleValue());  [CE]  cannot  find  symbol  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  sample(out[i].doubleValue());  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i].doubleValue());	  out[i]    =    sample(singletons[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
2	[BUG]  [BUGGY]  out[i]  =  sample(singletons[i].doubleValue(),  sampleSize);  [CE]  array  required,  but  List<T>  found  [FE]            ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  sample(singletons[i].doubleValue(),  sampleSize);  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(singletons[i].doubleValue(),  sampleSize);	  out[i]    =    sample(singletons[i].doubleValue());    	non-compiled	[CE]  array  required,  but  List<T>  found	10	None	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  out[singletons.size()  +  1];  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	add	out[i]  =  out[singletons.size()  +  1];	  out[i]    =    out[singletons.size()    ];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
4	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  out[singletons.size()  +  1];  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  out[singletons.size()  +  1];	  out[i]    =    out[singletons.size()    ];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	1	replace
5	[BUG]  [BUGGY]  out[i]  =  sample(out[i].getClass());  [CE]  no  suitable  method  found  for  sample(Class<CAP#1>)  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  sample(out[i].getClass());  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i].getClass());	  out[i]    =    sample(singletons[i].getClass());    	non-compiled	[CE]  no  suitable  method  found  for  sample(Class<CAP#1>)	9	None	replace
6	[BUG]  [BUGGY]  out[i]  =  sample(singletons[i].getClass(),  sampleSize);  [CE]  array  required,  but  List<T>  found  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  sample(singletons[i].getClass(),  sampleSize);  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(singletons[i].getClass(),  sampleSize);	  out[i]    =    sample(singletons[i].getClass());    	non-compiled	[CE]  array  required,  but  List<T>  found	9	None	replace
7	[BUG]  [BUGGY]  sample(out,  randomGenerator.nextInt(sampleSize));  [CE]  cannot  find  symbol  randomGenerator  [FE]            ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  sample(out,  randomGenerator.nextInt(sampleSize));  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	sample(out,  randomGenerator.nextInt(sampleSize));	      sample(i,    randomGenerator.nextInt(sampleSize));    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	13	None	replace
8	[BUG]  [BUGGY]  (T[])out.toArray(new  T[out.size()  +  1]);  [CE]  not  a  statement  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  (T[])out.toArray(new  T[out.size()  +  1]);  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])out.toArray(new  T[out.size()  +  1]);	      (T[])out.toArray(new    T[out.size()    ]);    	non-compiled	[CE]  not  a  statement	1	None	replace
9	[BUG]  [BUGGY]  Sample  sample  =(T[])out.get(i).toArray(singletons);  [CE]  cannot  find  symbol  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  Sample  sample  =(T[])out.get(i).toArray(singletons);  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	Sample  sample  =(T[])out.get(i).toArray(singletons);	      Sample    sample    =(T[])singletons.get(i).toArray(out);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
10	[BUG]  [BUGGY]  Sample  sample  =(T[])singletons.get(i).toArray(out,  sampleSize);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  Sample  sample  =(T[])singletons.get(i).toArray(out,  sampleSize);  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	Sample  sample  =(T[])singletons.get(i).toArray(out,  sampleSize);	      Sample    sample    =(T[])singletons.get(i).toArray(out);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
11	[BUG]  [BUGGY]  (T[])singletons.get(i).invoke(out,  sampleSize,  randomGenerator);  [CE]  not  a  statement  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  (T[])singletons.get(i).invoke(out,  sampleSize,  randomGenerator);  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i).invoke(out,  sampleSize,  randomGenerator);	      (T[])singletons.get(i).invoke(out,    sampleSize);    	non-compiled	[CE]  not  a  statement	7	None	replace
12	[BUG]  [BUGGY]  (T[])singletons.get(i).invoke(out,  sampleSize,  random);  [CE]  not  a  statement  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  (T[])singletons.get(i).invoke(out,  sampleSize,  random);  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i).invoke(out,  sampleSize,  random);	      (T[])singletons.get(i).invoke(out,    sampleSize);    	non-compiled	[CE]  not  a  statement	7	None	replace
13	[BUG]  [BUGGY]  (T[])out.get(i);  [CE]  not  a  statement  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  (T[])out.get(i);  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])out.get(i);	      (T[])singletons.get(i);    	non-compiled	[CE]  not  a  statement	2	None	replace
14	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ];  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	add	out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
15	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ];  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	5	1	add
16	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  ];  int  out[i]  =  out[singletons.size()  ];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  out[singletons.size()  ];  int  out[i]  =  out[singletons.size()  ];  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]    =    out[singletons.size()    ];    int  out[i]  =  out[singletons.size()  ];	  	non-compiled	[CE]  ']'  expected	5	None	add
17	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  ];  sample[i]  =  out[singletons.size()  ];  [CE]  cannot  find  symbol  sample  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  out[singletons.size()  ];  sample[i]  =  out[singletons.size()  ];  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]    =    out[singletons.size()    ];    sample[i]  =  out[singletons.size()  ];	  	non-compiled	[CE]  cannot  find  symbol  sample	5	None	add
18	[BUG]  [BUGGY]  (T[])singletons.get(i).remove(out,  sampleSize);  [CE]  not  a  statement  [FE]            ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  (T[])singletons.get(i).remove(out,  sampleSize);  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i).remove(out,  sampleSize);	      (T[])singletons.get(i).remove(out);    	non-compiled	[CE]  not  a  statement	3	None	replace
19	[BUG]  [BUGGY]  (T[])out.get(i).remove(sampleSize);  [CE]  not  a  statement  [FE]              ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  (T[])out.get(i).remove(sampleSize);  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])out.get(i).remove(sampleSize);	      (T[])singletons.get(i).remove(out);    	non-compiled	[CE]  not  a  statement	3	None	replace
20	[BUG]  [BUGGY]  out[i]  =  sample(sampleSize,  i);  [CE]  no  suitable  method  found  for  sample(int,int)  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  sample(sampleSize,  i);  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(sampleSize,  i);	  out[i]    =    sample(i);    	non-compiled	[CE]  no  suitable  method  found  for  sample(int,int)	4	None	replace
21	[BUG]  [BUGGY]  out[i]  =  sample(out,  i);  [CE]  no  suitable  method  found  for  sample(T[],int)  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  sample(out,  i);  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out,  i);	  out[i]    =    sample(i);    	non-compiled	[CE]  no  suitable  method  found  for  sample(T[],int)	4	None	replace
22	[BUG]  [BUGGY]  Sample  sample  =(T[])out.get(i);  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  Sample  sample  =(T[])out.get(i);  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	Sample  sample  =(T[])out.get(i);	      Sample    sample    =(T[])singletons.get(i);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
23	[BUG]  [BUGGY]  out[i]  =  sample(out[i],  randomGenerator);  [CE]  cannot  find  symbol  randomGenerator  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  sample(out[i],  randomGenerator);  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i],  randomGenerator);	  out[i]    =    sample(out[i]);    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	8	None	replace
24	[BUG]  [BUGGY]  out[i]  =  sample(out[i],  sampleSize);  [CE]  no  suitable  method  found  for  sample(T,int)  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  sample(out[i],  sampleSize);  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i],  sampleSize);	  out[i]    =    sample(out[i]);    	non-compiled	[CE]  no  suitable  method  found  for  sample(T,int)	8	None	replace
25	[BUG]  [BUGGY]  (T[])out.toArray(new  T[out.size()  -  1]);  [CE]  not  a  statement  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  (T[])out.toArray(new  T[out.size()  -  1]);  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])out.toArray(new  T[out.size()  -  1]);	      (T[])out.toArray(new    T[out.size()    ]);    	non-compiled	[CE]  not  a  statement	1	None	replace
26	[BUG]  [BUGGY]  (T[])singletons.get(i  +  1);  [CE]  not  a  statement  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  (T[])singletons.get(i  +  1);  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i  +  1);	      (T[])singletons.get(i);    	non-compiled	[CE]  not  a  statement	2	None	replace
27	[BUG]  [BUGGY]  out[i]  =  out[singletons.get(i)];  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  out[singletons.get(i)];  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  out[singletons.get(i)];	  out[i]    =    out[singletons.size()    ];    	non-compiled	[CE]  incompatible  types	6	None	replace
28	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  ];  ArrayList  out[i]  =  out[singletons.size()  ];  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  out[singletons.size()  ];  ArrayList  out[i]  =  out[singletons.size()  ];  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]    =    out[singletons.size()    ];    ArrayList  out[i]  =  out[singletons.size()  ];	  	non-compiled	[CE]  ']'  expected	5	None	add
29	[BUG]  [BUGGY]  (T[])singletons.get(i).remove(in,  sampleSize);  [CE]  not  a  statement  [FE]            ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  (T[])singletons.get(i).remove(in,  sampleSize);  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i).remove(in,  sampleSize);	      (T[])singletons.get(i).remove(out);    	non-compiled	[CE]  not  a  statement	3	None	replace
30	[BUG]  [BUGGY]  out[i]  =  sample(out[i],  rng);  [CE]  cannot  find  symbol  rng  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  sample(out[i],  rng);  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i],  rng);	  out[i]    =    sample(out[i]);    	non-compiled	[CE]  cannot  find  symbol  rng	8	None	replace
31	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ].;  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ].;  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ].;	  	non-compiled	[CE]  <identifier>  expected	5	None	add
32	[BUG]  [BUGGY]  out[i]  =  sample(sampleSize);  [CE]  incompatible  types  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  sample(sampleSize);  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(sampleSize);	  out[i]    =    sample(i);    	non-compiled	[CE]  incompatible  types	4	None	replace
33	[BUG]  [BUGGY]  out[i]  =  sample(out,  samples[i].getClass());  [CE]  cannot  find  symbol  samples  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  sample(out,  samples[i].getClass());  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out,  samples[i].getClass());	  out[i]    =    sample(singletons[i].getClass());    	non-compiled	[CE]  cannot  find  symbol  samples	9	None	replace
34	[BUG]  [BUGGY]  out[i]  =  sample(singletons.size()  ]);  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  out[i]  =  sample(singletons.size()  ]);  [BUGGY]    }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(singletons.size()  ]);	  out[i]    =    out[singletons.size()    ];    	non-compiled	[CE]  ')'  expected	6	None	replace
35	[BUG]  [BUGGY]  sample(in,  randomGenerator.nextInt(sampleSize));  [CE]  cannot  find  symbol  in  [FE]            ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {    [BUGGY]  sample(in,  randomGenerator.nextInt(sampleSize));  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	sample(in,  randomGenerator.nextInt(sampleSize));	      sample(i,    randomGenerator.nextInt(sampleSize));    	non-compiled	[CE]  cannot  find  symbol  in	13	None	replace
