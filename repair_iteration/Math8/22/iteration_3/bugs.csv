bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Probabilities  =  MathArrays.standardizeArray(probs,  1.0,  probs.length);  [CE]  cannot  find  symbol  Probabilities  [FE]            ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  Probabilities  =  MathArrays.standardizeArray(probs,  1.0,  probs.length);  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  =  MathArrays.standardizeArray(probs,  1.0,  probs.length);	  Probabilities    =    MathArrays.standardizeArray(probs,    1.0);    	non-compiled	[CE]  cannot  find  symbol  Probabilities	18	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator  <  T>(probs.size());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator  <  T>(probs.size());  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  <  T>  random  =  new  RandomGenerator  <  T>(probs.size());	  RandomGenerator    <    T>    random    =    new    RandomGenerator    <    T>(singletons.size()    -    1);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	5	None	replace
3	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(0),  probs);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(0),  probs);  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(0),  probs);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(i),    probs);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	15	None	replace
4	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size(),  sampling);  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size(),  sampling);  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size(),  sampling);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.size(),    probs);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(tests.size(),  sampling);  [CE]  cannot  find  symbol  tests  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(tests.size(),  sampling);  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(tests.size(),  sampling);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.size(),    probs);    	non-compiled	[CE]  cannot  find  symbol  tests	17	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs,  probs.size());  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs,  probs.size());  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs,  probs.size());	  RandomGenerator    randomGenerator    =    new    RandomGenerator(probs.size());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size()  -  1);  [CE]  cannot  find  symbol  [FE]                  ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size()  -  1);  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size()  -  1);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(probs.size());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  probs.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(s  [CE]  ')'  expected  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  for(int  i  =  0;  i  <  probs.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(s  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	for(int  i  =  0;  i  <  probs.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(s	  for(int    i    =    0;    i    <    samples.size();    i++)    {    Pair    <    T,    Double>    sample    =    samples.get(i);    if(singletons.contains(sample.getKey()))    {    throw    new    NotPositiveException(sample.get    	non-compiled	[CE]  ')'  expected	19	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  probs.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(sample.get  [CE]  ')'  expected  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  for(int  i  =  0;  i  <  probs.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(sample.get  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	for(int  i  =  0;  i  <  probs.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(sample.get	  for(int    i    =    0;    i    <    samples.size();    i++)    {    Pair    <    T,    Double>    sample    =    samples.get(i);    if(singletons.contains(sample.getKey()))    {    throw    new    NotPositiveException(sample.get    	non-compiled	[CE]  ')'  expected	19	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs,  probs.length));  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs,  probs.length));  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs,  probs.length));	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(probs));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	9	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs,  probs));  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs,  probs));  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs,  probs));	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(probs));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	9	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator  <  T>(tests.size());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator  <  T>(tests.size());  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  <  T>  random  =  new  RandomGenerator  <  T>(tests.size());	  RandomGenerator    <    T>    random    =    new    RandomGenerator    <    T>(singletons.size());    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	4	None	replace
13	[BUG]  [BUGGY]  Probabilities  =  MathArrays.normalizeArray(probs,  0,  probs.length);  [CE]  cannot  find  symbol  Probabilities  [FE]            ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  Probabilities  =  MathArrays.normalizeArray(probs,  0,  probs.length);  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  =  MathArrays.normalizeArray(probs,  0,  probs.length);	  Probabilities    =    MathArrays.normalizeArray(probs,    1.0,    probs.length);    	non-compiled	[CE]  cannot  find  symbol  Probabilities	13	None	replace
14	[BUG]  [BUGGY]  Probabilities  =  MathArrays.normalizeArray(probs,  1.0,  probs[i].length);  [CE]  cannot  find  symbol  Probabilities  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  Probabilities  =  MathArrays.normalizeArray(probs,  1.0,  probs[i].length);  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  =  MathArrays.normalizeArray(probs,  1.0,  probs[i].length);	  Probabilities    =    MathArrays.normalizeArray(probs,    1.0,    probs.length);    	non-compiled	[CE]  cannot  find  symbol  Probabilities	13	None	replace
15	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs  =  sample.getProbs(probs[i]);  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  Pair  <  T,  Double>  probs  =  sample.getProbs(probs[i]);  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Pair  <  T,  Double>  probs  =  sample.getProbs(probs[i]);	  Pair    <    T,    Double>    probs    =    sample.getProbs(probs);    	non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	21	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.get(singletons[i]));  [CE]  cannot  find  symbol  i  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.get(singletons[i]));  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.get(singletons[i]));	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(probs[i]));    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
17	[BUG]  [BUGGY]  Probabilities  probabilities  =  Math.rint(probs,  1.0,  probs.length);  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  Probabilities  probabilities  =  Math.rint(probs,  1.0,  probs.length);  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  probabilities  =  Math.rint(probs,  1.0,  probs.length);	  Probabilities    probabilities    =    Math.rint(probs,    1.0);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.getValue());  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.getValue());  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.getValue());	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getValue());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
19	[BUG]  [BUGGY]  Probabilities  probabilities  =  Math.random().normalizeArray(probs,  0,  1.0);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  Probabilities  probabilities  =  Math.random().normalizeArray(probs,  0,  1.0);  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  probabilities  =  Math.random().normalizeArray(probs,  0,  1.0);	  Probabilities    probabilities    =    Math.random().normalizeArray(probs,    1.0);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
20	[BUG]  [BUGGY]  Probabilities  probabilities  =  Math.randomizeArray(probs,  1.0,  probs.length);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  Probabilities  probabilities  =  Math.randomizeArray(probs,  1.0,  probs.length);  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  probabilities  =  Math.randomizeArray(probs,  1.0,  probs.length);	  Probabilities    probabilities    =    Math.randomizeArray(probs,    1.0);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.size(),  probs,  rng);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.size(),  probs,  rng);  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.size(),  probs,  rng);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.size(),    probs);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	17	None	replace
22	[BUG]  [BUGGY]  Probabilities  probabilities  =  Math.random().normalizeArray(probs,  1.0,  sample.doubleValue());  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  Probabilities  probabilities  =  Math.random().normalizeArray(probs,  1.0,  sample.doubleValue());  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  probabilities  =  Math.random().normalizeArray(probs,  1.0,  sample.doubleValue());	  Probabilities    probabilities    =    Math.random().normalizeArray(probs,    1.0);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
23	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs[0]));  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs[0]));  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs[0]));	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(probs[i]));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	10	None	replace
24	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs),  probs);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs),  probs);  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs),  probs);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(probs));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	9	None	replace
25	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey());  [CE]  cannot  find  symbol  sample  [FE]            ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey());  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey());	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getValue());    	non-compiled	[CE]  cannot  find  symbol  sample	2	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(s  [CE]  ')'  expected  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(s  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	for(int  i  =  0;  i  <  samples.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(s	  for(int    i    =    0;    i    <    samples.size();    i++)    {    Pair    <    T,    Double>    sample    =    samples.get(i);    if(singletons.contains(sample.getKey()))    {    throw    new    NotPositiveException(sample.get    	non-compiled	[CE]  ')'  expected	19	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  probs.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException  [CE]  '('  or  '['  expected  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  for(int  i  =  0;  i  <  probs.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	for(int  i  =  0;  i  <  probs.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException	  for(int    i    =    0;    i    <    samples.size();    i++)    {    Pair    <    T,    Double>    sample    =    samples.get(i);    if(singletons.contains(sample.getKey()))    {    throw    new    NotPositiveException(sample.getKey());    }    	non-compiled	[CE]  '('  or  '['  expected	20	None	replace
28	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(rng),  probs);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(rng),  probs);  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(rng),  probs);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(i),    probs);    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	15	None	replace
29	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs  =  sample.getProbs(rng);  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  Pair  <  T,  Double>  probs  =  sample.getProbs(rng);  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Pair  <  T,  Double>  probs  =  sample.getProbs(rng);	  Pair    <    T,    Double>    probs    =    sample.getProbs(probs);    	non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	21	None	replace
30	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(tests.size()  -  1);  [CE]  cannot  find  symbol  tests  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(tests.size()  -  1);  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(tests.size()  -  1);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(tests.size());    	non-compiled	[CE]  cannot  find  symbol  tests	16	None	replace
31	[BUG]  [BUGGY]  Probabilities  =  MathArrays.normalizeArray(probs,  1.0,  sample.length);  [CE]  cannot  find  symbol  Probabilities  [FE]            ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  Probabilities  =  MathArrays.normalizeArray(probs,  1.0,  sample.length);  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  =  MathArrays.normalizeArray(probs,  1.0,  sample.length);	  Probabilities    =    MathArrays.normalizeArray(probs,    1.0,    probs.length);    	non-compiled	[CE]  cannot  find  symbol  Probabilities	13	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  probs.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(  [CE]  illegal  start  of  expression  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  for(int  i  =  0;  i  <  probs.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	for(int  i  =  0;  i  <  probs.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(	  for(int    i    =    0;    i    <    samples.size();    i++)    {    Pair    <    T,    Double>    sample    =    samples.get(i);    if(singletons.contains(sample.getKey()))    {    throw    new    NotPositiveException(sample.get    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
33	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(tests.size(),  probs);  [CE]  cannot  find  symbol  tests  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(tests.size(),  probs);  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(tests.size(),  probs);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.size(),    probs);    	non-compiled	[CE]  cannot  find  symbol  tests	17	None	replace
34	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size(),  samplings);  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size(),  samplings);  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size(),  samplings);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.size(),    probs);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
35	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs[i]),  probs[i]);  [CE]  cannot  find  symbol  i  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs[i]),  probs[i]);  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs[i]),  probs[i]);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(probs[i]));    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
36	[BUG]  [BUGGY]  Probabilities  probabilities  =  random.randomizeArray(probs,  1.0);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  Probabilities  probabilities  =  random.randomizeArray(probs,  1.0);  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  probabilities  =  random.randomizeArray(probs,  1.0);	  Probabilities    probabilities    =    Math.randomizeArray(probs,    1.0);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
37	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size(),  probs.length);  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size(),  probs.length);  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size(),  probs.length);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(probs.size());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
38	[BUG]  [BUGGY]  Probabilities  probabilities  =  Math.random().standardizeArray(probs,  1.0);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  Probabilities  probabilities  =  Math.random().standardizeArray(probs,  1.0);  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  probabilities  =  Math.random().standardizeArray(probs,  1.0);	  Probabilities    probabilities    =    Math.random().normalizeArray(probs,    1.0);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
39	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton.size());  [CE]  cannot  find  symbol  singleton  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton.size());  [BUGGY]      probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton.size());	  RandomGenerator    randomGenerator    =    new    RandomGenerator(tests.size());    	non-compiled	[CE]  cannot  find  symbol  singleton	16	None	replace
40	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs,  rng);  [CE]  cannot  find  symbol  i  [FE]              ArrayStoreException      [CONTEXT]      for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs,  rng);  [BUGGY]      }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs,  rng);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(i),    probs);    	non-compiled	[CE]  cannot  find  symbol  i	15	None	replace
