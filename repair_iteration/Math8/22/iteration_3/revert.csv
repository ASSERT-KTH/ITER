projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101probabilities=MathArrays.normalizeArray(probs,1.0);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilitiesprobabilities=MathArrays.normalizeArray(probs,1.0);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Pair<T,Double>probs=samples.get(i);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Pair<T,Double>probs=sample.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Pair<T,Double>probs=sample.getProbs();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Pair<T,Double>random=sample.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(i));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singleton.getValue());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilities=MathArrays.normalizeArray(probs,1.0);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Pair<T,Double>random=samples.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(sample.getValue());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Pair<T,Double>probs=samples.get(i+1);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGenerator<T>random=newRandomGenerator<T>(singletons.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGenerator<T>random=newRandomGenerator<T>(singletons.size()-1);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Pair<T,Double>probs=sample.getProbability();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.size()-1);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(probs.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(probs));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(probs[i]));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilitiesprobabilities=Math.random().normalizeArray(probs,1.0);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilitiesprobabilities=Math.rint(probs,1.0);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilities=MathArrays.normalizeArray(probs,1.0,probs.length);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilitiesprobabilities=Math.randomizeArray(probs,1.0);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(i),probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(tests.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.size(),probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilities=MathArrays.standardizeArray(probs,1.0);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101for(inti=0;i<samples.size();i++){Pair<T,Double>sample=samples.get(i);if(singletons.contains(sample.getKey())){thrownewNotPositiveException(sample.get
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101for(inti=0;i<samples.size();i++){Pair<T,Double>sample=samples.get(i);if(singletons.contains(sample.getKey())){thrownewNotPositiveException(sample.getKey());}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Pair<T,Double>probs=sample.getProbs(probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilities=MathArrays.standardizeArray(probs,1.0,probs.length);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGenerator<T>random=newRandomGenerator<T>(probs.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(0),probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(probs.size(),sampling);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(tests.size(),sampling);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(probs,probs.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(probs.size()-1);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101for(inti=0;i<probs.size();i++){Pair<T,Double>sample=samples.get(i);if(singletons.contains(sample.getKey())){thrownewNotPositiveException(s
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101for(inti=0;i<probs.size();i++){Pair<T,Double>sample=samples.get(i);if(singletons.contains(sample.getKey())){thrownewNotPositiveException(sample.get
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(probs,probs.length));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(probs,probs));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGenerator<T>random=newRandomGenerator<T>(tests.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilities=MathArrays.normalizeArray(probs,0,probs.length);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilities=MathArrays.normalizeArray(probs,1.0,probs[i].length);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Pair<T,Double>probs=sample.getProbs(probs[i]);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(probs.get(singletons[i]));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilitiesprobabilities=Math.rint(probs,1.0,probs.length);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.getValue());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilitiesprobabilities=Math.random().normalizeArray(probs,0,1.0);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilitiesprobabilities=Math.randomizeArray(probs,1.0,probs.length);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.size(),probs,rng);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilitiesprobabilities=Math.random().normalizeArray(probs,1.0,sample.doubleValue());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(probs[0]));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(probs),probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(sample.getKey());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101for(inti=0;i<samples.size();i++){Pair<T,Double>sample=samples.get(i);if(singletons.contains(sample.getKey())){thrownewNotPositiveException(s
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101for(inti=0;i<probs.size();i++){Pair<T,Double>sample=samples.get(i);if(singletons.contains(sample.getKey())){thrownewNotPositiveException
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(rng),probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Pair<T,Double>probs=sample.getProbs(rng);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(tests.size()-1);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilities=MathArrays.normalizeArray(probs,1.0,sample.length);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101for(inti=0;i<probs.size();i++){Pair<T,Double>sample=samples.get(i);if(singletons.contains(sample.getKey())){thrownewNotPositiveException(
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(tests.size(),probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(probs.size(),samplings);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(probs[i]),probs[i]);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilitiesprobabilities=random.randomizeArray(probs,1.0);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(probs.size(),probs.length);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101Probabilitiesprobabilities=Math.random().standardizeArray(probs,1.0);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singleton.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java101RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(i),probs,rng);
