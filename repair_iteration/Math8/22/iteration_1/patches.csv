bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Pair  <  T,  Double>  random  =  samples.getValue();  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  Pair  <  T,  Double>  random  =  samples.getValue();  [BUGGY]    probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Pair  <  T,  Double>  random  =  samples.getValue();	      Pair    <    T,    Double>    random    =    sample.getValue();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue());  [CE]  cannot  find  symbol  sample  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue());  [BUGGY]    probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue());	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singleton.getValue());    	non-compiled	[CE]  cannot  find  symbol  sample	8	None	replace
3	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs  =  samples.get(i  +  1);  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  Pair  <  T,  Double>  probs  =  samples.get(i  +  1);  [BUGGY]    probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Pair  <  T,  Double>  probs  =  samples.get(i  +  1);	      Pair    <    T,    Double>    probs    =    samples.get(i);    	non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	3	None	replace
4	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator  <  T>(singletons.size());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator  <  T>(singletons.size());  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  <  T>  random  =  new  RandomGenerator  <  T>(singletons.size());	      	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	2	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator  <  T>(singletons.size()  -  1);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator  <  T>(singletons.size()  -  1);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  <  T>  random  =  new  RandomGenerator  <  T>(singletons.size()  -  1);	      	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	2	None	replace
6	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs  =  sample.getProbability();  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  Pair  <  T,  Double>  probs  =  sample.getProbability();  [BUGGY]    probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Pair  <  T,  Double>  probs  =  sample.getProbability();	      Pair    <    T,    Double>    probs    =    sample.getValue();    	non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	4	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.size()  -  1);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.size()  -  1);  [BUGGY]    probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.size()  -  1);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.size());    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	9	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size());  [CE]  cannot  find  symbol  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size());  [BUGGY]    probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs.size());	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.size());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs));  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs));  [BUGGY]    probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs));	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(i));    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	7	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs[i]));  [CE]  cannot  find  symbol  i  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs[i]));  [BUGGY]    probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(probs[i]));	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.get(i));    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
11	[BUG]  [BUGGY]  Probabilities  probabilities  =  Math.random().normalizeArray(probs,  1.0);  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  Probabilities  probabilities  =  Math.random().normalizeArray(probs,  1.0);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  probabilities  =  Math.random().normalizeArray(probs,  1.0);	  Probabilities    probabilities    =    MathArrays.normalizeArray(probs,    1.0);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
12	[BUG]  [BUGGY]  Probabilities  probabilities  =  Math.rint(probs,  1.0);  [CE]  cannot  find  symbol  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  Probabilities  probabilities  =  Math.rint(probs,  1.0);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  probabilities  =  Math.rint(probs,  1.0);	  Probabilities    probabilities    =    MathArrays.normalizeArray(probs,    1.0);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
13	[BUG]  [BUGGY]  Probabilities  =  MathArrays.normalizeArray(probs,  1.0,  probs.length);  [CE]  cannot  find  symbol  Probabilities  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  Probabilities  =  MathArrays.normalizeArray(probs,  1.0,  probs.length);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  =  MathArrays.normalizeArray(probs,  1.0,  probs.length);	  Probabilities    =    MathArrays.normalizeArray(probs,    1.0);    	non-compiled	[CE]  cannot  find  symbol  Probabilities	10	None	replace
14	[BUG]  [BUGGY]  Probabilities  probabilities  =  Math.randomizeArray(probs,  1.0);  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  Probabilities  probabilities  =  Math.randomizeArray(probs,  1.0);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  probabilities  =  Math.randomizeArray(probs,  1.0);	  Probabilities    probabilities    =    MathArrays.normalizeArray(probs,    1.0);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs);  [CE]  cannot  find  symbol  i  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i),  probs);	      	non-compiled	[CE]  cannot  find  symbol  i	2	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(tests.size());  [CE]  cannot  find  symbol  tests  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(tests.size());  [BUGGY]    probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(tests.size());	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.size());    	non-compiled	[CE]  cannot  find  symbol  tests	9	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.size(),  probs);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.size(),  probs);  [BUGGY]    probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.size(),  probs);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons.size());    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	9	None	replace
18	[BUG]  [BUGGY]  Probabilities  =  MathArrays.standardizeArray(probs,  1.0);  [CE]  cannot  find  symbol  Probabilities  [FE]        ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  Probabilities  =  MathArrays.standardizeArray(probs,  1.0);  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  =  MathArrays.standardizeArray(probs,  1.0);	  Probabilities    =    MathArrays.normalizeArray(probs,    1.0);    	non-compiled	[CE]  cannot  find  symbol  Probabilities	10	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(sample.get  [CE]  ')'  expected  [FE]          ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(sample.get  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	for(int  i  =  0;  i  <  samples.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(sample.get	      	non-compiled	[CE]  ')'  expected	2	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(sample.getKey());  }  [CE]  illegal  start  of  expression  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(sample.getKey());  }  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	for(int  i  =  0;  i  <  samples.size();  i++)  {  Pair  <  T,  Double>  sample  =  samples.get(i);  if(singletons.contains(sample.getKey()))  {  throw  new  NotPositiveException(sample.getKey());  }	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
21	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs  =  sample.getProbs(probs);  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]            ArrayStoreException    [CONTEXT]    for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }    [BUGGY]  Pair  <  T,  Double>  probs  =  sample.getProbs(probs);  [BUGGY]    probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Pair  <  T,  Double>  probs  =  sample.getProbs(probs);	      Pair    <    T,    Double>    probs    =    sample.getProbs();    	non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	5	None	replace
