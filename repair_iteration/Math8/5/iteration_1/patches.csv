bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  out.length;  i++)  {  for(int  i  =  0;  i  <  out.length;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  for(int  i  =  0;  i  <  out.length;  i++)  {  for(int  i  =  0;  i  <  out.length;  i++)  {  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	for(int    i    =    0;    i    <    out.length;    i++)    {    for(int  i  =  0;  i  <  out.length;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  out.length;  i++)  {  int  i  =  0;  i  <  out.length;  i++)  {  [CE]  >  expected  [FE]      ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  for(int  i  =  0;  i  <  out.length;  i++)  {  int  i  =  0;  i  <  out.length;  i++)  {  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	for(int    i    =    0;    i    <    out.length;    i++)    {    int  i  =  0;  i  <  out.length;  i++)  {	  	non-compiled	[CE]  >  expected	4	None	add
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  out.length;  i++)  {  For(int  i  =  0;  i  <  out.length;  i++)  {  [CE]  '.class'  expected  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  for(int  i  =  0;  i  <  out.length;  i++)  {  For(int  i  =  0;  i  <  out.length;  i++)  {  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	for(int    i    =    0;    i    <    out.length;    i++)    {    For(int  i  =  0;  i  <  out.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	4	None	add
4	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(out);  [CE]  illegal  start  of  type  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(out);  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(out);	      RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(singletons,  sampleSize.get(0));  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(singletons,  sampleSize.get(0));  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(singletons,  sampleSize.get(0));	      RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(singletons.get(0));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(singletons,  samples.get(0));  [CE]  illegal  start  of  type  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(singletons,  samples.get(0));  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(singletons,  samples.get(0));	      RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(singletons.get(0));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  randoms.getValueGenerator();  [CE]  illegal  start  of  type  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  RandomGenerator  randomGenerator  =  randoms.getValueGenerator();  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	RandomGenerator  randomGenerator  =  randoms.getValueGenerator();	      RandomGenerator    randomGenerator    =    random.getValueGenerator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(out,  sampleSize);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(out,  sampleSize);  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(out,  sampleSize);	      RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(sampleSize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize);  [CE]  illegal  start  of  type  [FE]              ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize);  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize);	      RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(sampleSize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  randomGenerator.getInstance();  sampleSize  =  randomGenerator.computeSample(out,  sampleSize);  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  RandomGenerator  randomGenerator  =  randomGenerator.getInstance();  sampleSize  =  randomGenerator.computeSample(out,  sampleSize);  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	RandomGenerator  randomGenerator  =  randomGenerator.getInstance();  sampleSize  =  randomGenerator.computeSample(out,  sampleSize);	      RandomGenerator    randomGenerator    =    RandomGenerator.getInstance();    sampleSize    =    randomGenerator.computeSample(out,    randomGenerator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  randomGenerator.getInstance();  sampleSize  =  randomGenerator.computeSample(out,  randomGenerator);  [CE]  illegal  start  of  type  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  RandomGenerator  randomGenerator  =  randomGenerator.getInstance();  sampleSize  =  randomGenerator.computeSample(out,  randomGenerator);  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	RandomGenerator  randomGenerator  =  randomGenerator.getInstance();  sampleSize  =  randomGenerator.computeSample(out,  randomGenerator);	      RandomGenerator    randomGenerator    =    RandomGenerator.getInstance();    sampleSize    =    randomGenerator.computeSample(out,    randomGenerator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  out.length;  i++)  {  (int  i  =  0;  i  <  out.length;  i++)  {  [CE]  ')'  expected  [FE]    ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  for(int  i  =  0;  i  <  out.length;  i++)  {  (int  i  =  0;  i  <  out.length;  i++)  {  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	for(int    i    =    0;    i    <    out.length;    i++)    {    (int  i  =  0;  i  <  out.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	4	None	add
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.length;  i++)  {  [CE]  cannot  find  symbol  samples  [FE]    ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  for(int  i  =  0;  i  <  samples.length;  i++)  {  [BUGGY]    out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	for(int  i  =  0;  i  <  samples.length;  i++)  {	  for(int    i    =    0;    i    <    out.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  samples	5	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(singletons);  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(singletons);  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(singletons);	      RandomGenerator    randomGenerator    =    RandomGenerator.getInstance();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(out);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(out);  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(out);	      RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(sampleSize);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generateValueGenerator();  [CE]  illegal  start  of  type  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  RandomGenerator  randomGenerator  =  random.generateValueGenerator();  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	RandomGenerator  randomGenerator  =  random.generateValueGenerator();	      RandomGenerator    randomGenerator    =    random.getValueGenerator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(singletons);  [CE]  illegal  start  of  type  [FE]          ArrayStoreException    [CONTEXT]    public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(singletons);  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(singletons);	      RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
