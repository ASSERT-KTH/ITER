bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
25	[BUG] [BUGGY] throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) [BUGGY] throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { [BUGGY] random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	
26	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) [BUGGY] [BUGGY] throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	add	
