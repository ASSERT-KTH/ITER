bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  super(rng,  samples,  probabilities);  [CE]  ';'  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  super(rng,  samples,  probabilities);  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  samples,  probabilities);	      super(rng,    samples);    	non-compiled	[CE]  ';'  expected	8	None	replace
2	[BUG]  [BUGGY]  super(rng,  samples,  random);  [CE]  ';'  expected  [FE]              ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  super(rng,  samples,  random);  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  samples,  random);	      super(rng,    samples);    	non-compiled	[CE]  ';'  expected	8	None	replace
3	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator();  [CE]  ';'  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator();  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator();	      	non-compiled	[CE]  ';'  expected	2	None	replace
4	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getValue();  [CE]  ';'  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  RandomGenerator  <  T>  random  =  rng.getValue();  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  <  T>  random  =  rng.getValue();	      	non-compiled	[CE]  ';'  expected	2	None	replace
5	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(samples.size()  +  1));  [CE]  ';'  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this(rng,  new  Pair  <  T,  Double>(samples.size()  +  1));  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(samples.size()  +  1));	      this(rng,    new    Pair    <    T,    Double>(samples.size()));    	non-compiled	[CE]  ';'  expected	3	None	replace
6	[BUG]  [BUGGY]  this(rng,  null,  null,  samples);  [CE]  ';'  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this(rng,  null,  null,  samples);  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  samples);	      this(rng,    null,    null);    	non-compiled	[CE]  ';'  expected	6	None	replace
7	[BUG]  [BUGGY]  this(rng,  null,  null,  random);  [CE]  ';'  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this(rng,  null,  null,  random);  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  random);	      this(rng,    null,    null);    	non-compiled	[CE]  ';'  expected	6	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getKey());  [CE]  ';'  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getKey());  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getKey());	      RandomGenerator    randomGenerator    =    new    RandomGenerator(rng.getValue());    	non-compiled	[CE]  ';'  expected	12	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getValue(),  samples);  [CE]  ';'  expected  [FE]              ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getValue(),  samples);  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getValue(),  samples);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(rng.getValue());    	non-compiled	[CE]  ';'  expected	12	None	replace
10	[BUG]  [BUGGY]  this.random  =  rng.nextDouble();  [CE]  ';'  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this.random  =  rng.nextDouble();  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.random  =  rng.nextDouble();	  this.random    =    rng;    	non-compiled	[CE]  ';'  expected	13	None	replace
11	[BUG]  [BUGGY]  super(rng,  sample);  [CE]  ';'  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  super(rng,  sample);  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  sample);	      super(rng);    	non-compiled	[CE]  ';'  expected	7	None	replace
12	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(samples));  [CE]  ';'  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this(rng,  new  Pair  <  T,  Double>(samples));  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(samples));	      this(rng,    new    Pair    <    T,    Double>(probs));    	non-compiled	[CE]  ';'  expected	5	None	replace
13	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs,  random));  [CE]  ';'  expected  [FE]              ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs,  random));  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(probs,  random));	      this(rng,    new    Pair    <    T,    Double>(probs));    	non-compiled	[CE]  ';'  expected	5	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateRandomGenerator();  [CE]  ';'  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateRandomGenerator();  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  randomGenerator  =  rng.generateRandomGenerator();	      RandomGenerator    randomGenerator    =    rng.getRandomGenerator();    	non-compiled	[CE]  ';'  expected	11	None	replace
15	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DESCreteDistributionException  {  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DESCreteDistributionException  {  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DESCreteDistributionException  {	  throws    NotPositiveException,    MathArithmeticException,    DiscreteDistributionException    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
16	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  NullPointerException;  [CE]  <identifier>  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  NullPointerException;  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  NullPointerException;	  throws    NotPositiveException,    MathArithmeticException,    MathIllegalArgumentException;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
17	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException;  [CE]  <identifier>  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException;  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException;	  throws    NotPositiveException,    MathArithmeticException,    MathIllegalArgumentException;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  this.probability  =  rng.getProbability();  [CE]  ';'  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this.probability  =  rng.getProbability();  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.probability  =  rng.getProbability();	  throws    NotPositiveException,    MathArithmeticException,    MathIllegalArgumentException;    	non-compiled	[CE]  ';'  expected	9	None	replace
19	[BUG]  [BUGGY]  this.prototypes  =  new  ArrayList  <  Pair  <  T>();  [CE]  ';'  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this.prototypes  =  new  ArrayList  <  Pair  <  T>();  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.prototypes  =  new  ArrayList  <  Pair  <  T>();	  throws    NotPositiveException,    MathArithmeticException,    MathIllegalArgumentException;    	non-compiled	[CE]  ';'  expected	9	None	replace
20	[BUG]  [BUGGY]  this.random  =  RandomGenerator.getRandomGenerator(rng);  [CE]  ';'  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this.random  =  RandomGenerator.getRandomGenerator(rng);  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.random  =  RandomGenerator.getRandomGenerator(rng);	  this.random    =    rng;    	non-compiled	[CE]  ';'  expected	13	None	replace
21	[BUG]  [BUGGY]  super(rng,  samples,  null);  [CE]  ';'  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  super(rng,  samples,  null);  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  samples,  null);	      super(rng,    samples);    	non-compiled	[CE]  ';'  expected	8	None	replace
22	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(tests.size()));  [CE]  ';'  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this(rng,  new  Pair  <  T,  Double>(tests.size()));  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(tests.size()));	      this(rng,    new    Pair    <    T,    Double>(samples.size()    -    1));    	non-compiled	[CE]  ';'  expected	4	None	replace
23	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs),  random);  [CE]  ';'  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs),  random);  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(probs),  random);	      this(rng,    new    Pair    <    T,    Double>(probs));    	non-compiled	[CE]  ';'  expected	5	None	replace
24	[BUG]  [BUGGY]  this(rng,  null,  null,  null);  [CE]  ';'  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this(rng,  null,  null,  null);  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  null);	      	non-compiled	[CE]  ';'  expected	2	None	replace
25	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  rng.getValueGenerator();  [CE]  ';'  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  RandomGenerator  randomGenerator  =  rng.getValueGenerator();  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  randomGenerator  =  rng.getValueGenerator();	      RandomGenerator    randomGenerator    =    rng.getRandomGenerator();    	non-compiled	[CE]  ';'  expected	11	None	replace
26	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  randomGenerator  {  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  randomGenerator  {  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  randomGenerator  {	  throws    NotPositiveException,    MathArithmeticException,    DiscreteDistributionException    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
27	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  RandomGeneratorException  {  [CE]  cannot  find  symbol  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  RandomGeneratorException  {  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  RandomGeneratorException  {	  throws    NotPositiveException,    MathArithmeticException,    DiscreteDistributionException    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
28	[BUG]  [BUGGY]  this(rng,  null,  null,  sample);  [CE]  ';'  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this(rng,  null,  null,  sample);  [BUGGY]    throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  sample);	      this(rng,    null,    null);    	non-compiled	[CE]  ';'  expected	6	None	replace
29	[BUG]  [BUGGY]  this.random  =  new  Double(rng.getValue());  [CE]  ';'  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this.random  =  new  Double(rng.getValue());  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.random  =  new  Double(rng.getValue());	  this.random    =    rng;    	non-compiled	[CE]  ';'  expected	13	None	replace
30	[BUG]  [BUGGY]  this.samples  =  new  ArrayList  <  Pair  <  T,  Double  >>  samples;  [CE]  ';'  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)    [BUGGY]  this.samples  =  new  ArrayList  <  Pair  <  T,  Double  >>  samples;  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.samples  =  new  ArrayList  <  Pair  <  T,  Double  >>  samples;	  throws    NotPositiveException,    MathArithmeticException,    MathIllegalArgumentException;    	non-compiled	[CE]  ';'  expected	9	None	replace
