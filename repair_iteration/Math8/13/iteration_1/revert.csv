projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86throwsNotPositiveException,MathArithmeticException,MathIllegalArgumentException{
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86throwsNotPositiveException,MathArithmeticException,DiscreteDistributionException{
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,newPair<T,Double>(samples.size()));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,newPair<T,Double>(samples.size()-1));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,newPair<T,Double>(probs));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,null,null);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86super(rng);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86super(rng,samples);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86throwsNotPositiveException,MathArithmeticException,MathIllegalArgumentException;
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86RandomGeneratorrandomGenerator=rng.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86RandomGeneratorrandomGenerator=rng.getRandomGenerator();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86RandomGeneratorrandomGenerator=newRandomGenerator(rng.getValue());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this.random=rng;
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86super(rng,samples,probabilities);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86super(rng,samples,random);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86RandomGenerator<T>random=rng.getRandomGenerator();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86RandomGenerator<T>random=rng.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,newPair<T,Double>(samples.size()+1));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,null,null,samples);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,null,null,random);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86RandomGeneratorrandomGenerator=newRandomGenerator(rng.getKey());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86RandomGeneratorrandomGenerator=newRandomGenerator(rng.getValue(),samples);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this.random=rng.nextDouble();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86super(rng,sample);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,newPair<T,Double>(samples));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,newPair<T,Double>(probs,random));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86RandomGeneratorrandomGenerator=rng.generateRandomGenerator();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86throwsNotPositiveException,MathArithmeticException,DESCreteDistributionException{
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86throwsNotPositiveException,MathArithmeticException,NullPointerException;
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86throwsNotPositiveException,MathArithmeticException,DiscreteDistributionException;
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this.probability=rng.getProbability();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this.prototypes=newArrayList<Pair<T>();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this.random=RandomGenerator.getRandomGenerator(rng);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86super(rng,samples,null);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,newPair<T,Double>(tests.size()));
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,newPair<T,Double>(probs),random);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,null,null,null);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86RandomGeneratorrandomGenerator=rng.getValueGenerator();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86throwsNotPositiveException,MathArithmeticException,DiscreteDistributionException,randomGenerator{
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86throwsNotPositiveException,MathArithmeticException,DiscreteDistributionException,RandomGeneratorException{
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this(rng,null,null,sample);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this.random=newDouble(rng.getValue());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java86this.samples=newArrayList<Pair<T,Double>>samples;
