bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  sample  =(Pair)samples.get(i  +  1);  [CE]  incompatible  types  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  sample  =(Pair)samples.get(i  +  1);  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  sample  =(Pair)samples.get(i  +  1);	  RandomGenerator    sample    =(Pair)samples.get(i);    	non-compiled	[CE]  incompatible  types	19	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator(rng,  probs.nextDouble());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator(rng,  probs.nextDouble());  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  <  T>  random  =  new  RandomGenerator(rng,  probs.nextDouble());	  RandomGenerator    <    T>    random    =    new    RandomGenerator(rng,    random.nextDouble());    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	9	None	replace
3	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator(rng,  sample.nextDouble());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator(rng,  sample.nextDouble());  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  <  T>  random  =  new  RandomGenerator(rng,  sample.nextDouble());	  RandomGenerator    <    T>    random    =    new    RandomGenerator(rng,    random.nextDouble());    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	9	None	replace
4	[BUG]  [BUGGY]  Double  <  T,  Double>  sample  =  samples.get(i);  [CE]  type  Double  does  not  take  parameters  [FE]        ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  Double  <  T,  Double>  sample  =  samples.get(i);  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	Double  <  T,  Double>  sample  =  samples.get(i);	  Pair    <    T,    Double>    sample    =    samples.get(i);    Double    <    T,    Double>    sample    =    samples.get(i);    	non-compiled	[CE]  type  Double  does  not  take  parameters	24	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator(rng,  rng.nextDouble());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  <  T>  random  =  new  RandomGenerator(rng,  rng.nextDouble());  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  <  T>  random  =  new  RandomGenerator(rng,  rng.nextDouble());	  RandomGenerator    <    T>    random    =    new    RandomGenerator(random,    rng.nextDouble());    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	10	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(random,  rng.getRandomGenerator());  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(random,  rng.getRandomGenerator());  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(random,  rng.getRandomGenerator());	  RandomGenerator    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs,  probs[i]);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs,  probs[i]);  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs,  probs[i]);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(probs,    samples[i]);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	4	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(samples,  probs[i]);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(samples,  probs[i]);  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(samples,  probs[i]);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(probs,    samples[i]);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	4	None	replace
9	[BUG]  [BUGGY]  [FE]  MathArithmeticException  [FE]          ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(0);  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	add	Pair  <  T,  Double>  sample  =  samples.get(0);	  Pair    <    T,    Double>    sample    =    samples.get(i);    Pair    <    T,    Double>    sample    =    samples.get(0);    	compilable	  [FE]  MathArithmeticException  	14	9	replace
10	[BUG]  [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(0);  [FE]  MathArithmeticException  [FE]          ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(0);  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	Pair  <  T,  Double>  sample  =  samples.get(0);	  Pair    <    T,    Double>    sample    =    samples.get(i);    Pair    <    T,    Double>    sample    =    samples.get(0);    	compilable	  [FE]  MathArithmeticException  	14	9	replace
11	[BUG]  [BUGGY]  RandomGenerator  sample  =  samples[i].getValue(rng);  [CE]  array  required,  but  List<Pair<T,Double>>  found  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  sample  =  samples[i].getValue(rng);  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  sample  =  samples[i].getValue(rng);	  RandomGenerator    sample    =    rng.getValue(i);    	non-compiled	[CE]  array  required,  but  List<Pair<T,Double>>  found	26	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(i,  probs);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(i,  probs);  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(i,  probs);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator(i);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	15	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  samples.getRandomGenerator(i);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  <  T>  random  =  samples.getRandomGenerator(i);  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  <  T>  random  =  samples.getRandomGenerator(i);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator(i);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	15	None	replace
14	[BUG]  [BUGGY]  Pair  <  T,  Double>  samples  =  samples.get(i);  [CE]  variable  samples  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  Pair  <  T,  Double>  samples  =  samples.get(i);  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	Pair  <  T,  Double>  samples  =  samples.get(i);	  Pair    <    T,    Double>    sample    =    samples.get(i);    Pair    <    T,    Double>    samples    =    samples.get(i);    	non-compiled	[CE]  variable  samples  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	18	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  samples.getValue(i);  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  samples.getValue(i);  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  randomGenerator  =  samples.getValue(i);	  RandomGenerator    randomGenerator    =    rng.getValue(i);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
16	[BUG]  [BUGGY]  probs[i]  =  randomGenerator.nextDouble();  [CE]  cannot  find  symbol  randomGenerator  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  probs[i]  =  randomGenerator.nextDouble();  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	probs[i]  =  randomGenerator.nextDouble();	  RandomGenerator    randomGenerator    =    probs[i].getRandomGenerator();    probs[i]    =    randomGenerator.nextDouble();    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	2	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs[i],  probs[i]);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs[i],  probs[i]);  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs[i],  probs[i]);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(probs[i]);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	3	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs[i],  rng);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs[i],  rng);  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs[i],  rng);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(probs[i]);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	3	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  sample  =  random.getRandomGenerator();  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  sample  =  random.getRandomGenerator();  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  sample  =  random.getRandomGenerator();	  RandomGenerator    sample    =    rng.getRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
20	[BUG]  [BUGGY]  RandomGenerator  sample  =(Pair)selectedSingleTutes.get(i);  [CE]  cannot  find  symbol  selectedSingleTutes  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  sample  =(Pair)selectedSingleTutes.get(i);  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  sample  =(Pair)selectedSingleTutes.get(i);	  RandomGenerator    sample    =(Pair)singleTutes.get(i);    	non-compiled	[CE]  cannot  find  symbol  selectedSingleTutes	17	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  sample  =  samples[i].getSymbolGenerator();  [CE]  array  required,  but  List<Pair<T,Double>>  found  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  sample  =  samples[i].getSymbolGenerator();  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  sample  =  samples[i].getSymbolGenerator();	  RandomGenerator    sample    =    rng.getSymbolGenerator();    	non-compiled	[CE]  array  required,  but  List<Pair<T,Double>>  found	20	None	replace
22	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generateRandomGenerator();  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.generateRandomGenerator();  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  randomGenerator  =  random.generateRandomGenerator();	  RandomGenerator    randomGenerator    =    rng.generateRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
23	[BUG]  [BUGGY]  RandomGenerator  sample  =  random.getSymbolGenerator();  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  sample  =  random.getSymbolGenerator();  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  sample  =  random.getSymbolGenerator();	  RandomGenerator    sample    =    rng.getSymbolGenerator();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
24	[BUG]  [BUGGY]  RandomGenerator  sample  =  rng.getValue(i,  probs);  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  sample  =  rng.getValue(i,  probs);  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  sample  =  rng.getValue(i,  probs);	  RandomGenerator    sample    =    rng.getValue(i);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
25	[BUG]  [BUGGY]  RandomGenerator  sample  =  samples.getValue(i);  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  sample  =  samples.getValue(i);  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  sample  =  samples.getValue(i);	  RandomGenerator    sample    =    rng.getValue(i);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
26	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(probs[i]);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(probs[i]);  [BUGGY]      final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(probs[i]);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator(i);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	15	None	replace
27	[BUG]  [BUGGY]  RandomGenerator  sample  =  rng.getSymbolGenerator(i);  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {      [BUGGY]  RandomGenerator  sample  =  rng.getSymbolGenerator(i);  [BUGGY]      singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	RandomGenerator  sample  =  rng.getSymbolGenerator(i);	  RandomGenerator    sample    =    rng.getSymbolGenerator();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
