bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [BUGGY]  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	add	singletons  =  new  ArrayList  <  T>(samples.size()  -  1);	singletons  =  new  ArrayList<T>(samples.size());  	compilable	  [FE]  ArrayStoreException  	29	1	replace
2	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [FE]  ArrayStoreException  [FE]    ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [BUGGY]  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons  =  new  ArrayList  <  T>(samples.size()  -  1);	singletons  =  new  ArrayList<T>(samples.size());  	compilable	  [FE]  ArrayStoreException  	29	1	replace
3	[BUG]  [BUGGY]  singletons  =  new  LinkedList  <  T>(samples.size());  [CE]  cannot  find  symbol  [FE]      ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  [BUGGY]  singletons  =  new  LinkedList  <  T>(samples.size());  [BUGGY]  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons  =  new  LinkedList  <  T>(samples.size());	singletons  =  new  ArrayList<T>(samples.size());  	non-compiled	[CE]  cannot  find  symbol	29	None	replace
4	[BUG]  [BUGGY]    [CE]  variable  singletons  might  not  have  been  initialized  [FE]        ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  [BUGGY]    [BUGGY]  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	  	singletons  =  new  ArrayList<T>(samples.size());  	non-compiled	[CE]  variable  singletons  might  not  have  been  initialized	29	None	replace
5	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  rng.getRandomGenerator();  [CE]  cannot  find  symbol  [FE]    ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  [BUGGY]    RandomGenerator  randomGenerator  =  rng.getRandomGenerator();  [BUGGY]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	    RandomGenerator  randomGenerator  =  rng.getRandomGenerator();		non-compiled	[CE]  cannot  find  symbol	30	None	add
6	[BUG]  [BUGGY]    RandomGenerator  <  T>  random  =  rng.getRandomGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]      ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  [BUGGY]    RandomGenerator  <  T>  random  =  rng.getRandomGenerator();  [BUGGY]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	    RandomGenerator  <  T>  random  =  rng.getRandomGenerator();		non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	30	None	add
7	[BUG]  [BUGGY]    RandomGenerator  <  Pair  <  T,  Double>  random  =  rng.getRandom();  [CE]  >  expected  [FE]        ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  [BUGGY]    RandomGenerator  <  Pair  <  T,  Double>  random  =  rng.getRandom();  [BUGGY]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	    RandomGenerator  <  Pair  <  T,  Double>  random  =  rng.getRandom();		non-compiled	[CE]  >  expected	30	None	add
8	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  rng.getValue();  [CE]  cannot  find  symbol  [FE]    ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  [BUGGY]    RandomGenerator  randomGenerator  =  rng.getValue();  [BUGGY]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	    RandomGenerator  randomGenerator  =  rng.getValue();		non-compiled	[CE]  cannot  find  symbol	30	None	add
9	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(random);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]      ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(random);  [BUGGY]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	    RandomGenerator  randomGenerator  =  new  RandomGenerator(random);		non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	30	None	add
10	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  [BUGGY]  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	add	singletons  =  new  ArrayList  <  T>(samples.size()  +  1);	singletons  =  new  ArrayList<T>(samples.size());  	compilable	  [FE]  ArrayStoreException  	29	1	replace
11	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  [FE]  ArrayStoreException  [FE]    ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  [BUGGY]  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons  =  new  ArrayList  <  T>(samples.size()  +  1);	singletons  =  new  ArrayList<T>(samples.size());  	compilable	  [FE]  ArrayStoreException  	29	1	replace
