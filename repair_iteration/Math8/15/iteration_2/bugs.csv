bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null);  [BUGGY]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null);	      RandomGenerator    <    T>    random    =    rng.getRandomGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	6	None	replace
2	[BUG]  [BUGGY]  Single  singletons  =  new  ArrayList  <  T>(samples.size());  [CE]  cannot  find  symbol  [FE]    ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  Single  singletons  =  new  ArrayList  <  T>(samples.size());  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	Single  singletons  =  new  ArrayList  <  T>(samples.size());	  singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
3	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  rng,  random.getRandomGenerator();  [CE]  ';'  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  RandomGenerator  randomGenerator  =  rng,  random.getRandomGenerator();  [BUGGY]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  randomGenerator  =  rng,  random.getRandomGenerator();	      RandomGenerator    randomGenerator    =    rng.getRandomGenerator();    	non-compiled	[CE]  ';'  expected	5	None	replace
4	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [CE]  variable  singletons  might  already  have  been  assigned  [FE]    ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    singletons  =  new  ArrayList  <  T>(samples.size()  -  1);	  	non-compiled	[CE]  variable  singletons  might  already  have  been  assigned	1	None	add
5	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  RandomGenerator  <  T>  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]      ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  RandomGenerator  <  T>  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    RandomGenerator  <  T>  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);	  	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	1	None	add
6	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  RandomGenerator  <  T>  random  =  random.next();  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  RandomGenerator  <  T>  random  =  random.next();  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    RandomGenerator  <  T>  random  =  random.next();  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);	  	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	1	None	add
7	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getValue();  [CE]  >  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getValue();  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getValue();	      	non-compiled	[CE]  >  expected	4	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  random  =  rng.getValue();  [CE]  >  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  random  =  rng.getValue();  [BUGGY]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  Pair  <  T,  Double>  random  =  rng.getValue();	      RandomGenerator    <    Pair    <    T,    Double>    random    =    rng.getRandom();    	non-compiled	[CE]  >  expected	7	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng);  [BUGGY]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(random);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	9	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(random,  rng);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(random,  rng);  [BUGGY]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(random,  rng);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(random);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	9	None	replace
11	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  [CE]  variable  singletons  might  already  have  been  assigned  [FE]    ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    singletons  =  new  ArrayList  <  T>(samples.size()  +  1);	  	non-compiled	[CE]  variable  singletons  might  already  have  been  assigned	10	None	add
12	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  RandomGenerator  <  T>  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]      ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  RandomGenerator  <  T>  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    RandomGenerator  <  T>  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);	  	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	10	None	add
13	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  RandomGenerator  <  T>  random  =  random.next();  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  RandomGenerator  <  T>  random  =  random.next();  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    RandomGenerator  <  T>  random  =  random.next();  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);	  	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	10	None	add
14	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  Singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  [CE]  cannot  find  symbol  Singletons  [FE]    ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  Singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    Singletons  =  new  ArrayList  <  T>(samples.size()  +  1);	  	non-compiled	[CE]  cannot  find  symbol  Singletons	10	None	add
15	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  RandomGenerator  random  =  rng.getRandom();  [CE]  cannot  find  symbol  [FE]      ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  +  1);  RandomGenerator  random  =  rng.getRandom();  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    RandomGenerator  random  =  rng.getRandom();	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
16	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  Singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [CE]  cannot  find  symbol  Singletons  [FE]    ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  Singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    Singletons  =  new  ArrayList  <  T>(samples.size()  -  1);	  	non-compiled	[CE]  cannot  find  symbol  Singletons	1	None	add
17	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  RandomGenerator  randomGenerator  =  rng.getValue();  [CE]  cannot  find  symbol  [FE]      ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  RandomGenerator  randomGenerator  =  rng.getValue();  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    RandomGenerator  randomGenerator  =  rng.getValue();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
18	[BUG]  [BUGGY]  Singletons  singletons  =  new  ArrayList  <  T>(samples.size());  [CE]  cannot  find  symbol  [FE]    ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  Singletons  singletons  =  new  ArrayList  <  T>(samples.size());  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	Singletons  singletons  =  new  ArrayList  <  T>(samples.size());	  singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.getRandomGenerator();  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  RandomGenerator  randomGenerator  =  random.getRandomGenerator();  [BUGGY]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  randomGenerator  =  random.getRandomGenerator();	      RandomGenerator    randomGenerator    =    rng.getRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
20	[BUG]  [BUGGY]  Single  <  T>  singletons  =  new  ArrayList  <  T>(samples.size());  [CE]  cannot  find  symbol  [FE]    ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  Single  <  T>  singletons  =  new  ArrayList  <  T>(samples.size());  [BUGGY]    final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	Single  <  T>  singletons  =  new  ArrayList  <  T>(samples.size());	  singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateRandomGenerator();  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;    [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateRandomGenerator();  [BUGGY]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  randomGenerator  =  rng.generateRandomGenerator();	      RandomGenerator    randomGenerator    =    rng.getRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
