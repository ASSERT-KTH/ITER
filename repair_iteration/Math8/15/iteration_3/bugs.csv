bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Single  <  T>  singletons  =  new  LinkedList  <  T>(samples.size());  [CE]  cannot  find  symbol  [FE]        ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  Single  <  T>  singletons  =  new  LinkedList  <  T>(samples.size());  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	Single  <  T>  singletons  =  new  LinkedList  <  T>(samples.size());	  Single    <    T>    singletons    =    new    ArrayList    <    T>(samples.size());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  random.next();  singletons  =  new  ArrayList  <  T>(samples.size());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  <  T>  random  =  random.next();  singletons  =  new  ArrayList  <  T>(samples.size());  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  T>  random  =  random.next();  singletons  =  new  ArrayList  <  T>(samples.size());	  singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    RandomGenerator    <    T>    random    =    random.next();    singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	6	None	replace
3	[BUG]  [BUGGY]  Single  singletons  =  new  Double[samples.size()  ];  [CE]  cannot  find  symbol  [FE]        ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  Single  singletons  =  new  Double[samples.size()  ];  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	Single  singletons  =  new  Double[samples.size()  ];	  singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
4	[BUG]  [BUGGY]  Single  singletons  =  new  LinkedList  <  T>(samples.size());  [CE]  cannot  find  symbol  [FE]        ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  Single  singletons  =  new  LinkedList  <  T>(samples.size());  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	Single  singletons  =  new  LinkedList  <  T>(samples.size());	  Single    singletons    =    new    ArrayList    <    T>(samples.size());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
5	[BUG]  [BUGGY]  Singletons  singletons  =  new  LinkedList  <  T>(samples.size());  [CE]  cannot  find  symbol  [FE]        ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  Singletons  singletons  =  new  LinkedList  <  T>(samples.size());  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	Singletons  singletons  =  new  LinkedList  <  T>(samples.size());	  Singletons    singletons    =    new    ArrayList    <    T>(samples.size());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng,  random);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng,  random);  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng,  random);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(rng);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	9	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  rng.getValue();  [CE]  >  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  rng.getValue();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  rng.getValue();	  RandomGenerator    <    Pair    <    T,    Double>    sample    =    random.getValue();    	non-compiled	[CE]  >  expected	7	None	replace
8	[BUG]  [BUGGY]  Singletons  =  new  ArrayList  <  T>(samples.size());  [CE]  cannot  find  symbol  Singletons  [FE]        ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  Singletons  =  new  ArrayList  <  T>(samples.size());  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	Singletons  =  new  ArrayList  <  T>(samples.size());	  singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    Singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    	non-compiled	[CE]  cannot  find  symbol  Singletons	14	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  null);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  null);  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  null);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator(null);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	1	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  sample);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  sample);  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  sample);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator(null);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	1	None	replace
11	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size());  Singletons  =  new  ArrayList  <  T>(samples.size());  [CE]  cannot  find  symbol  Singletons  [FE]        ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size());  Singletons  =  new  ArrayList  <  T>(samples.size());  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons  =  new  ArrayList  <  T>(samples.size());  Singletons  =  new  ArrayList  <  T>(samples.size());	  singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    Singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  Singletons	16	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  random  =  sample.getValue();  [CE]  >  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  random  =  sample.getValue();  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  Pair  <  T,  Double>  random  =  sample.getValue();	  RandomGenerator    <    Pair    <    T,    Double>    random    =    rng.getValue();    	non-compiled	[CE]  >  expected	8	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  <  T>  singletons  =  new  ArrayList  <  T>(samples.size());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]          ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  <  T>  singletons  =  new  ArrayList  <  T>(samples.size());  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  T>  singletons  =  new  ArrayList  <  T>(samples.size());	  singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    RandomGenerator    <    T>    singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	12	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  this.randomGenerator.getRandomGenerator();  [CE]  cannot  find  symbol  randomGenerator  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  randomGenerator  =  this.randomGenerator.getRandomGenerator();  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  randomGenerator  =  this.randomGenerator.getRandomGenerator();	  RandomGenerator    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	19	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random,  rng.getRandomGenerator();  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  randomGenerator  =  random,  rng.getRandomGenerator();  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  randomGenerator  =  random,  rng.getRandomGenerator();	  RandomGenerator    randomGenerator    =    rng,    random.getRandomGenerator();    	non-compiled	[CE]  ';'  expected	3	None	replace
16	[BUG]  [BUGGY]  randomGenerator  =  rng.getValue();  [CE]  cannot  find  symbol  randomGenerator  [FE]          ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  randomGenerator  =  rng.getValue();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	randomGenerator  =  rng.getValue();	  singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    RandomGenerator    randomGenerator    =    rng.getValue();    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	17	None	replace
17	[BUG]  [BUGGY]  random  =  new  ArrayList  <  T>(samples.size());  RandomGenerator  <  T>  singletons  =  new  ArrayList  <  T>(samples.size());  [CE]  incompatible  types  [FE]          ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  random  =  new  ArrayList  <  T>(samples.size());  RandomGenerator  <  T>  singletons  =  new  ArrayList  <  T>(samples.size());  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	random  =  new  ArrayList  <  T>(samples.size());  RandomGenerator  <  T>  singletons  =  new  ArrayList  <  T>(samples.size());	  singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    RandomGenerator    <    T>    singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    	non-compiled	[CE]  incompatible  types	5	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generateRandomGenerator();  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  randomGenerator  =  random.generateRandomGenerator();  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  randomGenerator  =  random.generateRandomGenerator();	  RandomGenerator    randomGenerator    =    rng.generateRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  random  =  rng.getRandom();  [CE]  cannot  find  symbol  [FE]          ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  random  =  rng.getRandom();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  random  =  rng.getRandom();	  singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    RandomGenerator    random    =    rng.getRandom();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
20	[BUG]  [BUGGY]  random  =  rng.getRandom();  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  random  =  rng.getRandom();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	random  =  rng.getRandom();	  singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    RandomGenerator    random    =    rng.getRandom();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
21	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size());  RandomGenerator  random  =  rng.getRandom();  [CE]  cannot  find  symbol  [FE]          ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size());  RandomGenerator  random  =  rng.getRandom();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons  =  new  ArrayList  <  T>(samples.size());  RandomGenerator  random  =  rng.getRandom();	  singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    RandomGenerator    random    =    rng.getRandom();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
22	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size());  RandomGenerator  randomGenerator  =  rng.getValue();  [CE]  cannot  find  symbol  [FE]          ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size());  RandomGenerator  randomGenerator  =  rng.getValue();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons  =  new  ArrayList  <  T>(samples.size());  RandomGenerator  randomGenerator  =  rng.getValue();	  singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    RandomGenerator    randomGenerator    =    rng.getValue();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
23	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(random,  random);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(random,  random);  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(random,  random);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(random,    rng);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	10	None	replace
24	[BUG]  [BUGGY]  Singletons  <  T>  singletons  =  new  ArrayList  <  T>(samples.size());  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  Singletons  <  T>  singletons  =  new  ArrayList  <  T>(samples.size());  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	Singletons  <  T>  singletons  =  new  ArrayList  <  T>(samples.size());	  singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    RandomGenerator    <    T>    random    =    random.next();    singletons    =    new    ArrayList    <    T>(samples.size()    +    1);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
25	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  probs);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  probs);  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  probs);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator(null);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	1	None	replace
26	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getValues();  [CE]  >  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getValues();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getValues();	  RandomGenerator    <    Pair    <    T,    Double>    sample    =    random.getValue();    	non-compiled	[CE]  >  expected	7	None	replace
27	[BUG]  [BUGGY]  RandomGenerator  <  T>  singletons  =  new  LinkedList  <  T>(samples.size());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]          ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  <  T>  singletons  =  new  LinkedList  <  T>(samples.size());  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  T>  singletons  =  new  LinkedList  <  T>(samples.size());	  singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    RandomGenerator    <    T>    singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	5	None	replace
28	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  randomGenerator.generateRandomGenerator();  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  randomGenerator  =  randomGenerator.generateRandomGenerator();  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  randomGenerator  =  randomGenerator.generateRandomGenerator();	  RandomGenerator    randomGenerator    =    rng.generateRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
29	[BUG]  [BUGGY]  if(samples!=  null)  {  singletons  =  new  ArrayList  <  T>(samples.size());  }  else  {  final  List  <  T>  samples  =  new  ArrayList  <  T>(samples.size());  }  [CE]  variable  samples  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  if(samples!=  null)  {  singletons  =  new  ArrayList  <  T>(samples.size());  }  else  {  final  List  <  T>  samples  =  new  ArrayList  <  T>(samples.size());  }  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	if(samples!=  null)  {  singletons  =  new  ArrayList  <  T>(samples.size());  }  else  {  final  List  <  T>  samples  =  new  ArrayList  <  T>(samples.size());  }	  singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    	non-compiled	[CE]  variable  samples  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	4	None	replace
30	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(random);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(random);  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(random);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator(null);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	1	None	replace
31	[BUG]  [BUGGY]  Single  <  T>  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [CE]  cannot  find  symbol  [FE]        ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  Single  <  T>  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	Single  <  T>  singletons  =  new  ArrayList  <  T>(samples.size()  -  1);	  Single    <    T>    singletons    =    new    ArrayList    <    T>(samples.size());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
32	[BUG]  [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size());  RandomGenerator  randomGenerator  =  randomGenerator.getValue();  [CE]  cannot  find  symbol  [FE]          ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;      [BUGGY]  singletons  =  new  ArrayList  <  T>(samples.size());  RandomGenerator  randomGenerator  =  randomGenerator.getValue();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	singletons  =  new  ArrayList  <  T>(samples.size());  RandomGenerator  randomGenerator  =  randomGenerator.getValue();	  singletons    =    new    ArrayList    <    T>(samples.size()    -    1);    RandomGenerator    randomGenerator    =    rng.getValue();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
