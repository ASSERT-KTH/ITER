bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sum  -=  randomValue[i];  [CE]  array  required,  but  double  found  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  -=  randomValue[i];  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValue[i];	  sum    -=    probabilities[i];    	non-compiled	[CE]  array  required,  but  double  found	12	None	replace
2	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  -=  probabilities[i]  *  randomValue;	  sum    -=    probabilities[i];    	compilable	  [FE]  ArrayStoreException  	12	2	replace
3	[BUG]  [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  probabilities[i]  *  randomValue;	  sum    -=    probabilities[i];    	compilable	  [FE]  ArrayStoreException  	12	2	replace
4	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  +=  probabilities[i]  /  randomValue;	  sum    +=    probabilities[i]    *    randomValue;    	compilable	  [FE]  ArrayStoreException  	14	2	replace
5	[BUG]  [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  probabilities[i]  /  randomValue;	  sum    +=    probabilities[i]    *    randomValue;    	compilable	  [FE]  ArrayStoreException  	14	2	replace
6	[BUG]  [BUGGY]  sum  +=  probabilitys[i];  [CE]  cannot  find  symbol  probabilitys  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  probabilitys[i];  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  probabilitys[i];	  sum    +=    randomValue[i];    	non-compiled	[CE]  cannot  find  symbol  probabilitys	1	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generator();  [CE]  cannot  find  symbol  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  RandomGenerator  randomGenerator  =  random.generator();  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  random.generator();	      RandomGenerator    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
8	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  -=  probabilities[i];  sum  -=  probabilities[i];  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum    -=    probabilities[i];    sum  -=  probabilities[i];	  	compilable	  [FE]  ArrayStoreException  	11	2	add
9	[BUG]  [BUGGY]  sum  -=  probabilities[i];  sum  -=  probabilities[i];  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  -=  probabilities[i];  sum  -=  probabilities[i];  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    probabilities[i];    sum  -=  probabilities[i];	  	compilable	  [FE]  ArrayStoreException  	11	2	add
10	[BUG]  [BUGGY]  sum  -=  probabilities[i];  Sum  -=  probabilities[i];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  -=  probabilities[i];  Sum  -=  probabilities[i];  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    probabilities[i];    Sum  -=  probabilities[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	11	None	add
11	[BUG]  [BUGGY]  sum  -=  probabilities[i];  sum  -=  probabilityities[i];  [CE]  cannot  find  symbol  probabilityities  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  -=  probabilities[i];  sum  -=  probabilityities[i];  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    probabilities[i];    sum  -=  probabilityities[i];	  	non-compiled	[CE]  cannot  find  symbol  probabilityities	11	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue;  sum  +=  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum    +=    randomValue;    sum  +=  randomValue;	  	compilable	  [FE]  AssertionError  	2	1	add
13	[BUG]  [BUGGY]  sum  +=  randomValue;  sum  +=  randomValue;  [FE]  AssertionError  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue;  sum  +=  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue;    sum  +=  randomValue;	  	compilable	  [FE]  AssertionError  	2	1	add
14	[BUG]  [BUGGY]  sum  +=  randomValue;  Sum  +=  randomValue;  [CE]  cannot  find  symbol  Sum  [FE]      ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue;  Sum  +=  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue;    Sum  +=  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  Sum	2	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }	  	compilable	  [FE]  AssertionError  	2	1	add
16	[BUG]  [BUGGY]  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  [FE]  AssertionError  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }	  	compilable	  [FE]  AssertionError  	2	1	add
17	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextInt();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextInt();  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextInt();	      RandomGenerator    <    T>    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	8	None	replace
18	[BUG]  [BUGGY]  randomValue  =  rng.nextDouble();  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  randomValue  =  rng.nextDouble();  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	randomValue  =  rng.nextDouble();	      randomValue    =    random.nextDouble();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	6	None	replace
19	[BUG]  [BUGGY]  randomValue  =  i.nextDouble();  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  randomValue  =  i.nextDouble();  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	randomValue  =  i.nextDouble();	      randomValue    =    random.nextDouble();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	6	None	replace
20	[BUG]  [BUGGY]  sum  +=  probabilitys[i]  *  randomValue;  [CE]  cannot  find  symbol  probabilitys  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  probabilitys[i]  *  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  probabilitys[i]  *  randomValue;	  sum    +=    probabilityities[i]    *    randomValue;    	non-compiled	[CE]  cannot  find  symbol  probabilitys	15	None	replace
21	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;	  	compilable	  [FE]  ArrayStoreException  	13	2	add
22	[BUG]  [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;	  	compilable	  [FE]  ArrayStoreException  	13	2	add
23	[BUG]  [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  Sum  +=  probabilities[i]  *  randomValue;  [CE]  cannot  find  symbol  Sum  [FE]      ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  Sum  +=  probabilities[i]  *  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    probabilities[i]    *    randomValue;    Sum  +=  probabilities[i]  *  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  Sum	13	None	add
24	[BUG]  [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilityities[i]  *  randomValue;  [CE]  cannot  find  symbol  probabilityities  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilityities[i]  *  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilityities[i]  *  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  probabilityities	13	None	add
25	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue  *  i;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  +=  randomValue  *  i;	  sum    +=    randomValue;    	compilable	  [FE]  ArrayStoreException  	3	2	replace
26	[BUG]  [BUGGY]  sum  +=  randomValue  *  i;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue  *  i;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  randomValue  *  i;	  sum    +=    randomValue;    	compilable	  [FE]  ArrayStoreException  	3	2	replace
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue  +  1;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  +=  randomValue  +  1;	  sum    +=    randomValue;    	compilable	  [FE]  AssertionError  	3	1	replace
28	[BUG]  [BUGGY]  sum  +=  randomValue  +  1;  [FE]  AssertionError  [FE]      ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue  +  1;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  randomValue  +  1;	  sum    +=    randomValue;    	compilable	  [FE]  AssertionError  	3	1	replace
29	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  i);  [CE]  ';'  expected  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  i);  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble(),  i);	      RandomGenerator    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  ';'  expected	9	None	replace
30	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator();  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator();	      RandomGenerator    <    T>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	7	None	replace
31	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  +  i;  [CE]  incompatible  types  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  +  i;  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble()  +  i;	      RandomGenerator    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  incompatible  types	9	None	replace
32	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  -=  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  -=  randomValue;	  sum    +=    randomValue;    	compilable	  [FE]  ArrayStoreException  	3	2	replace
33	[BUG]  [BUGGY]  sum  -=  randomValue;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  -=  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValue;	  sum    +=    randomValue;    	compilable	  [FE]  ArrayStoreException  	3	2	replace
34	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue  -  1;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  +=  randomValue  -  1;	  sum    +=    randomValue;    	compilable	  [FE]  ArrayStoreException  	3	2	replace
35	[BUG]  [BUGGY]  sum  +=  randomValue  -  1;  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue  -  1;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  randomValue  -  1;	  sum    +=    randomValue;    	compilable	  [FE]  ArrayStoreException  	3	2	replace
36	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(i);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(i);  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(i);	      RandomGenerator    <    T>    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	8	None	replace
37	[BUG]  [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  randomValue  +=  probabilityities[i]  *  randomValue;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  randomValue  +=  probabilityities[i]  *  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    probabilities[i]    *    randomValue;    randomValue  +=  probabilityities[i]  *  randomValue;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	13	None	add
38	[BUG]  [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  if(randomValue  >  randomValue)  {  sum  +=  probabilityities[i]  *  randomValue;  }  [CE]  cannot  find  symbol  probabilityities  [FE]      ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  if(randomValue  >  randomValue)  {  sum  +=  probabilityities[i]  *  randomValue;  }  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    probabilities[i]    *    randomValue;    if(randomValue  >  randomValue)  {  sum  +=  probabilityities[i]  *  randomValue;  }	  	non-compiled	[CE]  cannot  find  symbol  probabilityities	13	None	add
39	[BUG]  [BUGGY]  randomValue  =  randomGenerator.nextDouble();  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  randomValue  =  randomGenerator.nextDouble();  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	randomValue  =  randomGenerator.nextDouble();	      randomValue    =    random.nextDouble();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	6	None	replace
40	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i);  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i);	      RandomGenerator    <    T>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	7	None	replace
41	[BUG]  [BUGGY]  sum  +=  randomValue;  randomValue  +=  randomValue;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue;  randomValue  +=  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue;    randomValue  +=  randomValue;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	2	None	add
42	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  -  1;  [CE]  incompatible  types  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  -  1;  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble()  -  1;	      RandomGenerator    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  incompatible  types	9	None	replace
43	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue  *  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  +=  randomValue  *  randomValue;	  sum    +=    randomValue;    	compilable	  [FE]  ArrayStoreException  	3	2	replace
44	[BUG]  [BUGGY]  sum  +=  randomValue  *  randomValue;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  randomValue  *  randomValue;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  randomValue  *  randomValue;	  sum    +=    randomValue;    	compilable	  [FE]  ArrayStoreException  	3	2	replace
45	[BUG]  [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  if(randomValue  <  probs)  {  sum  +=  probabilityities[i]  *  randomValue;  }  [CE]  cannot  find  symbol  probs  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  if(randomValue  <  probs)  {  sum  +=  probabilityities[i]  *  randomValue;  }  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    probabilities[i]    *    randomValue;    if(randomValue  <  probs)  {  sum  +=  probabilityities[i]  *  randomValue;  }	  	non-compiled	[CE]  cannot  find  symbol  probs	13	None	add
46	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  -  1;  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  -  1;  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  -  1;	      RandomGenerator    <    T>    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	8	None	replace
47	[BUG]  [BUGGY]  sum  -=  randomValues[i];  [CE]  cannot  find  symbol  randomValues  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  -=  randomValues[i];  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValues[i];	  sum    -=    probabilities[i];    	non-compiled	[CE]  cannot  find  symbol  randomValues	12	None	replace
48	[BUG]  [BUGGY]  sum  +=  probabilityities[i];  [CE]  cannot  find  symbol  probabilityities  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {    [BUGGY]  sum  +=  probabilityities[i];  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  probabilityities[i];	  sum    +=    randomValue[i];    	non-compiled	[CE]  cannot  find  symbol  probabilityities	1	None	replace
