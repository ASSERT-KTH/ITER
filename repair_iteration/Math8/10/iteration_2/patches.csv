bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  randomValue;  sum  +=  randomValue  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum    +=    randomValue    *    randomValue;    sum  +=  randomValue  *  randomValue;	  	compilable	  [FE]  AssertionError  	43	1	add
2	[BUG]  [BUGGY]  sum  +=  randomValue  *  randomValue;  sum  +=  randomValue  *  randomValue;  [FE]  AssertionError  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  randomValue;  sum  +=  randomValue  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    *    randomValue;    sum  +=  randomValue  *  randomValue;	  	compilable	  [FE]  AssertionError  	43	1	add
3	[BUG]  [BUGGY]  sum  +=  randomValue  *  randomValue;  Sum  +=  randomValue  *  randomValue;  [CE]  cannot  find  symbol  Sum  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  randomValue;  Sum  +=  randomValue  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    *    randomValue;    Sum  +=  randomValue  *  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  Sum	43	None	add
4	[BUG]  [BUGGY]  sum  +=  randomValue  *  randomValue;  randomValue  +=  randomValue  *  randomValue;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]        ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  randomValue;  randomValue  +=  randomValue  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    *    randomValue;    randomValue  +=  randomValue  *  randomValue;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	43	None	add
5	[BUG]  [BUGGY]  sum  -=  randomValue[i];  sum  -=  probabilityities[i];  [CE]  array  required,  but  double  found  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue[i];  sum  -=  probabilityities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValue[i];  sum  -=  probabilityities[i];	  sum    -=    probabilities[i];    sum    -=    probabilityities[i];    	non-compiled	[CE]  array  required,  but  double  found	11	None	replace
6	[BUG]  [BUGGY]  sum  -=  randomValue[i];  sum  -=  probabilities[i];  [CE]  array  required,  but  double  found  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue[i];  sum  -=  probabilities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValue[i];  sum  -=  probabilities[i];	  sum    -=    probabilities[i];    sum    -=    probabilityities[i];    	non-compiled	[CE]  array  required,  but  double  found	11	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  /  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  +=  randomValue  /  randomValue;	  sum    +=    randomValue    *    randomValue;    	compilable	  [FE]  AssertionError  	44	1	replace
8	[BUG]  [BUGGY]  sum  +=  randomValue  /  randomValue;  [FE]  AssertionError  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  /  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  randomValue  /  randomValue;	  sum    +=    randomValue    *    randomValue;    	compilable	  [FE]  AssertionError  	44	1	replace
9	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i,  sum);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i,  sum);  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i,  sum);	  RandomGenerator    <    T>    randomGenerator    =    random.getGenerator(i);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	40	None	replace
10	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum        +=        probabilities[i]        *        randomValue;        sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;	  	compilable	  [FE]  ArrayStoreException  	21	2	add
11	[BUG]  [BUGGY]  sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        probabilities[i]        *        randomValue;        sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;	  	compilable	  [FE]  ArrayStoreException  	21	2	add
12	[BUG]  [BUGGY]  sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;  Sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  [CE]  cannot  find  symbol  Sum  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;  Sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        probabilities[i]        *        randomValue;        sum    +=    probabilities[i]    *    randomValue;    Sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  Sum	21	None	add
13	[BUG]  [BUGGY]  sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilityities[i]  *  randomValue;  [CE]  cannot  find  symbol  probabilityities  [FE]        ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilityities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        probabilities[i]        *        randomValue;        sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilityities[i]  *  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  probabilityities	21	None	add
14	[BUG]  [BUGGY]  total  +=  randomValue;  if(i  >  0)  {  sum  +=  randomValue;  }  [CE]  cannot  find  symbol  total  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  total  +=  randomValue;  if(i  >  0)  {  sum  +=  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	total  +=  randomValue;  if(i  >  0)  {  sum  +=  randomValue;  }	  sum    +=    randomValue;    if(randomValue    >    0)    {    sum    +=    randomValue;    }    	non-compiled	[CE]  cannot  find  symbol  total	16	None	replace
15	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  if(randomValue  >  0)  {  sum  +=  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	if(randomValue  >  0)  {  sum  +=  randomValue;  }	  sum    +=    randomValue;    if(randomValue    >    0)    {    sum    +=    randomValue;    }    	compilable	  [FE]  ArrayStoreException  	16	2	replace
16	[BUG]  [BUGGY]  if(randomValue  >  0)  {  sum  +=  randomValue;  }  [FE]  ArrayStoreException  [FE]      AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  if(randomValue  >  0)  {  sum  +=  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	if(randomValue  >  0)  {  sum  +=  randomValue;  }	  sum    +=    randomValue;    if(randomValue    >    0)    {    sum    +=    randomValue;    }    	compilable	  [FE]  ArrayStoreException  	16	2	replace
17	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  sum  -=  probabilities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum    -=    probabilities[i]    *    randomValue;    sum  -=  probabilities[i]  *  randomValue;	  	compilable	  [FE]  ArrayStoreException  	2	2	add
18	[BUG]  [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  sum  -=  probabilities[i]  *  randomValue;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  sum  -=  probabilities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    probabilities[i]    *    randomValue;    sum  -=  probabilities[i]  *  randomValue;	  	compilable	  [FE]  ArrayStoreException  	2	2	add
19	[BUG]  [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  Sum  -=  probabilities[i]  *  randomValue;  [CE]  cannot  find  symbol  Sum  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  Sum  -=  probabilities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    probabilities[i]    *    randomValue;    Sum  -=  probabilities[i]  *  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  Sum	2	None	add
20	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  if(randomValue  <  sum)  {  sum  -=  probabilities[i]  *  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum    -=    probabilities[i]    *    randomValue;    if(randomValue  <  sum)  {  sum  -=  probabilities[i]  *  randomValue;  }	  	compilable	  [FE]  ArrayStoreException  	2	2	add
21	[BUG]  [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  if(randomValue  <  sum)  {  sum  -=  probabilities[i]  *  randomValue;  }  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  if(randomValue  <  sum)  {  sum  -=  probabilities[i]  *  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    probabilities[i]    *    randomValue;    if(randomValue  <  sum)  {  sum  -=  probabilities[i]  *  randomValue;  }	  	compilable	  [FE]  ArrayStoreException  	2	2	add
22	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  1;  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  1;  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  1;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    -    1;    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	46	None	replace
23	[BUG]  [BUGGY]  Sum  +=  randomValue;  [CE]  cannot  find  symbol  Sum  [FE]          ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  Sum  +=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	Sum  +=  randomValue;	  sum    +=    randomValue;    Sum    +=    randomValue;    	non-compiled	[CE]  cannot  find  symbol  Sum	14	None	replace
24	[BUG]  [BUGGY]  randomValue  +=  probabilities[i]  *  randomValue;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]        ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  randomValue  +=  probabilities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	randomValue  +=  probabilities[i]  *  randomValue;	  sum    +=    probabilities[i]    *    randomValue;    randomValue    +=    probabilityities[i]    *    randomValue;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	37	None	replace
25	[BUG]  [BUGGY]  randomValue  +=  probabilityities[i]  *  randomValue;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]          ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  randomValue  +=  probabilityities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	randomValue  +=  probabilityities[i]  *  randomValue;	  sum    +=    probabilities[i]    *    randomValue;    randomValue    +=    probabilityities[i]    *    randomValue;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	37	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  +  1;  sum  +=  randomValue  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum    +=    randomValue    +    1;    sum  +=  randomValue  +  1;	  	compilable	  [FE]  AssertionError  	27	1	add
27	[BUG]  [BUGGY]  sum  +=  randomValue  +  1;  sum  +=  randomValue  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  +  1;  sum  +=  randomValue  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    +    1;    sum  +=  randomValue  +  1;	  	compilable	  [FE]  AssertionError  	27	1	add
28	[BUG]  [BUGGY]  sum  +=  randomValue  +  1;  Sum  +=  randomValue  +  1;  [CE]  cannot  find  symbol  Sum  [FE]      AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  +  1;  Sum  +=  randomValue  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    +    1;    Sum  +=  randomValue  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Sum	27	None	add
29	[BUG]  [BUGGY]  sum  +=  randomValue  +  1;  total  +=  randomValue  +  1;  [CE]  cannot  find  symbol  total  [FE]        AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  +  1;  total  +=  randomValue  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    +    1;    total  +=  randomValue  +  1;	  	non-compiled	[CE]  cannot  find  symbol  total	27	None	add
30	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    -=    probabilities[i];    sum  -=  probabilities[i];  sum  -=  probabilities[i];  sum  -=  probabilities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum        -=        probabilities[i];        sum    -=    probabilities[i];    sum  -=  probabilities[i];  sum  -=  probabilities[i];	  	compilable	  [FE]  ArrayStoreException  	8	2	add
31	[BUG]  [BUGGY]  sum    -=    probabilities[i];    sum  -=  probabilities[i];  sum  -=  probabilities[i];  sum  -=  probabilities[i];  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    -=    probabilities[i];    sum  -=  probabilities[i];  sum  -=  probabilities[i];  sum  -=  probabilities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        -=        probabilities[i];        sum    -=    probabilities[i];    sum  -=  probabilities[i];  sum  -=  probabilities[i];	  	compilable	  [FE]  ArrayStoreException  	8	2	add
32	[BUG]  [BUGGY]  sum    -=    probabilities[i];    sum  -=  probabilities[i];  Sum  -=  probabilities[i];  sum  -=  probabilities[i];  [CE]  cannot  find  symbol  Sum  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    -=    probabilities[i];    sum  -=  probabilities[i];  Sum  -=  probabilities[i];  sum  -=  probabilities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        -=        probabilities[i];        sum    -=    probabilities[i];    Sum  -=  probabilities[i];  sum  -=  probabilities[i];	  	non-compiled	[CE]  cannot  find  symbol  Sum	8	None	add
33	[BUG]  [BUGGY]  sum    -=    probabilities[i];    sum  -=  probabilities[i];  sum  -=  probabilityities[i];  sum  -=  probabilities[i];  [CE]  cannot  find  symbol  probabilityities  [FE]        ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    -=    probabilities[i];    sum  -=  probabilities[i];  sum  -=  probabilityities[i];  sum  -=  probabilities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        -=        probabilities[i];        sum    -=    probabilities[i];    sum  -=  probabilityities[i];  sum  -=  probabilities[i];	  	non-compiled	[CE]  cannot  find  symbol  probabilityities	8	None	add
34	[BUG]  [BUGGY]  sum  -=  probabilitys[i];  [CE]  cannot  find  symbol  probabilitys  [FE]        ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  probabilitys[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  probabilitys[i];	  sum    -=    randomValues[i];    	non-compiled	[CE]  cannot  find  symbol  probabilitys	47	None	replace
35	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue;  sum  -=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum    -=    randomValue;    sum  -=  randomValue;	  	compilable	  [FE]  ArrayStoreException  	32	2	add
36	[BUG]  [BUGGY]  sum  -=  randomValue;  sum  -=  randomValue;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue;  sum  -=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    randomValue;    sum  -=  randomValue;	  	compilable	  [FE]  ArrayStoreException  	32	2	add
37	[BUG]  [BUGGY]  sum  -=  randomValue;  Sum  -=  randomValue;  [CE]  cannot  find  symbol  Sum  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue;  Sum  -=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    randomValue;    Sum  -=  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  Sum	32	None	add
38	[BUG]  [BUGGY]  sum  -=  randomValue;  -=  randomValue;  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue;  -=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    randomValue;    -=  randomValue;	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
39	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  i;  sum  +=  randomValue  *  i;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum    +=    randomValue    *    i;    sum  +=  randomValue  *  i;	  	compilable	  [FE]  ArrayStoreException  	25	2	add
40	[BUG]  [BUGGY]  sum  +=  randomValue  *  i;  sum  +=  randomValue  *  i;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  i;  sum  +=  randomValue  *  i;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    *    i;    sum  +=  randomValue  *  i;	  	compilable	  [FE]  ArrayStoreException  	25	2	add
41	[BUG]  [BUGGY]  sum  +=  randomValue  *  i;  Sum  +=  randomValue  *  i;  [CE]  cannot  find  symbol  Sum  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  i;  Sum  +=  randomValue  *  i;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    *    i;    Sum  +=  randomValue  *  i;	  	non-compiled	[CE]  cannot  find  symbol  Sum	25	None	add
42	[BUG]  [BUGGY]  sum  +=  randomValue  *  i;  total  +=  randomValue  *  i;  [CE]  cannot  find  symbol  total  [FE]        ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  i;  total  +=  randomValue  *  i;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    *    i;    total  +=  randomValue  *  i;	  	non-compiled	[CE]  cannot  find  symbol  total	25	None	add
43	[BUG]  [BUGGY]  randomValue  +=  i;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]        ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  randomValue  +=  i;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	randomValue  +=  i;	  sum    +=    randomValue;    randomValue    +=    randomValue;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	41	None	replace
44	[BUG]  [BUGGY]  randomValue  +=  data.length;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]          ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  randomValue  +=  data.length;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	randomValue  +=  data.length;	  sum    +=    randomValue;    randomValue    +=    randomValue;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	41	None	replace
45	[BUG]  [BUGGY]  Sum  +=  probabilities[i]  *  randomValue;  [CE]  cannot  find  symbol  Sum  [FE]          ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  Sum  +=  probabilities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	Sum  +=  probabilities[i]  *  randomValue;	  sum    +=    probabilities[i]    *    randomValue;    Sum    +=    probabilities[i]    *    randomValue;    	non-compiled	[CE]  cannot  find  symbol  Sum	23	None	replace
46	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  sum  +=  probabilities[i]  /  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum    +=    probabilities[i]    /    randomValue;    sum  +=  probabilities[i]  /  randomValue;	  	compilable	  [FE]  ArrayStoreException  	4	2	add
47	[BUG]  [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  sum  +=  probabilities[i]  /  randomValue;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  sum  +=  probabilities[i]  /  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    probabilities[i]    /    randomValue;    sum  +=  probabilities[i]  /  randomValue;	  	compilable	  [FE]  ArrayStoreException  	4	2	add
48	[BUG]  [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  Sum  +=  probabilities[i]  /  randomValue;  [CE]  cannot  find  symbol  Sum  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  Sum  +=  probabilities[i]  /  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    probabilities[i]    /    randomValue;    Sum  +=  probabilities[i]  /  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  Sum	4	None	add
49	[BUG]  [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  sum  +=  probabilityities[i]  /  randomValue;  [CE]  cannot  find  symbol  probabilityities  [FE]        ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  sum  +=  probabilityities[i]  /  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    probabilities[i]    /    randomValue;    sum  +=  probabilityities[i]  /  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  probabilityities	4	None	add
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  i  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  +=  randomValue  *  i  +  1;	  sum    +=    randomValue    *    i;    	compilable	  [FE]  AssertionError  	26	1	replace
51	[BUG]  [BUGGY]  sum  +=  randomValue  *  i  +  1;  [FE]  AssertionError  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  i  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  randomValue  *  i  +  1;	  sum    +=    randomValue    *    i;    	compilable	  [FE]  AssertionError  	26	1	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  /  i;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  +=  randomValue  /  i;	  sum    +=    randomValue    *    i;    	compilable	  [FE]  AssertionError  	26	1	replace
53	[BUG]  [BUGGY]  sum  +=  randomValue  /  i;  [FE]  AssertionError  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  /  i;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  randomValue  /  i;	  sum    +=    randomValue    *    i;    	compilable	  [FE]  AssertionError  	26	1	replace
54	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  -=  randomValue  +  1;	  sum    -=    randomValue;    	compilable	  [FE]  ArrayStoreException  	33	2	replace
55	[BUG]  [BUGGY]  sum  -=  randomValue  +  1;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValue  +  1;	  sum    -=    randomValue;    	compilable	  [FE]  ArrayStoreException  	33	2	replace
56	[BUG]  [BUGGY]  sum  -=  randomValue.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue.doubleValue();  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValue.doubleValue();	  sum    -=    randomValue;    	non-compiled	[CE]  double  cannot  be  dereferenced	33	None	replace
57	[BUG]  [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  if(probables[i]  ==  null)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  if(probables[i]  ==  null)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        if(randomValue    >    0)    {    sum    +=    randomValue;    }    if(probables[i]  ==  null)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
58	[BUG]  [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  if(probables[i]!=  null)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  if(probables[i]!=  null)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        if(randomValue    >    0)    {    sum    +=    randomValue;    }    if(probables[i]!=  null)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
59	[BUG]  [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  RandomGenerator  randomGenerator  =  new  RandomGenerator(samples[i]);  [CE]  cannot  find  symbol  samples  [FE]        AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  RandomGenerator  randomGenerator  =  new  RandomGenerator(samples[i]);  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        if(randomValue    >    0)    {    sum    +=    randomValue;    }    RandomGenerator  randomGenerator  =  new  RandomGenerator(samples[i]);	  	non-compiled	[CE]  cannot  find  symbol  samples	15	None	add
60	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  /  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  +=  randomValue  /  1;	  sum    +=    randomValue    -    1;    	compilable	  [FE]  ArrayStoreException  	35	2	replace
61	[BUG]  [BUGGY]  sum  +=  randomValue  /  1;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  /  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  randomValue  /  1;	  sum    +=    randomValue    -    1;    	compilable	  [FE]  ArrayStoreException  	35	2	replace
62	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  +=  randomValue  *  1;	  sum    +=    randomValue    -    1;    	compilable	  [FE]  ArrayStoreException  	35	2	replace
63	[BUG]  [BUGGY]  sum  +=  randomValue  *  1;  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  randomValue  *  1;	  sum    +=    randomValue    -    1;    	compilable	  [FE]  ArrayStoreException  	35	2	replace
64	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(i  +  1);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(i  +  1);  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(i  +  1);	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble(i);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	36	None	replace
65	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(i,  sum);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                  ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(i,  sum);  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(i,  sum);	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble(i);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	36	None	replace
66	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  +  1;  [CE]  incompatible  types  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  +  1;  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble()  +  1;	  RandomGenerator    randomGenerator    =    random.nextDouble()    -    1;    	non-compiled	[CE]  incompatible  types	42	None	replace
67	[BUG]  [BUGGY]  total  +=  randomValue;  total  +=  randomValue;  [CE]  cannot  find  symbol  total  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  total  +=  randomValue;  total  +=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	total  +=  randomValue;  total  +=  randomValue;	  sum    +=    randomValue;    sum    +=    randomValue;    	non-compiled	[CE]  cannot  find  symbol  total	13	None	replace
68	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  -  1;  sum  +=  randomValue  -  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum    +=    randomValue    -    1;    sum  +=  randomValue  -  1;	  	compilable	  [FE]  ArrayStoreException  	34	2	add
69	[BUG]  [BUGGY]  sum  +=  randomValue  -  1;  sum  +=  randomValue  -  1;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  -  1;  sum  +=  randomValue  -  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    -    1;    sum  +=  randomValue  -  1;	  	compilable	  [FE]  ArrayStoreException  	34	2	add
70	[BUG]  [BUGGY]  sum  +=  randomValue  -  1;  Sum  +=  randomValue  -  1;  [CE]  cannot  find  symbol  Sum  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  -  1;  Sum  +=  randomValue  -  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    -    1;    Sum  +=  randomValue  -  1;	  	non-compiled	[CE]  cannot  find  symbol  Sum	34	None	add
71	[BUG]  [BUGGY]  sum  +=  randomValue  -  1;  amount  +=  randomValue  -  1;  [CE]  cannot  find  symbol  amount  [FE]        ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  -  1;  amount  +=  randomValue  -  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    -    1;    amount  +=  randomValue  -  1;	  	non-compiled	[CE]  cannot  find  symbol  amount	34	None	add
72	[BUG]  [BUGGY]  Sum  -=  probabilities[i];  [CE]  cannot  find  symbol  Sum  [FE]          ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  Sum  -=  probabilities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	Sum  -=  probabilities[i];	  sum    -=    probabilities[i];    Sum    -=    probabilities[i];    	non-compiled	[CE]  cannot  find  symbol  Sum	10	None	replace
73	[BUG]  [BUGGY]  sum  -=  randomValue[i];  Sum  -=  probabilities[i];  [CE]  array  required,  but  double  found  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue[i];  Sum  -=  probabilities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValue[i];  Sum  -=  probabilities[i];	  sum    -=    probabilities[i];    Sum    -=    probabilities[i];    	non-compiled	[CE]  array  required,  but  double  found	10	None	replace
74	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator(i);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator(i);  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator(i);	  RandomGenerator    <    T>    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	30	None	replace
75	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  /  i;  [CE]  incompatible  types  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  /  i;  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble()  /  i;	  RandomGenerator    randomGenerator    =    random.nextDouble()    +    i;    	non-compiled	[CE]  incompatible  types	31	None	replace
76	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  +  i  +  1;  [CE]  incompatible  types  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  +  i  +  1;  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble()  +  i  +  1;	  RandomGenerator    randomGenerator    =    random.nextDouble()    +    i;    	non-compiled	[CE]  incompatible  types	31	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  sum  +=  randomValue;  sum  +=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum        +=        randomValue;        sum    +=    randomValue;    sum  +=  randomValue;  sum  +=  randomValue;	  	compilable	  [FE]  AssertionError  	12	1	add
78	[BUG]  [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  sum  +=  randomValue;  sum  +=  randomValue;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  sum  +=  randomValue;  sum  +=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        sum    +=    randomValue;    sum  +=  randomValue;  sum  +=  randomValue;	  	compilable	  [FE]  AssertionError  	12	1	add
79	[BUG]  [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  total  +=  randomValue;  sum  +=  randomValue;  [CE]  cannot  find  symbol  total  [FE]      AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  total  +=  randomValue;  sum  +=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        sum    +=    randomValue;    total  +=  randomValue;  sum  +=  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  total	12	None	add
80	[BUG]  [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  sum  +=  randomValue;  Sum  +=  randomValue;  [CE]  cannot  find  symbol  Sum  [FE]        AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  sum  +=  randomValue;  Sum  +=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        sum    +=    randomValue;    sum  +=  randomValue;  Sum  +=  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  Sum	12	None	add
81	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  probabilities[i]  *  randomValue  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  -=  probabilities[i]  *  randomValue  +  1;	  sum    -=    probabilities[i]    *    randomValue;    	compilable	  [FE]  ArrayStoreException  	3	2	replace
82	[BUG]  [BUGGY]  sum  -=  probabilities[i]  *  randomValue  +  1;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  probabilities[i]  *  randomValue  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  probabilities[i]  *  randomValue  +  1;	  sum    -=    probabilities[i]    *    randomValue;    	compilable	  [FE]  ArrayStoreException  	3	2	replace
83	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue;  sum  -=  probabilities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  -=  randomValue;  sum  -=  probabilities[i];	  sum    -=    probabilities[i];    sum    -=    probabilities[i];    	compilable	  [FE]  ArrayStoreException  	9	2	replace
84	[BUG]  [BUGGY]  sum  -=  randomValue;  sum  -=  probabilities[i];  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue;  sum  -=  probabilities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValue;  sum  -=  probabilities[i];	  sum    -=    probabilities[i];    sum    -=    probabilities[i];    	compilable	  [FE]  ArrayStoreException  	9	2	replace
85	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum);  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum);  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble(),  sum);	  RandomGenerator    randomGenerator    =    random.nextDouble(),    i);    	non-compiled	[CE]  ';'  expected	29	None	replace
86	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextInt(),  i);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextInt(),  i);  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  random.nextInt(),  i);	  RandomGenerator    randomGenerator    =    random.nextDouble(),    i);    	non-compiled	[CE]  ';'  expected	29	None	replace
87	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  this.randomGenerator.generator();  [CE]  cannot  find  symbol  randomGenerator  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  this.randomGenerator.generator();  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  this.randomGenerator.generator();	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	7	None	replace
88	[BUG]  [BUGGY]  sum  +=  probabilities[i]  *  rng;  randomValue  +=  probabilityities[i]  *  randomValue;  [CE]  cannot  find  symbol  rng  [FE]        ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  probabilities[i]  *  rng;  randomValue  +=  probabilityities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  probabilities[i]  *  rng;  randomValue  +=  probabilityities[i]  *  randomValue;	  sum    +=    probabilities[i]    *    randomValue;    randomValue    +=    probabilityities[i]    *    randomValue;    	non-compiled	[CE]  cannot  find  symbol  rng	37	None	replace
89	[BUG]  [BUGGY]  sum  +=  randomValues[i];  [CE]  cannot  find  symbol  randomValues  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValues[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  randomValues[i];	  sum    +=    probabilityities[i];    	non-compiled	[CE]  cannot  find  symbol  randomValues	48	None	replace
90	[BUG]  [BUGGY]  sum  -=  randomValues[i];  Sum  -=  probabilities[i];  [CE]  cannot  find  symbol  randomValues  [FE]          ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValues[i];  Sum  -=  probabilities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValues[i];  Sum  -=  probabilities[i];	  sum    -=    probabilities[i];    Sum    -=    probabilities[i];    	non-compiled	[CE]  cannot  find  symbol  randomValues	10	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  sum  +=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum        +=        randomValue;        sum    +=    randomValue;    sum  +=  randomValue;	  	compilable	  [FE]  AssertionError  	12	1	add
92	[BUG]  [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  sum  +=  randomValue;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  sum  +=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        sum    +=    randomValue;    sum  +=  randomValue;	  	compilable	  [FE]  AssertionError  	12	1	add
93	[BUG]  [BUGGY]  sum  -=  randomValue;  randomValue  -=  randomValue;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue;  randomValue  -=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    randomValue;    randomValue  -=  randomValue;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	32	None	add
94	[BUG]  [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  if(randomValue  >  randomValue)  {  sum  -=  probabilityities[i]  *  randomValue;  }  [CE]  cannot  find  symbol  probabilityities  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  if(randomValue  >  randomValue)  {  sum  -=  probabilityities[i]  *  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    probabilities[i]    *    randomValue;    if(randomValue  >  randomValue)  {  sum  -=  probabilityities[i]  *  randomValue;  }	  	non-compiled	[CE]  cannot  find  symbol  probabilityities	2	None	add
95	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  i  +  1);  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  i  +  1);  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble(),  i  +  1);	  RandomGenerator    randomGenerator    =    random.nextDouble(),    i);    	non-compiled	[CE]  ';'  expected	29	None	replace
96	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  i  +  1;  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  i  +  1;  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble(),  i  +  1;	  RandomGenerator    randomGenerator    =    random.nextDouble(),    i);    	non-compiled	[CE]  ';'  expected	29	None	replace
97	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  randoms.generator();  [CE]  cannot  find  symbol  randoms  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  randomGenerator  =  randoms.generator();  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  randomGenerator  =  randoms.generator();	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  cannot  find  symbol  randoms	7	None	replace
98	[BUG]  [BUGGY]  sum  -=  randomValue[i]  +  1;  [CE]  array  required,  but  double  found  [FE]        ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue[i]  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValue[i]  +  1;	  sum    -=    randomValue[i];    	non-compiled	[CE]  array  required,  but  double  found	1	None	replace
99	[BUG]  [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  randomValue  =  random.nextDouble();  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  randomValue  =  random.nextDouble();  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        if(randomValue    >    0)    {    sum    +=    randomValue;    }    randomValue  =  random.nextDouble();	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	15	None	add
100	[BUG]  [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  RandomGenerator  randomGenerator  =  random.getGenerator();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  RandomGenerator  randomGenerator  =  random.getGenerator();  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        if(randomValue    >    0)    {    sum    +=    randomValue;    }    RandomGenerator  randomGenerator  =  random.getGenerator();	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
101	[BUG]  [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  RandomGenerator  randomGenerator  =  random.getGenerator(i);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  RandomGenerator  randomGenerator  =  random.getGenerator(i);  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        if(randomValue    >    0)    {    sum    +=    randomValue;    }    RandomGenerator  randomGenerator  =  random.getGenerator(i);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
102	[BUG]  [BUGGY]  sum  +=  randomValue  -  1;  randomValue  +=  randomValue  -  1;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  -  1;  randomValue  +=  randomValue  -  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    -    1;    randomValue  +=  randomValue  -  1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	34	None	add
103	[BUG]  [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  if(randomValue  >  randomValue.length)  {  sum  +=  probabilityities[i]  /  randomValue;  }  [CE]  double  cannot  be  dereferenced  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  if(randomValue  >  randomValue.length)  {  sum  +=  probabilityities[i]  /  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    probabilities[i]    /    randomValue;    if(randomValue  >  randomValue.length)  {  sum  +=  probabilityities[i]  /  randomValue;  }	  	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	add
104	[BUG]  [BUGGY]  sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilityities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  [CE]  cannot  find  symbol  probabilityities  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilities[i]  *  randomValue;  sum  +=  probabilityities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        probabilities[i]        *        randomValue;        sum    +=    probabilities[i]    *    randomValue;    sum  +=  probabilityities[i]  *  randomValue;  sum  +=  probabilities[i]  *  randomValue;	  	non-compiled	[CE]  cannot  find  symbol  probabilityities	21	None	add
105	[BUG]  [BUGGY]  sum  +=  randomValue[i]  /  probability;  [CE]  array  required,  but  double  found  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue[i]  /  probability;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  randomValue[i]  /  probability;	  sum    +=    probabilities[i]    /    randomValue;    	non-compiled	[CE]  array  required,  but  double  found	5	None	replace
106	[BUG]  [BUGGY]  sum  +=  randomValue  *  i;  randomValue  +=  randomValue  *  i;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  i;  randomValue  +=  randomValue  *  i;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    *    i;    randomValue  +=  randomValue  *  i;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	25	None	add
107	[BUG]  [BUGGY]  randomValue  =  RandomGenerator.nextDouble();  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  randomValue  =  RandomGenerator.nextDouble();  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	randomValue  =  RandomGenerator.nextDouble();	  randomValue    =    i.nextDouble();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	19	None	replace
108	[BUG]  [BUGGY]  sum  +=  probabilities[i];  randomValue  +=  randomValue;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]        ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  probabilities[i];  randomValue  +=  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  probabilities[i];  randomValue  +=  randomValue;	  sum    +=    randomValue;    randomValue    +=    randomValue;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	41	None	replace
109	[BUG]  [BUGGY]  sum  -=  randomValue;  sum  -=  probabilityities[i];  [CE]  cannot  find  symbol  probabilityities  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValue;  sum  -=  probabilityities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValue;  sum  -=  probabilityities[i];	  sum    -=    probabilities[i];    sum    -=    probabilityities[i];    	non-compiled	[CE]  cannot  find  symbol  probabilityities	11	None	replace
110	[BUG]  [BUGGY]  sum  -=  randomValues[i];  sum  -=  probabilities[i];  [CE]  cannot  find  symbol  randomValues  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  randomValues[i];  sum  -=  probabilities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  randomValues[i];  sum  -=  probabilities[i];	  sum    -=    probabilities[i];    sum    -=    probabilities[i];    	non-compiled	[CE]  cannot  find  symbol  randomValues	9	None	replace
111	[BUG]  [BUGGY]  sum  +=  randomValue  *  sample(randomValue);  [CE]  no  suitable  method  found  for  sample(double)  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  *  sample(randomValue);  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  randomValue  *  sample(randomValue);	  sum    +=    randomValue    *    randomValue;    	non-compiled	[CE]  no  suitable  method  found  for  sample(double)	44	None	replace
112	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  i;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  +=  i;	  sum    +=    randomValue;    sum    +=    randomValue;    	compilable	  [FE]  ArrayStoreException  	13	2	replace
113	[BUG]  [BUGGY]  sum  +=  i;  [FE]  ArrayStoreException  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  i;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  i;	  sum    +=    randomValue;    sum    +=    randomValue;    	compilable	  [FE]  ArrayStoreException  	13	2	replace
114	[BUG]  [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  double  sum  -=  probabilities[i]  *  randomValue;  [CE]  ';'  expected  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  double  sum  -=  probabilities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    probabilities[i]    *    randomValue;    double  sum  -=  probabilities[i]  *  randomValue;	  	non-compiled	[CE]  ';'  expected	2	None	add
115	[BUG]  [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  if(randomValue  <  probs)  {  sum  -=  probabilities[i]  *  randomValue;  }  [CE]  cannot  find  symbol  probs  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  probabilities[i]  *  randomValue;  if(randomValue  <  probs)  {  sum  -=  probabilities[i]  *  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    -=    probabilities[i]    *    randomValue;    if(randomValue  <  probs)  {  sum  -=  probabilities[i]  *  randomValue;  }	  	non-compiled	[CE]  cannot  find  symbol  probs	2	None	add
116	[BUG]  [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  if(probs.size()  >  1)  {  for(int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  if(probs.size()  >  1)  {  for(int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        if(randomValue    >    0)    {    sum    +=    randomValue;    }    if(probs.size()  >  1)  {  for(int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
117	[BUG]  [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  if(probs.size()  >  1)  {  for(int  i  =  0;  i  <  probabilityities.length;  i++)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  if(probs.size()  >  1)  {  for(int  i  =  0;  i  <  probabilityities.length;  i++)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        if(randomValue    >    0)    {    sum    +=    randomValue;    }    if(probs.size()  >  1)  {  for(int  i  =  0;  i  <  probabilityities.length;  i++)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
118	[BUG]  [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  if(probs.size()  >  1)  {  for(int  i  =  0;  i  <  Probabilities.length;  i++)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  }  if(probs.size()  >  1)  {  for(int  i  =  0;  i  <  Probabilities.length;  i++)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        if(randomValue    >    0)    {    sum    +=    randomValue;    }    if(probs.size()  >  1)  {  for(int  i  =  0;  i  <  Probabilities.length;  i++)  {  sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  }  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
119	[BUG]  [BUGGY]  sum  +=  randomValue  +  1;  randomValue  +=  randomValue  +  1;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  randomValue  +  1;  randomValue  +=  randomValue  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    randomValue    +    1;    randomValue  +=  randomValue  +  1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	27	None	add
120	[BUG]  [BUGGY]  sum  -=  probabilityities[i];  [CE]  cannot  find  symbol  probabilityities  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  -=  probabilityities[i];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  -=  probabilityities[i];	  sum    -=    probabilities[i];    sum    -=    probabilities[i];    	non-compiled	[CE]  cannot  find  symbol  probabilityities	9	None	replace
121	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();	  RandomGenerator    <    T>    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	30	None	replace
122	[BUG]  [BUGGY]  sum  +=  probabilityities[i]  /  randomValue;  [CE]  cannot  find  symbol  probabilityities  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  probabilityities[i]  /  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  probabilityities[i]  /  randomValue;	  sum    +=    probabilities[i]    /    randomValue;    	non-compiled	[CE]  cannot  find  symbol  probabilityities	5	None	replace
123	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  probabilities[i  -  1];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum  +=  probabilities[i  -  1];	  sum    +=    randomValue    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	2	replace
124	[BUG]  [BUGGY]  sum  +=  probabilities[i  -  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  probabilities[i  -  1];  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  probabilities[i  -  1];	  sum    +=    randomValue    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	2	replace
125	[BUG]  [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  randomValue  +=  probabilities[i]  /  randomValue;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  probabilities[i]  /  randomValue;  randomValue  +=  probabilities[i]  /  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum    +=    probabilities[i]    /    randomValue;    randomValue  +=  probabilities[i]  /  randomValue;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	4	None	add
126	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i,  sample);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i,  sample);  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i,  sample);	  RandomGenerator    <    T>    randomGenerator    =    random.getGenerator(i);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	40	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  sum  +=  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum        +=        randomValue;        sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  sum  +=  randomValue;  }	  	compilable	  [FE]  AssertionError  	12	1	add
128	[BUG]  [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  sum  +=  randomValue;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  if(randomValue  >  0)  {  sum  +=  randomValue;  sum  +=  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        sum    +=    randomValue;    if(randomValue  >  0)  {  sum  +=  randomValue;  sum  +=  randomValue;  }	  	compilable	  [FE]  AssertionError  	12	1	add
129	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  if(randomValue  <  1)  {  sum  +=  randomValue;  sum  +=  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	sum        +=        randomValue;        sum    +=    randomValue;    if(randomValue  <  1)  {  sum  +=  randomValue;  sum  +=  randomValue;  }	  	compilable	  [FE]  AssertionError  	12	1	add
130	[BUG]  [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  if(randomValue  <  1)  {  sum  +=  randomValue;  sum  +=  randomValue;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum    +=    randomValue;    sum  +=  randomValue;  if(randomValue  <  1)  {  sum  +=  randomValue;  sum  +=  randomValue;  }  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum        +=        randomValue;        sum    +=    randomValue;    if(randomValue  <  1)  {  sum  +=  randomValue;  sum  +=  randomValue;  }	  	compilable	  [FE]  AssertionError  	12	1	add
131	[BUG]  [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  probabilityValue  +=  probabilityities[i]  *  randomValue;  [CE]  cannot  find  symbol  probabilityValue  [FE]        ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {      [BUGGY]  sum  +=  probabilities[i]  *  randomValue;  probabilityValue  +=  probabilityities[i]  *  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	sum  +=  probabilities[i]  *  randomValue;  probabilityValue  +=  probabilityities[i]  *  randomValue;	  sum    +=    probabilities[i]    *    randomValue;    randomValue    +=    probabilityities[i]    *    randomValue;    	non-compiled	[CE]  cannot  find  symbol  probabilityValue	37	None	replace
