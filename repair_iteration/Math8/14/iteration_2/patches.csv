bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  sample.getKey());  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  sample.getKey());  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  sample.getKey());	  RandomGenerator    rng    =    new    RandomGenerator(samples.get(0),    sample.getValue());    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	10	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  sample.getValue()  +  1);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  sample.getValue()  +  1);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  sample.getValue()  +  1);	  RandomGenerator    rng    =    new    RandomGenerator(samples.get(0),    sample.getValue());    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	10	None	replace
3	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  sample.getValue());  [CE]  cannot  find  symbol  sample  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  random  =  new  RandomGenerator(rng,  sample.getValue());  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  sample.getValue());	  random    =    new    RandomGenerator(rng,    rng.getValue());    	non-compiled	[CE]  cannot  find  symbol  sample	1	None	replace
4	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  rng.getKey());  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  random  =  new  RandomGenerator(rng,  rng.getKey());  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  rng.getKey());	  random    =    new    RandomGenerator(rng,    rng.getValue());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
5	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  samples,  Probabilities);  [CE]  cannot  find  symbol  Probabilities  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  random  =  new  RandomGenerator(rng,  samples,  Probabilities);  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  samples,  Probabilities);	  random    =    new    RandomGenerator(rng,    samples,    probs);    	non-compiled	[CE]  cannot  find  symbol  Probabilities	3	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  probs.size());  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  probs.size());  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  probs.size());	  RandomGenerator    rng    =    new    RandomGenerator(samples.get(0),    samples.size());    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	9	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  samples.size()  +  1);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  samples.size()  +  1);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  samples.size()  +  1);	  RandomGenerator    rng    =    new    RandomGenerator(samples.get(0),    samples.size());    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	9	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(0);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(0);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(0);	  RandomGenerator    rng    =(DynamicGenerator)this.selectedSegments.get(random);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	5	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.generateRandomGenerator());  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.generateRandomGenerator());  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.generateRandomGenerator());	  RandomGenerator    randomGenerator    =    rng.generateRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  sample.getValue());  [CE]  cannot  find  symbol  sample  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  sample.getValue());  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  random  =  new  RandomGenerator(rng,  sample.getValue());	  RandomGenerator    random    =    new    RandomGenerator(rng,    rng.getValue());    	non-compiled	[CE]  cannot  find  symbol  sample	2	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  rng.getKey());  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  rng.getKey());  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  random  =  new  RandomGenerator(rng,  rng.getKey());	  RandomGenerator    random    =    new    RandomGenerator(rng,    rng.getValue());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  samples,  probs);  [CE]  cannot  find  symbol  probs  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  samples,  probs);  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  random  =  new  RandomGenerator(rng,  samples,  probs);	  RandomGenerator    random    =    new    RandomGenerator(rng,    samples);    	non-compiled	[CE]  cannot  find  symbol  probs	8	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  samples,  probabilities);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  samples,  probabilities);  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  random  =  new  RandomGenerator(rng,  samples,  probabilities);	  RandomGenerator    random    =    new    RandomGenerator(rng,    samples);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	8	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(tests,  random);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(tests,  random);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(tests,  random);	  RandomGenerator    rng    =    new    RandomGenerator(tests);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	12	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(variable,  samples);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(variable,  samples);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(variable,  samples);	  RandomGenerator    rng    =(DynamicGenerator)this.selectedSegments.get(variable);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	6	None	replace
16	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  probs,  probabilities);  [CE]  cannot  find  symbol  probs  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  random  =  new  RandomGenerator(rng,  probs,  probabilities);  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  probs,  probabilities);	  random    =    new    RandomGenerator(rng,    samples,    probabilities);    	non-compiled	[CE]  cannot  find  symbol  probs	17	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  probs,  probabilities);  [CE]  cannot  find  symbol  probs  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  probs,  probabilities);  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  random  =  new  RandomGenerator(rng,  probs,  probabilities);	  random    =    new    RandomGenerator(rng,    samples,    probabilities);    	non-compiled	[CE]  cannot  find  symbol  probs	17	None	replace
18	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  probabilitys);  [CE]  cannot  find  symbol  probabilitys  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  random  =  new  RandomGenerator(rng,  probabilitys);  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  probabilitys);	  random    =    new    RandomGenerator(rng,    probs);    	non-compiled	[CE]  cannot  find  symbol  probabilitys	15	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  null);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  null);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  null);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator(null);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	7	None	replace
20	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  sample);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  sample);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  sample);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator(null);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	7	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  samples.get(1));  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  samples.get(1));  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  samples.get(1));	  RandomGenerator    rng    =    new    RandomGenerator(samples.get(0),    sample.getValue());    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	10	None	replace
22	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  probs);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  probs);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null,  probs);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator(null);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	7	None	replace
23	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  samples.size()  -  1);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  samples.size()  -  1);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  samples.size()  -  1);	  RandomGenerator    rng    =    new    RandomGenerator(samples.get(0),    samples.size());    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	9	None	replace
24	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  sample,  probs);  [CE]  cannot  find  symbol  sample  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  random  =  new  RandomGenerator(rng,  sample,  probs);  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  sample,  probs);	  random    =    new    RandomGenerator(rng,    samples,    probabilitys);    	non-compiled	[CE]  cannot  find  symbol  sample	4	None	replace
25	[BUG]  [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(random-1);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(random-1);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(random-1);	  RandomGenerator    rng    =(DynamicGenerator)this.selectedSegments.get(random);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	5	None	replace
26	[BUG]  [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(variable,  0);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(variable,  0);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(variable,  0);	  RandomGenerator    rng    =(DynamicGenerator)this.selectedSegments.get(variable);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	6	None	replace
27	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(tests.size());  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(tests.size());  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(tests.size());	  RandomGenerator    rng    =    new    RandomGenerator(samples.size()    -    1);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	13	None	replace
28	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(tests,  probs);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(tests,  probs);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(tests,  probs);	  RandomGenerator    rng    =    new    RandomGenerator(tests);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	12	None	replace
29	[BUG]  [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  probs);  [CE]  cannot  find  symbol  probs  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  probs);  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  random  =  new  RandomGenerator(rng,  probs);	  RandomGenerator    random    =    new    RandomGenerator(rng,    samples);    	non-compiled	[CE]  cannot  find  symbol  probs	8	None	replace
30	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  Arrays.asList(samples));  [CE]  cannot  find  symbol  Arrays  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  random  =  new  RandomGenerator(rng,  Arrays.asList(samples));  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  Arrays.asList(samples));	  random    =    new    RandomGenerator(rng,    rng.getValue());    	non-compiled	[CE]  cannot  find  symbol  Arrays	1	None	replace
31	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(random);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(random);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(random);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator(null);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	7	None	replace
32	[BUG]  [BUGGY]  randomGenerator  rng  =  new  RandomGenerator(samples.size());  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  randomGenerator  rng  =  new  RandomGenerator(samples.size());  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	randomGenerator  rng  =  new  RandomGenerator(samples.size());	  RandomGenerator    rng    =    new    RandomGenerator(samples.size()    +    1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
33	[BUG]  [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  samples,  probabilitys);  [CE]  cannot  find  symbol  probabilitys  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  samples,  probabilitys);  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  random  =  new  RandomGenerator(rng,  samples,  probabilitys);	  RandomGenerator    random    =    new    RandomGenerator(rng,    samples);    	non-compiled	[CE]  cannot  find  symbol  probabilitys	8	None	replace
34	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(samples.size());  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(samples.size());  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(samples.size());	  RandomGenerator    rng    =    new    RandomGenerator(samples.size()    -    1);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	13	None	replace
35	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  samples,  probableities);  [CE]  cannot  find  symbol  probableities  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  random  =  new  RandomGenerator(rng,  samples,  probableities);  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  samples,  probableities);	  random    =    new    RandomGenerator(rng,    samples,    probabilitys);    	non-compiled	[CE]  cannot  find  symbol  probableities	4	None	replace
36	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  probabilities);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  random  =  new  RandomGenerator(rng,  probabilities);  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  probabilities);	  random    =    new    RandomGenerator(rng,    probs);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	15	None	replace
37	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  rng,  randomGenerator.generateRandomGenerator();  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  randomGenerator  =  rng,  randomGenerator.generateRandomGenerator();  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  randomGenerator  =  rng,  randomGenerator.generateRandomGenerator();	  RandomGenerator    randomGenerator    =    rng.generateRandomGenerator();    	non-compiled	[CE]  ';'  expected	11	None	replace
38	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  probabilities,  samples);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  random  =  new  RandomGenerator(rng,  probabilities,  samples);  [BUGGY]        singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  probabilities,  samples);	  random    =    new    RandomGenerator(rng,    samples,    probabilities);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	17	None	replace
39	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  singletons.size());  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {      [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  singletons.size());  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  singletons.size());	  RandomGenerator    rng    =    new    RandomGenerator(samples.get(0),    samples.size());    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	9	None	replace
