bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] this(new Well19937c(), samples); [FE] ArrayStoreException testIssue942 [CONTEXT] public DiscreteDistribution(final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { [BUGGY] this(new Well19937c(), samples); [BUGGY] } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities RandomGenerator random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	69	69	1	replace	
2	[BUG] [BUGGY] [FE] ArrayStoreException testIssue942 [CONTEXT] public DiscreteDistribution(final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { [BUGGY] [BUGGY] this(new Well19937c(), samples); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities RandomGenerator random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	69	69	1	add	
3	[BUG] [BUGGY] } [FE] ArrayStoreException testIssue942 [CONTEXT] public DiscreteDistribution(final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { this(new Well19937c(), samples); [BUGGY] } [BUGGY]  [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities RandomGenerator random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	
4	[BUG] [BUGGY] [FE] ArrayStoreException testIssue942 [CONTEXT] public DiscreteDistribution(final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { this(new Well19937c(), samples); [BUGGY] [BUGGY] } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities RandomGenerator random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	add	
5	[BUG] [BUGGY] if (sampleSize <= 0) { [FE] ArrayStoreException testIssue942 [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { [BUGGY] if (sampleSize <= 0) { [BUGGY] throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { out[i] = sample(); }  [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	
6	[BUG] [BUGGY] [FE] ArrayStoreException testIssue942 [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { [BUGGY] [BUGGY] if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { out[i] = sample(); }  [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	add	
7	[BUG] [BUGGY] final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); [FE] ArrayStoreException testIssue942 [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } [BUGGY] final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); [BUGGY]  for (int i = 0; i < sampleSize; i++) { out[i] = sample(); } return out; } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	
8	[BUG] [BUGGY] [FE] ArrayStoreException testIssue942 [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } [BUGGY] [BUGGY] final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { out[i] = sample(); } return out; } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	add	
9	[BUG] [BUGGY] for (int i = 0; i < sampleSize; i++) { [FE] ArrayStoreException testIssue942 [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); [BUGGY] for (int i = 0; i < sampleSize; i++) { [BUGGY] out[i] = sample(); } return out; } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	
10	[BUG] [BUGGY] [FE] ArrayStoreException testIssue942 [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); [BUGGY] [BUGGY] for (int i = 0; i < sampleSize; i++) { out[i] = sample(); } return out; } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	add	
11	[BUG] [BUGGY] out[i] = sample(); [FE] ArrayStoreException testIssue942 [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { [BUGGY] out[i] = sample(); [BUGGY] } return out; } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	
12	[BUG] [BUGGY] [FE] ArrayStoreException testIssue942 [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { [BUGGY] [BUGGY] out[i] = sample(); } return out; } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	add	
13	[BUG] [BUGGY] final double randomValue = random.nextDouble(); [FE] ArrayStoreException testIssue942 [CONTEXT] public T sample() { [BUGGY] final double randomValue = random.nextDouble(); [BUGGY] double sum = 0; for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }   [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	
14	[BUG] [BUGGY] [FE] ArrayStoreException testIssue942 [CONTEXT] public T sample() { [BUGGY] [BUGGY] final double randomValue = random.nextDouble(); double sum = 0; for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }   [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	add	
15	[BUG] [BUGGY] double sum = 0; [FE] ArrayStoreException testIssue942 [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); [BUGGY] double sum = 0; [BUGGY]  for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }    [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	
16	[BUG] [BUGGY] [FE] ArrayStoreException testIssue942 [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); [BUGGY] [BUGGY] double sum = 0; for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }    [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	add	
17	[BUG] [BUGGY] for (int i = 0; i < probabilities.length; i++) { [FE] ArrayStoreException testIssue942 [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); double sum = 0; [BUGGY] for (int i = 0; i < probabilities.length; i++) { [BUGGY] sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }    return singletons.get(singletons.size() - 1); [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	
18	[BUG] [BUGGY] [FE] ArrayStoreException testIssue942 [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); double sum = 0; [BUGGY] [BUGGY] for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }    return singletons.get(singletons.size() - 1); [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	add	
19	[BUG] [BUGGY] sum += probabilities[i]; [FE] ArrayStoreException testIssue942 [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); double sum = 0; for (int i = 0; i < probabilities.length; i++) { [BUGGY] sum += probabilities[i]; [BUGGY] if (randomValue < sum) { return singletons.get(i); } }    return singletons.get(singletons.size() - 1); } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	
20	[BUG] [BUGGY] [FE] ArrayStoreException testIssue942 [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); double sum = 0; for (int i = 0; i < probabilities.length; i++) { [BUGGY] [BUGGY] sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }    return singletons.get(singletons.size() - 1); } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	
