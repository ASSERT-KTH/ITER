bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]    List  <  T>  singletons  =  Lists.newArrayList();  [CE]  cannot  find  symbol  Lists  [CONTEXT]  public  T  sample()  {  [BUGGY]    List  <  T>  singletons  =  Lists.newArrayList();  [BUGGY]  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	    List  <  T>  singletons  =  Lists.newArrayList();		non-compiled	[CE]  cannot  find  symbol  Lists	14	None	add
2	[BUG]  [BUGGY]    final  Double[]  probabilities  =  random.nextDouble();  [CE]  incompatible  types  [CONTEXT]  public  T  sample()  {  [BUGGY]    final  Double[]  probabilities  =  random.nextDouble();  [BUGGY]  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	    final  Double[]  probabilities  =  random.nextDouble();		non-compiled	[CE]  incompatible  types	14	None	add
3	[BUG]  [BUGGY]    List  <  T>  singletons  =  random.nextDouble();  [CE]  incompatible  types  [CONTEXT]  public  T  sample()  {  [BUGGY]    List  <  T>  singletons  =  random.nextDouble();  [BUGGY]  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	    List  <  T>  singletons  =  random.nextDouble();		non-compiled	[CE]  incompatible  types	14	None	add
4	[BUG]  [BUGGY]    RandomGenerator  random  =  new  DiscreteDistributionInstance();  [CE]  cannot  find  symbol  [CONTEXT]  public  T  sample()  {  [BUGGY]    RandomGenerator  random  =  new  DiscreteDistributionInstance();  [BUGGY]  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	    RandomGenerator  random  =  new  DiscreteDistributionInstance();		non-compiled	[CE]  cannot  find  symbol	14	None	add
5	[BUG]  [BUGGY]    RandomGenerator  random  =  new  DiscreteDistributionList();  [CE]  cannot  find  symbol  [CONTEXT]  public  T  sample()  {  [BUGGY]    RandomGenerator  random  =  new  DiscreteDistributionList();  [BUGGY]  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	    RandomGenerator  random  =  new  DiscreteDistributionList();		non-compiled	[CE]  cannot  find  symbol	14	None	add
11	[BUG]  [BUGGY]  return  randomGenerator.discreteDistribution(samples);  [CE]  illegal  start  of  expression  [CONTEXT]  public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);  [BUGGY]  return  randomGenerator.discreteDistribution(samples);  [BUGGY]    [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	return  randomGenerator.discreteDistribution(samples);	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  return  random.discreteDistribution(samples);  [CE]  illegal  start  of  expression  [CONTEXT]  public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);  [BUGGY]  return  random.discreteDistribution(samples);  [BUGGY]    [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	return  random.discreteDistribution(samples);	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  return  random.distribute(samples);  [CE]  illegal  start  of  expression  [CONTEXT]  public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);  [BUGGY]  return  random.distribute(samples);  [BUGGY]    [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	return  random.distribute(samples);	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  return  random.distribution(samples);  [CE]  illegal  start  of  expression  [CONTEXT]  public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);  [BUGGY]  return  random.distribution(samples);  [BUGGY]    [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	return  random.distribution(samples);	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [CONTEXT]  public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);  [BUGGY]    [BUGGY]    [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	  	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  final  T[]out  =(T[])singletons.get(0).getClass(),  sampleSize  +  1);  [CE]  ';'  expected  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]  final  T[]out  =(T[])singletons.get(0).getClass(),  sampleSize  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]out  =(T[])singletons.get(0).getClass(),  sampleSize  +  1);	final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  	non-compiled	[CE]  ';'  expected	7	None	replace
22	[BUG]  [BUGGY]  final  T[]out  =(T[])singletons.get(0).getClass(),  sampleSize  -  1);  [CE]  ';'  expected  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]  final  T[]out  =(T[])singletons.get(0).getClass(),  sampleSize  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]out  =(T[])singletons.get(0).getClass(),  sampleSize  -  1);	final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  	non-compiled	[CE]  ';'  expected	7	None	replace
23	[BUG]  [BUGGY]  final  T[]out  =(T[])this.singletons.get(0).getClass(),  sampleSize);  [CE]  ';'  expected  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]  final  T[]out  =(T[])this.singletons.get(0).getClass(),  sampleSize);  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]out  =(T[])this.singletons.get(0).getClass(),  sampleSize);	final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  	non-compiled	[CE]  ';'  expected	7	None	replace
24	[BUG]  [BUGGY]  final  T[]out  =(T[])singletons.get(0).getClass(),  sampleSize  /  2);  [CE]  ';'  expected  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]  final  T[]out  =(T[])singletons.get(0).getClass(),  sampleSize  /  2);  [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]out  =(T[])singletons.get(0).getClass(),  sampleSize  /  2);	final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  	non-compiled	[CE]  ';'  expected	7	None	replace
25	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  out  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  [BUGGY]    [BUGGY]    for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	  	final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  	non-compiled	[CE]  cannot  find  symbol  out	7	None	replace
31	[BUG]  [BUGGY]  this(new  Well19937(),  samples);  [CE]  cannot  find  symbol  [CONTEXT]  public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  [BUGGY]  this(new  Well19937(),  samples);  [BUGGY]  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	69	69	1	replace	this(new  Well19937(),  samples);	this(new  Well19937c(),  samples);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
32	[BUG]  [BUGGY]  this(new  Well19937D(),  samples);  [CE]  cannot  find  symbol  [CONTEXT]  public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  [BUGGY]  this(new  Well19937D(),  samples);  [BUGGY]  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	69	69	1	replace	this(new  Well19937D(),  samples);	this(new  Well19937c(),  samples);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
