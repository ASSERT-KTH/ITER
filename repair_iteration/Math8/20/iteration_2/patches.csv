bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs);  [CE]  <identifier>  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons,  probs);  [CE]  <identifier>  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons,  probs);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons,  probs);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey(),  probs);  [CE]  <identifier>  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey(),  probs);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey(),  probs);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getValue(),    probs);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
4	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  probs,  singletons);  [CE]  <identifier>  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  probs,  singletons);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  probs,  singletons);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getValue(),    probs);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(sample.getSize());  [CE]  >  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(sample.getSize());  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(sample.getSize());	  RandomGenerator    <    Pair    <    T,    Double>    probs    =    new    RandomGenerator    <    Pair    <    T,    Double>(sample.getKey());    	non-compiled	[CE]  >  expected	15	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs,  sample);  [CE]  <identifier>  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(probs,  sample);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(probs,  sample);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample,    probs);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng,  probs);  [CE]  <identifier>  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng,  probs);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng,  probs);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample,    probs);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(sample.getValue());  [CE]  >  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(sample.getValue());  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(sample.getValue());	  RandomGenerator    <    Pair    <    T,    Double>    sample    =    singletons.get(sample);    	non-compiled	[CE]  >  expected	17	None	replace
9	[BUG]  [BUGGY]  If  (sample.getValue()!=  null)  {  [CE]  ';'  expected  [FE]            NotPositiveException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  If  (sample.getValue()!=  null)  {  [BUGGY]      throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	If  (sample.getValue()!=  null)  {	  if    (sample.getValue()!=    null)    {    If    (sample.getValue()!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
10	[BUG]  [BUGGY]  If  (sample.getValue()  ==  null)  {  [CE]  ';'  expected  [FE]              NotPositiveException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  If  (sample.getValue()  ==  null)  {  [BUGGY]      throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	If  (sample.getValue()  ==  null)  {	  if    (sample.getValue()!=    null)    {    If    (sample.getValue()!=    null)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  sample.generateValueGenerator();  [CE]  <identifier>  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  sample.generateValueGenerator();  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  sample.generateValueGenerator();	  RandomGenerator    randomGenerator    =    rng.generateValueGenerator();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateDistribution();  [CE]  <identifier>  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateDistribution();  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  rng.generateDistribution();	  RandomGenerator    randomGenerator    =    rng.generateValueGenerator();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRandomGenerator());  [CE]  <identifier>  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRandomGenerator());  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRandomGenerator());	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getRandomGenerator());    	non-compiled	[CE]  <identifier>  expected	22	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(suffix.size());  [CE]  >  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(suffix.size());  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(suffix.size());	  RandomGenerator    <    Pair    <    T,    Double>    probs    =    new    RandomGenerator    <    Pair    <    T,    Double>(singletons.size()    -    1);    	non-compiled	[CE]  >  expected	4	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  sample.getRandomGenerator();  [CE]  <identifier>  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  <  T>  random  =  sample.getRandomGenerator();  [BUGGY]      throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  T>  random  =  sample.getRandomGenerator();	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRange());  [CE]  <identifier>  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRange());  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRange());	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getKey());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  sample.getRandomGenerator();  [CE]  <identifier>  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  sample.getRandomGenerator();  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  sample.getRandomGenerator();	  RandomGenerator    randomGenerator    =    sample.getValueGenerator();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey(),  rng);  [CE]  <identifier>  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey(),  rng);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey(),  rng);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getValue(),    rng);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
19	[BUG]  [BUGGY]  random  =  sample.nextDouble();  [CE]  <identifier>  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  random  =  sample.nextDouble();  [BUGGY]      throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	random  =  sample.nextDouble();	  random    =    random.nextDouble();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
20	[BUG]  [BUGGY]  random  =  singletons.nextDouble();  [CE]  <identifier>  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  random  =  singletons.nextDouble();  [BUGGY]      throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	random  =  singletons.nextDouble();	  random    =    random.nextDouble();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton);  [CE]  <identifier>  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(rng);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generateValueGenerator();  [CE]  <identifier>  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  random.generateValueGenerator();  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  random.generateValueGenerator();	  RandomGenerator    randomGenerator    =    rng.generateValueGenerator();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
23	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateValueGenerator(sample);  [CE]  <identifier>  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateValueGenerator(sample);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  rng.generateValueGenerator(sample);	  RandomGenerator    randomGenerator    =    rng.generateValueGenerator();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
24	[BUG]  [BUGGY]  [FE]  NotPositiveException  [FE]          NotPositiveException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  if(sample!=  null)  {  [BUGGY]      throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	add	if(sample!=  null)  {	  if    (sample.getValue()!=    null)    {    if    (sample.getValue()    ==    null)    {    	compilable	  [FE]  NotPositiveException  	10	13	replace
25	[BUG]  [BUGGY]  if(sample!=  null)  {  [FE]  NotPositiveException  [FE]          NotPositiveException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  if(sample!=  null)  {  [BUGGY]      throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	if(sample!=  null)  {	  if    (sample.getValue()!=    null)    {    if    (sample.getValue()    ==    null)    {    	compilable	  [FE]  NotPositiveException  	10	13	replace
26	[BUG]  [BUGGY]  random  =  rng.nextDouble();  [CE]  <identifier>  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  random  =  rng.nextDouble();  [BUGGY]      throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	random  =  rng.nextDouble();	  random    =    random.nextDouble();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
27	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.getRandomGenerator(i);  [CE]  <identifier>  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  random.getRandomGenerator(i);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  random.getRandomGenerator(i);	  RandomGenerator    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
28	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRandomGenerator(),  probs);  [CE]  <identifier>  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRandomGenerator(),  probs);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRandomGenerator(),  probs);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getRandomGenerator());    	non-compiled	[CE]  <identifier>  expected	22	None	replace
29	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(sample.getLongValue());  [CE]  >  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(sample.getLongValue());  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(sample.getLongValue());	  RandomGenerator    <    Pair    <    T,    Double>    probs    =    new    RandomGenerator    <    Pair    <    T,    Double>(sample.getKey());    	non-compiled	[CE]  >  expected	15	None	replace
30	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  samples.get(i  +  1);  [CE]  >  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  samples.get(i  +  1);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  samples.get(i  +  1);	  RandomGenerator    <    Pair    <    T,    Double>    sample    =    samples.get(i);    	non-compiled	[CE]  >  expected	16	None	replace
31	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(selects.size());  [CE]  >  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(selects.size());  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(selects.size());	  RandomGenerator    <    Pair    <    T,    Double>    probs    =    new    RandomGenerator    <    Pair    <    T,    Double>(singletons.size()    +    1);    	non-compiled	[CE]  >  expected	5	None	replace
32	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  probs,  rng);  [CE]  <identifier>  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  probs,  rng);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  probs,  rng);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getValue(),    probs);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
33	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRandomGenerator(),  rng);  [CE]  <identifier>  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRandomGenerator(),  rng);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRandomGenerator(),  rng);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getRandomGenerator());    	non-compiled	[CE]  <identifier>  expected	22	None	replace
34	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRandomGenerator(),  singletons);  [CE]  <identifier>  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRandomGenerator(),  singletons);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRandomGenerator(),  singletons);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getRandomGenerator());    	non-compiled	[CE]  <identifier>  expected	22	None	replace
35	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(tests.size());  [CE]  >  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(tests.size());  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(tests.size());	  RandomGenerator    <    Pair    <    T,    Double>    probs    =    new    RandomGenerator    <    Pair    <    T,    Double>(singletons.size()    -    1);    	non-compiled	[CE]  >  expected	4	None	replace
36	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(seletons.size());  [CE]  >  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(seletons.size());  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(seletons.size());	  RandomGenerator    <    Pair    <    T,    Double>    probs    =    new    RandomGenerator    <    Pair    <    T,    Double>(singletons.size()    +    1);    	non-compiled	[CE]  >  expected	5	None	replace
37	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.getRandomGenerator(rng);  [CE]  <identifier>  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  randomGenerator  =  random.getRandomGenerator(rng);  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  random.getRandomGenerator(rng);	  RandomGenerator    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
38	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(sample.getProbability());  [CE]  >  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(sample.getProbability());  [BUGGY]      if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(sample.getProbability());	  RandomGenerator    <    Pair    <    T,    Double>    probs    =    new    RandomGenerator    <    Pair    <    T,    Double>(sample.getKey());    	non-compiled	[CE]  >  expected	15	None	replace
