projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95if(sample.getValue()<0){
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95if(sample.getValue()!=null){
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95if(sample.getValue()==null){
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGenerator<Pair<T,Double>sample=singletons.get(i);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGenerator<Pair<T,Double>probs=newRandomGenerator<Pair<T,Double>(sample.getValue());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGenerator<Pair<T,Double>probs=newRandomGenerator<Pair<T,Double>(singletons.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=rng.getRandomGenerator();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=rng.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=newRandomGenerator(sample);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=rng.getValueGenerator();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=newRandomGenerator(sample.getValue());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=random.getRandomGenerator();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=newRandomGenerator(singletons);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=newRandomGenerator(rng);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGenerator<Pair<T,Double>probs=newRandomGenerator<Pair<T,Double>(singletons.size()-1);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGenerator<Pair<T,Double>probs=newRandomGenerator<Pair<T,Double>(singletons.size()+1);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95if(sample.getValue()==null){if(sample.getValue()==null){
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95if(sample.getValue()==null){if(sample.getValue()!=null){
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95if(sample.getValue()==null){If(sample.getValue()==null){
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95if(sample.getValue()!=null){if(sample.getValue()!=null){
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95if(sample.getValue()!=null){if(sample.getValue()==null){
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95if(sample.getValue()!=null){If(sample.getValue()!=null){
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=newRandomGenerator(sample.getValue(),probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=newRandomGenerator(sample.getKey());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGenerator<T>random=rng.getRandomGenerator();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGenerator<Pair<T,Double>probs=newRandomGenerator<Pair<T,Double>(sample.getKey());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGenerator<Pair<T,Double>sample=samples.get(i);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGenerator<Pair<T,Double>sample=singletons.get(sample);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=newRandomGenerator(sample,probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=sample.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=sample.getValueGenerator();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=newRandomGenerator(sample.getValue(),rng);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=newRandomGenerator(sample.getRandomGenerator());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95random=random.nextDouble();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java95RandomGeneratorrandomGenerator=rng.generateValueGenerator();
