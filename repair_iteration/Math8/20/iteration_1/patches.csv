bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.getRandomGenerator();  [CE]  <identifier>  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  randomGenerator  =  random.getRandomGenerator();  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  random.getRandomGenerator();	      RandomGenerator    randomGenerator    =    rng.getRandomGenerator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons);  [CE]  <identifier>  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(sample);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
3	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng);  [CE]  <identifier>  expected  [FE]              ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(sample);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
4	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(singletons.size()  -  1);  [CE]  >  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(singletons.size()  -  1);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(singletons.size()  -  1);	      RandomGenerator    <    Pair    <    T,    Double>    probs    =    new    RandomGenerator    <    Pair    <    T,    Double>(singletons.size());    	non-compiled	[CE]  >  expected	8	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(singletons.size()  +  1);  [CE]  >  expected  [FE]              ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(singletons.size()  +  1);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(singletons.size()  +  1);	      RandomGenerator    <    Pair    <    T,    Double>    probs    =    new    RandomGenerator    <    Pair    <    T,    Double>(singletons.size());    	non-compiled	[CE]  >  expected	8	None	replace
6	[BUG]  [BUGGY]  if  (sample.getValue()  ==  null)  {  if  (sample.getValue()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  if  (sample.getValue()  ==  null)  {  if  (sample.getValue()  ==  null)  {  [BUGGY]    throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	if    (sample.getValue()    ==    null)    {    if  (sample.getValue()  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
7	[BUG]  [BUGGY]  if  (sample.getValue()  ==  null)  {  if  (sample.getValue()!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  if  (sample.getValue()  ==  null)  {  if  (sample.getValue()!=  null)  {  [BUGGY]    throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	if    (sample.getValue()    ==    null)    {    if  (sample.getValue()!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
8	[BUG]  [BUGGY]  if  (sample.getValue()  ==  null)  {  If  (sample.getValue()  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  if  (sample.getValue()  ==  null)  {  If  (sample.getValue()  ==  null)  {  [BUGGY]    throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	if    (sample.getValue()    ==    null)    {    If  (sample.getValue()  ==  null)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
9	[BUG]  [BUGGY]  if  (sample.getValue()!=  null)  {  if  (sample.getValue()!=  null)  {  [CE]  illegal  start  of  expression  [FE]    NotPositiveException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  if  (sample.getValue()!=  null)  {  if  (sample.getValue()!=  null)  {  [BUGGY]    throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	if    (sample.getValue()!=    null)    {    if  (sample.getValue()!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
10	[BUG]  [BUGGY]  if  (sample.getValue()!=  null)  {  if  (sample.getValue()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      NotPositiveException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  if  (sample.getValue()!=  null)  {  if  (sample.getValue()  ==  null)  {  [BUGGY]    throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	if    (sample.getValue()!=    null)    {    if  (sample.getValue()  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
11	[BUG]  [BUGGY]  if  (sample.getValue()!=  null)  {  If  (sample.getValue()!=  null)  {  [CE]  ';'  expected  [FE]        NotPositiveException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  if  (sample.getValue()!=  null)  {  If  (sample.getValue()!=  null)  {  [BUGGY]    throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	if    (sample.getValue()!=    null)    {    If  (sample.getValue()!=  null)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
12	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  probs);  [CE]  <identifier>  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  probs);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  probs);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getValue());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey());  [CE]  <identifier>  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey());  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey());	      RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getValue());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator();  [CE]  <identifier>  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator();  [BUGGY]    throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(sample.getKey());  [CE]  >  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(sample.getKey());  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  probs  =  new  RandomGenerator  <  Pair  <  T,  Double>(sample.getKey());	      RandomGenerator    <    Pair    <    T,    Double>    probs    =    new    RandomGenerator    <    Pair    <    T,    Double>(sample.getValue());    	non-compiled	[CE]  >  expected	7	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  samples.get(i);  [CE]  >  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  samples.get(i);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  samples.get(i);	      RandomGenerator    <    Pair    <    T,    Double>    sample    =    singletons.get(i);    	non-compiled	[CE]  >  expected	6	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(sample);  [CE]  >  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(sample);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(sample);	      RandomGenerator    <    Pair    <    T,    Double>    sample    =    singletons.get(i);    	non-compiled	[CE]  >  expected	6	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample,  probs);  [CE]  <identifier>  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample,  probs);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample,  probs);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(sample);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  sample.getValue();  [CE]  <identifier>  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  randomGenerator  =  sample.getValue();  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  sample.getValue();	      RandomGenerator    randomGenerator    =    rng.getValue();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
20	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  sample.getValueGenerator();  [CE]  <identifier>  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  randomGenerator  =  sample.getValueGenerator();  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  sample.getValueGenerator();	      RandomGenerator    randomGenerator    =    rng.getValueGenerator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  rng);  [CE]  <identifier>  expected  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  rng);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  rng);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getValue());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
22	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRandomGenerator());  [CE]  <identifier>  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRandomGenerator());  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getRandomGenerator());	      RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getValue());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
23	[BUG]  [BUGGY]  random  =  random.nextDouble();  [CE]  <identifier>  expected  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  random  =  random.nextDouble();  [BUGGY]    throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	random  =  random.nextDouble();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateValueGenerator();  [CE]  <identifier>  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());    [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateValueGenerator();  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	RandomGenerator  randomGenerator  =  rng.generateValueGenerator();	      RandomGenerator    randomGenerator    =    rng.getValueGenerator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
