bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  getRandomGenerator(random);  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  getRandomGenerator(random);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  getRandomGenerator(random);	  RandomGenerator    randomGenerator    =    getRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  getGenerator(rng);  [CE]  cannot  find  symbol  rng  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  getGenerator(rng);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  getGenerator(rng);	  RandomGenerator    randomGenerator    =    getGenerator(strategy);    	non-compiled	[CE]  cannot  find  symbol  rng	18	None	replace
3	[BUG]  [BUGGY]  static  final  double  randomValue  =  random.nextDouble()  +  1;  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  static  final  double  randomValue  =  random.nextDouble()  +  1;  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	static  final  double  randomValue  =  random.nextDouble()  +  1;	  static    final    double    randomValue    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
4	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  final  Double  randomValue  =  random.nextDouble();  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	add	final  Double  randomValue  =  random.nextDouble();	  final    double    randomValue    =    random.nextDouble()    +    1;    final    Double    randomValue    =    random.nextDouble()    +    1;    	compilable	  [FE]  ArrayStoreException  	6	1	replace
5	[BUG]  [BUGGY]  final  Double  randomValue  =  random.nextDouble();  [FE]  ArrayStoreException  [FE]          ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  final  Double  randomValue  =  random.nextDouble();  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	final  Double  randomValue  =  random.nextDouble();	  final    double    randomValue    =    random.nextDouble()    +    1;    final    Double    randomValue    =    random.nextDouble()    +    1;    	compilable	  [FE]  ArrayStoreException  	6	1	replace
6	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this,  sample,  rng);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this,  sample,  rng);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this,  sample,  rng);	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(this,    sample);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	9	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this,  sample,  probs);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                  ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this,  sample,  probs);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this,  sample,  probs);	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(this,    sample);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	9	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(str,  sample);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(str,  sample);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  getGenerator(str,  sample);	  RandomGenerator    <    T>    randomGenerator    =    getGenerator(str);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	13	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(str,  sample);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(str,  sample);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(str,  sample);	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(str);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	14	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(suffix);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                  ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(suffix);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(suffix);	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(str);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	14	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(rng,  sample);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(rng,  sample);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  getGenerator(rng,  sample);	  RandomGenerator    <    T>    randomGenerator    =    getGenerator(rng);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	11	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(rng,  samples);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(rng,  samples);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  getGenerator(rng,  samples);	  RandomGenerator    <    T>    randomGenerator    =    getGenerator(rng);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	11	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextSample();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextSample();  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextSample();	  RandomGenerator    <    T>    randomGenerator    =    random.nextGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	15	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng);  [CE]  cannot  find  symbol  rng  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample);    	non-compiled	[CE]  cannot  find  symbol  rng	8	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleThan);  [CE]  cannot  find  symbol  singleThan  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleThan);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singleThan);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(sample);    	non-compiled	[CE]  cannot  find  symbol  singleThan	8	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  probs);  [CE]  cannot  find  symbol  probs  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  probs);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  probs);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(this,    samples);    	non-compiled	[CE]  cannot  find  symbol  probs	4	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();	  RandomGenerator    <    T>    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	2	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(strategy,  sample);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(strategy,  sample);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  getGenerator(strategy,  sample);	  RandomGenerator    <    T>    randomGenerator    =    getGenerator(strategy);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	19	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(strategy,  sample);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                  ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(strategy,  sample);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(strategy,  sample);	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(strategy);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	10	None	replace
20	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(sample);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                    ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(sample);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(sample);	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(strategy);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	10	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(suffix);  [CE]  cannot  find  symbol  suffix  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(suffix);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(suffix);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(samples);    	non-compiled	[CE]  cannot  find  symbol  suffix	16	None	replace
22	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleNulls);  [CE]  cannot  find  symbol  singleNulls  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleNulls);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singleNulls);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(samples);    	non-compiled	[CE]  cannot  find  symbol  singleNulls	16	None	replace
23	[BUG]  [BUGGY]  final  double  randomValue  =  random.getDouble();  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  final  double  randomValue  =  random.getDouble();  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	final  double  randomValue  =  random.getDouble();	  final    double    randomValue    =    random.nextDouble()    +    1;    final    double    randomValue    =    random.getDouble()    +    1;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
24	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  sampling);  [CE]  cannot  find  symbol  sampling  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  sampling);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  sampling);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(this,    sample);    	non-compiled	[CE]  cannot  find  symbol  sampling	3	None	replace
25	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton);  [CE]  cannot  find  symbol  singleton  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(samples);    	non-compiled	[CE]  cannot  find  symbol  singleton	16	None	replace
26	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleSegments);  [CE]  cannot  find  symbol  singleSegments  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleSegments);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singleSegments);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(samples);    	non-compiled	[CE]  cannot  find  symbol  singleSegments	16	None	replace
27	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator(0);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator(0);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator(0);	  RandomGenerator    <    T>    randomGenerator    =    random.nextGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	15	None	replace
28	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(strategy,  probs);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                  ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(strategy,  probs);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(strategy,  probs);	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(strategy);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	10	None	replace
29	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  rng);  [CE]  cannot  find  symbol  rng  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  rng);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  rng);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(this,    sample);    	non-compiled	[CE]  cannot  find  symbol  rng	3	None	replace
30	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(strategy,  probs);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(strategy,  probs);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  getGenerator(strategy,  probs);	  RandomGenerator    <    T>    randomGenerator    =    getGenerator(strategy);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	19	None	replace
31	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(str,  probs);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(str,  probs);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(str,  probs);	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(str);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	14	None	replace
32	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(rng,  probs);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(rng,  probs);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  getGenerator(rng,  probs);	  RandomGenerator    <    T>    randomGenerator    =    getGenerator(rng);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	11	None	replace
33	[BUG]  [BUGGY]  static  final  double  randomValue  =  randomGenerator.nextDouble();  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  static  final  double  randomValue  =  randomGenerator.nextDouble();  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	static  final  double  randomValue  =  randomGenerator.nextDouble();	  static    final    double    randomValue    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
34	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.next();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.next();  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.next();	  RandomGenerator    <    T>    randomGenerator    =    random.nextGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	15	None	replace
35	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this,  sample,  this);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this,  sample,  this);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this,  sample,  this);	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(this,    sample);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	9	None	replace
36	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(str.nextDouble());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(str.nextDouble());  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(str.nextDouble());	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(str);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	14	None	replace
37	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  singletons);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  singletons);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  singletons);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(this,    samples);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	4	None	replace
38	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  sampleRandom);  [CE]  cannot  find  symbol  sampleRandom  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  sampleRandom);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  sampleRandom);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(this,    sample);    	non-compiled	[CE]  cannot  find  symbol  sampleRandom	3	None	replace
39	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(strategy,  sampling);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                  ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(strategy,  sampling);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(strategy,  sampling);	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(strategy);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	10	None	replace
40	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(random);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(random);  [BUGGY]      final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  getGenerator(random);	  RandomGenerator    <    T>    randomGenerator    =    getGenerator(rng);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	11	None	replace
