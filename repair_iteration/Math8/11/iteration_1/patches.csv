bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum;  [CE]  illegal  start  of  type  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum;	      RandomGenerator    <    T>    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generator();  [CE]  illegal  start  of  type  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  RandomGenerator  randomGenerator  =  random.generator();  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  =  random.generator();	      RandomGenerator    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  randomValue  +=  sum.doubleValue();  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  randomValue  +=  sum.doubleValue();  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	randomValue  +=  sum.doubleValue();	      randomValue    +=    randomValue.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  +=  randomValue.doubleValue();  [CE]  ';'  expected  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  RandomGenerator  randomGenerator  +=  randomValue.doubleValue();  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  +=  randomValue.doubleValue();	      randomValue    +=    randomValue.doubleValue();    	non-compiled	[CE]  ';'  expected	6	None	replace
5	[BUG]  [BUGGY]  if(sum  <  =  randomValue)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  if(sum  <  =  randomValue)  {  [BUGGY]    return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  <  =  randomValue)  {	  if(sum    <    randomValue)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      AssertionError    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  if(sum  >  randomValue)  {  [BUGGY]    return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	add	if(sum  >  randomValue)  {	  if(sum    <    randomValue)    {    	compilable	  [FE]  ArrayStoreException  	5	1	replace
7	[BUG]  [BUGGY]  if(sum  >  randomValue)  {  [FE]  ArrayStoreException  [FE]      AssertionError    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  if(sum  >  randomValue)  {  [BUGGY]    return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  >  randomValue)  {	  if(sum    <    randomValue)    {    	compilable	  [FE]  ArrayStoreException  	5	1	replace
8	[BUG]  [BUGGY]  randomValue  =  sum.nextDouble();  [CE]  illegal  start  of  type  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  randomValue  =  sum.nextDouble();  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	randomValue  =  sum.nextDouble();	      randomValue    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  randomValue  =  sum  +  random.nextDouble();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  randomValue  =  sum  +  random.nextDouble();  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	randomValue  =  sum  +  random.nextDouble();	      randomValue    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum;  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble(),  sum;	      RandomGenerator    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  if(sum  <  randomValue)  {  if(sum  <  randomValue)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  if(sum  <  randomValue)  {  if(sum  <  randomValue)  {  [BUGGY]    return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum    <    randomValue)    {    if(sum  <  randomValue)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
12	[BUG]  [BUGGY]  if(sum  <  randomValue)  {  If(sum  <  randomValue)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  if(sum  <  randomValue)  {  If(sum  <  randomValue)  {  [BUGGY]    return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum    <    randomValue)    {    If(sum  <  randomValue)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
13	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator();  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator();  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator();	      RandomGenerator    <    T>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum;  [CE]  illegal  start  of  type  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum;	      RandomGenerator    <    T>    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  randomValue  +=  Sum.doubleValue();  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  randomValue  +=  Sum.doubleValue();  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	randomValue  +=  Sum.doubleValue();	      randomValue    +=    randomValue.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue.doubleValue())  {  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue.doubleValue())  {  [BUGGY]    return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  <  randomValue  ||  sum  >  randomValue.doubleValue())  {	  if(sum    <    randomValue)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i);  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i);  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i);	      RandomGenerator    <    T>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  +  sum;  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  +  sum;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble()  +  sum;	      RandomGenerator    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator();  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator();  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator();	      RandomGenerator    <    T>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  -  sum;  [CE]  illegal  start  of  type  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  -  sum;  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  -  sum;	      RandomGenerator    <    T>    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum);  [CE]  ';'  expected  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum);  [BUGGY]    if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble(),  sum);	      RandomGenerator    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  ';'  expected	8	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue)  {  [BUGGY]    return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	add	if(sum  <  randomValue  ||  sum  >  randomValue)  {	  if(sum    <    randomValue)    {    	compilable	  [FE]  AssertionError  	5	1	replace
23	[BUG]  [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];    [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue)  {  [BUGGY]    return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  <  randomValue  ||  sum  >  randomValue)  {	  if(sum    <    randomValue)    {    	compilable	  [FE]  AssertionError  	5	1	replace
