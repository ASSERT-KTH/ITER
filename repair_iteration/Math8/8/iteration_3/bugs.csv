bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  this.randomGenerator.generator();  [CE]  cannot  find  symbol  randomGenerator  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  randomGenerator  =  this.randomGenerator.generator();  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  randomGenerator  =  this.randomGenerator.generator();	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	5	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generateRandomGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generateRandomGenerator();  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.generateRandomGenerator();	  RandomGenerator    <    T>    randomGenerator    =    random.generator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	11	None	replace
3	[BUG]  [BUGGY]  Double  sum  =  random.doubleValue();  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  Double  sum  =  random.doubleValue();  [BUGGY]        for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	Double  sum  =  random.doubleValue();	  Double    sum    =    randomValue.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
4	[BUG]  [BUGGY]  RandomGenerator  <  DiscreteDistribution>  randomGenerator  =  random.getRandomGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  <  DiscreteDistribution>  randomGenerator  =  random.getRandomGenerator();  [BUGGY]        for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  <  DiscreteDistribution>  randomGenerator  =  random.getRandomGenerator();	  RandomGenerator    <    DiscreteDistribution>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	10	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  /  randomValue;  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  /  randomValue;  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  /  randomValue;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    -    randomValue;    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	9	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  *  randomValue;  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                  ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  *  randomValue;  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  *  randomValue;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    -    randomValue;    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	9	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  rng  =  random.generator();  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  rng  =  random.generator();  [BUGGY]        for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  rng  =  random.generator();	  RandomGenerator    rng    =    random.getGenerator();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  1;  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  1;  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  1;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    -    1;    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	4	None	replace
9	[BUG]  [BUGGY]  randomValue  =  rng.nextDouble();  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  randomValue  =  rng.nextDouble();  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	randomValue  =  rng.nextDouble();	  randomValue    =    randomGenerator.nextDouble();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	2	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();	  RandomGenerator    <    T>    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	1	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  randomFactory.generator();  [CE]  cannot  find  symbol  randomFactory  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  randomGenerator  =  randomFactory.generator();  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  randomGenerator  =  randomFactory.generator();	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  cannot  find  symbol  randomFactory	5	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  <  DiscreteDistribution>  randomGenerator  =  random.nextGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  <  DiscreteDistribution>  randomGenerator  =  random.nextGenerator();  [BUGGY]        for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  <  DiscreteDistribution>  randomGenerator  =  random.nextGenerator();	  RandomGenerator    <    DiscreteDistribution>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	10	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generator(rng);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generator(rng);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.generator(rng);	  RandomGenerator    <    T>    randomGenerator    =    random.generator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	11	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator(randomValue);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator(randomValue);  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator(randomValue);	  RandomGenerator    <    T>    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	1	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generateValue();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generateValue();  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.generateValue();	  RandomGenerator    <    T>    randomGenerator    =    random.generator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	11	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  randomgenerator.generator();  [CE]  cannot  find  symbol  randomgenerator  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  randomGenerator  =  randomgenerator.generator();  [BUGGY]      double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  randomGenerator  =  randomgenerator.generator();	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  cannot  find  symbol  randomgenerator	5	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  <  DiscreteDistribution>  randomGenerator  =  random.generator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();      [BUGGY]  RandomGenerator  <  DiscreteDistribution>  randomGenerator  =  random.generator();  [BUGGY]        for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	RandomGenerator  <  DiscreteDistribution>  randomGenerator  =  random.generator();	  RandomGenerator    <    DiscreteDistribution>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	10	None	replace
