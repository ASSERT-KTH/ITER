bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  probabilities.length  -  1;  i++)  {  for(int  i  =  0;  i  <  probabilities.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  probabilities.length  -  1;  i++)  {  for(int  i  =  0;  i  <  probabilities.length  -  1;  i++)  {  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	for(int    i    =    0;    i    <    probabilities.length    -    1;    i++)    {    for(int  i  =  0;  i  <  probabilities.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  probabilities.length  -  1;  i++)  {  for(int  i  =  0;  i  <  probabilityities.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]      ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  probabilities.length  -  1;  i++)  {  for(int  i  =  0;  i  <  probabilityities.length  -  1;  i++)  {  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	for(int    i    =    0;    i    <    probabilities.length    -    1;    i++)    {    for(int  i  =  0;  i  <  probabilityities.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  probabilities.length  -  1;  i++)  {  for(int  i  =  0;  i  <  probability.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  probabilities.length  -  1;  i++)  {  for(int  i  =  0;  i  <  probability.length  -  1;  i++)  {  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	for(int    i    =    0;    i    <    probabilities.length    -    1;    i++)    {    for(int  i  =  0;  i  <  probability.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  randomValue.length  -  1;  i++)  {  [CE]  double  cannot  be  dereferenced  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  randomValue.length  -  1;  i++)  {  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	for(int  i  =  0;  i  <  randomValue.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    probabilities.length    -    1;    i++)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum;  [CE]  illegal  start  of  type  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum;  [BUGGY]    for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum;	      RandomGenerator    <    T>    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator();  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator();  [BUGGY]    for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator();	      RandomGenerator    <    T>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.length;  i++)  {  [CE]  cannot  find  symbol  samples  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  for(int  i  =  0;  i  <  samples.length;  i++)  {  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	for(int  i  =  0;  i  <  samples.length;  i++)  {	  for(int    i    =    0;    i    <    randomValue.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  samples	1	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generator();  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  RandomGenerator  randomGenerator  =  random.generator();  [BUGGY]    for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  randomGenerator  =  random.generator();	      RandomGenerator    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  randomValue  =  sum.nextDouble();  [CE]  illegal  start  of  type  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  randomValue  =  sum.nextDouble();  [BUGGY]    for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	randomValue  =  sum.nextDouble();	      randomValue    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  randomValue  =  rng.nextDouble();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  randomValue  =  rng.nextDouble();  [BUGGY]    for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	randomValue  =  rng.nextDouble();	      randomValue    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  <?>  randomGenerator  =  random.getRandomGenerator();  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  RandomGenerator  <?>  randomGenerator  =  random.getRandomGenerator();  [BUGGY]    for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <?>  randomGenerator  =  random.getRandomGenerator();	      RandomGenerator    <?>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  <?>  randomGenerator  =  random.nextGenerator();  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  RandomGenerator  <?>  randomGenerator  =  random.nextGenerator();  [BUGGY]    for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <?>  randomGenerator  =  random.nextGenerator();	      RandomGenerator    <?>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  int  probs  =  randomValue.doubleValue();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  int  probs  =  randomValue.doubleValue();  [BUGGY]    sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	int  probs  =  randomValue.doubleValue();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  randomValue  =  randomGenerator.nextDouble();  [CE]  illegal  start  of  type  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  randomValue  =  randomGenerator.nextDouble();  [BUGGY]    for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	randomValue  =  randomGenerator.nextDouble();	      randomValue    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum;  [CE]  illegal  start  of  type  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum;  [BUGGY]    for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum;	      RandomGenerator    <    T>    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generator();  [CE]  illegal  start  of  type  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generator();  [BUGGY]    for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.generator();	      RandomGenerator    <    T>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.next();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.next();  [BUGGY]    for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.next();	      RandomGenerator    <    T>    randomGenerator    =    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
