bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.singletons  =  Double.valueOf(singletons,  randomGenerator).doubleValue();  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);    [BUGGY]  this.singletons  =  Double.valueOf(singletons,  randomGenerator).doubleValue();  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	this.singletons  =  Double.valueOf(singletons,  randomGenerator).doubleValue();	      this.singletons    =    Double.valueOf(singletons).doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  this.singletons  =  Double.parseDouble(singletons)+  1;  [CE]  illegal  start  of  expression  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);    [BUGGY]  this.singletons  =  Double.parseDouble(singletons)+  1;  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	this.singletons  =  Double.parseDouble(singletons)+  1;	  this.singletons    =    Double.parseDouble(singletons);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  this.singletontons  =  new  double[SingletonGenerator.nextDouble()  +  1];  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);    [BUGGY]  this.singletontons  =  new  double[SingletonGenerator.nextDouble()  +  1];  [BUGGY]    }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	this.singletontons  =  new  double[SingletonGenerator.nextDouble()  +  1];	      this.singletontons    =    new    double[SingletonGenerator.nextDouble()];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
4	[BUG]  [BUGGY]  this.singletontons  =  Lists.newArrayList();  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);    [BUGGY]  this.singletontons  =  Lists.newArrayList();  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	this.singletontons  =  Lists.newArrayList();	  this.singletontons    =    Collections.EMPTY_LIST;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
5	[BUG]  [BUGGY]  this.singletons  =  Double.valueOf(singletons.length);  [CE]  illegal  start  of  expression  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);    [BUGGY]  this.singletons  =  Double.valueOf(singletons.length);  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	this.singletons  =  Double.valueOf(singletons.length);	  this.singletons    =    Double.valueOf(singletons);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator();  randomGenerator.setIndexedField(this,  T,  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  expression  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator();  randomGenerator.setIndexedField(this,  T,  Double.POSITIVE_INFINITY);  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator();  randomGenerator.setIndexedField(this,  T,  Double.POSITIVE_INFINITY);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  getValueGenerator();  randomGenerator.setIndexedField(this,  T,  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  expression  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);    [BUGGY]  RandomGenerator  randomGenerator  =  getValueGenerator();  randomGenerator.setIndexedField(this,  T,  Double.POSITIVE_INFINITY);  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	RandomGenerator  randomGenerator  =  getValueGenerator();  randomGenerator.setIndexedField(this,  T,  Double.POSITIVE_INFINITY);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  getValueGenerator();  randomGenerator.setIndexedField(this,  T,  Double.POSITIVE_INFINITY,  randomGenerator);  [CE]  illegal  start  of  expression  [FE]              ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  this(new  Well19937c(),  samples);    [BUGGY]  RandomGenerator  randomGenerator  =  getValueGenerator();  randomGenerator.setIndexedField(this,  T,  Double.POSITIVE_INFINITY,  randomGenerator);  [BUGGY]      [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  RandomGenerator  random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	RandomGenerator  randomGenerator  =  getValueGenerator();  randomGenerator.setIndexedField(this,  T,  Double.POSITIVE_INFINITY,  randomGenerator);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
