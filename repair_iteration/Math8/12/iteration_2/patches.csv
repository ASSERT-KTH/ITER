bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1;  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1;  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1;	  RandomGenerator    randomGenerator    =    random.nextDouble(),    sum;    	non-compiled	[CE]  ';'  expected	12	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1,  sum;  [CE]  ';'  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1,  sum;  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1,  sum;	  RandomGenerator    randomGenerator    =    random.nextDouble(),    sum;    	non-compiled	[CE]  ';'  expected	12	None	replace
3	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextRandom(),  sum;  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextRandom(),  sum;  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  randomGenerator  =  random.nextRandom(),  sum;	  RandomGenerator    randomGenerator    =    random.nextRandom();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
4	[BUG]  [BUGGY]  return  singletons.get(sum,  randomValue);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  return  singletons.get(sum,  randomValue);  [BUGGY]      }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	return  singletons.get(sum,  randomValue);	  return    singletons.get(randomValue);    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	14	None	replace
5	[BUG]  [BUGGY]  return  singletons.get(sum,  rng);  [CE]  cannot  find  symbol  rng  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  return  singletons.get(sum,  rng);  [BUGGY]      }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	return  singletons.get(sum,  rng);	  return    singletons.get(randomValue);    	non-compiled	[CE]  cannot  find  symbol  rng	14	None	replace
6	[BUG]  [BUGGY]  return  sample.get(sum);  [CE]  cannot  find  symbol  sample  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  return  sample.get(sum);  [BUGGY]      }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	return  sample.get(sum);	  return    randomValue.get(sum);    	non-compiled	[CE]  cannot  find  symbol  sample	8	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();	  RandomGenerator    <    T>    randomGenerator    =    random.nextGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	27	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(sum);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(sum);  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(sum);	  RandomGenerator    <    T>    randomGenerator    =    random.getGenerator(i);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	18	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(randomValue);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(randomValue);  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(randomValue);	  RandomGenerator    <    T>    randomGenerator    =    random.getGenerator(i);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	18	None	replace
10	[BUG]  [BUGGY]  randomValue  =  sum  +  randomGenerator.nextDouble();  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  randomValue  =  sum  +  randomGenerator.nextDouble();  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	randomValue  =  sum  +  randomGenerator.nextDouble();	  randomValue    =    sum    +    random.nextDouble();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	10	None	replace
11	[BUG]  [BUGGY]  return  sample(randomValue,  sum,  rng);  [CE]  cannot  find  symbol  rng  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  return  sample(randomValue,  sum,  rng);  [BUGGY]      }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	return  sample(randomValue,  sum,  rng);	  return    sample(randomValue,    sum);    	non-compiled	[CE]  cannot  find  symbol  rng	22	None	replace
12	[BUG]  [BUGGY]  return  random.get(randomValue);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  return  random.get(randomValue);  [BUGGY]      }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	return  random.get(randomValue);	  return    sum.get(randomValue);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
13	[BUG]  [BUGGY]  sum  =  random.getGenerator();  sum  +=  random.nextDouble();  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  sum  =  random.getGenerator();  sum  +=  random.nextDouble();  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	sum  =  random.getGenerator();  sum  +=  random.nextDouble();	  randomGenerator    =    random.getGenerator();    sum    +=    randomGenerator.nextDouble();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum  +  1;  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum  +  1;  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum  +  1;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    +    sum;    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	16	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  /  sum;  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  /  sum;  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  /  sum;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    +    sum;    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	16	None	replace
16	[BUG]  [BUGGY]  randomValue  =  Sum.nextDouble()  -  sum;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  randomValue  =  Sum.nextDouble()  -  sum;  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	randomValue  =  Sum.nextDouble()  -  sum;	  randomValue    =    Sum.nextDouble();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	25	None	replace
17	[BUG]  [BUGGY]  return  sampleSingletons.get(sum);  [CE]  cannot  find  symbol  sampleSingletons  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  return  sampleSingletons.get(sum);  [BUGGY]      }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	return  sampleSingletons.get(sum);	  return    sampleSingletons.get(randomValue);    	non-compiled	[CE]  cannot  find  symbol  sampleSingletons	24	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  sum.nextDouble()  -  random.nextDouble();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  sum.nextDouble()  -  random.nextDouble();  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  <  T>  randomGenerator  =  sum.nextDouble()  -  random.nextDouble();	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    -    sum;    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	26	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  -  sum  +  1;  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  -  sum  +  1;  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  -  sum  +  1;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    -    sum;    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	26	None	replace
20	[BUG]  [BUGGY]  return  sum.get(i);  [CE]  double  cannot  be  dereferenced  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  return  sum.get(i);  [BUGGY]      }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	return  sum.get(i);	  return    randomValues.get(i);    	non-compiled	[CE]  double  cannot  be  dereferenced	19	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(randomValue,  random.generator());  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(randomValue,  random.generator());  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(randomValue,  random.generator());	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
22	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  +  sum  +  1;  [CE]  incompatible  types  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  +  sum  +  1;  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble()  +  sum  +  1;	  RandomGenerator    randomGenerator    =    random.nextDouble()    +    sum;    	non-compiled	[CE]  incompatible  types	20	None	replace
23	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  /  sum;  [CE]  incompatible  types  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  /  sum;  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble()  /  sum;	  RandomGenerator    randomGenerator    =    random.nextDouble()    +    sum;    	non-compiled	[CE]  incompatible  types	20	None	replace
24	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator(i);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator(i);  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator(i);	  RandomGenerator    <    T>    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	6	None	replace
25	[BUG]  [BUGGY]  return  sample(randomValue,  i);  [CE]  no  suitable  method  found  for  sample(double,int)  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  return  sample(randomValue,  i);  [BUGGY]      }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	return  sample(randomValue,  i);	  return    sample(sum,    rng);    	non-compiled	[CE]  no  suitable  method  found  for  sample(double,int)	5	None	replace
26	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1,  randomValue;  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1,  randomValue;  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1,  randomValue;	  RandomGenerator    randomGenerator    =    random.nextDouble(),    sum;    	non-compiled	[CE]  ';'  expected	12	None	replace
27	[BUG]  [BUGGY]  return  randomGenerator.get(randomValue);  [CE]  cannot  find  symbol  randomGenerator  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  return  randomGenerator.get(randomValue);  [BUGGY]      }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	return  randomGenerator.get(randomValue);	  return    sampleSingletons.get(randomValue);    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	24	None	replace
28	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  randoms.generator();  [CE]  cannot  find  symbol  randoms  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  randomGenerator  =  randoms.generator();  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  randomGenerator  =  randoms.generator();	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  cannot  find  symbol  randoms	7	None	replace
29	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator(sum);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator(sum);  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator(sum);	  RandomGenerator    <    T>    randomGenerator    =    random.nextGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	27	None	replace
30	[BUG]  [BUGGY]  randomValue  =  Sum.nextDouble()  +  sum;  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  randomValue  =  Sum.nextDouble()  +  sum;  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	randomValue  =  Sum.nextDouble()  +  sum;	  randomValue    =    Sum.nextDouble();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	25	None	replace
31	[BUG]  [BUGGY]  return  randomValue.get(singletons);  [CE]  double  cannot  be  dereferenced  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  return  randomValue.get(singletons);  [BUGGY]      }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	return  randomValue.get(singletons);	  return    singletons.get(randomValue);    	non-compiled	[CE]  double  cannot  be  dereferenced	14	None	replace
32	[BUG]  [BUGGY]  final  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator();  sum  -=  randomGenerator.nextDouble();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  final  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator();  sum  -=  randomGenerator.nextDouble();  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	final  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator();  sum  -=  randomGenerator.nextDouble();	  final    RandomGenerator    <    T>    randomGenerator    =    random.getGenerator();    sum    +=    randomGenerator.nextDouble();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	17	None	replace
33	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  randoms.nextRandom();  [CE]  cannot  find  symbol  randoms  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  randomGenerator  =  randoms.nextRandom();  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  randomGenerator  =  randoms.nextRandom();	  RandomGenerator    randomGenerator    =    random.nextRandom();    	non-compiled	[CE]  cannot  find  symbol  randoms	11	None	replace
34	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i,  sum);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i,  sum);  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i,  sum);	  RandomGenerator    <    T>    randomGenerator    =    random.getGenerator(i);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	18	None	replace
35	[BUG]  [BUGGY]  randomValue  =  Sum.nextDouble(sum);  [CE]  cannot  assign  a  value  to  final  variable  randomValue  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {      [BUGGY]  randomValue  =  Sum.nextDouble(sum);  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	randomValue  =  Sum.nextDouble(sum);	  randomValue    =    Sum.nextDouble();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  randomValue	25	None	replace
