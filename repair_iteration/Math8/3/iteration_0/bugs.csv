bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
5	[BUG] [BUGGY] if (sampleSize <= 0) { [FE] ArrayStoreException [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { [BUGGY] if (sampleSize <= 0) { [BUGGY] throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { out[i] = sample(); }  [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	
6	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { [BUGGY] [BUGGY] if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { out[i] = sample(); }  [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	add	
