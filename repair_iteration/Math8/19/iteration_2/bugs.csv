bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  sample.getRandomGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  RandomGenerator  <  T>  random  =  sample.getRandomGenerator();  [BUGGY]    singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	RandomGenerator  <  T>  random  =  sample.getRandomGenerator();	      RandomGenerator    <    T>    random    =    rng.getRandomGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	3	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  samples.get(i  +  1);  [CE]  >  expected  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  samples.get(i  +  1);  [BUGGY]    singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  samples.get(i  +  1);	      RandomGenerator    <    Pair    <    T,    Double>    sample    =    samples.get(i);    	non-compiled	[CE]  >  expected	1	None	replace
3	[BUG]  [BUGGY]  singletons.add(sample.getQualifiedName(),  random);  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  singletons.add(sample.getQualifiedName(),  random);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	singletons.add(sample.getQualifiedName(),  random);	  singletons.add(sample.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
4	[BUG]  [BUGGY]  singletons.add(sample.getValue(),  probs);  [CE]  no  suitable  method  found  for  add(Double,double[])  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  singletons.add(sample.getValue(),  probs);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	singletons.add(sample.getValue(),  probs);	  singletons.add(sample.getValue());    	non-compiled	[CE]  no  suitable  method  found  for  add(Double,double[])	4	None	replace
5	[BUG]  [BUGGY]  singletons.add(sample.getValue(),  probs[i]);  [CE]  no  suitable  method  found  for  add(Double,double)  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  singletons.add(sample.getValue(),  probs[i]);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	singletons.add(sample.getValue(),  probs[i]);	  singletons.add(sample.getValue());    	non-compiled	[CE]  no  suitable  method  found  for  add(Double,double)	4	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample,  probs);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample,  probs);  [BUGGY]    singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample,  probs);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(sample);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	7	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng);  [BUGGY]    singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(sample);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	7	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  sample.getRandomGenerator();  [CE]  cannot  find  symbol  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  RandomGenerator  randomGenerator  =  sample.getRandomGenerator();  [BUGGY]    singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	RandomGenerator  randomGenerator  =  sample.getRandomGenerator();	      RandomGenerator    randomGenerator    =    rng.getRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey());  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey());  [BUGGY]    singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getKey());	      RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getValue());    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	9	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  probs);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  probs);  [BUGGY]    singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample.getValue(),  probs);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(sample.getValue());    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	9	None	replace
11	[BUG]  [BUGGY]  singletons.add(sample.getSecond(),  probs);  [CE]  no  suitable  method  found  for  add(Double,double[])  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  singletons.add(sample.getSecond(),  probs);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	singletons.add(sample.getSecond(),  probs);	  singletons.add(sample.getSecond());    	non-compiled	[CE]  no  suitable  method  found  for  add(Double,double[])	10	None	replace
12	[BUG]  [BUGGY]  singletons.add(sample.getSecond(),  random);  [CE]  no  suitable  method  found  for  add(Double,RandomGenerator)  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  singletons.add(sample.getSecond(),  random);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	singletons.add(sample.getSecond(),  random);	  singletons.add(sample.getSecond());    	non-compiled	[CE]  no  suitable  method  found  for  add(Double,RandomGenerator)	10	None	replace
13	[BUG]  [BUGGY]  singletons.add(sample.getSelectedValue(),  random);  [CE]  cannot  find  symbol  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  singletons.add(sample.getSelectedValue(),  random);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	singletons.add(sample.getSelectedValue(),  random);	  singletons.add(sample.getSelectedValue());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  sample.getValue();  [CE]  incompatible  types  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  RandomGenerator  randomGenerator  =  sample.getValue();  [BUGGY]    singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	RandomGenerator  randomGenerator  =  sample.getValue();	      RandomGenerator    randomGenerator    =    rng.getValue();    	non-compiled	[CE]  incompatible  types	6	None	replace
15	[BUG]  [BUGGY]  singletons.add(sample.getValue(),  random);  [CE]  no  suitable  method  found  for  add(Double,RandomGenerator)  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  singletons.add(sample.getValue(),  random);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	singletons.add(sample.getValue(),  random);	  singletons.add(sample.getValue());    	non-compiled	[CE]  no  suitable  method  found  for  add(Double,RandomGenerator)	4	None	replace
16	[BUG]  [BUGGY]  singletons.add(sample.getSecond(),  probs[i]);  [CE]  no  suitable  method  found  for  add(Double,double)  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  singletons.add(sample.getSecond(),  probs[i]);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	singletons.add(sample.getSecond(),  probs[i]);	  singletons.add(sample.getSecond());    	non-compiled	[CE]  no  suitable  method  found  for  add(Double,double)	10	None	replace
17	[BUG]  [BUGGY]  singletons.add(sample.getQualifiedName(),  sample);  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  singletons.add(sample.getQualifiedName(),  sample);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	singletons.add(sample.getQualifiedName(),  sample);	  singletons.add(sample.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
18	[BUG]  [BUGGY]  singletons.add(sample.getSelectedValue(),  sample);  [CE]  cannot  find  symbol  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);    [BUGGY]  singletons.add(sample.getSelectedValue(),  sample);  [BUGGY]    if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	singletons.add(sample.getSelectedValue(),  sample);	  singletons.add(sample.getSelectedValue());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
