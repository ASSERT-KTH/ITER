bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  strLen  =  this.str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Integer  strLen  =  this.str.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Integer  strLen  =  this.str.length();	  int    strLen    =    this.str.length()    -    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
2	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(strLen,  buffer,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(strLen,  buffer,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(strLen,  buffer,  width);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    strLen,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
3	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size,  strLen,  buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size,  strLen,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(size,  strLen,  buffer);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    strLen,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
4	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  size,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  size,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  size,  width);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    strLen,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
5	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size  +  strLen];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size  +  strLen];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size  +  strLen];	  StrBuilder.this.appendFixedWidthPadLeft    =   "   ";    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
6	[BUG]  [BUGGY]  StrBuilder.this.setFixedWidthPadLeft(false);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.setFixedWidthPadLeft(false);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.setFixedWidthPadLeft(false);	  StrBuilder.this.setFixedWidthPadLeft(true);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
7	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(false);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(false);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(false);	  StrBuilder.this.setFixedWidthPadLeft(true);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
8	[BUG]  [BUGGY]  StrBuilder.this.setFixedWidthPadLeft(true,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.setFixedWidthPadLeft(true,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.setFixedWidthPadLeft(true,  width);	  StrBuilder.this.setFixedWidthPadLeft(true);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
9	[BUG]  [BUGGY]  safeAdd(strLen,  buffer,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(strLen,  buffer,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen,  buffer,  size);	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen    -    width,    buffer,    size);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	76	None	replace
10	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(buffer,  source);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(buffer,  source);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(buffer,  source);	  AnnotationHandler.this.appendFixedWidthPadLeft(source);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
11	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(str,  source);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(str,  source);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(str,  source);	  AnnotationHandler.this.appendFixedWidthPadLeft(source);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
12	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(source,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(source,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(source,  width);	  AnnotationHandler.this.appendFixedWidthPadLeft(source);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	21	None	replace
13	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(str,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(str,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(str,  width);	  AnnotationHandler.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
14	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(buffer,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(buffer,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(buffer,  strLen);	  AnnotationHandler.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
15	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(buffer,  str);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(buffer,  str);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(buffer,  str);	  AnnotationHandler.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
16	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(size,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(size,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(size,  strLen);	  AnnotationHandler.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
17	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size,  str);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size,  str);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(size,  str);	  StrBuilder.this.appendFixedWidthPadLeft(width,    str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
18	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  buffer);	  StrBuilder.this.appendFixedWidthPadLeft(width,    str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
19	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  width,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  width,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  width,  strLen);	  StrBuilder.this.appendFixedWidthPadLeft(width,    str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
20	[BUG]  [BUGGY]  Integer  strLen  =  obj.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Integer  strLen  =  obj.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Integer  strLen  =  obj.length();	  Int    strLen    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	62	None	replace
21	[BUG]  [BUGGY]  int  strLen  =  width  -  strLen;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  width  -  strLen;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  width  -  strLen;	  int    strLen    =    length    -    strLen;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
22	[BUG]  [BUGGY]  int  strLen  =  size  -  strLen;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  size  -  strLen;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  size  -  strLen;	  int    strLen    =    length    -    strLen;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
23	[BUG]  [BUGGY]  int  strLen  =  length  -  width;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  length  -  width;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  length  -  width;	  int    strLen    =    length    -    strLen;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
24	[BUG]  [BUGGY]  int  strLen  =  height  -  strLen;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  height  -  strLen;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  height  -  strLen;	  int    strLen    =    length    -    strLen;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	26	None	replace
25	[BUG]  [BUGGY]  combinator.getChars(0,  strLen,  buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  combinator.getChars(0,  strLen,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combinator.getChars(0,  strLen,  buffer,  size  +  padLen);	  if(str!=    null)    {    int    width    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
26	[BUG]  [BUGGY]  combinator.getChars(0,  strLen  -  width,  buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  combinator.getChars(0,  strLen  -  width,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combinator.getChars(0,  strLen  -  width,  buffer,  size  +  padLen);	  if(str!=    null)    {    int    width    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
27	[BUG]  [BUGGY]  combinator.getChars(0,  strLen,  buffer,  size  -  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  combinator.getChars(0,  strLen,  buffer,  size  -  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combinator.getChars(0,  strLen,  buffer,  size  -  padLen);	  if(str!=    null)    {    int    width    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
28	[BUG]  [BUGGY]  safeSegments.add(buffer,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safeSegments.add(buffer,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegments.add(buffer,  width);	  safeSegments.add(buffer);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
29	[BUG]  [BUGGY]  safeSegments.add(str);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeSegments.add(str);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegments.add(str);	  safeSegments.add(buffer);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
30	[BUG]  [BUGGY]  safeSegments.add(buffer,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeSegments.add(buffer,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegments.add(buffer,  size);	  safeSegments.add(buffer);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	64	None	replace
31	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  buffer);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
32	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  str);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  str);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  str);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
33	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  size);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	30	None	replace
34	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  1;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  1;	  StrBuilder.this.appendFixedWidthPadLeft    =    0;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	56	None	replace
35	[BUG]  [BUGGY]  nisipIsVisible(false,  false);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible(false,  false);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(false,  false);	  nisipIsVisible(true);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
36	[BUG]  [BUGGY]  nisipIsVisible(true,  false);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible(true,  false);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(true,  false);	  nisipIsVisible(true);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
37	[BUG]  [BUGGY]  nisipIsVisible(false,  null);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible(false,  null);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(false,  null);	  nisipIsVisible(true);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	42	None	replace
38	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(false,  true);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(false,  true);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(false,  true);	  StrBuilder.this.appendFixedWidthPadLeft(true);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
39	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(false,  false);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(false,  false);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(false,  false);	  StrBuilder.this.appendFixedWidthPadLeft(true);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
40	[BUG]  [BUGGY]  nisipIsVisible(false,  true);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible(false,  true);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(false,  true);	  nisipIsVisible(false);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	43	None	replace
41	[BUG]  [BUGGY]  safeGet(str.getChars(),  width));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getChars(),  width));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(),  width));	  safeGet(str.getChars()));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
42	[BUG]  [BUGGY]  safeGet(str.getChars(0)));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getChars(0)));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(0)));	  safeGet(str.getChars()));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
43	[BUG]  [BUGGY]  safeGet(str.getChars(),  size));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getChars(),  size));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(),  size));	  safeGet(str.getChars()));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	65	None	replace
44	[BUG]  [BUGGY]  safeAdd(strLen,  0,  buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(strLen,  0,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen,  0,  buffer,  size  +  padLen);	  safeAdd(strLen,    width,    buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
45	[BUG]  [BUGGY]  ensureCapacity(strLen,  width,  buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ensureCapacity(strLen,  width,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	ensureCapacity(strLen,  width,  buffer,  size  +  padLen);	  safeAdd(strLen,    width,    buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
46	[BUG]  [BUGGY]  safeGet(strLen,  width,  size));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(strLen,  width,  size));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width,  size));	  safeGet(strLen,    width,    strLen));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
47	[BUG]  [BUGGY]  safeGet(size,  width,  strLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeGet(size,  width,  strLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(size,  width,  strLen));	  safeGet(strLen,    width,    strLen));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
48	[BUG]  [BUGGY]  safeGet(strLen,  width,  strLen  +  1));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(strLen,  width,  strLen  +  1));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width,  strLen  +  1));	  safeGet(strLen,    width,    strLen));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
49	[BUG]  [BUGGY]  safeGet(strLen,  width,  buffer,  size  +  strLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(strLen,  width,  buffer,  size  +  strLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width,  buffer,  size  +  strLen));	  safeGet(strLen,    width,    strLen));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	53	None	replace
50	[BUG]  [BUGGY]  safeAdd(strLen  -  width,  strLen,  buffer,  size  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(strLen  -  width,  strLen,  buffer,  size  +  1);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen  -  width,  strLen,  buffer,  size  +  1);	  safeAdd(strLen    -    width,    strLen,    buffer,    size);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
51	[BUG]  [BUGGY]  safeAdd(size  -  width,  strLen,  buffer,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(size  -  width,  strLen,  buffer,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(size  -  width,  strLen,  buffer,  size);	  safeAdd(strLen    -    width,    strLen,    buffer,    size);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
52	[BUG]  [BUGGY]  this.appendFixedWidthPadLeft  =  true;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  this.appendFixedWidthPadLeft  =  true;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	this.appendFixedWidthPadLeft  =  true;	  this.appendFixedWidthPadLeft    =    false;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
53	[BUG]  [BUGGY]  this.appendFixedWidthPadLeft  =  null;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  this.appendFixedWidthPadLeft  =  null;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	this.appendFixedWidthPadLeft  =  null;	  this.appendFixedWidthPadLeft    =    false;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
54	[BUG]  [BUGGY]  this.appendFixedWidthPadLeft  = " ";  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  this.appendFixedWidthPadLeft  = " ";  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	this.appendFixedWidthPadLeft  = " ";	  this.appendFixedWidthPadLeft    =    false;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
55	[BUG]  [BUGGY]  Integer  strLen  =  0;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Integer  strLen  =  0;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Integer  strLen  =  0;	  Integer    strLen    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	28	None	replace
56	[BUG]  [BUGGY]  combins.put(obj,  size  +  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  combins.put(obj,  size  +  i);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(obj,  size  +  i);	  combins.put(buffer,    size    +    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
57	[BUG]  [BUGGY]  combins.put(0,  size  +  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  combins.put(0,  size  +  i);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(0,  size  +  i);	  combins.put(buffer,    size    +    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
58	[BUG]  [BUGGY]  combins.put(buffer,  size  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  combins.put(buffer,  size  +  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(buffer,  size  +  strLen);	  combins.put(buffer,    size    +    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
59	[BUG]  [BUGGY]  combins.put(i,  size  +  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  combins.put(i,  size  +  i);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(i,  size  +  i);	  combins.put(buffer,    size    +    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
60	[BUG]  [BUGGY]  int  strLen  =  str.length()  +  size;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  str.length()  +  size;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  str.length()  +  size;	  int    strLen    =    str.length()    +    width;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
61	[BUG]  [BUGGY]  int  strLen  =  str.length()  /  width;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  str.length()  /  width;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  str.length()  /  width;	  int    strLen    =    str.length()    +    width;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	45	None	replace
62	[BUG]  [BUGGY]  safeGet(size,  width  -  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(size,  width  -  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(size,  width  -  strLen);	  safeGet(strLen,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
63	[BUG]  [BUGGY]  safeGet(strLen,  width  -  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(strLen,  width  -  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width  -  padLen);	  safeGet(strLen,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
64	[BUG]  [BUGGY]  safeGet(strLen,  width  -  strLen,  buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(strLen,  width  -  strLen,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width  -  strLen,  buffer);	  safeGet(strLen,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
65	[BUG]  [BUGGY]  strBuilder.this.appendFixedWidthPadLeft  =  false;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  strBuilder.this.appendFixedWidthPadLeft  =  false;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	strBuilder.this.appendFixedWidthPadLeft  =  false;	  strBuilder.this.appendFixedWidthPadLeft    =    true;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
66	[BUG]  [BUGGY]  String  strBuilder.this.appendFixedWidthPadLeft  =  true;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  String  strBuilder.this.appendFixedWidthPadLeft  =  true;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	String  strBuilder.this.appendFixedWidthPadLeft  =  true;	  strBuilder.this.appendFixedWidthPadLeft    =    true;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
67	[BUG]  [BUGGY]  nisipIsVisible();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible();  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible();	  nisipIsVisible    &&    isVisible();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
68	[BUG]  [BUGGY]  nisipIsVisible  =  isVisible();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible  =  isVisible();  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible  =  isVisible();	  nisipIsVisible    &&    isVisible();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
69	[BUG]  [BUGGY]  nisipIsVisible  ||  isVisible();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible  ||  isVisible();  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible  ||  isVisible();	  nisipIsVisible    &&    isVisible();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
70	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  String[width];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  String[width];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  String[width];	  StrBuilder.this.appendFixedWidthPadLeft    =    new    char[width];    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
71	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[length];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[length];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[length];	  StrBuilder.this.appendFixedWidthPadLeft    =    new    char[width];    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
72	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[length  +  1];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[length  +  1];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[length  +  1];	  StrBuilder.this.appendFixedWidthPadLeft    =    new    char[width];    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	85	None	replace
73	[BUG]  [BUGGY]  if(strLen  >  0)  {  combins.add(strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(strLen  >  0)  {  combins.add(strLen);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen  >  0)  {  combins.add(strLen);  }	  combins.add(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
74	[BUG]  [BUGGY]  if(strLen  >  0)  {  combins.add(strLen);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(strLen  >  0)  {  combins.add(strLen);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen  >  0)  {  combins.add(strLen);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  combins.add(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
75	[BUG]  [BUGGY]  if(strLen  ==  width)  {  combins.add(strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(strLen  ==  width)  {  combins.add(strLen);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen  ==  width)  {  combins.add(strLen);  }	  combins.add(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
76	[BUG]  [BUGGY]  if(strLen  >  0)  {  combins.add(strLen);  }  else  {  buffer[size  +  strLen]  =  null;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(strLen  >  0)  {  combins.add(strLen);  }  else  {  buffer[size  +  strLen]  =  null;  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen  >  0)  {  combins.add(strLen);  }  else  {  buffer[size  +  strLen]  =  null;  }	  combins.add(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
77	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(size,  width);	  StrBuilder.this.appendFixedWidthPadLeft(w,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
78	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  width);	  StrBuilder.this.appendFixedWidthPadLeft(w,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
79	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  w);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  w);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  w);	  StrBuilder.this.appendFixedWidthPadLeft(w,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	66	None	replace
80	[BUG]  [BUGGY]  SafeGet(str.getChars(),  width,  buffer,  size  +  padLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  SafeGet(str.getChars(),  width,  buffer,  size  +  padLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	SafeGet(str.getChars(),  width,  buffer,  size  +  padLen));	  safeGet(str.getChars(),    width,    buffer,    size    +    padLen));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	58	None	replace
81	[BUG]  [BUGGY]  safeGet(str.getKey());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getKey());  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getKey());	  safeGet(str.getValue());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
82	[BUG]  [BUGGY]  safeGet(str.getValue(),  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getValue(),  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getValue(),  width);	  safeGet(str.getValue());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	63	None	replace
83	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size  +  1];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size  +  1];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size  +  1];	  StrBuilder.this.appendFixedWidthPadLeft    =    new    char[size];    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
84	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[strLen];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[strLen];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[strLen];	  StrBuilder.this.appendFixedWidthPadLeft    =    new    char[size];    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
85	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size  -  1];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size  -  1];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size  -  1];	  StrBuilder.this.appendFixedWidthPadLeft    =    new    char[size];    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
86	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(size,  strLen);	  StrBuilder.this.appendFixedWidthPadLeft(width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
87	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  width);	  StrBuilder.this.appendFixedWidthPadLeft(width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
88	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  strLen,  buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  strLen,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  strLen,  buffer);	  StrBuilder.this.appendFixedWidthPadLeft(width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
89	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  size);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
90	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  buffer.length);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  buffer.length);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  buffer.length);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
91	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width  -  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width  -  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width  -  width);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
92	[BUG]  [BUGGY]  SafeGet(str.getChars(),  width,  buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  SafeGet(str.getChars(),  width,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	SafeGet(str.getChars(),  width,  buffer,  size  +  padLen);	  safeGet(str.getChars(),    width,    buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
93	[BUG]  [BUGGY]  safeGet(str.getChars(),  width,  buffer,  size  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getChars(),  width,  buffer,  size  +  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(),  width,  buffer,  size  +  strLen);	  safeGet(str.getChars(),    width,    buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	59	None	replace
94	[BUG]  [BUGGY]  String  strLen  =  this.str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  String  strLen  =  this.str.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	String  strLen  =  this.str.length();	  char    strLen    =    this.str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
95	[BUG]  [BUGGY]  char  strLen  =  this.str.length()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  char  strLen  =  this.str.length()  +  1;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	char  strLen  =  this.str.length()  +  1;	  char    strLen    =    this.str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
96	[BUG]  [BUGGY]  Character  strLen  =  this.str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Character  strLen  =  this.str.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Character  strLen  =  this.str.length();	  char    strLen    =    this.str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
97	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(width,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(width,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(width,  strLen);	  Builder.this.appendFixedWidthPadLeft(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
98	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(strLen,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(strLen,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(strLen,  width);	  Builder.this.appendFixedWidthPadLeft(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
99	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(size);	  Builder.this.appendFixedWidthPadLeft(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
100	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(width);	  Builder.this.appendFixedWidthPadLeft(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	20	None	replace
101	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width  +  padLen);	  nisipIgnoreWhitespace(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
102	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  size  +  padLen,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  size  +  padLen,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  size  +  padLen,  width);	  nisipIgnoreWhitespace(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
103	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width,  size  +  padLen);	  nisipIgnoreWhitespace(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
104	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  size  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  size  +  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  size  +  strLen);	  nisipIgnoreWhitespace(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
105	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(str,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(str,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(str,  width);	  Builder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
106	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(buffer,  strLen);	  Builder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
107	[BUG]  [BUGGY]  combins.add(buffer,  width  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  combins.add(buffer,  width  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.add(buffer,  width  +  padLen);	  combins.add(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
108	[BUG]  [BUGGY]  combins.add(buffer,  width,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  combins.add(buffer,  width,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.add(buffer,  width,  size  +  padLen);	  combins.add(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
109	[BUG]  [BUGGY]  combins.add(buffer,  size  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  combins.add(buffer,  size  +  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.add(buffer,  size  +  strLen);	  combins.add(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
110	[BUG]  [BUGGY]  combins.add(buffer,  size  +  padLen,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  combins.add(buffer,  size  +  padLen,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.add(buffer,  size  +  padLen,  width);	  combins.add(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	27	None	replace
111	[BUG]  [BUGGY]  nisip  =  str.charAt(i  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisip  =  str.charAt(i  +  1);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisip  =  str.charAt(i  +  1);	  nisip    =    str.charAt(i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
112	[BUG]  [BUGGY]  nisip  =  str.charAt(0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  nisip  =  str.charAt(0);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisip  =  str.charAt(0);	  nisip    =    str.charAt(i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
113	[BUG]  [BUGGY]  nisip  =  str.charAt(size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  nisip  =  str.charAt(size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisip  =  str.charAt(size);	  nisip    =    str.charAt(i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
114	[BUG]  [BUGGY]  nisip  =  str.charAt(i++);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  nisip  =  str.charAt(i++);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisip  =  str.charAt(i++);	  nisip    =    str.charAt(i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	82	None	replace
115	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  padLen);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
116	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width  -  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width  -  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width  -  strLen);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
117	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size,  width  -  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size,  width  -  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(size,  width  -  strLen);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
118	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  strLen,  buffer);  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  strLen,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  strLen,  buffer);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width    -    strLen);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
119	[BUG]  [BUGGY]  safeAdd(strLen,  0,  buffer,  size);  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(strLen,  0,  buffer,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen,  0,  buffer,  size);	  safeAdd(strLen,    width,    buffer,    size);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
120	[BUG]  [BUGGY]  safeAdd(strLen,  width,  buffer,  size  +  strLen);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(strLen,  width,  buffer,  size  +  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen,  width,  buffer,  size  +  strLen);	  safeAdd(strLen,    width,    buffer,    size);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
121	[BUG]  [BUGGY]  ensureCapacity(strLen,  width,  buffer,  size);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ensureCapacity(strLen,  width,  buffer,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	ensureCapacity(strLen,  width,  buffer,  size);	  safeAdd(strLen,    width,    buffer,    size);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
122	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  strLen,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  strLen,  buffer.length);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width  +  strLen,  buffer.length);	  nisipIgnoreWhitespace(buffer,    width    +    strLen);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
123	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  strLen,  size);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  strLen,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width  +  strLen,  size);	  nisipIgnoreWhitespace(buffer,    width    +    strLen);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
124	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  strLen,  buffer);  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  strLen,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width  +  strLen,  buffer);	  nisipIgnoreWhitespace(buffer,    width    +    strLen);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
125	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(size);	  StrBuilder.this.appendFixedWidthPadLeft(width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	49	None	replace
126	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  width;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  width;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  width;	  StrBuilder.this.appendFixedWidthPadLeft    =    str;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
127	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  this.str;  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  this.str;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  this.str;	  StrBuilder.this.appendFixedWidthPadLeft    =    str;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
128	[BUG]  [BUGGY]  int  strLen  =  this.data.length();  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  this.data.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  this.data.length();	  int    strLen    =    data.length();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
129	[BUG]  [BUGGY]  int  strLen  =  data.length()  -  1;  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  data.length()  -  1;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  data.length()  -  1;	  int    strLen    =    data.length();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
130	[BUG]  [BUGGY]  appendFixedWidthPadLeft(strLen);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  appendFixedWidthPadLeft(strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	appendFixedWidthPadLeft(strLen);	  safeSegment(strLen);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
131	[BUG]  [BUGGY]  safeSegment(strLen  +  width);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeSegment(strLen  +  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegment(strLen  +  width);	  safeSegment(strLen);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
132	[BUG]  [BUGGY]  safeSegment(size);  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safeSegment(size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegment(size);	  safeSegment(strLen);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
133	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(str,  null);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(str,  null);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(str,  null);	  AnnotationHandler.this.appendFixedWidthPadLeft(null);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
134	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(buffer,  width);  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(buffer,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(buffer,  width);	  AnnotationHandler.this.appendFixedWidthPadLeft(null);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
135	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(this);  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(this);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(this);	  AnnotationHandler.this.appendFixedWidthPadLeft(null);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
136	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  buffer,  size);  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  buffer,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width,  buffer,  size);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
137	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  buffer,  width);  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  buffer,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  buffer,  width);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
138	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buff,  width,  strLen);  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buff,  width,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buff,  width,  strLen);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width,    buffer);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
139	[BUG]  [BUGGY]  safeIndex(strLen,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  safeIndex(strLen,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeIndex(strLen,  width);	  safeIndex(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
140	[BUG]  [BUGGY]  safeIndex(strLen  +  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safeIndex(strLen  +  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeIndex(strLen  +  width);	  safeIndex(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
141	[BUG]  [BUGGY]  int  strLen  =  str.length()  +  width  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  str.length()  +  width  +  1;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  str.length()  +  width  +  1;	  int    strLen    =    str.length()    -    width    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
142	[BUG]  [BUGGY]  int  strLen  =  str.length()  *  width  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  str.length()  *  width  +  1;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  str.length()  *  width  +  1;	  int    strLen    =    str.length()    -    width    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
143	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width,  size);	  nisipIgnoreWhitespace(buffer,    width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
144	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  strLen,  size);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  strLen,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width,  strLen,  size);	  nisipIgnoreWhitespace(buffer,    width,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
145	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  strLen,  buffer.length);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  strLen,  buffer.length);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width,  strLen,  buffer.length);	  nisipIgnoreWhitespace(buffer,    width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
146	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  strLen,  buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  strLen,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width,  strLen,  buffer);	  nisipIgnoreWhitespace(buffer,    width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	83	None	replace
147	[BUG]  [BUGGY]  Character  strLen  =  obj.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Character  strLen  =  obj.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Character  strLen  =  obj.length();	  Character    strLen    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
148	[BUG]  [BUGGY]  Character  strLen  =  this.str.charAt(0);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Character  strLen  =  this.str.charAt(0);  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Character  strLen  =  this.str.charAt(0);	  Character    strLen    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
149	[BUG]  [BUGGY]  Character  strLen  =  this.chars.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Character  strLen  =  this.chars.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Character  strLen  =  this.chars.length();	  Character    strLen    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
150	[BUG]  [BUGGY]  safeSegments.add(strLen,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  safeSegments.add(strLen,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegments.add(strLen,  width);	  safeSegments.add(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
151	[BUG]  [BUGGY]  safeSegments.add(strLen  -  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  safeSegments.add(strLen  -  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegments.add(strLen  -  width);	  safeSegments.add(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
152	[BUG]  [BUGGY]  safeSegments.add(strLen  +  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safeSegments.add(strLen  +  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegments.add(strLen  +  width);	  safeSegments.add(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	46	None	replace
153	[BUG]  [BUGGY]  safeGet(str.getChars(0,  padLen,  buffer,  size  +  width));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getChars(0,  padLen,  buffer,  size  +  width));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(0,  padLen,  buffer,  size  +  width));	  safeGet(str.getChars(0,    width,    buffer,    size    +    padLen));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
154	[BUG]  [BUGGY]  safeGet(str.getValue(),  width,  buffer,  size  +  strLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getValue(),  width,  buffer,  size  +  strLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getValue(),  width,  buffer,  size  +  strLen));	  safeGet(str.getValue(),    width,    buffer,    size    +    padLen));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
155	[BUG]  [BUGGY]  safeGet(str.getValue(),  width,  buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getValue(),  width,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getValue(),  width,  buffer,  size  +  padLen);	  safeGet(str.getValue(),    width,    buffer,    size    +    padLen));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	36	None	replace
156	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  ||  this.obj  ==  null;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  ||  this.obj  ==  null;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  ||  this.obj  ==  null;	  StrBuilder.this.appendFixedWidthPadLeft    ||    this.obj!=    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
157	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  &&  this.obj!=  null;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  &&  this.obj!=  null;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  &&  this.obj!=  null;	  StrBuilder.this.appendFixedWidthPadLeft    ||    this.obj!=    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
158	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(this.obj);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(this.obj);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(this.obj);	  StrBuilder.this.appendFixedWidthPadLeft    ||    this.obj!=    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
159	[BUG]  [BUGGY]  nisips.add(buffer,  width,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisips.add(buffer,  width,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(buffer,  width,  size  +  padLen);	  nisips.add(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
160	[BUG]  [BUGGY]  nisips.add(buffer,  width  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  nisips.add(buffer,  width  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(buffer,  width  +  padLen);	  nisips.add(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
161	[BUG]  [BUGGY]  nisips.add(buffer,  size  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  nisips.add(buffer,  size  +  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(buffer,  size  +  strLen);	  nisips.add(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
162	[BUG]  [BUGGY]  nisips.add(buffer,  size  +  padLen,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  nisips.add(buffer,  size  +  padLen,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(buffer,  size  +  padLen,  width);	  nisips.add(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
163	[BUG]  [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.charAt(0)),  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.charAt(0)),  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(String.valueOf(str.charAt(0)),  width);	  nisipIgnoreWhitespace(String.valueOf(str.charAt(0)));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
164	[BUG]  [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.charAt(0),  width));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.charAt(0),  width));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(String.valueOf(str.charAt(0),  width));	  nisipIgnoreWhitespace(String.valueOf(str.charAt(0)));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
165	[BUG]  [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.charAt(0)),  null);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.charAt(0)),  null);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(String.valueOf(str.charAt(0)),  null);	  nisipIgnoreWhitespace(String.valueOf(str.charAt(0)));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	67	None	replace
166	[BUG]  [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.getKey()));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.getKey()));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(String.valueOf(str.getKey()));	  nisipIgnoreWhitespace(String.valueOf(str.getValue()));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
167	[BUG]  [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.getValue()  +  1));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.getValue()  +  1));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(String.valueOf(str.getValue()  +  1));	  nisipIgnoreWhitespace(String.valueOf(str.getValue()));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
168	[BUG]  [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.getLineno()));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.getLineno()));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(String.valueOf(str.getLineno()));	  nisipIgnoreWhitespace(String.valueOf(str.getValue()));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
169	[BUG]  [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.getValue(),  width));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.getValue(),  width));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(String.valueOf(str.getValue(),  width));	  nisipIgnoreWhitespace(String.valueOf(str.getValue()));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	68	None	replace
170	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  |=  width  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  |=  width  +  1;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  |=  width  +  1;	  StrBuilder.this.appendFixedWidthPadLeft    |=    width;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
171	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  |=  width  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  |=  width  -  1;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  |=  width  -  1;	  StrBuilder.this.appendFixedWidthPadLeft    |=    width;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
172	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  &=  width;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  &=  width;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  &=  width;	  StrBuilder.this.appendFixedWidthPadLeft    |=    width;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
173	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  |=  padChar;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  |=  padChar;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  |=  padChar;	  StrBuilder.this.appendFixedWidthPadLeft    |=    width;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
174	[BUG]  [BUGGY]  String  strLen  =  data.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  String  strLen  =  data.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	String  strLen  =  data.length();	  char    strLen    =    data.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
175	[BUG]  [BUGGY]  char  strLen  =  this.data.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  char  strLen  =  this.data.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	char  strLen  =  this.data.length();	  char    strLen    =    data.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
176	[BUG]  [BUGGY]  Character  strLen  =  data.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Character  strLen  =  data.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Character  strLen  =  data.length();	  char    strLen    =    data.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	51	None	replace
177	[BUG]  [BUGGY]  combins.put(0,  strLen  -  width,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  combins.put(0,  strLen  -  width,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(0,  strLen  -  width,  size);	  combins.put(0,    strLen    -    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
178	[BUG]  [BUGGY]  if(strLen  >  width)  {  combins.put(0,  strLen  -  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(strLen  >  width)  {  combins.put(0,  strLen  -  width);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen  >  width)  {  combins.put(0,  strLen  -  width);  }	  combins.put(0,    strLen    -    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
179	[BUG]  [BUGGY]  nisip.put(0,  strLen  -  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisip.put(0,  strLen  -  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisip.put(0,  strLen  -  width);	  combins.put(0,    strLen    -    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	34	None	replace
180	[BUG]  [BUGGY]  combins.put(0,  strLen  -  width,  buffer);  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  combins.put(0,  strLen  -  width,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(0,  strLen  -  width,  buffer);	  combins.put(0,    strLen    -    width);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
181	[BUG]  [BUGGY]  safeAdd(strLen,  buffer,  size  +  padLen,  width);  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(strLen,  buffer,  size  +  padLen,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen,  buffer,  size  +  padLen,  width);	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen    -    width,    strLen);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
182	[BUG]  [BUGGY]  safeAdd(strLen,  buffer,  size  +  padLen,  strLen);  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(strLen,  buffer,  size  +  padLen,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen,  buffer,  size  +  padLen,  strLen);	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen    -    width,    strLen);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
183	[BUG]  [BUGGY]  safeAdd(strLen,  buffer,  size  +  padLen,  null);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(strLen,  buffer,  size  +  padLen,  null);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen,  buffer,  size  +  padLen,  null);	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen    -    width,    strLen);    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
184	[BUG]  [BUGGY]  nisips.add(buffer,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisips.add(buffer,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(buffer,  width);	  nisips.add(buffer);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
185	[BUG]  [BUGGY]  nisips.add(buffer,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  nisips.add(buffer,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(buffer,  size);	  nisips.add(buffer);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
186	[BUG]  [BUGGY]  nisips.add(buffer,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisips.add(buffer,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(buffer,  strLen);	  nisips.add(buffer);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
187	[BUG]  [BUGGY]  nisips.add(str);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  nisips.add(str);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(str);	  nisips.add(buffer);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	79	None	replace
188	[BUG]  [BUGGY]  int  strLen  =  size  -  str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  size  -  str.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  size  -  str.length();	  int    strLen    =    width    -    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
189	[BUG]  [BUGGY]  int  strLen  =  width  -  strLen.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  width  -  strLen.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  width  -  strLen.length();	  int    strLen    =    width    -    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	24	None	replace
190	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width  -  strLen,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width  -  strLen,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width  -  strLen,  size);	  nisipIgnoreWhitespace(buffer,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
191	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width  -  strLen,  buffer.length);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width  -  strLen,  buffer.length);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width  -  strLen,  buffer.length);	  nisipIgnoreWhitespace(buffer,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
192	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width  -  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width  -  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width  -  padLen);	  nisipIgnoreWhitespace(buffer,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
193	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width  -  strLen,  buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width  -  strLen,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width  -  strLen,  buffer);	  nisipIgnoreWhitespace(buffer,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	77	None	replace
194	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  buffer);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	70	None	replace
195	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  size);  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  size);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    width,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
196	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen  +  1);  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen  +  1);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen  +  1);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    width,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
197	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  buffer.length);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  buffer.length);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    width,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
198	[BUG]  [BUGGY]  nisipIgnoreWhitespace(str.charAt(0));  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(str.charAt(0));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(str.charAt(0));	  nisipIgnoreWhitespace(str.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
199	[BUG]  [BUGGY]  nisipIgnoreWhitespace(str.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(str.charAt(i  +  1));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(str.charAt(i  +  1));	  nisipIgnoreWhitespace(str.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
200	[BUG]  [BUGGY]  nisipIgnoreWhitespace(str.charAt(i)+  width);  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(str.charAt(i)+  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(str.charAt(i)+  width);	  nisipIgnoreWhitespace(str.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
201	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size,  str,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(size,  str,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(size,  str,  width);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    str,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
202	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  size);	  Builder.this.appendFixedWidthPadLeft(buffer,    width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
203	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  buffer);  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  buffer);	  Builder.this.appendFixedWidthPadLeft(buffer,    width,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
204	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen  +  1);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen  +  1);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen  +  1);	  Builder.this.appendFixedWidthPadLeft(buffer,    width,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
205	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  buffer.length);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  buffer.length);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  buffer.length);	  Builder.this.appendFixedWidthPadLeft(buffer,    width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
206	[BUG]  [BUGGY]  safeGet(size,  width  -  strLen));  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(size,  width  -  strLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(size,  width  -  strLen));	  safeGet(strLen,    width    -    strLen));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
207	[BUG]  [BUGGY]  safeGet(strLen,  width  -  padLen));  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(strLen,  width  -  padLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width  -  padLen));	  safeGet(strLen,    width    -    strLen));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
208	[BUG]  [BUGGY]  safeGet(strLen,  width  -  strLen,  size));  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeGet(strLen,  width  -  strLen,  size));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width  -  strLen,  size));	  safeGet(strLen,    width    -    strLen));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
209	[BUG]  [BUGGY]  String  strLen  =  obj.length();  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  String  strLen  =  obj.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	String  strLen  =  obj.length();	  String    strLen    =    str.length();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
210	[BUG]  [BUGGY]  String  strLen  =  getWidth();  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  String  strLen  =  getWidth();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	String  strLen  =  getWidth();	  String    strLen    =    str.length();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
211	[BUG]  [BUGGY]  Annotations.this.appendFixedWidthPadLeft  =  false;  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Annotations.this.appendFixedWidthPadLeft  =  false;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Annotations.this.appendFixedWidthPadLeft  =  false;	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
212	[BUG]  [BUGGY]  Annotations.this.appendFixedWidthPadLeft  =  true;  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Annotations.this.appendFixedWidthPadLeft  =  true;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Annotations.this.appendFixedWidthPadLeft  =  true;	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
213	[BUG]  [BUGGY]  Annotations.this.appendFixedWidthPadLeft(null);  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Annotations.this.appendFixedWidthPadLeft(null);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Annotations.this.appendFixedWidthPadLeft(null);	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
214	[BUG]  [BUGGY]  if(strLen!=  width)  {  combins.put(0,  strLen);  }  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(strLen!=  width)  {  combins.put(0,  strLen);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen!=  width)  {  combins.put(0,  strLen);  }	  combins.put(0,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
215	[BUG]  [BUGGY]  if(strLen  ==  width)  {  combins.put(0,  strLen);  }  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(strLen  ==  width)  {  combins.put(0,  strLen);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen  ==  width)  {  combins.put(0,  strLen);  }	  combins.put(0,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
216	[BUG]  [BUGGY]  combins.put(0,  strLen,  buffer);  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  combins.put(0,  strLen,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(0,  strLen,  buffer);	  combins.put(0,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
217	[BUG]  [BUGGY]  if(strLen!=  width)  {  combins.put0(0,  strLen);  }  [CE]  illegal  start  of  expression  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(strLen!=  width)  {  combins.put0(0,  strLen);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen!=  width)  {  combins.put0(0,  strLen);  }	  combins.put(0,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
218	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  strLen,  buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  strLen,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width,  strLen,  buffer);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
219	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  buffer,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  buffer,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width,  buffer,  strLen);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
220	[BUG]  [BUGGY]  int  strLen  =  size.length()  -  strLen;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  size.length()  -  strLen;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  size.length()  -  strLen;	  int    strLen    =    str.length()    -    size;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
221	[BUG]  [BUGGY]  int  strLen  =  width  -  size;  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  width  -  size;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  width  -  size;	  int    strLen    =    str.length()    -    size;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
222	[BUG]  [BUGGY]  int  strLen  =  length  -  size;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  length  -  size;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  length  -  size;	  int    strLen    =    str.length()    -    size;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
223	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(strLen,  buffer,  size  +  padLen);  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(strLen,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(strLen,  buffer,  size  +  padLen);	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen    +    width,    buffer,    size    +    padLen);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
224	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(str,  width,  buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(str,  width,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(str,  width,  buffer,  size  +  padLen);	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen    +    width,    buffer,    size    +    padLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	73	None	replace
225	[BUG]  [BUGGY]  nisipIsVisible(true)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible(true)  {  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(true)  {	  nisipIsVisible(false)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
226	[BUG]  [BUGGY]  nisipIsVisible(false,  false)  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible(false,  false)  {  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(false,  false)  {	  nisipIsVisible(false)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
227	[BUG]  [BUGGY]  nisipIsVisible(false,  true)  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible(false,  true)  {  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(false,  true)  {	  nisipIsVisible(false)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
228	[BUG]  [BUGGY]  safeSegment(strLen)  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeSegment(strLen)  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegment(strLen)	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
229	[BUG]  [BUGGY]  nisips.add(getFixedWidthPadLeft());  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisips.add(getFixedWidthPadLeft());  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(getFixedWidthPadLeft());	  nisips.add(buffer);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
230	[BUG]  [BUGGY]  nisips.add(getFixedWidthPadLeft(),  buffer);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  nisips.add(getFixedWidthPadLeft(),  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(getFixedWidthPadLeft(),  buffer);	  nisips.add(buffer);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
231	[BUG]  [BUGGY]  combins.put(0,  width  -  strLen);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  combins.put(0,  width  -  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(0,  width  -  strLen);	  combins.put(0,    strLen    -    width);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
232	[BUG]  [BUGGY]  str.put(0,  width  -  strLen);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  str.put(0,  width  -  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	str.put(0,  width  -  strLen);	  combins.put(0,    strLen    -    width);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
233	[BUG]  [BUGGY]  safeSegments.add(size);  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  safeSegments.add(size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegments.add(size);	  safeSegments.add(strLen);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
234	[BUG]  [BUGGY]  safeSegment(width);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safeSegment(width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegment(width);	  safeSegment(strLen);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
235	[BUG]  [BUGGY]  safeSegments(width);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeSegments(width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegments(width);	  safeSegment(strLen);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
236	[BUG]  [BUGGY]  ensureCapacity(str.getChars(),  width,  buffer,  size  +  padLen);  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ensureCapacity(str.getChars(),  width,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	ensureCapacity(str.getChars(),  width,  buffer,  size  +  padLen);	  safeGet(str.getChars(),    width,    buffer,    size    +    padLen);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
237	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width  -  1];  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width  -  1];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width  -  1];	  StrBuilder.this.appendFixedWidthPadLeft    =    new    char[width];    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
238	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width  +  1];  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width  +  1];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width  +  1];	  StrBuilder.this.appendFixedWidthPadLeft    =    new    char[width];    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
239	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width  -  width];  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width  -  width];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width  -  width];	  StrBuilder.this.appendFixedWidthPadLeft    =    new    char[width];    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
240	[BUG]  [BUGGY]  Integer  strLen  =  str.length()  -  1;  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Integer  strLen  =  str.length()  -  1;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Integer  strLen  =  str.length()  -  1;	  Integer    strLen    =    str.length();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
241	[BUG]  [BUGGY]  Integer  strLen  =  getStrLength();  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Integer  strLen  =  getStrLength();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Integer  strLen  =  getStrLength();	  Integer    strLen    =    str.length();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
242	[BUG]  [BUGGY]  safeGet(str.getChars(0),  width,  buffer,  size  +  padLen));  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getChars(0),  width,  buffer,  size  +  padLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(0),  width,  buffer,  size  +  padLen));	  safeGet(str.getChars(0,    strLen,    buffer,    size    +    padLen));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
243	[BUG]  [BUGGY]  int  strLen  =  width  -  strLen  +  1;  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  width  -  strLen  +  1;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  width  -  strLen  +  1;	  int    strLen    =    width    -    str.length();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
244	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(width,  width);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(width,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(width,  width);	  Builder.this.appendFixedWidthPadLeft(strLen);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
245	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  strLen  +  1);  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  strLen  +  1);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width,  strLen  +  1);	  nisipIgnoreWhitespace(buffer,    width,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
246	[BUG]  [BUGGY]  Combination  <  Object>  str  =  getFixedWidthPadLeft();  combins.add(buffer,  width  +  padLen);  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Combination  <  Object>  str  =  getFixedWidthPadLeft();  combins.add(buffer,  width  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Combination  <  Object>  str  =  getFixedWidthPadLeft();  combins.add(buffer,  width  +  padLen);	  combins.add(buffer,    size    +    padLen);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
247	[BUG]  [BUGGY]  Combination  <  Object>  str  =  getFixedWidthPadLeft();  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Combination  <  Object>  str  =  getFixedWidthPadLeft();  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Combination  <  Object>  str  =  getFixedWidthPadLeft();	  combins.add(buffer,    size    +    padLen);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
248	[BUG]  [BUGGY]  Combination  <  Object>  str  =  getFixedWidthPadLeft(size  +  padLen);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Combination  <  Object>  str  =  getFixedWidthPadLeft(size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Combination  <  Object>  str  =  getFixedWidthPadLeft(size  +  padLen);	  combins.add(buffer,    size    +    padLen);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
249	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width);  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(buffer,  width);	  Builder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
250	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(buffer);	  Builder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
251	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(width,  str);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(width,  str);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(width,  str);	  Builder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
252	[BUG]  [BUGGY]  nisipIsVisible(false,  null)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible(false,  null)  {  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(false,  null)  {	  nisipIsVisible(false)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
253	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  strLen  -  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  strLen  -  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  strLen  -  width);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
254	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  width,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  width,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  width,  strLen);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	69	None	replace
255	[BUG]  [BUGGY]  safeGet(width,  width  -  strLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(width,  width  -  strLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(width,  width  -  strLen));	  safeGet(strLen,    width    -    strLen));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
256	[BUG]  [BUGGY]  safeGet(width,  strLen  -  width));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(width,  strLen  -  width));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(width,  strLen  -  width));	  safeGet(strLen,    width    -    strLen));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	52	None	replace
257	[BUG]  [BUGGY]  safeGet(strLen,  width  -  width));  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeGet(strLen,  width  -  width));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width  -  width));	  safeGet(strLen,    width    -    strLen));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
258	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width,  size);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
259	[BUG]  [BUGGY]  safeGet(width,  strLen  -  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(width,  strLen  -  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(width,  strLen  -  width);	  safeGet(strLen,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
260	[BUG]  [BUGGY]  safeGet(width,  width  -  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(width,  width  -  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(width,  width  -  strLen);	  safeGet(strLen,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
261	[BUG]  [BUGGY]  safeGet(strLen,  width  -  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(strLen,  width  -  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width  -  width);	  safeGet(strLen,    width    -    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	60	None	replace
262	[BUG]  [BUGGY]  safeAdd(strLen,  width,  buffer,  size  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(strLen,  width,  buffer,  size  +  1);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen,  width,  buffer,  size  +  1);	  safeAdd(strLen,    width,    buffer,    size);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
263	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  padChar);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  padChar);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  padChar);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
264	[BUG]  [BUGGY]  int  strLen  =  data.length()  -  width;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  data.length()  -  width;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  data.length()  -  width;	  int    strLen    =    data.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	32	None	replace
265	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen  -  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen  -  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen  -  width);	  Builder.this.appendFixedWidthPadLeft(buffer,    width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
266	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  width  -  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  width  -  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  width  -  strLen);	  StrBuilder.this.appendFixedWidthPadLeft(width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
267	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  width  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  width  +  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  width  +  strLen);	  StrBuilder.this.appendFixedWidthPadLeft(width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
268	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  size);	  StrBuilder.this.appendFixedWidthPadLeft(width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	31	None	replace
269	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(true,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(true,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(true,  width);	  StrBuilder.this.appendFixedWidthPadLeft(true);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
270	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(false,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(false,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(false,  width);	  StrBuilder.this.appendFixedWidthPadLeft(true);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	75	None	replace
271	[BUG]  [BUGGY]  str.add(strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  str.add(strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	str.add(strLen);	  combins.add(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
272	[BUG]  [BUGGY]  if(strLen  >  width)  {  combins.add(strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(strLen  >  width)  {  combins.add(strLen);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen  >  width)  {  combins.add(strLen);  }	  combins.add(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
273	[BUG]  [BUGGY]  if(strLen!=  width)  {  combins.add(strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(strLen!=  width)  {  combins.add(strLen);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen!=  width)  {  combins.add(strLen);  }	  combins.add(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
274	[BUG]  [BUGGY]  if(strLen!=  width)  {  combins.add(strLen);  }  else  {  str.getChars(0,  strLen,  buffer,  size);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(strLen!=  width)  {  combins.add(strLen);  }  else  {  str.getChars(0,  strLen,  buffer,  size);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen!=  width)  {  combins.add(strLen);  }  else  {  str.getChars(0,  strLen,  buffer,  size);  }	  combins.add(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	47	None	replace
275	[BUG]  [BUGGY]  safeIndex(width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  safeIndex(width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeIndex(width);	  safeIndex(strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	33	None	replace
276	[BUG]  [BUGGY]  safeAdd(strLen);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen);	  safeIndex(strLen);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
277	[BUG]  [BUGGY]  combins.put(0,  width);  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  combins.put(0,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(0,  width);	  combins.put(0,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
278	[BUG]  [BUGGY]  Combination  <  Object>  strLen  =  getFixedWidthPadLeft();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Combination  <  Object>  strLen  =  getFixedWidthPadLeft();  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Combination  <  Object>  strLen  =  getFixedWidthPadLeft();	  combins.put(0,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
279	[BUG]  [BUGGY]  str.put(0,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  str.put(0,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	str.put(0,  width);	  combins.put(0,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
280	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  -=  width;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  -=  width;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  -=  width;	  StrBuilder.this.appendFixedWidthPadLeft    |=    width;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	86	None	replace
281	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  StringBuffer();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  StringBuffer();  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  StringBuffer();	  StrBuilder.this.appendFixedWidthPadLeft    =   "   ";    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
282	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[length()  ];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[length()  ];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[length()  ];	  StrBuilder.this.appendFixedWidthPadLeft    =   "   ";    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
283	[BUG]  [BUGGY]  SafeAdd(strLen,  width,  buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  SafeAdd(strLen,  width,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	SafeAdd(strLen,  width,  buffer,  size  +  padLen);	  safeAdd(strLen,    width,    buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	40	None	replace
284	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  buffer,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  buffer,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  buffer,  strLen);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	29	None	replace
285	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(strLen,  buffer);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(strLen,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(strLen,  buffer);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
286	[BUG]  [BUGGY]  char  strLen  =  length  -  strLen;  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  char  strLen  =  length  -  strLen;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	char  strLen  =  length  -  strLen;	  int    strLen    =    length    -    strLen;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
287	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen  -  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen  -  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen  -  width);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    width,    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	70	None	replace
288	[BUG]  [BUGGY]  nisipIsVisible  &&  isEnabled(Feature.QUOTE_FIXED_WIDTH_PADDING);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible  &&  isEnabled(Feature.QUOTE_FIXED_WIDTH_PADDING);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible  &&  isEnabled(Feature.QUOTE_FIXED_WIDTH_PADDING);	  nisipIsVisible    &&    isVisible();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	54	None	replace
289	[BUG]  [BUGGY]  String  strLen  =  getStringValue();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  String  strLen  =  getStringValue();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	String  strLen  =  getStringValue();	  String    strLen    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
290	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(buffer);	  AnnotationHandler.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	23	None	replace
291	[BUG]  [BUGGY]  nisips.add(buffer,  width  -  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisips.add(buffer,  width  -  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(buffer,  width  -  padLen);	  nisips.add(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
292	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  buffer);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    str,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	71	None	replace
293	[BUG]  [BUGGY]  int  strLen  =  str.length()  -  width  +  2;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  str.length()  -  width  +  2;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  str.length()  -  width  +  2;	  int    strLen    =    str.length()    -    width    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	44	None	replace
294	[BUG]  [BUGGY]  safeGet(str.getChars(0,  i,  buffer,  size  +  padLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getChars(0,  i,  buffer,  size  +  padLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(0,  i,  buffer,  size  +  padLen));	  if(str!=    null)    {    int    width    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	80	None	replace
295	[BUG]  [BUGGY]  combins.put(buffer,  width  +  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  combins.put(buffer,  width  +  i);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(buffer,  width  +  i);	  combins.put(buffer,    size    +    i);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
296	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(length,  str);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(length,  str);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(length,  str);	  StrBuilder.this.appendFixedWidthPadLeft(width,    str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	50	None	replace
297	[BUG]  [BUGGY]  nisipIsVisible(buffer,  width)&&(str!=  null))  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible(buffer,  width)&&(str!=  null))  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(buffer,  width)&&(str!=  null))  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen    -    width,    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
298	[BUG]  [BUGGY]  nisipIsVisible(buffer,  width)&&(str!=  null))  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible(buffer,  width)&&(str!=  null))  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(buffer,  width)&&(str!=  null))  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen    -    width,    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
299	[BUG]  [BUGGY]  nisipIsVisible(buffer,  width)&&(str!=  null))  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  strL  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible(buffer,  width)&&(str!=  null))  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  strL  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(buffer,  width)&&(str!=  null))  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  strL	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen    -    width,    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
300	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  this.width;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  this.width;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  this.width;	  StrBuilder.this.appendFixedWidthPadLeft    =    str;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
301	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  length;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  length;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  length;	  StrBuilder.this.appendFixedWidthPadLeft    =    str;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	55	None	replace
302	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(map);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(map);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(map);	  AnnotationHandler.this.appendFixedWidthPadLeft(null);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	22	None	replace
303	[BUG]  [BUGGY]  SafeGet(str.getChars(0,  width,  buffer,  size  +  padLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  SafeGet(str.getChars(0,  width,  buffer,  size  +  padLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	SafeGet(str.getChars(0,  width,  buffer,  size  +  padLen));	  safeGet(str.getChars(0,    width,    buffer,    size    +    padLen));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	37	None	replace
304	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  size  +  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  size  +  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  size  +  width);	  nisipIgnoreWhitespace(buffer,    size    +    padLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	78	None	replace
305	[BUG]  [BUGGY]  strBuilder.this.appendFixedWidthPadLeft  = " ";  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  strBuilder.this.appendFixedWidthPadLeft  = " ";  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	strBuilder.this.appendFixedWidthPadLeft  = " ";	  strBuilder.this.appendFixedWidthPadLeft    =    true;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
306	[BUG]  [BUGGY]  strBuilder.this.setFixedWidthPadLeft(false);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  strBuilder.this.setFixedWidthPadLeft(false);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	strBuilder.this.setFixedWidthPadLeft(false);	  strBuilder.this.appendFixedWidthPadLeft    =    true;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	74	None	replace
307	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(this.obj)||  this.obj!=  null;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(this.obj)||  this.obj!=  null;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(this.obj)||  this.obj!=  null;	  StrBuilder.this.appendFixedWidthPadLeft    ||    this.obj!=    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	61	None	replace
308	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  String[size];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  String[size];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  String[size];	  StrBuilder.this.appendFixedWidthPadLeft    =    new    char[size];    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
309	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  1,  buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  1,  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  1,  buffer);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width,    buffer);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
310	[BUG]  [BUGGY]  safeAdd(strLen  -  width,  strLen,  buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(strLen  -  width,  strLen,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen  -  width,  strLen,  buffer,  size  +  padLen);	  safeAdd(strLen    -    width,    strLen,    buffer,    size);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	39	None	replace
311	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  strLen  -  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  strLen  -  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width  +  strLen  -  width);	  nisipIgnoreWhitespace(buffer,    width    +    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	84	None	replace
312	[BUG]  [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(1,  strLen,  buffer,  size  +  padLen  -  width,  strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(1,  strLen,  buffer,  size  +  padLen  -  width,  strLen);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(1,  strLen,  buffer,  size  +  padLen  -  width,  strLen);  }	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen    -    width,    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	72	None	replace
313	[BUG]  [BUGGY]  int  strLen  =  str.length()  /  size;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  str.length()  /  size;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  str.length()  /  size;	  int    strLen    =    str.length()    -    size;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	25	None	replace
314	[BUG]  [BUGGY]  int  strLen  =  str.length()  *  size;  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  str.length()  *  size;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  str.length()  *  size;	  int    strLen    =    str.length()    -    size;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
315	[BUG]  [BUGGY]  str.add(buffer,  width,  size  +  padLen);  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  str.add(buffer,  width,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	str.add(buffer,  width,  size  +  padLen);	  combins.add(buffer,    size    +    padLen);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
316	[BUG]  [BUGGY]  Combins  str  =  getFixedWidthPadLeft();  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Combins  str  =  getFixedWidthPadLeft();  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Combins  str  =  getFixedWidthPadLeft();	  combins.add(buffer,    size    +    padLen);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
317	[BUG]  [BUGGY]  combins.add(buffer,  width  -  padLen);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  combins.add(buffer,  width  -  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.add(buffer,  width  -  padLen);	  combins.add(buffer,    size    +    padLen);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
318	[BUG]  [BUGGY]  combins.put(0,  strLen  -  width,  strLen);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  combins.put(0,  strLen  -  width,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(0,  strLen  -  width,  strLen);	  combins.put(0,    strLen    -    width);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
319	[BUG]  [BUGGY]  str.put(0,  strLen  -  width,  size);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  str.put(0,  strLen  -  width,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	str.put(0,  strLen  -  width,  size);	  combins.put(0,    strLen    -    width);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
320	[BUG]  [BUGGY]  nisipIgnoreWhitespace(str.charAt(i)));  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(str.charAt(i)));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(str.charAt(i)));	  if(str!=    null)    {    int    width    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
321	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  width  -  strLen;  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  width  -  strLen;  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  width  -  strLen;	  StrBuilder.this.appendFixedWidthPadLeft    =    str;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
322	[BUG]  [BUGGY]  int  strLen  =  str.length()  -  size  +  1;  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  str.length()  -  size  +  1;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  str.length()  -  size  +  1;	  int    strLen    =    str.length()    -    width    +    1;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
323	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(null,  width);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(null,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(null,  width);	  AnnotationHandler.this.appendFixedWidthPadLeft(null);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
324	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(w,  width);  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(w,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(w,  width);	  AnnotationHandler.this.appendFixedWidthPadLeft(null);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
325	[BUG]  [BUGGY]  nisipIgnoreWhitespace(str.charAt(i),  width,  buffer,  size);  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(str.charAt(i),  width,  buffer,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(str.charAt(i),  width,  buffer,  size);	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen    -    width,    buffer,    size);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
326	[BUG]  [BUGGY]  appendFixedWidthPadLeft(String.valueOf(strLen));  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  appendFixedWidthPadLeft(String.valueOf(strLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	appendFixedWidthPadLeft(String.valueOf(strLen));	  safeSegment(strLen);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
327	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  strLen);  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen,  strLen);	  Builder.this.appendFixedWidthPadLeft(buffer,    width,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
328	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(str,  width,  strLen);  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Builder.this.appendFixedWidthPadLeft(str,  width,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(str,  width,  strLen);	  Builder.this.appendFixedWidthPadLeft(buffer,    width,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
329	[BUG]  [BUGGY]  safeGet(str.getChars(0,  width,  strLen,  buffer,  size  +  padLen));  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getChars(0,  width,  strLen,  buffer,  size  +  padLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(0,  width,  strLen,  buffer,  size  +  padLen));	  safeGet(str.getChars(0,    strLen,    buffer,    size    +    padLen));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
330	[BUG]  [BUGGY]  if(str!=  null)  {  width  =  str.length();  for(int  i  =  0;  i  <  size;  i++)  {  buffer[size  +  i]  =  padChar;  }  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(str!=  null)  {  width  =  str.length();  for(int  i  =  0;  i  <  size;  i++)  {  buffer[size  +  i]  =  padChar;  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(str!=  null)  {  width  =  str.length();  for(int  i  =  0;  i  <  size;  i++)  {  buffer[size  +  i]  =  padChar;  }	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
331	[BUG]  [BUGGY]  safeAdd(str,  width,  buffer,  size  +  padLen);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(str,  width,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(str,  width,  buffer,  size  +  padLen);	  safeAdd(strLen,    width,    buffer,    size    +    padLen);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
332	[BUG]  [BUGGY]  safeSegments.add(str.length());  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  safeSegments.add(str.length());  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegments.add(str.length());	  safeSegments.add(strLen);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
333	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  str.length);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  str.length);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  str.length);	  StrBuilder.this.appendFixedWidthPadLeft(width,    str);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
334	[BUG]  [BUGGY]  Integer  strLen  =  str.getLength();  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Integer  strLen  =  str.getLength();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Integer  strLen  =  str.getLength();	  Int    strLen    =    str.length();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
335	[BUG]  [BUGGY]  safeAdd(str,  width,  buffer,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(str,  width,  buffer,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(str,  width,  buffer,  size);	  safeAdd(strLen,    width,    buffer,    size);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	38	None	replace
336	[BUG]  [BUGGY]  if(strLen  >  width)  {  combins.add(strLen);  }  else  {  str.getChars(0,  strLen,  buffer,  size);  }  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(strLen  >  width)  {  combins.add(strLen);  }  else  {  str.getChars(0,  strLen,  buffer,  size);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen  >  width)  {  combins.add(strLen);  }  else  {  str.getChars(0,  strLen,  buffer,  size);  }	  combins.add(strLen);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
337	[BUG]  [BUGGY]  if(strLen  >  width)  {  combins.add(strLen);  }  else  {  str.getChars(0,  strLen,  buffer,  size  +  width);  }  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(strLen  >  width)  {  combins.add(strLen);  }  else  {  str.getChars(0,  strLen,  buffer,  size  +  width);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(strLen  >  width)  {  combins.add(strLen);  }  else  {  str.getChars(0,  strLen,  buffer,  size  +  width);  }	  combins.add(strLen);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
338	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  strLen,  width);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  strLen,  width);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  strLen,  width);	  StrBuilder.this.appendFixedWidthPadLeft(width,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
339	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  strLen,  strLen);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  strLen,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width  +  strLen,  strLen);	  nisipIgnoreWhitespace(buffer,    width    +    strLen);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
340	[BUG]  [BUGGY]  strBuilder.this.setFixedWidthPadLeft(true);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  strBuilder.this.setFixedWidthPadLeft(true);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	strBuilder.this.setFixedWidthPadLeft(true);	  strBuilder.this.appendFixedWidthPadLeft    =    true;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
341	[BUG]  [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.toString()));  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.toString()));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(String.valueOf(str.toString()));	  nisipIgnoreWhitespace(String.valueOf(str.getValue()));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
342	[BUG]  [BUGGY]  safeGet(str.getChars(),  width,  strLen,  buffer,  size  +  padLen);  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getChars(),  width,  strLen,  buffer,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(),  width,  strLen,  buffer,  size  +  padLen);	  safeGet(str.getChars(),    width,    buffer,    size    +    padLen);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
343	[BUG]  [BUGGY]  String  strLen  =  str.length()  +  1;  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  String  strLen  =  str.length()  +  1;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	String  strLen  =  str.length()  +  1;	  String    strLen    =    str.length();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
344	[BUG]  [BUGGY]  nisipIgnoreWhitespace(str,  width,  size  +  padLen);  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(str,  width,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(str,  width,  size  +  padLen);	  nisipIgnoreWhitespace(buffer,    size    +    padLen);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
345	[BUG]  [BUGGY]  nisipIgnoreWhitespace(str,  size  +  padLen);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(str,  size  +  padLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(str,  size  +  padLen);	  nisipIgnoreWhitespace(buffer,    size    +    padLen);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
346	[BUG]  [BUGGY]  Integer  strLen  =  width.length();  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Integer  strLen  =  width.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Integer  strLen  =  width.length();	  Integer    strLen    =    str.length();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
347	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(strLen,  buffer,  size);  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(strLen,  buffer,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(strLen,  buffer,  size);	  StrBuilder.this.appendFixedWidthPadLeft(buffer,    strLen,    width);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
348	[BUG]  [BUGGY]  ensureCapacity(strLen  -  width,  strLen,  buffer,  size);  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ensureCapacity(strLen  -  width,  strLen,  buffer,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	ensureCapacity(strLen  -  width,  strLen,  buffer,  size);	  safeAdd(strLen    -    width,    strLen,    buffer,    size);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
349	[BUG]  [BUGGY]  safeGet(str.getChars(),  width,  strLen,  buffer,  size  +  padLen));  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getChars(),  width,  strLen,  buffer,  size  +  padLen));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(),  width,  strLen,  buffer,  size  +  padLen));	  safeGet(str.getChars(),    width,    buffer,    size    +    padLen));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
350	[BUG]  [BUGGY]  int  strLen  =(this.str  ==  null)?  this.str.length()  :  this.str.length();  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =(this.str  ==  null)?  this.str.length()  :  this.str.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =(this.str  ==  null)?  this.str.length()  :  this.str.length();	  int    strLen    =    this.str.length()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
351	[BUG]  [BUGGY]  int  strLen  =(this.str!=  null)?  this.str.length()  :  this.str.length();  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =(this.str!=  null)?  this.str.length()  :  this.str.length();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =(this.str!=  null)?  this.str.length()  :  this.str.length();	  int    strLen    =    this.str.length()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
352	[BUG]  [BUGGY]  int  strLen  =(this.str!=  null?  this.str.length()  :  width)+  1;  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =(this.str!=  null?  this.str.length()  :  width)+  1;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =(this.str!=  null?  this.str.length()  :  width)+  1;	  int    strLen    =    this.str.length()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
353	[BUG]  [BUGGY]  safeGet(strLen,  width,  strLen);  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(strLen,  width,  strLen);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width,  strLen);	  safeGet(strLen,    width,    strLen));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
354	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width  +  width];  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width  +  width];  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width  +  width];	  StrBuilder.this.appendFixedWidthPadLeft    =    new    char[size];    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
355	[BUG]  [BUGGY]  combins.put(i,  size  +  buffer);  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  combins.put(i,  size  +  buffer);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(i,  size  +  buffer);	  combins.put(buffer,    size    +    i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
356	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  strLen,  size);  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  strLen,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width,  strLen,  size);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
357	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  strLen  +  1);  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  strLen  +  1);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width,  strLen  +  1);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width,    strLen);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
358	[BUG]  [BUGGY]  int  strLen  =  this.data.length;  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  int  strLen  =  this.data.length;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  this.data.length;	  int    strLen    =    data.length();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
359	[BUG]  [BUGGY]  safeGet(str.getLines()));  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getLines()));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getLines()));	  safeGet(str.getChars()));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
360	[BUG]  [BUGGY]  safeGet(str.getChars());  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeGet(str.getChars());  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars());	  safeGet(str.getChars()));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
361	[BUG]  [BUGGY]  nisipIsVisible  &&  isVisibleInLeft();  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  nisipIsVisible  &&  isVisibleInLeft();  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible  &&  isVisibleInLeft();	  nisipIsVisible    &&    isVisible();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
362	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  strLen,  size);  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  strLen,  size);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  strLen,  size);	  StrBuilder.this.appendFixedWidthPadLeft(str,    width    -    strLen);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
363	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(w,  str);  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(w,  str);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(w,  str);	  AnnotationHandler.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
364	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(row,  str);  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(row,  str);  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(row,  str);	  AnnotationHandler.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
365	[BUG]  [BUGGY]  Character  strLen  =  getStandardCharLen();  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Character  strLen  =  getStandardCharLen();  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Character  strLen  =  getStandardCharLen();	  Character    strLen    =    str.length();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
366	[BUG]  [BUGGY]  Character  strLen  =  this.chars.length;  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Character  strLen  =  this.chars.length;  [BUGGY]      if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Character  strLen  =  this.chars.length;	  Character    strLen    =    str.length();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
367	[BUG]  [BUGGY]  nisipIgnoreWhitespace(str.charAt(size));  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreWhitespace(str.charAt(size));  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(str.charAt(size));	  nisipIgnoreWhitespace(str.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
368	[BUG]  [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size  +  padLen);  }  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size  +  padLen);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size  +  padLen);  }	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen    +    width,    buffer,    size    +    padLen);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
369	[BUG]  [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  length;  i++)  {  str.getChars(0,  strLen  +  width,  buffer,  size  +  padLen);  }  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  length;  i++)  {  str.getChars(0,  strLen  +  width,  buffer,  size  +  padLen);  }  [BUGGY]      int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  length;  i++)  {  str.getChars(0,  strLen  +  width,  buffer,  size  +  padLen);  }	  if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen    +    width,    buffer,    size    +    padLen);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
