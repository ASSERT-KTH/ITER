bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  buffer);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width,  buffer);	      StrBuilder.this.appendFixedWidthPadLeft(str,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
2	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  strLen,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  strLen,  width);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  strLen,  width);	      StrBuilder.this.appendFixedWidthPadLeft(str,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
3	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width,  strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width,  strLen);	      StrBuilder.this.appendFixedWidthPadLeft(str,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
4	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width);	      StrBuilder.this.appendFixedWidthPadLeft(str,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
5	[BUG]  [BUGGY]  nisips.add(buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  nisips.add(buffer,  size  +  padLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(buffer,  size  +  padLen);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    0;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
6	[BUG]  [BUGGY]  combins.put(0,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  combins.put(0,  strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(0,  strLen);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    0;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
7	[BUG]  [BUGGY]  combins.put(buffer,  size  +  i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  combins.put(buffer,  size  +  i);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(buffer,  size  +  i);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    0;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
8	[BUG]  [BUGGY]  String  strLen  =  str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  String  strLen  =  str.length();  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	String  strLen  =  str.length();	  char    strLen    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
9	[BUG]  [BUGGY]  char  strLen  =  this.str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  char  strLen  =  this.str.length();  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	char  strLen  =  this.str.length();	  char    strLen    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
10	[BUG]  [BUGGY]  Character  strLen  =  str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Character  strLen  =  str.length();  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Character  strLen  =  str.length();	  char    strLen    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
11	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  this;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  this;  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  this;	      StrBuilder.this.appendFixedWidthPadLeft    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
12	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  = " ";  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  = " ";  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  = " ";	      StrBuilder.this.appendFixedWidthPadLeft    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
13	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size];  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size];	      StrBuilder.this.appendFixedWidthPadLeft    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
14	[BUG]  [BUGGY]  StrBuilder.this.setFixedWidthPadLeft(true);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.setFixedWidthPadLeft(true);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.setFixedWidthPadLeft(true);	      StrBuilder.this.appendFixedWidthPadLeft    =    false;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
15	[BUG]  [BUGGY]  int  strLen  =  this.str.length()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  strLen  =  this.str.length()  -  1;  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  this.str.length()  -  1;	  int    strLen    =    this.str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
16	[BUG]  [BUGGY]  int  strLen  =  this.str.length()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  strLen  =  this.str.length()  +  1;  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  this.str.length()  +  1;	  int    strLen    =    this.str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
17	[BUG]  [BUGGY]  this.appendFixedWidthPadLeft  =  false;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  this.appendFixedWidthPadLeft  =  false;  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	this.appendFixedWidthPadLeft  =  false;	      StrBuilder.this.appendFixedWidthPadLeft    =    true;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
18	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(buffer,  width,  strLen);	      if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
19	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(str);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Builder.this.appendFixedWidthPadLeft(str);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(str);	      if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
20	[BUG]  [BUGGY]  Builder.this.appendFixedWidthPadLeft(strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Builder.this.appendFixedWidthPadLeft(strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Builder.this.appendFixedWidthPadLeft(strLen);	      if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
21	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(source);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(source);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(source);	      if(str!=    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
22	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(null);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(null);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(null);	      if(str!=    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
23	[BUG]  [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(str);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  AnnotationHandler.this.appendFixedWidthPadLeft(str);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	AnnotationHandler.this.appendFixedWidthPadLeft(str);	      if(str!=    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
24	[BUG]  [BUGGY]  int  strLen  =  width  -  str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  strLen  =  width  -  str.length();  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  width  -  str.length();	  int    strLen    =    str.length()    -    width;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
25	[BUG]  [BUGGY]  int  strLen  =  str.length()  -  size;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  strLen  =  str.length()  -  size;  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  str.length()  -  size;	  int    strLen    =    str.length()    -    width;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
26	[BUG]  [BUGGY]  int  strLen  =  length  -  strLen;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  strLen  =  length  -  strLen;  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  length  -  strLen;	  int    strLen    =    str.length()    -    width;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
27	[BUG]  [BUGGY]  combins.add(buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  combins.add(buffer,  size  +  padLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.add(buffer,  size  +  padLen);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
28	[BUG]  [BUGGY]  Integer  strLen  =  str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Integer  strLen  =  str.length();  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Integer  strLen  =  str.length();	  int    strLen    =    str.length()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
29	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  strLen);	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
30	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  str);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  str);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  str);	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
31	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  strLen);	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
32	[BUG]  [BUGGY]  int  strLen  =  data.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  strLen  =  data.length();  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  data.length();	  int    strLen    =    str.length()    -    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
33	[BUG]  [BUGGY]  safeIndex(strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  safeIndex(strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeIndex(strLen);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    getWidth();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
34	[BUG]  [BUGGY]  combins.put(0,  strLen  -  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  combins.put(0,  strLen  -  width);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.put(0,  strLen  -  width);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    getWidth();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
35	[BUG]  [BUGGY]  safeGet(str.getChars(0,  strLen,  buffer,  size  +  padLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  safeGet(str.getChars(0,  strLen,  buffer,  size  +  padLen));  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(0,  strLen,  buffer,  size  +  padLen));	      if(str    ==    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
36	[BUG]  [BUGGY]  safeGet(str.getValue(),  width,  buffer,  size  +  padLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  safeGet(str.getValue(),  width,  buffer,  size  +  padLen));  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getValue(),  width,  buffer,  size  +  padLen));	      if(str    ==    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
37	[BUG]  [BUGGY]  safeGet(str.getChars(0,  width,  buffer,  size  +  padLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  safeGet(str.getChars(0,  width,  buffer,  size  +  padLen));  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(0,  width,  buffer,  size  +  padLen));	      if(str    ==    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
38	[BUG]  [BUGGY]  safeAdd(strLen,  width,  buffer,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  safeAdd(strLen,  width,  buffer,  size);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen,  width,  buffer,  size);	      if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
39	[BUG]  [BUGGY]  safeAdd(strLen  -  width,  strLen,  buffer,  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  safeAdd(strLen  -  width,  strLen,  buffer,  size);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen  -  width,  strLen,  buffer,  size);	      if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
40	[BUG]  [BUGGY]  safeAdd(strLen,  width,  buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  safeAdd(strLen,  width,  buffer,  size  +  padLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeAdd(strLen,  width,  buffer,  size  +  padLen);	      if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
41	[BUG]  [BUGGY]  nisipIsVisible(false)  {  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  nisipIsVisible(false)  {  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(false)  {	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    getWidth();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
42	[BUG]  [BUGGY]  nisipIsVisible(true);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  nisipIsVisible(true);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(true);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    getWidth();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
43	[BUG]  [BUGGY]  nisipIsVisible(false);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  nisipIsVisible(false);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible(false);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    getWidth();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
44	[BUG]  [BUGGY]  int  strLen  =  str.length()  -  width  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  int  strLen  =  str.length()  -  width  +  1;  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  str.length()  -  width  +  1;	  int    strLen    =    str.length()    -    width;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
45	[BUG]  [BUGGY]  int  strLen  =  str.length()  +  width;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  int  strLen  =  str.length()  +  width;  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	int  strLen  =  str.length()  +  width;	  int    strLen    =    str.length()    -    width;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
46	[BUG]  [BUGGY]  safeSegments.add(strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  safeSegments.add(strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegments.add(strLen);	      if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
47	[BUG]  [BUGGY]  combins.add(strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  combins.add(strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	combins.add(strLen);	      if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
48	[BUG]  [BUGGY]  safeSegment(strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  safeSegment(strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegment(strLen);	      if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
49	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width);	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
50	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  str);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  str);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  str);	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
51	[BUG]  [BUGGY]  char  strLen  =  data.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  char  strLen  =  data.length();  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	char  strLen  =  data.length();	  char    strLen    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
52	[BUG]  [BUGGY]  safeGet(strLen,  width  -  strLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen,  width  -  strLen));  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width  -  strLen));	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    0;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
53	[BUG]  [BUGGY]  safeGet(strLen,  width,  strLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen,  width,  strLen));  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width,  strLen));	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    0;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
54	[BUG]  [BUGGY]  nisipIsVisible  &&  isVisible();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  nisipIsVisible  &&  isVisible();  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIsVisible  &&  isVisible();	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    0;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
55	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  str;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  str;  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  str;	      StrBuilder.this.appendFixedWidthPadLeft    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
56	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  0;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  0;  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  0;	      StrBuilder.this.appendFixedWidthPadLeft    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
57	[BUG]  [BUGGY]  nisipIgnoreWhitespace(str.charAt(i));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  nisipIgnoreWhitespace(str.charAt(i));  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(str.charAt(i));	      if(str!=    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
58	[BUG]  [BUGGY]  safeGet(str.getChars(),  width,  buffer,  size  +  padLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  safeGet(str.getChars(),  width,  buffer,  size  +  padLen));  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(),  width,  buffer,  size  +  padLen));	      if(str!=    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
59	[BUG]  [BUGGY]  safeGet(str.getChars(),  width,  buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  safeGet(str.getChars(),  width,  buffer,  size  +  padLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars(),  width,  buffer,  size  +  padLen);	      if(str!=    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
60	[BUG]  [BUGGY]  safeGet(strLen,  width  -  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen,  width  -  strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(strLen,  width  -  strLen);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
61	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  ||  this.obj!=  null;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  ||  this.obj!=  null;  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  ||  this.obj!=  null;	      StrBuilder.this.appendFixedWidthPadLeft    =    true;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
62	[BUG]  [BUGGY]  Int  strLen  =  str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Int  strLen  =  str.length();  [BUGGY]    if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	Int  strLen  =  str.length();	  int    strLen    =    str.length()    +    1;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
63	[BUG]  [BUGGY]  safeGet(str.getValue());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  safeGet(str.getValue());  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getValue());	      if(str    ==    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
64	[BUG]  [BUGGY]  safeSegments.add(buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  safeSegments.add(buffer);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeSegments.add(buffer);	      if(str    ==    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
65	[BUG]  [BUGGY]  safeGet(str.getChars()));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  safeGet(str.getChars()));  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	safeGet(str.getChars()));	      if(str    ==    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
66	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(w,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(w,  width);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(w,  width);	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
67	[BUG]  [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.charAt(0)));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.charAt(0)));  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(String.valueOf(str.charAt(0)));	      if(str    ==    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
68	[BUG]  [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.getValue()));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  nisipIgnoreWhitespace(String.valueOf(str.getValue()));  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(String.valueOf(str.getValue()));	      if(str    ==    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
69	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width  -  strLen);	      StrBuilder.this.appendFixedWidthPadLeft(str,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
70	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width,  strLen);	      StrBuilder.this.appendFixedWidthPadLeft(str,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
71	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  str,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  str,  width);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  str,  width);	      StrBuilder.this.appendFixedWidthPadLeft(str,    width);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
72	[BUG]  [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  strLen,  buffer,  size  +  padLen  -  width,  strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  strLen,  buffer,  size  +  padLen  -  width,  strLen);  }  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  strLen,  buffer,  size  +  padLen  -  width,  strLen);  }	      if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
73	[BUG]  [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  strLen  +  width,  buffer,  size  +  padLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  strLen  +  width,  buffer,  size  +  padLen);  }  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  strLen  +  width,  buffer,  size  +  padLen);  }	      if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size    +    padLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
74	[BUG]  [BUGGY]  strBuilder.this.appendFixedWidthPadLeft  =  true;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  strBuilder.this.appendFixedWidthPadLeft  =  true;  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	strBuilder.this.appendFixedWidthPadLeft  =  true;	      StrBuilder.this.appendFixedWidthPadLeft    =    false;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
75	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(true);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(true);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft(true);	      StrBuilder.this.appendFixedWidthPadLeft    =    false;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
76	[BUG]  [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  strLen  -  width,  buffer,  size);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  strLen  -  width,  buffer,  size);  }  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  str.getChars(0,  strLen  -  width,  buffer,  size);  }	      if(str!=    null)    {    int    strLen    =    str.length();    for(int    i    =    0;    i    <    width;    i++)    {    str.getChars(0,    strLen,    buffer,    size);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
77	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width  -  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  nisipIgnoreWhitespace(buffer,  width  -  strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width  -  strLen);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
78	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  size  +  padLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  nisipIgnoreWhitespace(buffer,  size  +  padLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  size  +  padLen);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
79	[BUG]  [BUGGY]  nisips.add(buffer);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  nisips.add(buffer);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisips.add(buffer);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
80	[BUG]  [BUGGY]  if(str!=  null)  {  int  width  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  buffer[size  +  i]  =  padChar;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(str!=  null)  {  int  width  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  buffer[size  +  i]  =  padChar;  }  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(str!=  null)  {  int  width  =  str.length();  for(int  i  =  0;  i  <  width;  i++)  {  buffer[size  +  i]  =  padChar;  }	      if(str!=    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
81	[BUG]  [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  size;  i++)  {  buffer[size  +  i]  =  padChar;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  size;  i++)  {  buffer[size  +  i]  =  padChar;  }  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	if(str!=  null)  {  int  strLen  =  str.length();  for(int  i  =  0;  i  <  size;  i++)  {  buffer[size  +  i]  =  padChar;  }	      if(str!=    null)    {    int    size    =    str.length();    for(int    i    =    0;    i    <    size;    i++)    {    buffer[size    +    i]    =    padChar;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
82	[BUG]  [BUGGY]  nisip  =  str.charAt(i);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  nisip  =  str.charAt(i);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisip  =  str.charAt(i);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    0;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
83	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  nisipIgnoreWhitespace(buffer,  width,  strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width,  strLen);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    getWidth();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
84	[BUG]  [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  nisipIgnoreWhitespace(buffer,  width  +  strLen);  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	nisipIgnoreWhitespace(buffer,  width  +  strLen);	      if(str!=    null)    {    for(int    i    =    0;    i    <    strLen;    i++)    {    buffer[size    +    i]    =    getWidth();    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
85	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width];  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width];	      StrBuilder.this.appendFixedWidthPadLeft    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
86	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  |=  width;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  |=  width;  [BUGGY]    int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  }  size  +=  width;  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1186	1186	2	replace	StrBuilder.this.appendFixedWidthPadLeft  |=  width;	      StrBuilder.this.appendFixedWidthPadLeft    =    true;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
