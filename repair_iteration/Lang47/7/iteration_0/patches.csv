bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ensureCapacity(size  +  strLen);  [CE]  illegal  start  of  expression  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  ensureCapacity(size  +  strLen);  [BUGGY]  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	ensureCapacity(size  +  strLen);	ensureCapacity(size  +  width);  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
2	[BUG]  [BUGGY]  ensureCapacity(size  /  width);  [CE]  illegal  start  of  expression  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  ensureCapacity(size  /  width);  [BUGGY]  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	ensureCapacity(size  /  width);	ensureCapacity(size  +  width);  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
3	[BUG]  [BUGGY]  ensureCapacity(size  +  width  +  1);  [CE]  illegal  start  of  expression  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  ensureCapacity(size  +  width  +  1);  [BUGGY]  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	ensureCapacity(size  +  width  +  1);	ensureCapacity(size  +  width);  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
4	[BUG]  [BUGGY]  ensureCapacity(size  *  width);  [CE]  illegal  start  of  expression  [FE]          NullPointerException  [CONTEXT]    [BUGGY]  ensureCapacity(size  *  width);  [BUGGY]  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	ensureCapacity(size  *  width);	ensureCapacity(size  +  width);  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            NullPointerException  [CONTEXT]    [BUGGY]    [BUGGY]  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	  	ensureCapacity(size  +  width);  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]    if(strLen  ==  width)  {  ensureCapacity(size  +  strLen);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException  [CONTEXT]    [BUGGY]    if(strLen  ==  width)  {  ensureCapacity(size  +  strLen);  }  [BUGGY]  ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	    if(strLen  ==  width)  {  ensureCapacity(size  +  strLen);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
7	[BUG]  [BUGGY]    if(strLen  ==  width)  {  ensureCapacity(size  +  strLen);  }  else  {  buffer[size  +  strLen]  =  null;  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException  [CONTEXT]    [BUGGY]    if(strLen  ==  width)  {  ensureCapacity(size  +  strLen);  }  else  {  buffer[size  +  strLen]  =  null;  }  [BUGGY]  ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	    if(strLen  ==  width)  {  ensureCapacity(size  +  strLen);  }  else  {  buffer[size  +  strLen]  =  null;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
8	[BUG]  [BUGGY]    if(strLen  >  width)  {  ensureCapacity(size  +  strLen);  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException  [CONTEXT]    [BUGGY]    if(strLen  >  width)  {  ensureCapacity(size  +  strLen);  }  [BUGGY]  ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	    if(strLen  >  width)  {  ensureCapacity(size  +  strLen);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
9	[BUG]  [BUGGY]    if(strLen  ==  width)  {  ensureCapacity(size  +  strLen);  }  else  {  size  +=  strLen;  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException  [CONTEXT]    [BUGGY]    if(strLen  ==  width)  {  ensureCapacity(size  +  strLen);  }  else  {  size  +=  strLen;  }  [BUGGY]  ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	    if(strLen  ==  width)  {  ensureCapacity(size  +  strLen);  }  else  {  size  +=  strLen;  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
10	[BUG]  [BUGGY]  ensureCapacity(size  +  width  -  1);  [CE]  illegal  start  of  expression  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  ensureCapacity(size  +  width  -  1);  [BUGGY]  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	ensureCapacity(size  +  width  -  1);	ensureCapacity(size  +  width);  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
11	[BUG]  [BUGGY]  ensureCapacity(size  +  length);  [CE]  illegal  start  of  expression  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  ensureCapacity(size  +  length);  [BUGGY]  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	ensureCapacity(size  +  length);	ensureCapacity(size  +  width);  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]    StrBuilder.this.appendFixedWidthPadRight(str);  [CE]  illegal  start  of  expression  [FE]    NullPointerException  [CONTEXT]    [BUGGY]    StrBuilder.this.appendFixedWidthPadRight(str);  [BUGGY]  ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	    StrBuilder.this.appendFixedWidthPadRight(str);		non-compiled	[CE]  illegal  start  of  expression	14	None	add
13	[BUG]  [BUGGY]    if(str  ==  null)  {  ensureCapacity(size  +  width);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException  [CONTEXT]    [BUGGY]    if(str  ==  null)  {  ensureCapacity(size  +  width);  }  [BUGGY]  ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	    if(str  ==  null)  {  ensureCapacity(size  +  width);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
14	[BUG]  [BUGGY]    if(str  ==  null)  {  ensureCapacity(size  +  strLen);  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException  [CONTEXT]    [BUGGY]    if(str  ==  null)  {  ensureCapacity(size  +  strLen);  }  [BUGGY]  ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	    if(str  ==  null)  {  ensureCapacity(size  +  strLen);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
15	[BUG]  [BUGGY]    StrBuilder.this.appendFixedWidthPadRight(str,  width);  [CE]  illegal  start  of  expression  [FE]          NullPointerException  [CONTEXT]    [BUGGY]    StrBuilder.this.appendFixedWidthPadRight(str,  width);  [BUGGY]  ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	    StrBuilder.this.appendFixedWidthPadRight(str,  width);		non-compiled	[CE]  illegal  start  of  expression	14	None	add
16	[BUG]  [BUGGY]    StrBuilder.this.appendFixedWidthPadRight  =  true;  [CE]  illegal  start  of  expression  [FE]            NullPointerException  [CONTEXT]    [BUGGY]    StrBuilder.this.appendFixedWidthPadRight  =  true;  [BUGGY]  ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	    StrBuilder.this.appendFixedWidthPadRight  =  true;		non-compiled	[CE]  illegal  start  of  expression	14	None	add
17	[BUG]  [BUGGY]  ensureCapacity(size  -  width);  [CE]  illegal  start  of  expression  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  ensureCapacity(size  -  width);  [BUGGY]  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	ensureCapacity(size  -  width);	ensureCapacity(size  +  width);  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]    if(str!=  null)  {  ensureCapacity(size  +  strLen);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException  [CONTEXT]    [BUGGY]    if(str!=  null)  {  ensureCapacity(size  +  strLen);  }  [BUGGY]  ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(0,  width,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  str.getChars(0,  strLen,  buffer,  size);  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  strLen  +  i]  =  padChar;  }  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadRight  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1228	1228	2	replace	    if(str!=  null)  {  ensureCapacity(size  +  strLen);  }		non-compiled	[CE]  illegal  start  of  expression	14	None	add
