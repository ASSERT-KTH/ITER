bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  safeAccess(strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  safeAccess(strLen);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeAccess(strLen);	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    buffer[size    +    strLen]    =    null;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
2	[BUG]  [BUGGY]  safeAccess(strLen  +  width));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  safeAccess(strLen  +  width));  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeAccess(strLen  +  width));	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    buffer[size    +    strLen]    =    null;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
3	[BUG]  [BUGGY]  safeAccess(strLen  +  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  safeAccess(strLen  +  width);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeAccess(strLen  +  width);	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    buffer[size    +    strLen]    =    null;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
4	[BUG]  [BUGGY]  ensureCapacity(size  +  strLen  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(size  +  strLen  -  1);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(size  +  strLen  -  1);	  ensureCapacity(size    +    width    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
5	[BUG]  [BUGGY]  ensureCapacity(size  +  width  /  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(size  +  width  /  1);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(size  +  width  /  1);	  ensureCapacity(size    +    width    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
6	[BUG]  [BUGGY]  ensureCapacity(size  +  width  -  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(size  +  width  -  2);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(size  +  width  -  2);	  ensureCapacity(size    +    width    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
7	[BUG]  [BUGGY]  safeAccess(width  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  safeAccess(width  +  strLen);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeAccess(width  +  strLen);	      if(width    >    0)    {    ensureCapacity(width    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
8	[BUG]  [BUGGY]  safeGet(strLen)  {  ensureCapacity(size  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen)  {  ensureCapacity(size  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeGet(strLen)  {  ensureCapacity(size  +  width);  }	      if(str    ==    null)    {    ensureCapacity(size    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
9	[BUG]  [BUGGY]  safeGet(strLen,  width))  {  ensureCapacity(size  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen,  width))  {  ensureCapacity(size  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeGet(strLen,  width))  {  ensureCapacity(size  +  width);  }	      if(str    ==    null)    {    ensureCapacity(size    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
10	[BUG]  [BUGGY]  safeGet(strLen))  {  ensureCapacity(size  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen))  {  ensureCapacity(size  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeGet(strLen))  {  ensureCapacity(size  +  width);  }	      if(str    ==    null)    {    ensureCapacity(size    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
11	[BUG]  [BUGGY]  safeGet(strLen,  width))  {  ensureCapacity(size  +  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen,  width))  {  ensureCapacity(size  +  width);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeGet(strLen,  width))  {  ensureCapacity(size  +  width);	      if(str    ==    null)    {    ensureCapacity(size    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
12	[BUG]  [BUGGY]  int  size  =  this.str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  size  =  this.str.length();  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	int  size  =  this.str.length();	      int    size    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
13	[BUG]  [BUGGY]  int  size  =  obj.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  int  size  =  obj.length();  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	int  size  =  obj.length();	      int    size    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
14	[BUG]  [BUGGY]  int  size  =  str.length()  -  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  int  size  =  str.length()  -  1;  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	int  size  =  str.length()  -  1;	      int    size    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
15	[BUG]  [BUGGY]  int  size  =  str.length()  +  1;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  int  size  =  str.length()  +  1;  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	int  size  =  str.length()  +  1;	      int    size    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
16	[BUG]  [BUGGY]  ensureCapacity(size  /  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(size  /  2);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(size  /  2);	  ensureCapacity(size    +    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
17	[BUG]  [BUGGY]  ensureCapacity(size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(size);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(size);	  ensureCapacity(size    +    2);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	9	None	replace
18	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  this;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  this;  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  this;	      StrBuilder.this.appendFixedWidthPadLeft    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
19	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  = " ";  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  = " ";  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft  = " ";	      StrBuilder.this.appendFixedWidthPadLeft    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
20	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size];  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[size];	      StrBuilder.this.appendFixedWidthPadLeft    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
21	[BUG]  [BUGGY]  safeAccess(strLen)  {  ensureCapacity(size  +  strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  safeAccess(strLen)  {  ensureCapacity(size  +  strLen);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeAccess(strLen)  {  ensureCapacity(size  +  strLen);  }	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
22	[BUG]  [BUGGY]  safeAccess(strLen  +  width))  {  ensureCapacity(size  +  strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  safeAccess(strLen  +  width))  {  ensureCapacity(size  +  strLen);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeAccess(strLen  +  width))  {  ensureCapacity(size  +  strLen);  }	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
23	[BUG]  [BUGGY]  safeAccess(strLen)  {  ensureCapacity(size  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  safeAccess(strLen)  {  ensureCapacity(size  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeAccess(strLen)  {  ensureCapacity(size  +  width);  }	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
24	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(str,  width);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft(str,  width);	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
25	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  strLen);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  strLen);	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
26	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  strLen);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  strLen);	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
27	[BUG]  [BUGGY]  System.arraycopy(str.getChars(0,  strLen,  buffer,  size  +  strLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  System.arraycopy(str.getChars(0,  strLen,  buffer,  size  +  strLen));  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	System.arraycopy(str.getChars(0,  strLen,  buffer,  size  +  strLen));	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.getChars(0,    strLen,    buffer,    size    +    strLen));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
28	[BUG]  [BUGGY]  System.arraycopy(str.getChars(0,  strLen,  buffer,  size  +  padLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  System.arraycopy(str.getChars(0,  strLen,  buffer,  size  +  padLen));  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	System.arraycopy(str.getChars(0,  strLen,  buffer,  size  +  padLen));	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.getChars(0,    strLen,    buffer,    size    +    strLen));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(str.getChars(0),  strLen,  buffer,  size  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  System.arraycopy(str.getChars(0),  strLen,  buffer,  size  +  strLen);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	System.arraycopy(str.getChars(0),  strLen,  buffer,  size  +  strLen);	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.getChars(0,    strLen,    buffer,    size    +    strLen));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(str.getChars(0,  strLen,  buffer,  size  +  strLen),  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  System.arraycopy(str.getChars(0,  strLen,  buffer,  size  +  strLen),  width);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	System.arraycopy(str.getChars(0,  strLen,  buffer,  size  +  strLen),  width);	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.getChars(0,    strLen,    buffer,    size    +    strLen));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
31	[BUG]  [BUGGY]  StrBuilder.this.setFixedWidthPadLeft(true);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.setFixedWidthPadLeft(true);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.setFixedWidthPadLeft(true);	      StrBuilder.this.appendFixedWidthPadLeft    =    false;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
32	[BUG]  [BUGGY]  ensureCapacity(size  +  length  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(size  +  length  -  1);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(size  +  length  -  1);	  ensureCapacity(size    +    length);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
33	[BUG]  [BUGGY]  safeAccess(width  +  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  safeAccess(width  +  width);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeAccess(width  +  width);	      if(width    >    0)    {    ensureCapacity(width    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
34	[BUG]  [BUGGY]  safeAccess(size  +  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  safeAccess(size  +  width);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeAccess(size  +  width);	      if(width    >    0)    {    ensureCapacity(width    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
35	[BUG]  [BUGGY]  angle2D.decorate(obj,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  angle2D.decorate(obj,  width);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	angle2D.decorate(obj,  width);	      if(width    >    0)    {    ensureCapacity(width    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
36	[BUG]  [BUGGY]  ensureCapacity(size  +  strLen  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(size  +  strLen  +  1);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(size  +  strLen  +  1);	  ensureCapacity(size    +    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
37	[BUG]  [BUGGY]  ensureCapacity(size  +  strLen,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(size  +  strLen,  width);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(size  +  strLen,  width);	  ensureCapacity(size    +    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(str.length(),  0,  buffer,  size  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  System.arraycopy(str.length(),  0,  buffer,  size  +  strLen);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	System.arraycopy(str.length(),  0,  buffer,  size  +  strLen);	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.length(),    0,    buffer,    size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(str.getBounds(),  0,  buffer,  size  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  System.arraycopy(str.getBounds(),  0,  buffer,  size  +  strLen);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	System.arraycopy(str.getBounds(),  0,  buffer,  size  +  strLen);	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.length(),    0,    buffer,    size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
40	[BUG]  [BUGGY]  ensureCapacity(size  +  width  +  2);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(size  +  width  +  2);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(size  +  width  +  2);	  ensureCapacity(size    +    width    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
41	[BUG]  [BUGGY]  ensureCapacity(size  /  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(size  /  1);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(size  /  1);	  ensureCapacity(size    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
42	[BUG]  [BUGGY]  ensureCapacity(length  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(length  +  1);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(length  +  1);	  ensureCapacity(size    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
43	[BUG]  [BUGGY]  ensureCapacity(length  +  width  -  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(length  +  width  -  1);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(length  +  width  -  1);	  ensureCapacity(size    +    width    -    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	15	None	replace
44	[BUG]  [BUGGY]  ensureCapacity(width  +  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(width  +  1);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(width  +  1);	  ensureCapacity(size    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	7	None	replace
45	[BUG]  [BUGGY]  ensureCapacity(size  +  width  *  1);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(size  +  width  *  1);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(size  +  width  *  1);	  ensureCapacity(size    +    width    +    1);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	8	None	replace
46	[BUG]  [BUGGY]  safeSegments.add(strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  safeSegments.add(strLen);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeSegments.add(strLen);	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.length(),    0,    buffer,    size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
47	[BUG]  [BUGGY]  safeSegment(strLen  +  width));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  safeSegment(strLen  +  width));  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeSegment(strLen  +  width));	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.length(),    0,    buffer,    size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
48	[BUG]  [BUGGY]  safeGet(strLen)>  0)  {  ensureCapacity(size  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen)>  0)  {  ensureCapacity(size  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeGet(strLen)>  0)  {  ensureCapacity(size  +  width);  }	      if(str    ==    null)    {    ensureCapacity(size    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
49	[BUG]  [BUGGY]  safeSegment(width  +  strLen)  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  safeSegment(width  +  strLen)  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeSegment(width  +  strLen)	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    size    +=    strLen;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
50	[BUG]  [BUGGY]  safeSegment(width  +  strLen));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  safeSegment(width  +  strLen));  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeSegment(width  +  strLen));	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    size    +=    strLen;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
51	[BUG]  [BUGGY]  ensureCapacity(length  +  size);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(length  +  size);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(length  +  size);	  ensureCapacity(size    +    length);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	19	None	replace
52	[BUG]  [BUGGY]  safeSegment(strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  safeSegment(strLen);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeSegment(strLen);	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.getChars(0,    strLen,    buffer,    size    +    strLen));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
53	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width);	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
54	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(buffer,  width);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft(buffer,  width);	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
55	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  |=  width;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  |=  width;  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft  |=  width;	      StrBuilder.this.appendFixedWidthPadLeft    =    true;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	11	None	replace
56	[BUG]  [BUGGY]  safeGet(strLen)>  width)  {  ensureCapacity(size  +  strLen);  }  else  {  buffer[size  +  strLen]  =  null;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen)>  width)  {  ensureCapacity(size  +  strLen);  }  else  {  buffer[size  +  strLen]  =  null;  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeGet(strLen)>  width)  {  ensureCapacity(size  +  strLen);  }  else  {  buffer[size  +  strLen]  =  null;  }	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    buffer[size    +    strLen]    =    null;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
57	[BUG]  [BUGGY]  safeGet(strLen,  width))  {  ensureCapacity(size  +  strLen);  }  else  {  buffer[size  +  strLen]  =  null;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen,  width))  {  ensureCapacity(size  +  strLen);  }  else  {  buffer[size  +  strLen]  =  null;  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeGet(strLen,  width))  {  ensureCapacity(size  +  strLen);  }  else  {  buffer[size  +  strLen]  =  null;  }	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    buffer[size    +    strLen]    =    null;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
58	[BUG]  [BUGGY]  safeGet(strLen)>  width)  {  ensureCapacity(size  +  strLen);  }  else  {  buffer[size  +  padLen]  =  null;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen)>  width)  {  ensureCapacity(size  +  strLen);  }  else  {  buffer[size  +  padLen]  =  null;  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeGet(strLen)>  width)  {  ensureCapacity(size  +  strLen);  }  else  {  buffer[size  +  padLen]  =  null;  }	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    buffer[size    +    strLen]    =    null;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
59	[BUG]  [BUGGY]  safeGet(strLen))  {  ensureCapacity(width  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen))  {  ensureCapacity(width  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeGet(strLen))  {  ensureCapacity(width  +  width);  }	      if(width    >    0)    {    ensureCapacity(width    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
60	[BUG]  [BUGGY]  safeGet(strLen)>  0)  {  ensureCapacity(width  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen)>  0)  {  ensureCapacity(width  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeGet(strLen)>  0)  {  ensureCapacity(width  +  width);  }	      if(width    >    0)    {    ensureCapacity(width    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
61	[BUG]  [BUGGY]  safeGet(strLen,  width)>  0)  {  ensureCapacity(width  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  safeGet(strLen,  width)>  0)  {  ensureCapacity(width  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeGet(strLen,  width)>  0)  {  ensureCapacity(width  +  width);  }	      if(width    >    0)    {    ensureCapacity(width    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
62	[BUG]  [BUGGY]  ensureCapacity(width  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(width  +  strLen);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(width  +  strLen);	  ensureCapacity(size    +    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
63	[BUG]  [BUGGY]  ensureCapacity(length  +  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(length  +  strLen);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(length  +  strLen);	  ensureCapacity(size    +    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
64	[BUG]  [BUGGY]  ensureCapacity(size  +  strLen  -  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(size  +  strLen  -  width);  [BUGGY]    String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(size  +  strLen  -  width);	  ensureCapacity(size    +    strLen);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	6	None	replace
65	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  str;  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  str;  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  str;	      StrBuilder.this.appendFixedWidthPadLeft    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
66	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width];  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width];  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft  =  new  char[width];	      StrBuilder.this.appendFixedWidthPadLeft    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	12	None	replace
67	[BUG]  [BUGGY]  safeAccess(strLen  +  width)  {  ensureCapacity(size  +  strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  safeAccess(strLen  +  width)  {  ensureCapacity(size  +  strLen);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeAccess(strLen  +  width)  {  ensureCapacity(size  +  strLen);  }	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
68	[BUG]  [BUGGY]  ensureCapacity(width  +  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  ensureCapacity(width  +  width);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	ensureCapacity(width  +  width);	      if(width    >    0)    {    ensureCapacity(width    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
69	[BUG]  [BUGGY]  safeAccess(width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  safeAccess(width);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	safeAccess(width);	      if(width    >    0)    {    ensureCapacity(width    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
70	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  str);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(width,  str);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft(width,  str);	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
71	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(String.valueOf(width));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(String.valueOf(width));  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft(String.valueOf(width));	      StrBuilder.this.appendFixedWidthPadLeft(str);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	10	None	replace
72	[BUG]  [BUGGY]  if(width  >  0)  {  ensureCapacity(size  +  strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(width  >  0)  {  ensureCapacity(size  +  strLen);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(width  >  0)  {  ensureCapacity(size  +  strLen);  }	      if(width    >    0)    {    ensureCapacity(width    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
73	[BUG]  [BUGGY]  if(strLen  >  0)  {  ensureCapacity(size  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(strLen  >  0)  {  ensureCapacity(size  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(strLen  >  0)  {  ensureCapacity(size  +  width);  }	      if(width    >    0)    {    ensureCapacity(width    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
74	[BUG]  [BUGGY]  if(width  >  0)  {  ensureCapacity(strLen  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(width  >  0)  {  ensureCapacity(strLen  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(width  >  0)  {  ensureCapacity(strLen  +  width);  }	      if(width    >    0)    {    ensureCapacity(width    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
75	[BUG]  [BUGGY]  if(strLen  >  0)  {  ensureCapacity(width  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(strLen  >  0)  {  ensureCapacity(width  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(strLen  >  0)  {  ensureCapacity(width  +  width);  }	      if(width    >    0)    {    ensureCapacity(width    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	17	None	replace
76	[BUG]  [BUGGY]  if(strLen  >  width)  {  ensureCapacity(size  +  strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(strLen  >  width)  {  ensureCapacity(size  +  strLen);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(strLen  >  width)  {  ensureCapacity(size  +  strLen);  }	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
77	[BUG]  [BUGGY]  Integer  strLen  =  str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Integer  strLen  =  str.length();  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	Integer  strLen  =  str.length();	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
78	[BUG]  [BUGGY]  int  strLen  =  str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  strLen  =  str.length();  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	int  strLen  =  str.length();	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	1	None	replace
79	[BUG]  [BUGGY]  MutableStringBuffer  str  =  new  MutableStringBuffer(strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  MutableStringBuffer  str  =  new  MutableStringBuffer(strLen);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	MutableStringBuffer  str  =  new  MutableStringBuffer(strLen);	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.length(),    0,    buffer,    size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
80	[BUG]  [BUGGY]  MutableStringBuffer  str  =  new  MutableStringBuffer(str.length(),  strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  MutableStringBuffer  str  =  new  MutableStringBuffer(str.length(),  strLen);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	MutableStringBuffer  str  =  new  MutableStringBuffer(str.length(),  strLen);	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.length(),    0,    buffer,    size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
81	[BUG]  [BUGGY]  MutableStringBuffer  str  =  new  MutableStringBuffer(str.length());  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  MutableStringBuffer  str  =  new  MutableStringBuffer(str.length());  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	MutableStringBuffer  str  =  new  MutableStringBuffer(str.length());	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.length(),    0,    buffer,    size    +    strLen);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	5	None	replace
82	[BUG]  [BUGGY]  Integer  strLen  =  str.charAt(strLen);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Integer  strLen  =  str.charAt(strLen);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	Integer  strLen  =  str.charAt(strLen);	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    buffer[size    +    strLen]    =    null;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	2	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(str.getChars(0,  strLen,  buffer,  size));  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  System.arraycopy(str.getChars(0,  strLen,  buffer,  size));  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	System.arraycopy(str.getChars(0,  strLen,  buffer,  size));	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    System.arraycopy(str.getChars(0,    strLen,    buffer,    size    +    strLen));    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	4	None	replace
84	[BUG]  [BUGGY]  int  size  =  width  -  str.length();  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  int  size  =  width  -  str.length();  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	int  size  =  width  -  str.length();	      int    size    =    str.length();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	18	None	replace
85	[BUG]  [BUGGY]  if(width  <  =  0)  {  ensureCapacity(width  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(width  <  =  0)  {  ensureCapacity(width  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(width  <  =  0)  {  ensureCapacity(width  +  width);  }	      if(width    >    0)    {    ensureCapacity(width    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
86	[BUG]  [BUGGY]  if(width  >  0)  {  ensureCapacity(size  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(width  >  0)  {  ensureCapacity(size  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(width  >  0)  {  ensureCapacity(size  +  width);  }	      if(width    >    0)    {    ensureCapacity(width    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
87	[BUG]  [BUGGY]  MutableStringBuffer.appendFixedWidthPadLeft(buffer,  width  +  width);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  MutableStringBuffer.appendFixedWidthPadLeft(buffer,  width  +  width);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	MutableStringBuffer.appendFixedWidthPadLeft(buffer,  width  +  width);	      if(width    >    0)    {    ensureCapacity(width    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	13	None	replace
88	[BUG]  [BUGGY]  if(strLen  >  width)  {  ensureCapacity(size  +  strLen);  }  else  {  size  +=  strLen;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(strLen  >  width)  {  ensureCapacity(size  +  strLen);  }  else  {  size  +=  strLen;  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(strLen  >  width)  {  ensureCapacity(size  +  strLen);  }  else  {  size  +=  strLen;  }	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    size    +=    strLen;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
89	[BUG]  [BUGGY]  if(strLen  <  =  width)  {  ensureCapacity(size  +  strLen);  }  else  {  size  +=  strLen;  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(strLen  <  =  width)  {  ensureCapacity(size  +  strLen);  }  else  {  size  +=  strLen;  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(strLen  <  =  width)  {  ensureCapacity(size  +  strLen);  }  else  {  size  +=  strLen;  }	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    size    +=    strLen;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
90	[BUG]  [BUGGY]  if(strLen  <  =  width)  {  ensureCapacity(size  +  strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(strLen  <  =  width)  {  ensureCapacity(size  +  strLen);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(strLen  <  =  width)  {  ensureCapacity(size  +  strLen);  }	      if(strLen    ==    width)    {    ensureCapacity(size    +    strLen);    }    else    {    size    +=    strLen;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	3	None	replace
91	[BUG]  [BUGGY]  if(str!=  null)  {  ensureCapacity(size  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  if(str!=  null)  {  ensureCapacity(size  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(str!=  null)  {  ensureCapacity(size  +  width);  }	      if(str    ==    null)    {    ensureCapacity(size    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
92	[BUG]  [BUGGY]  if(str  ==  null)  {  ensureCapacity(size  +  width,  strLen);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(str  ==  null)  {  ensureCapacity(size  +  width,  strLen);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(str  ==  null)  {  ensureCapacity(size  +  width,  strLen);  }	      if(str    ==    null)    {    ensureCapacity(size    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
93	[BUG]  [BUGGY]  if(strLen  ==  width)  {  ensureCapacity(size  +  width);  }  [CE]  generics  are  not  supported  in  -source  1.3  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(strLen  ==  width)  {  ensureCapacity(size  +  width);  }  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	if(strLen  ==  width)  {  ensureCapacity(size  +  width);  }	      if(str    ==    null)    {    ensureCapacity(size    +    width);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	16	None	replace
94	[BUG]  [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(true);  [CE]  generics  are  not  supported  in  -source  1.3  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  StrBuilder.this.appendFixedWidthPadLeft(true);  [BUGGY]    ensureCapacity(size  +  width);  String  str  =  (obj  ==  null  ?  getNullText()  :  obj.toString());  int  strLen  =  str.length();  if  (strLen  >=  width)  {  str.getChars(strLen  -  width,  strLen,  buffer,  size);  }  else  {  int  padLen  =  width  -  strLen;  for  (int  i  =  0;  i  <  padLen;  i++)  {  buffer[size  +  i]  =  padChar;  }  str.getChars(0,  strLen,  buffer,  size  +  padLen);  [CLASS]  StrBuilder  StrBuilderTokenizer  StrBuilderReader  StrBuilderWriter  [METHOD]  appendFixedWidthPadLeft  [RETURN_TYPE]  StrBuilder  Object  obj  int  width  char  padChar  	projects/Lang47/src/java/org/apache/commons/lang/text/StrBuilder.java	0.7071067811865475	1184	1184	2	replace	StrBuilder.this.appendFixedWidthPadLeft(true);	      StrBuilder.this.appendFixedWidthPadLeft    =    false;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.3	14	None	replace
