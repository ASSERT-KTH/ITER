bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  months  =  FieldUtils.safeAdd(months,  years);  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]          UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  int  months  =  FieldUtils.safeAdd(months,  years);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	int  months  =  FieldUtils.safeAdd(months,  years);	      int    months    =    FieldUtils.safeAdd(years,    months);    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	11	None	replace
2	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
3	[BUG]  [BUGGY]      months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
4	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
5	[BUG]  [BUGGY]      months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
6	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
7	[BUG]  [BUGGY]      months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
8	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]    months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
9	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]    months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
10	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [CE]  cannot  find  symbol  Years  [FE]      UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]    months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	non-compiled	[CE]  cannot  find  symbol  Years	8	None	add
11	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]    months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
12	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]    months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
13	[BUG]  [BUGGY]  int  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]        UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  int  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	int  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	      int    months    =    FieldUtils.safeAdd(years,    months    /    12);    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	10	None	replace
14	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  result  =  result.withMonths(months);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	result  =  result.withMonths(months);	      result    =    result.withMonths(years);    	compilable	  [FE]  UnsupportedOperationException  	13	11	replace
15	[BUG]  [BUGGY]  result  =  result.withMonths(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  result  =  result.withMonths(months);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result  =  result.withMonths(months);	      result    =    result.withMonths(years);    	compilable	  [FE]  UnsupportedOperationException  	13	11	replace
16	[BUG]  [BUGGY]  int  months  =  getMonths()  -  1;  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]        UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  int  months  =  getMonths()  -  1;  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	int  months  =  getMonths()  -  1;	      int    months    =    getMonths();    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	1	None	replace
17	[BUG]  [BUGGY]  int  months  =  getMonths()  +  1;  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]          UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  int  months  =  getMonths()  +  1;  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	int  months  =  getMonths()  +  1;	      int    months    =    getMonths();    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	1	None	replace
18	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      result  =  result.withMonths(years);  result  =  result.withMonths(years);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	        result    =    result.withMonths(years);    result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	12	3	add
19	[BUG]  [BUGGY]      result  =  result.withMonths(years);  result  =  result.withMonths(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      result  =  result.withMonths(years);  result  =  result.withMonths(years);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        result    =    result.withMonths(years);    result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	12	3	add
20	[BUG]  [BUGGY]      result  =  result.withMonths(years);  results  =  result.withMonths(years);  [CE]  cannot  find  symbol  results  [FE]      UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      result  =  result.withMonths(years);  results  =  result.withMonths(years);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        result    =    result.withMonths(years);    results  =  result.withMonths(years);	  	non-compiled	[CE]  cannot  find  symbol  results	12	None	add
21	[BUG]  [BUGGY]      result  =  result.withMonths(years);  Result  =  result.withMonths(years);  [CE]  cannot  find  symbol  Result  [FE]        UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      result  =  result.withMonths(years);  Result  =  result.withMonths(years);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        result    =    result.withMonths(years);    Result  =  result.withMonths(years);	  	non-compiled	[CE]  cannot  find  symbol  Result	12	None	add
22	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  [BUGGY]    months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    	compilable	  [FE]  UnsupportedOperationException  	7	10	replace
23	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  [BUGGY]    months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    	compilable	  [FE]  UnsupportedOperationException  	7	10	replace
24	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	9	add
25	[BUG]  [BUGGY]      months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	9	add
26	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	        months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	12	add
27	[BUG]  [BUGGY]      months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	12	add
28	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	10	add
29	[BUG]  [BUGGY]      months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	10	add
30	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]    months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	6	10	add
31	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]    months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	6	10	add
32	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  Years  =  FieldUtils.safeAdd(years,  months  /  2);  [CE]  cannot  find  symbol  Years  [FE]      UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  Years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]    months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    2);    Years  =  FieldUtils.safeAdd(years,  months  /  2);	  	non-compiled	[CE]  cannot  find  symbol  Years	6	None	add
33	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]    months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	6	10	add
34	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]    months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	6	10	add
35	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	        result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	12	3	add
36	[BUG]  [BUGGY]      result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	12	3	add
37	[BUG]  [BUGGY]  result  =  result.withLocal(years);  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  result  =  result.withLocal(years);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result  =  result.withLocal(years);	      result    =    result.withMonths(years);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
38	[BUG]  [BUGGY]      months  =  FieldUtils.safeAdd(months,  months  /  12);  Months  months  =  FieldUtils.safeAdd(months,  months  /  12);  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(months,  months  /  12);  Months  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        months    =    FieldUtils.safeAdd(months,    months    /    12);    Months  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	4	None	add
39	[BUG]  [BUGGY]      result  =  result.withMonths(years);  long  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  variable  years  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      result  =  result.withMonths(years);  long  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        result    =    result.withMonths(years);    long  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	non-compiled	[CE]  variable  years  is  already  defined  in  method  normalizedStandard(PeriodType)	12	None	add
40	[BUG]  [BUGGY]      months  =  FieldUtils.safeAdd(years,  months  /  12);  Months  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  cannot  find  symbol  Months  [FE]    UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]      months  =  FieldUtils.safeAdd(years,  months  /  12);  Months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	        months    =    FieldUtils.safeAdd(years,    months    /    12);    Months  =  FieldUtils.safeAdd(years,  months  /  12);	  	non-compiled	[CE]  cannot  find  symbol  Months	2	None	add
41	[BUG]  [BUGGY]  int  months  =  FieldUtils.safeAdd(months,  months);  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]          UnsupportedOperationException    [CONTEXT]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {    [BUGGY]  int  months  =  FieldUtils.safeAdd(months,  months);  [BUGGY]    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	int  months  =  FieldUtils.safeAdd(months,  months);	      int    months    =    FieldUtils.safeAdd(years,    months);    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	11	None	replace
