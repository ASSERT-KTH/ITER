bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Months  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  cannot  find  symbol  Months  [FE]        UnsupportedOperationException      [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  Months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	Months  =  FieldUtils.safeAdd(years,  months  /  12);	          months    =    FieldUtils.safeAdd(years,    months    /    12);    Months    =    FieldUtils.safeAdd(years,    months    /    12);    	non-compiled	[CE]  cannot  find  symbol  Months	40	None	replace
2	[BUG]  [BUGGY]  Months  months  =  FieldUtils.safeAdd(months,  months  /  12);  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]        UnsupportedOperationException      [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  Months  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	Months  months  =  FieldUtils.safeAdd(months,  months  /  12);	          months    =    FieldUtils.safeAdd(months,    months    /    12);    Months    months    =    FieldUtils.safeAdd(months,    months    /    12);    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	38	None	replace
3	[BUG]  [BUGGY]  Months  months  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]          UnsupportedOperationException      [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  Months  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	Months  months  =  FieldUtils.safeAdd(years,  months  /  12);	          months    =    FieldUtils.safeAdd(months,    months    /    12);    Months    months    =    FieldUtils.safeAdd(months,    months    /    12);    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	38	None	replace
4	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
5	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
6	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [CE]  cannot  find  symbol  Years  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	non-compiled	[CE]  cannot  find  symbol  Years	8	None	add
7	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
8	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
9	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        2);        years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
10	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        2);        years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
11	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(months,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        2);        years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(months,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
12	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(months,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(months,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        2);        years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(months,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
13	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  Years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [CE]  cannot  find  symbol  Years  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  Years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        2);        years    =    FieldUtils.safeAdd(years,    months    /    2);    Years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);	  	non-compiled	[CE]  cannot  find  symbol  Years	30	None	add
14	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	28	10	add
15	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	28	10	add
16	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	28	10	add
17	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	28	10	add
18	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	28	10	add
19	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	28	10	add
20	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    	compilable	  [FE]  UnsupportedOperationException  	12	10	replace
21	[BUG]  [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    	compilable	  [FE]  UnsupportedOperationException  	12	10	replace
22	[BUG]  [BUGGY]  int  months  =  FieldUtils.safeAdd(months,  months  /  12);  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]              UnsupportedOperationException      [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  int  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	int  months  =  FieldUtils.safeAdd(months,  months  /  12);	  int    months    =    FieldUtils.safeAdd(months,    years);    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	1	None	replace
23	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
24	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
25	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
26	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
27	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
28	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
29	[BUG]  [BUGGY]  result  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  incompatible  types  [FE]        UnsupportedOperationException      [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result  =  FieldUtils.safeAdd(years,  months  /  12);	          result    =    result.withMonths(years);    long    years    =    FieldUtils.safeAdd(years,    months    /    12);    	non-compiled	[CE]  incompatible  types	39	None	replace
30	[BUG]  [BUGGY]  Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [CE]  cannot  find  symbol  Years  [FE]          UnsupportedOperationException      [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    Years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    	non-compiled	[CE]  cannot  find  symbol  Years	10	None	replace
31	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	months  =  FieldUtils.safeAdd(years,  months  /  2);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    months    =    FieldUtils.safeAdd(years,    months    /    2);    	compilable	  [FE]  UnsupportedOperationException  	34	10	replace
32	[BUG]  [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	months  =  FieldUtils.safeAdd(years,  months  /  2);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    months    =    FieldUtils.safeAdd(years,    months    /    2);    	compilable	  [FE]  UnsupportedOperationException  	34	10	replace
33	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(months,  months  %  12);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    months    =    FieldUtils.safeAdd(years,    months    /    2);    	compilable	  [FE]  UnsupportedOperationException  	34	10	replace
34	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(months,  months  %  12);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    months    =    FieldUtils.safeAdd(years,    months    /    2);    	compilable	  [FE]  UnsupportedOperationException  	34	10	replace
35	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        2);        months    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	33	10	add
36	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        2);        months    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	33	10	add
37	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(months,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        2);        months    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(months,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	33	10	add
38	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(months,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(months,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        2);        months    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(months,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	33	10	add
39	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  Years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [CE]  cannot  find  symbol  Years  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  Years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        2);        months    =    FieldUtils.safeAdd(years,    months    /    2);    Years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);	  	non-compiled	[CE]  cannot  find  symbol  Years	33	None	add
40	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	11	10	add
41	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	11	10	add
42	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(months,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(months,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	11	10	add
43	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(months,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(months,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(months,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	11	10	add
44	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [CE]  cannot  find  symbol  Years  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	non-compiled	[CE]  cannot  find  symbol  Years	11	None	add
45	[BUG]  [BUGGY]  int  months  =  getSeconds()  -  1;  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]            UnsupportedOperationException      [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  int  months  =  getSeconds()  -  1;  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	int  months  =  getSeconds()  -  1;	  int    months    =    getMonths()    -    1;    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	16	None	replace
46	[BUG]  [BUGGY]  Years  =  FieldUtils.safeAdd(years,  months  /  2);  [CE]  cannot  find  symbol  Years  [FE]          UnsupportedOperationException      [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  Years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	Years  =  FieldUtils.safeAdd(years,  months  /  2);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    Years    =    FieldUtils.safeAdd(years,    months    /    2);    	non-compiled	[CE]  cannot  find  symbol  Years	32	None	replace
47	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withSeconds(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	result  =  result.withSeconds(years);	  result    =    result.withMonths(months);    	compilable	  [FE]  UnsupportedOperationException  	15	12	replace
48	[BUG]  [BUGGY]  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withSeconds(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result  =  result.withSeconds(years);	  result    =    result.withMonths(months);    	compilable	  [FE]  UnsupportedOperationException  	15	12	replace
49	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withDays(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	result  =  result.withDays(years);	  result    =    result.withMonths(months);    	compilable	  [FE]  UnsupportedOperationException  	15	12	replace
50	[BUG]  [BUGGY]  result  =  result.withDays(years);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withDays(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result  =  result.withDays(years);	  result    =    result.withMonths(months);    	compilable	  [FE]  UnsupportedOperationException  	15	12	replace
51	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	months  =  FieldUtils.safeAdd(years,  months  %  12);	          months    =    FieldUtils.safeAdd(years,    months    /    12);    months    =    FieldUtils.safeAdd(years,    months    /    12);    	compilable	  [FE]  UnsupportedOperationException  	3	9	replace
52	[BUG]  [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	months  =  FieldUtils.safeAdd(years,  months  %  12);	          months    =    FieldUtils.safeAdd(years,    months    /    12);    months    =    FieldUtils.safeAdd(years,    months    /    12);    	compilable	  [FE]  UnsupportedOperationException  	3	9	replace
53	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	3	add
54	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	3	add
55	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	3	add
56	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	3	add
57	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(months);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(months);  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	3	add
58	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(months);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(months);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(months);  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	3	add
59	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        years    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	26	12	add
60	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        years    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	26	12	add
61	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        years    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	26	12	add
62	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        years    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	26	12	add
63	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        years    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	26	12	add
64	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        years    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	26	12	add
65	[BUG]  [BUGGY]  result  =  result.withLocal(years,  months);  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException      [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withLocal(years,  months);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result  =  result.withLocal(years,  months);	  result    =    result.withLocal(years);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
66	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	24	9	add
67	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	24	9	add
68	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	24	11	add
69	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	24	11	add
70	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	24	12	add
71	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	24	12	add
72	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	10	add
73	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	10	add
74	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	10	add
75	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	10	add
76	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	10	add
77	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	10	add
78	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withMonths(months);  result  =  result.withMonths(months);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	result    =    result.withMonths(months);    result  =  result.withMonths(months);	  	compilable	  [FE]  UnsupportedOperationException  	14	3	add
79	[BUG]  [BUGGY]  result  =  result.withMonths(months);  result  =  result.withMonths(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withMonths(months);  result  =  result.withMonths(months);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result    =    result.withMonths(months);    result  =  result.withMonths(months);	  	compilable	  [FE]  UnsupportedOperationException  	14	3	add
80	[BUG]  [BUGGY]  result  =  result.withMonths(months);  results  =  result.withMonths(months);  [CE]  cannot  find  symbol  results  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withMonths(months);  results  =  result.withMonths(months);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result    =    result.withMonths(months);    results  =  result.withMonths(months);	  	non-compiled	[CE]  cannot  find  symbol  results	14	None	add
81	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withMonths(months);  result  =  result.withMonths(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	result    =    result.withMonths(months);    result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	14	3	add
82	[BUG]  [BUGGY]  result  =  result.withMonths(months);  result  =  result.withMonths(years);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withMonths(months);  result  =  result.withMonths(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result    =    result.withMonths(months);    result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	14	3	add
83	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	6	10	add
84	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	6	10	add
85	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	6	10	add
86	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	6	10	add
87	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	6	10	add
88	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	6	10	add
89	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  result  =  result.withMonths(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	18	3	add
90	[BUG]  [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  result  =  result.withMonths(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  result  =  result.withMonths(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	18	3	add
91	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(months);  result  =  result.withMonths(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(months);  result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	18	3	add
92	[BUG]  [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(months);  result  =  result.withMonths(years);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(months);  result  =  result.withMonths(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(months);  result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	18	3	add
93	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  result  =  result.withMonths(months);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(months);	  	compilable	  [FE]  UnsupportedOperationException  	18	3	add
94	[BUG]  [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  result  =  result.withMonths(months);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  result  =  result.withMonths(months);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(months);	  	compilable	  [FE]  UnsupportedOperationException  	18	3	add
95	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years    =    FieldUtils.safeAdd(years,    months    /    2    -    1);    years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);	  	compilable	  [FE]  UnsupportedOperationException  	22	10	add
96	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    2    -    1);    years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);	  	compilable	  [FE]  UnsupportedOperationException  	22	10	add
97	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  Years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  [CE]  cannot  find  symbol  Years  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  Years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    2    -    1);    Years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);	  	non-compiled	[CE]  cannot  find  symbol  Years	22	None	add
98	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  months  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years    =    FieldUtils.safeAdd(years,    months    /    2    -    1);    months  =  FieldUtils.safeAdd(years,  months  /  2  -  1);	  	compilable	  [FE]  UnsupportedOperationException  	22	10	add
99	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  months  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  months  =  FieldUtils.safeAdd(years,  months  /  2  -  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    2    -    1);    months  =  FieldUtils.safeAdd(years,  months  /  2  -  1);	  	compilable	  [FE]  UnsupportedOperationException  	22	10	add
100	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  -  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years  =  FieldUtils.safeAdd(years,  months  /  12  -  1);	  years    =    FieldUtils.safeAdd(years,    months    /    2    -    1);    	compilable	  [FE]  UnsupportedOperationException  	23	12	replace
101	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  -  1);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  -  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years  =  FieldUtils.safeAdd(years,  months  /  12  -  1);	  years    =    FieldUtils.safeAdd(years,    months    /    2    -    1);    	compilable	  [FE]  UnsupportedOperationException  	23	12	replace
102	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	10	add
103	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	4	10	add
104	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	24	10	add
105	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	24	10	add
106	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        2);        months    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	33	10	add
107	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        2);        months    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	33	10	add
108	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withYears(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	result  =  result.withYears(years);	  result    =    result.withMonths(months);    	compilable	  [FE]  UnsupportedOperationException  	15	12	replace
109	[BUG]  [BUGGY]  result  =  result.withYears(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withYears(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result  =  result.withYears(years);	  result    =    result.withMonths(months);    	compilable	  [FE]  UnsupportedOperationException  	15	12	replace
110	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(months);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(months);	  	compilable	  [FE]  UnsupportedOperationException  	18	3	add
111	[BUG]  [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(months);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(months);	  	compilable	  [FE]  UnsupportedOperationException  	18	3	add
112	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	18	3	add
113	[BUG]  [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	18	3	add
114	[BUG]  [BUGGY]  int  months  =  getMonths().length;  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]            UnsupportedOperationException      [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  int  months  =  getMonths().length;  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	int  months  =  getMonths().length;	  int    months    =    getMonths()    -    1;    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	16	None	replace
115	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        years    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	26	12	add
116	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        years    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	26	12	add
117	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	3	add
118	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	3	add
119	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
120	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
121	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    	compilable	  [FE]  UnsupportedOperationException  	12	9	replace
122	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    	compilable	  [FE]  UnsupportedOperationException  	12	9	replace
123	[BUG]  [BUGGY]  result  =  result.withLocals(years);  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withLocals(years);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result  =  result.withLocals(years);	          result    =    result.withMonths(years);    result    =    result.withMonths(years);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
124	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  1);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        2);        years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  1);  years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
125	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  1);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  1);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        2);        years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  1);  years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
126	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(months,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(months,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	11	10	add
127	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(months,  months  /  12  +  1);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(months,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(months,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	11	10	add
128	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	result    =    result.withMonths(months);    if(months!=  0)  {  result  =  result.withMonths(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	14	3	add
129	[BUG]  [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result    =    result.withMonths(months);    if(months!=  0)  {  result  =  result.withMonths(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	14	3	add
130	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  return  result;  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	result    =    result.withMonths(months);    if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	14	3	add
131	[BUG]  [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  return  result;  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  return  result;  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	result    =    result.withMonths(months);    if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	14	3	add
132	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        years    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	26	12	add
133	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        years    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	26	12	add
134	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(months!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(months!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(months!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	add
135	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	24	10	add
136	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(months,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	24	10	add
137	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
138	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
139	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  2);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    months    =    FieldUtils.safeAdd(years,    months    /    2);    	compilable	  [FE]  UnsupportedOperationException  	34	10	replace
140	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  2);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    months    =    FieldUtils.safeAdd(years,    months    /    2);    	compilable	  [FE]  UnsupportedOperationException  	34	10	replace
141	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  3);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        2);        months    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  3);  months  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	33	10	add
142	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  3);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  3);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        2);        months    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  3);  months  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	33	10	add
143	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	6	10	add
144	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	6	10	add
145	[BUG]  [BUGGY]  long  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  variable  years  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]        UnsupportedOperationException      [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  long  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	long  years  =  FieldUtils.safeAdd(years,  months  /  12);	          result    =    result.withMonths(years);    long    years    =    FieldUtils.safeAdd(years,    months    /    12);    	non-compiled	[CE]  variable  years  is  already  defined  in  method  normalizedStandard(PeriodType)	39	None	replace
146	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
147	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	2	10	add
148	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        2);        years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
149	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        2);        years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
150	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  3);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        2);        years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  3);  years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
151	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  3);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  3);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        2);        years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  3);  years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
152	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	11	10	add
153	[BUG]  [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	years        =        FieldUtils.safeAdd(years,        months        /        12        +        1);        months    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	11	10	add
154	[BUG]  [BUGGY]  int  months  =  getMonths()  /  1;  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]              UnsupportedOperationException      [CONTEXT]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {      [BUGGY]  int  months  =  getMonths()  /  1;  [BUGGY]      years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	int  months  =  getMonths()  /  1;	  int    months    =    getMonths()    +    1;    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	17	None	replace
