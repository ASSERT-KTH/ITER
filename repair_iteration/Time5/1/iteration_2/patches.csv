bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  *  2);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	years  =  FieldUtils.safeAdd(years,  months  *  2);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    	compilable	  [FE]  AssertionFailedError  	4	9	replace
2	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  *  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  *  2);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	years  =  FieldUtils.safeAdd(years,  months  *  2);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    	compilable	  [FE]  AssertionFailedError  	4	9	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;	          years    =    FieldUtils.safeAdd(years,    months    %    12);    months    =    FieldUtils.safeAdd(years,    months    %    12);    	compilable	  [FE]  AssertionFailedError  	23	9	replace
4	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;	          years    =    FieldUtils.safeAdd(years,    months    %    12);    months    =    FieldUtils.safeAdd(years,    months    %    12);    	compilable	  [FE]  AssertionFailedError  	23	9	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	months  =  FieldUtils.safeAdd(years,  months  %  12);	          years    =    FieldUtils.safeAdd(years,    months    %    12);    months    =    FieldUtils.safeAdd(years,    months    %    12);    	compilable	  [FE]  AssertionFailedError  	23	9	replace
6	[BUG]  [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  AssertionFailedError  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	months  =  FieldUtils.safeAdd(years,  months  %  12);	          years    =    FieldUtils.safeAdd(years,    months    %    12);    months    =    FieldUtils.safeAdd(years,    months    %    12);    	compilable	  [FE]  AssertionFailedError  	23	9	replace
7	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	8	3	add
8	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	8	3	add
9	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	8	9	add
10	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	8	9	add
11	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  Years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  cannot  find  symbol  Years  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  Years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    Years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	non-compiled	[CE]  cannot  find  symbol  Years	8	None	add
12	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	compilable	  [FE]  UnsupportedOperationException  	37	9	add
13	[BUG]  [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	compilable	  [FE]  UnsupportedOperationException  	37	9	add
14	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	compilable	  [FE]  UnsupportedOperationException  	37	9	add
15	[BUG]  [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	compilable	  [FE]  UnsupportedOperationException  	37	9	add
16	[BUG]  [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology	  	non-compiled	[CE]  ')'  expected	37	None	add
17	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	42	9	add
18	[BUG]  [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	42	9	add
19	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	42	9	add
20	[BUG]  [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	42	9	add
21	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	5	9	add
22	[BUG]  [BUGGY]  result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	5	9	add
23	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(months);  result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	5	9	add
24	[BUG]  [BUGGY]  result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(months);  result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	5	9	add
25	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	19	9	add
26	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	19	9	add
27	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  Years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [CE]  cannot  find  symbol  Years  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  Years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    Years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	non-compiled	[CE]  cannot  find  symbol  Years	19	None	add
28	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(months,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	19	9	add
29	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(months,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	19	9	add
30	[BUG]  [BUGGY]  Years  =  FieldUtils.safeAdd(years,  months  %  12);  [CE]  cannot  find  symbol  Years  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  Years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	Years  =  FieldUtils.safeAdd(years,  months  %  12);	          years    =    FieldUtils.safeAdd(years,    months    %    12);    Years    =    FieldUtils.safeAdd(years,    months    %    12);    	non-compiled	[CE]  cannot  find  symbol  Years	21	None	replace
31	[BUG]  [BUGGY]  Years  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  cannot  find  symbol  Years  [FE]            UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  Years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	Years  =  FieldUtils.safeAdd(years,  months  /  12);	          years    =    FieldUtils.safeAdd(years,    months    %    12);    Years    =    FieldUtils.safeAdd(years,    months    %    12);    	non-compiled	[CE]  cannot  find  symbol  Years	21	None	replace
32	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);  result  =  result.withDays(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	24	9	add
33	[BUG]  [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);  result  =  result.withDays(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);  result  =  result.withDays(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	24	9	add
34	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(months);  result  =  result.withDays(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        result    =    result.withDays(years);    result  =  result.withDays(months);  result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	24	9	add
35	[BUG]  [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(months);  result  =  result.withDays(years);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(months);  result  =  result.withDays(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        result    =    result.withDays(years);    result  =  result.withDays(months);  result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	24	9	add
36	[BUG]  [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.WithDays(years);  result  =  result.withDays(years);  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.WithDays(years);  result  =  result.withDays(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        result    =    result.withDays(years);    result  =  result.WithDays(years);  result  =  result.withDays(years);	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
37	[BUG]  [BUGGY]  result  =  results.withStandard(years);  [CE]  cannot  find  symbol  results  [FE]              UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  results.withStandard(years);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result  =  results.withStandard(years);	  result    =    years.withStandard(result);    	non-compiled	[CE]  cannot  find  symbol  results	48	None	replace
38	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMillis(years);  result  =  result.withMillis(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result    =    result.withMillis(years);    result  =  result.withMillis(years);	  	compilable	  [FE]  UnsupportedOperationException  	46	9	add
39	[BUG]  [BUGGY]  result  =  result.withMillis(years);  result  =  result.withMillis(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMillis(years);  result  =  result.withMillis(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result    =    result.withMillis(years);    result  =  result.withMillis(years);	  	compilable	  [FE]  UnsupportedOperationException  	46	9	add
40	[BUG]  [BUGGY]  result  =  result.withMillis(years);  Result  result  =  result.withMillis(years);  [CE]  cannot  find  symbol  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMillis(years);  Result  result  =  result.withMillis(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result    =    result.withMillis(years);    Result  result  =  result.withMillis(years);	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
41	[BUG]  [BUGGY]  result  =  result.withMillis(years);  results  =  result.withMillis(years);  [CE]  cannot  find  symbol  results  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMillis(years);  results  =  result.withMillis(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result    =    result.withMillis(years);    results  =  result.withMillis(years);	  	non-compiled	[CE]  cannot  find  symbol  results	46	None	add
42	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	3	9	add
43	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]    AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    2);    years  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	3	9	add
44	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  Years  =  FieldUtils.safeAdd(years,  months  /  2);  [CE]  cannot  find  symbol  Years  [FE]      AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  Years  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    2);    Years  =  FieldUtils.safeAdd(years,  months  /  2);	  	non-compiled	[CE]  cannot  find  symbol  Years	3	None	add
45	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	3	9	add
46	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [FE]  UnsupportedOperationException  [FE]        AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  2);  months  =  FieldUtils.safeAdd(years,  months  /  2);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    2);    months  =  FieldUtils.safeAdd(years,  months  /  2);	  	compilable	  [FE]  UnsupportedOperationException  	3	9	add
47	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	11	9	add
48	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	11	9	add
49	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	11	9	add
50	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	11	9	add
51	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  Years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  cannot  find  symbol  Years  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  Years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    Years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	non-compiled	[CE]  cannot  find  symbol  Years	11	None	add
52	[BUG]  [BUGGY]  Months  months  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]            UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  Months  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	Months  months  =  FieldUtils.safeAdd(years,  months  /  12);	          months    =    FieldUtils.safeAdd(years,    months    /    12);    Months    months    =    FieldUtils.safeAdd(years,    months    /    12);    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	18	None	replace
53	[BUG]  [BUGGY]  Months  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  cannot  find  symbol  Months  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  Months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	Months  =  FieldUtils.safeAdd(years,  months  /  12);	          months    =    FieldUtils.safeAdd(years,    months    /    12);    Months    =    FieldUtils.safeAdd(years,    months    /    12);    	non-compiled	[CE]  cannot  find  symbol  Months	36	None	replace
54	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	14	9	add
55	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	14	9	add
56	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	14	9	add
57	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	14	9	add
58	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	14	9	add
59	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	14	9	add
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;	  result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    	compilable	  [FE]  AssertionFailedError  	38	9	replace
61	[BUG]  [BUGGY]  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;	  result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    	compilable	  [FE]  AssertionFailedError  	38	9	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  months  %  12;  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	months  =  months  %  12;	  result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    	compilable	  [FE]  AssertionFailedError  	38	9	replace
63	[BUG]  [BUGGY]  months  =  months  %  12;  [FE]  AssertionFailedError  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  months  %  12;  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	months  =  months  %  12;	  result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    	compilable	  [FE]  AssertionFailedError  	38	9	replace
64	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withSeconds(months);  result  =  result.withSeconds(months);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result    =    result.withSeconds(months);    result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	32	9	add
65	[BUG]  [BUGGY]  result  =  result.withSeconds(months);  result  =  result.withSeconds(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withSeconds(months);  result  =  result.withSeconds(months);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result    =    result.withSeconds(months);    result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	32	9	add
66	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result    =    result.withSeconds(months);    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	32	9	add
67	[BUG]  [BUGGY]  result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result    =    result.withSeconds(months);    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	32	9	add
68	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMillis(months);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result  =  result.withMillis(months);	  result    =    result.withMillis(years);    	compilable	  [FE]  UnsupportedOperationException  	47	9	replace
69	[BUG]  [BUGGY]  result  =  result.withMillis(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMillis(months);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result  =  result.withMillis(months);	  result    =    result.withMillis(years);    	compilable	  [FE]  UnsupportedOperationException  	47	9	replace
70	[BUG]  [BUGGY]  result  =  result.withFields(months,  years);  [CE]  method  withFields  in  class  Period  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withFields(months,  years);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result  =  result.withFields(months,  years);	  result    =    result.withFields(years,    years);    	non-compiled	[CE]  method  withFields  in  class  Period  cannot  be  applied  to  given  types;	41	None	replace
71	[BUG]  [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)Date  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)Date  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)Date	  	non-compiled	[CE]  ')'  expected	50	None	add
72	[BUG]  [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants	  	non-compiled	[CE]  ')'  expected	50	None	add
73	[BUG]  [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)D  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)D  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)D	  	non-compiled	[CE]  ')'  expected	50	None	add
74	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	28	3	add
75	[BUG]  [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	28	3	add
76	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	28	9	add
77	[BUG]  [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]      AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	months    =    FieldUtils.safeAdd(months,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	28	9	add
78	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	28	9	add
79	[BUG]  [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]        AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	months    =    FieldUtils.safeAdd(months,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	28	9	add
80	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	22	9	add
81	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	22	9	add
82	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  Years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [CE]  cannot  find  symbol  Years  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  Years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    Years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	non-compiled	[CE]  cannot  find  symbol  Years	22	None	add
83	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(months,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	22	9	add
84	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(months,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	22	9	add
85	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	16	9	add
86	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	16	9	add
87	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	16	9	add
88	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	16	9	add
89	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	16	9	add
90	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	16	9	add
91	[BUG]  [BUGGY]  result  =  result.withLocal(years);  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withLocal(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result  =  result.withLocal(years);	  result    =    result.withDays(months);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
92	[BUG]  [BUGGY]  result  =  result.withFields(years,  months,  months);  [CE]  method  withFields  in  class  Period  cannot  be  applied  to  given  types;  [FE]            UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withFields(years,  months,  months);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result  =  result.withFields(years,  months,  months);	  result    =    result.withFields(years,    months);    	non-compiled	[CE]  method  withFields  in  class  Period  cannot  be  applied  to  given  types;	30	None	replace
93	[BUG]  [BUGGY]  result  =  result.withFields(years,  months,  ZERO);  [CE]  method  withFields  in  class  Period  cannot  be  applied  to  given  types;  [FE]              UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withFields(years,  months,  ZERO);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result  =  result.withFields(years,  months,  ZERO);	  result    =    result.withFields(years,    months);    	non-compiled	[CE]  method  withFields  in  class  Period  cannot  be  applied  to  given  types;	30	None	replace
94	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	39	9	add
95	[BUG]  [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	39	9	add
96	[BUG]  [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
97	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result  =  result.withDays(months);  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    result  =  result.withDays(months);  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	39	9	add
98	[BUG]  [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result  =  result.withDays(months);  if(years!=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result  =  result.withDays(months);  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    result  =  result.withDays(months);  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	39	9	add
99	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	44	9	add
100	[BUG]  [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	44	9	add
101	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	44	9	add
102	[BUG]  [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	44	9	add
103	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	44	9	add
104	[BUG]  [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	44	9	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  result    =    result.withDays(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	compilable	  [FE]  AssertionFailedError  	51	9	replace
106	[BUG]  [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  result    =    result.withDays(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	compilable	  [FE]  AssertionFailedError  	51	9	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  result    =    result.withDays(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	compilable	  [FE]  AssertionFailedError  	51	9	replace
108	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  AssertionFailedError  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  result    =    result.withDays(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	compilable	  [FE]  AssertionFailedError  	51	9	replace
109	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withDays(months);  result  =  result.withDays(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result    =    result.withDays(months);    result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	1	9	add
110	[BUG]  [BUGGY]  result  =  result.withDays(months);  result  =  result.withDays(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withDays(months);  result  =  result.withDays(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result    =    result.withDays(months);    result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	1	9	add
111	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withDays(months);  result  =  result.withDays(months);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result    =    result.withDays(months);    result  =  result.withDays(months);	  	compilable	  [FE]  UnsupportedOperationException  	1	9	add
112	[BUG]  [BUGGY]  result  =  result.withDays(months);  result  =  result.withDays(months);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withDays(months);  result  =  result.withDays(months);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result    =    result.withDays(months);    result  =  result.withDays(months);	  	compilable	  [FE]  UnsupportedOperationException  	1	9	add
113	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	34	9	add
114	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [FE]  UnsupportedOperationException  [FE]    AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	34	9	add
115	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [CE]  cannot  find  symbol  Years  [FE]      AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    Years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	non-compiled	[CE]  cannot  find  symbol  Years	34	None	add
116	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	34	9	add
117	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [FE]  UnsupportedOperationException  [FE]        AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	years    =    FieldUtils.safeAdd(years,    months    /    12    +    1);    months  =  FieldUtils.safeAdd(years,  months  /  12  +  1);	  	compilable	  [FE]  UnsupportedOperationException  	34	9	add
118	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_H  [CE]  ')'  expected  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_H  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_H	  result    =    result.withDays(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR)    	non-compiled	[CE]  ')'  expected	49	None	replace
119	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)  [CE]  ')'  expected  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)	  result    =    result.withDays(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR)    	non-compiled	[CE]  ')'  expected	49	None	replace
120	[BUG]  [BUGGY]  Result  =  result.withSeconds(years);  [CE]  cannot  find  symbol  Result  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  Result  =  result.withSeconds(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	Result  =  result.withSeconds(years);	  result    =    result.withSeconds(years);    Result    =    result.withSeconds(years);    	non-compiled	[CE]  cannot  find  symbol  Result	7	None	replace
121	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	19	9	add
122	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	19	9	add
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  result    =    result.withDays(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	compilable	  [FE]  AssertionFailedError  	51	9	replace
124	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  result    =    result.withDays(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	compilable	  [FE]  AssertionFailedError  	51	9	replace
125	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMillis(years);  if(years!=  0)  {  result  =  result.withMillis(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result    =    result.withMillis(years);    if(years!=  0)  {  result  =  result.withMillis(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	46	9	add
126	[BUG]  [BUGGY]  result  =  result.withMillis(years);  if(years!=  0)  {  result  =  result.withMillis(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMillis(years);  if(years!=  0)  {  result  =  result.withMillis(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result    =    result.withMillis(years);    if(years!=  0)  {  result  =  result.withMillis(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	46	9	add
127	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMillis(years);  if(years!=  0)  {  result  =  result.withMillis(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result    =    result.withMillis(years);    if(years!=  0)  {  result  =  result.withMillis(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	compilable	  [FE]  UnsupportedOperationException  	46	9	add
128	[BUG]  [BUGGY]  result  =  result.withMillis(years);  if(years!=  0)  {  result  =  result.withMillis(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMillis(years);  if(years!=  0)  {  result  =  result.withMillis(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result    =    result.withMillis(years);    if(years!=  0)  {  result  =  result.withMillis(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	compilable	  [FE]  UnsupportedOperationException  	46	9	add
129	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	22	9	add
130	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	22	9	add
131	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	44	9	add
132	[BUG]  [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	44	9	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	          years    =    FieldUtils.safeAdd(years,    months    %    12);    months    =    FieldUtils.safeAdd(years,    months    %    12);    	compilable	  [FE]  AssertionFailedError  	23	9	replace
134	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	          years    =    FieldUtils.safeAdd(years,    months    %    12);    months    =    FieldUtils.safeAdd(years,    months    %    12);    	compilable	  [FE]  AssertionFailedError  	23	9	replace
135	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	11	9	add
136	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	11	9	add
137	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        result    =    result.withDays(years);    result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	24	9	add
138	[BUG]  [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        result    =    result.withDays(years);    result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	24	9	add
139	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	8	9	add
140	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	8	9	add
141	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	39	9	add
142	[BUG]  [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	39	9	add
143	[BUG]  [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  /  12);  Months  =  FieldUtils.safeAdd(months,  months  /  12);  [CE]  cannot  find  symbol  Months  [FE]    AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  /  12);  Months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	months    =    FieldUtils.safeAdd(months,    months    /    12);    Months  =  FieldUtils.safeAdd(months,  months  /  12);	  	non-compiled	[CE]  cannot  find  symbol  Months	28	None	add
144	[BUG]  [BUGGY]  result  =  result.withLocal(months);  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withLocal(months);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result  =  result.withLocal(months);	  result    =    result.withSeconds(years);    if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	months  =  FieldUtils.safeAdd(months,  months  %  12);	  result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    	compilable	  [FE]  AssertionFailedError  	38	9	replace
146	[BUG]  [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  %  12);  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  months  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	months  =  FieldUtils.safeAdd(months,  months  %  12);	  result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    	compilable	  [FE]  AssertionFailedError  	38	9	replace
147	[BUG]  [BUGGY]  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)  [CE]  ')'  expected  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)	  result    =    result.withDays(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR)    	non-compiled	[CE]  ')'  expected	49	None	replace
148	[BUG]  [BUGGY]  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants  [CE]  ')'  expected  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants	  result    =    result.withDays(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR)    	non-compiled	[CE]  ')'  expected	49	None	replace
149	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	compilable	  [FE]  UnsupportedOperationException  	37	3	add
150	[BUG]  [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	compilable	  [FE]  UnsupportedOperationException  	37	3	add
151	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    result  =  result.withDays(years);  if(months!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	compilable	  [FE]  UnsupportedOperationException  	37	3	add
152	[BUG]  [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    result  =  result.withDays(years);  if(months!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	compilable	  [FE]  UnsupportedOperationException  	37	3	add
153	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  if(years!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    if(years!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	compilable	  [FE]  UnsupportedOperationException  	37	3	add
154	[BUG]  [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  if(years!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  if(years!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    if(years!=  0)  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	compilable	  [FE]  UnsupportedOperationException  	37	3	add
155	[BUG]  [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)D  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)D  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)D	  	non-compiled	[CE]  ')'  expected	50	None	add
156	[BUG]  [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)Date  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)Date  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)Date	  	non-compiled	[CE]  ')'  expected	50	None	add
157	[BUG]  [BUGGY]  Result  result  =  result.withDays(years);  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  Result  result  =  result.withDays(years);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	Result  result  =  result.withDays(years);	  result    =    result.withDays(years);    Result    result    =    result.withDays(years);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
158	[BUG]  [BUGGY]  result  =  result.withMillis(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMillis(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result    =    result.withMillis(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)	  	non-compiled	[CE]  ')'  expected	46	None	add
159	[BUG]  [BUGGY]  result  =  result.withMillis(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMillis(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result    =    result.withMillis(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	46	None	add
160	[BUG]  [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS	  	non-compiled	[CE]  ')'  expected	50	None	add
161	[BUG]  [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	50	None	add
162	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  if(months!=  0)  {  result  =  result.withDays(months);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	if(months!=  0)  {  result  =  result.withDays(months);  }	  result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    	compilable	  [FE]  UnsupportedOperationException  	38	9	replace
163	[BUG]  [BUGGY]  if(months!=  0)  {  result  =  result.withDays(months);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  if(months!=  0)  {  result  =  result.withDays(months);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	if(months!=  0)  {  result  =  result.withDays(months);  }	  result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    	compilable	  [FE]  UnsupportedOperationException  	38	9	replace
164	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  Months  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  Months  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    Months  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	14	None	add
165	[BUG]  [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  Months  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  Months  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                months        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    Months  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	16	None	add
166	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  }	  	compilable	  [FE]  UnsupportedOperationException  	39	9	add
167	[BUG]  [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  }	  	compilable	  [FE]  UnsupportedOperationException  	39	9	add
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMonths(months);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result  =  result.withMonths(months);	  result    =    result.withSeconds(years);    if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    	compilable	  [FE]  AssertionFailedError  	45	9	replace
169	[BUG]  [BUGGY]  result  =  result.withMonths(months);  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withMonths(months);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result  =  result.withMonths(months);	  result    =    result.withSeconds(years);    if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    	compilable	  [FE]  AssertionFailedError  	45	9	replace
170	[BUG]  [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    if(years!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  %  2);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	years  =  FieldUtils.safeAdd(years,  months  %  2);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    	compilable	  [FE]  AssertionFailedError  	4	9	replace
172	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  %  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  %  2);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	years  =  FieldUtils.safeAdd(years,  months  %  2);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    	compilable	  [FE]  AssertionFailedError  	4	9	replace
173	[BUG]  [BUGGY]  result  =  result.withSeconds(seconds);  [CE]  cannot  find  symbol  seconds  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withSeconds(seconds);  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result  =  result.withSeconds(seconds);	  result    =    result.withSeconds(years);    if(years!=    0)    {    result    =    result.withSeconds(years);    }    	non-compiled	[CE]  cannot  find  symbol  seconds	43	None	replace
174	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER	  result    =    result.withDays(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	non-compiled	[CE]  ')'  expected	51	None	replace
175	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withDays(months);  if(years!=  0)  {  result  =  result.withDays(months);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result    =    result.withDays(months);    if(years!=  0)  {  result  =  result.withDays(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	1	9	add
176	[BUG]  [BUGGY]  result  =  result.withDays(months);  if(years!=  0)  {  result  =  result.withDays(months);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result  =  result.withDays(months);  if(years!=  0)  {  result  =  result.withDays(months);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result    =    result.withDays(months);    if(years!=  0)  {  result  =  result.withDays(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	1	9	add
177	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	19	9	add
178	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	19	9	add
179	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  result  =  result.withDays(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	result        =        result.withDays(years);        result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	24	9	add
180	[BUG]  [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  result  =  result.withDays(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	24	9	add
181	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	8	9	add
182	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	8	9	add
183	[BUG]  [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    if(years!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
184	[BUG]  [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {      [BUGGY]  result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }  [BUGGY]      }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    new    Period(millis,    type,    ISOChronology.getInstanceUTC());    months    =    months    %    12;    }    if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  months  =  months  %  12;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
