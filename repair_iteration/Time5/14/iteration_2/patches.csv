bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis    +=    (((long)getMillis())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	compilable	  [FE]  UnsupportedOperationException  	25	3	add
2	[BUG]  [BUGGY]  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    (((long)getMillis())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	compilable	  [FE]  UnsupportedOperationException  	25	3	add
3	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;	          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  UnsupportedOperationException  	31	3	replace
4	[BUG]  [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;	          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  UnsupportedOperationException  	31	3	replace
5	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;	          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  UnsupportedOperationException  	31	3	replace
6	[BUG]  [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;	          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  UnsupportedOperationException  	31	3	replace
7	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  1000);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  1000);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillisOfDay(type,  1000);	  millis    +=    DateTimeUtils.getMillisOfDay(type,    MAX_VALUES);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
8	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  Integer.MAX_VALUE);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  Integer.MAX_VALUE);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillisOfDay(type,  Integer.MAX_VALUE);	  millis    +=    DateTimeUtils.getMillisOfDay(type,    MAX_VALUES);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    	compilable	  [FE]  AssertionFailedError  	12	14	replace
10	[BUG]  [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    	compilable	  [FE]  AssertionFailedError  	12	14	replace
11	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	30	5	add
12	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	30	5	add
13	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	30	5	add
14	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	30	5	add
15	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	30	5	add
16	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	30	5	add
17	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  /  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis  +=  getMillis()  /  DateTimeConstants.MILLIS_PER_MINUTE;	          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    	compilable	  [FE]  UnsupportedOperationException  	16	3	replace
18	[BUG]  [BUGGY]  millis  +=  getMillis()  /  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  /  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  getMillis()  /  DateTimeConstants.MILLIS_PER_MINUTE;	          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    	compilable	  [FE]  UnsupportedOperationException  	16	3	replace
19	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	17	5	add
20	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	17	5	add
21	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	17	5	add
22	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	17	5	add
23	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	17	5	add
24	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	17	5	add
25	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getIntegerValue(type,  0);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getIntegerValue(type,  0);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getIntegerValue(type,  0);	  millis    +=    DateTimeUtils.getIntegerValue(type,    MAX_VALUES);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
26	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	compilable	  [FE]  UnsupportedOperationException  	1	5	add
27	[BUG]  [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	compilable	  [FE]  UnsupportedOperationException  	1	5	add
28	[BUG]  [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	1	None	add
29	[BUG]  [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_	  	non-compiled	[CE]  ')'  expected	1	None	add
30	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=(((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis  +=(((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  millis    +=(((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	24	3	replace
31	[BUG]  [BUGGY]  millis  +=(((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=(((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=(((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  millis    +=(((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	24	3	replace
32	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	9	3	add
33	[BUG]  [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	9	3	add
34	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	9	3	add
35	[BUG]  [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	9	3	add
36	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	9	5	add
37	[BUG]  [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	9	5	add
38	[BUG]  [BUGGY]  millis  +=  getMaximumValues()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMaximumValues()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  getMaximumValues()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  millis    +=    getMaximumValues()    *    DateTimeConstants.MILLIS_PER_MINUTE;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
39	[BUG]  [BUGGY]  millis  +=  getMinuteValues()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [CE]  cannot  find  symbol  [FE]          UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMinuteValues()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  getMinuteValues()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  millis    +=    getMaximumValues()    *    DateTimeConstants.MILLIS_PER_MINUTE;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
40	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis    +=(((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	23	3	add
41	[BUG]  [BUGGY]  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=(((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	23	3	add
42	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  type.seconds);  [CE]  cannot  find  symbol  seconds  [FE]                  UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  type.seconds);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillis(type,  type.seconds);	  millis    +=    DateTimeUtils.getMillis(type,    type);    	non-compiled	[CE]  cannot  find  symbol  seconds	4	None	replace
43	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	34	3	add
44	[BUG]  [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	34	3	add
45	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	34	5	add
46	[BUG]  [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	34	5	add
47	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	34	3	add
48	[BUG]  [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	34	3	add
49	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  MAX_VALUES);  [CE]  cannot  find  symbol  MAX_VALUES  [FE]                UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  MAX_VALUES);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillis(type,  MAX_VALUES);	  millis    +=    DateTimeUtils.getMillis(type,    ZERO);    	non-compiled	[CE]  cannot  find  symbol  MAX_VALUES	3	None	replace
50	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  PeriodType.MAX_VALUES);  [CE]  cannot  find  symbol  MAX_VALUES  [FE]                  UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  PeriodType.MAX_VALUES);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillis(type,  PeriodType.MAX_VALUES);	  millis    +=    DateTimeUtils.getMillis(type,    ZERO);    	non-compiled	[CE]  cannot  find  symbol  MAX_VALUES	3	None	replace
51	[BUG]  [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_	  	non-compiled	[CE]  ')'  expected	21	None	add
52	[BUG]  [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILL  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILL  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILL	  	non-compiled	[CE]  ')'  expected	21	None	add
53	[BUG]  [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS	  	non-compiled	[CE]  ')'  expected	21	None	add
54	[BUG]  [BUGGY]  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER	          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=(((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	non-compiled	[CE]  ')'  expected	22	None	replace
55	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_S  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_S  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_S	  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    	non-compiled	[CE]  ')'  expected	2	None	replace
56	[BUG]  [BUGGY]  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_S  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_S  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_S	  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    	non-compiled	[CE]  ')'  expected	2	None	replace
57	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;	  millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    	compilable	  [FE]  UnsupportedOperationException  	35	3	replace
58	[BUG]  [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;	  millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    	compilable	  [FE]  UnsupportedOperationException  	35	3	replace
59	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	15	5	add
60	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	15	5	add
61	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	15	5	add
62	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	15	5	add
63	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	15	5	add
64	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	15	5	add
65	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	20	5	replace
66	[BUG]  [BUGGY]  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	20	5	replace
67	[BUG]  [BUGGY]  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER	          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	non-compiled	[CE]  ')'  expected	20	None	replace
68	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getIntegerValue(type,  1000L);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getIntegerValue(type,  1000L);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getIntegerValue(type,  1000L);	  millis    +=    DateTimeUtils.getIntegerValue(type,    1000);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
69	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	13	5	add
70	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	13	5	add
71	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	13	5	add
72	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	13	5	add
73	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	13	5	add
74	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	13	5	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  	compilable	  [FE]  AssertionFailedError  	11	14	add
76	[BUG]  [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  	compilable	  [FE]  AssertionFailedError  	11	14	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  	compilable	  [FE]  AssertionFailedError  	11	14	add
78	[BUG]  [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  	compilable	  [FE]  AssertionFailedError  	11	14	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  	compilable	  [FE]  AssertionFailedError  	11	14	add
80	[BUG]  [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  	compilable	  [FE]  AssertionFailedError  	11	14	add
81	[BUG]  [BUGGY]  millis  +=  getMutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  getMutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis    +=    getMutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
82	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  PeriodType.MAX_VALUES);  [CE]  cannot  find  symbol  MAX_VALUES  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  PeriodType.MAX_VALUES);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillisOfDay(type,  PeriodType.MAX_VALUES);	  millis    +=    DateTimeUtils.getMillisOfDay(type,    periodType);    	non-compiled	[CE]  cannot  find  symbol  MAX_VALUES	32	None	replace
83	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  ISOChronology.getInstance());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  ISOChronology.getInstance());  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillis(type,  ISOChronology.getInstance());	  millis    +=    DateTimeUtils.getMillis(type,    ISOChronology.getInstanceUTC());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
84	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	19	5	add
85	[BUG]  [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	19	5	add
86	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	compilable	  [FE]  UnsupportedOperationException  	19	5	add
87	[BUG]  [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	compilable	  [FE]  UnsupportedOperationException  	19	5	add
88	[BUG]  [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_	  	non-compiled	[CE]  ')'  expected	19	None	add
89	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	30	5	add
90	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_SECOND;  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	30	5	add
91	[BUG]  [BUGGY]  millis  +=  ISOChronology.getMillis(type,  ISOChronology.getInstanceUTC());  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  ISOChronology.getMillis(type,  ISOChronology.getInstanceUTC());  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  ISOChronology.getMillis(type,  ISOChronology.getInstanceUTC());	  millis    +=    DateTimeUtils.getMillis(type,    ISOChronology.getInstanceUTC());    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
92	[BUG]  [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	21	None	add
93	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	13	5	add
94	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	13	5	add
95	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	13	5	add
96	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_SECOND;	  	compilable	  [FE]  UnsupportedOperationException  	13	5	add
97	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));	  	compilable	  [FE]  UnsupportedOperationException  	1	6	add
98	[BUG]  [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));	  	compilable	  [FE]  UnsupportedOperationException  	1	6	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	1	12	add
100	[BUG]  [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  AssertionFailedError  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	1	12	add
101	[BUG]  [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)	  	non-compiled	[CE]  ')'  expected	1	None	add
102	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getIntegerValue(type,  10);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getIntegerValue(type,  10);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getIntegerValue(type,  10);	  millis    +=    DateTimeUtils.getIntegerValue(type,    1000);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
103	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  periodType);  [CE]  cannot  find  symbol  periodType  [FE]                  UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  periodType);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillis(type,  periodType);	  millis    +=    DateTimeUtils.getMillis(type,    type);    	non-compiled	[CE]  cannot  find  symbol  periodType	4	None	replace
104	[BUG]  [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getMaxutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getMaxutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    millis  +=  getMaxutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
105	[BUG]  [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	19	None	add
106	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	compilable	  [FE]  UnsupportedOperationException  	19	5	add
107	[BUG]  [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	compilable	  [FE]  UnsupportedOperationException  	19	5	add
108	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  /  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  /  1;	  millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    	compilable	  [FE]  UnsupportedOperationException  	12	5	replace
109	[BUG]  [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  /  1;  [FE]  UnsupportedOperationException  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  /  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  /  1;	  millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    	compilable	  [FE]  UnsupportedOperationException  	12	5	replace
110	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=(((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis  +=(((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	20	5	replace
111	[BUG]  [BUGGY]  millis  +=(((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=(((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=(((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	20	5	replace
112	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  5000);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  5000);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillisOfDay(type,  5000);	  millis    +=    DateTimeUtils.getMillisOfDay(type,    ZERO);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
113	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	17	5	add
114	[BUG]  [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=        getMinutes()        *        DateTimeConstants.MILLIS_PER_MINUTE;        millis    +=    getSeconds()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	17	5	add
115	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  5000);  [CE]  cannot  find  symbol  [FE]                UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  5000);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillis(type,  5000);	  millis    +=    DateTimeUtils.getMillis(type,    ZERO);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
116	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER	  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    	non-compiled	[CE]  ')'  expected	2	None	replace
117	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  -=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  -=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	9	3	add
118	[BUG]  [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  -=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  millis  -=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis  -=  getMillis()  *  DateTimeConstants.MILLIS_PER_MINUTE;	  	compilable	  [FE]  UnsupportedOperationException  	9	3	add
119	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  type.minutes);  [CE]  cannot  find  symbol  minutes  [FE]              UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  type.minutes);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillisOfDay(type,  type.minutes);	  millis    +=    DateTimeUtils.getMillisOfDay(type,    type);    	non-compiled	[CE]  cannot  find  symbol  minutes	8	None	replace
120	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  type.days);  [CE]  cannot  find  symbol  days  [FE]                UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  type.days);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillisOfDay(type,  type.days);	  millis    +=    DateTimeUtils.getMillisOfDay(type,    type);    	non-compiled	[CE]  cannot  find  symbol  days	8	None	replace
121	[BUG]  [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]          millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	                millis        +=(((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=(((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=(((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	19	None	add
122	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  YEAR);  [CE]  cannot  find  symbol  YEAR  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  YEAR);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillisOfDay(type,  YEAR);	  millis    +=    DateTimeUtils.getMillisOfDay(type,    ZERO);    	non-compiled	[CE]  cannot  find  symbol  YEAR	7	None	replace
123	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  MINUTE);  [CE]  cannot  find  symbol  MINUTE  [FE]              UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillisOfDay(type,  MINUTE);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillisOfDay(type,  MINUTE);	  millis    +=    DateTimeUtils.getMillisOfDay(type,    ZERO);    	non-compiled	[CE]  cannot  find  symbol  MINUTE	7	None	replace
124	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis  +=  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;	          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  UnsupportedOperationException  	31	3	replace
125	[BUG]  [BUGGY]  millis  +=  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;	          millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE;    millis    +=    getMillis()    *    DateTimeConstants.MILLIS_PER_SECOND;    	compilable	  [FE]  UnsupportedOperationException  	31	3	replace
126	[BUG]  [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getMutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getMinutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  millis  +=  getMutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    millis  +=  getMutes()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    	compilable	  [FE]  AssertionFailedError  	12	14	replace
128	[BUG]  [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  getSeconds()  *  DateTimeConstants.MILLIS_PER_MINUTE  +  1;	  millis    +=    getMinutes()    *    DateTimeConstants.MILLIS_PER_MINUTE    +    1;    	compilable	  [FE]  AssertionFailedError  	12	14	replace
129	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  type.minutes);  [CE]  cannot  find  symbol  minutes  [FE]                  UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getMillis(type,  type.minutes);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getMillis(type,  type.minutes);	  millis    +=    DateTimeUtils.getMillis(type,    type);    	non-compiled	[CE]  cannot  find  symbol  minutes	4	None	replace
130	[BUG]  [BUGGY]  millis  +=  DateTimeUtils.getIntegerValue(type,  3);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs      [BUGGY]  millis  +=  DateTimeUtils.getIntegerValue(type,  3);  [BUGGY]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	millis  +=  DateTimeUtils.getIntegerValue(type,  3);	  millis    +=    DateTimeUtils.getIntegerValue(type,    1000);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
