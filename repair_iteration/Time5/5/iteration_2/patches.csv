bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	3	10	add
2	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	3	10	add
3	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    if(years!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
4	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	3	10	add
5	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	3	10	add
6	[BUG]  [BUGGY]  months!=  0)  {  result  =  result.withYears(years);  }  [CE]  not  a  statement  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  months!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	months!=  0)  {  result  =  result.withYears(years);  }	          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=    0)    {    result    =    result.withMonths(years);    }    	non-compiled	[CE]  not  a  statement	20	None	replace
7	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
8	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
9	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
10	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
11	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
12	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
13	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	43	9	add
14	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	43	9	add
15	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)	  	compilable	  [FE]  UnsupportedOperationException  	43	9	add
16	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)	  	compilable	  [FE]  UnsupportedOperationException  	43	9	add
17	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.  [CE]  <identifier>  expected  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.	  	non-compiled	[CE]  <identifier>  expected	43	None	add
18	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	25	10	add
19	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	25	10	add
20	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	25	10	add
21	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	25	10	add
22	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(months,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	25	10	add
23	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(months,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	25	10	add
24	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	33	3	add
25	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	33	3	add
26	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.  [CE]  <identifier>  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.	  	non-compiled	[CE]  <identifier>  expected	33	None	add
27	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years  }  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years  }  	  	non-compiled	[CE]  ')'  expected	33	None	add
28	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years  }  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years  }  	  	non-compiled	[CE]  ')'  expected	21	None	add
29	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years  }  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years  }  	  	non-compiled	[CE]  ')'  expected	21	None	add
30	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)	  	compilable	  [FE]  UnsupportedOperationException  	21	3	add
31	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)	  	compilable	  [FE]  UnsupportedOperationException  	21	3	add
32	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;	  	compilable	  [FE]  UnsupportedOperationException  	17	10	add
33	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;	  	compilable	  [FE]  UnsupportedOperationException  	17	10	add
34	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	17	10	add
35	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	17	10	add
36	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	17	10	add
37	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	17	10	add
38	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	41	9	add
39	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	41	9	add
40	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  [CE]  not  a  statement  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	41	None	add
41	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
42	[BUG]  [BUGGY]  Years  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  illegal  start  of  type  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  Years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	Years  =  FieldUtils.safeAdd(years,  months  /  12);	          years    =    FieldUtils.safeAdd(years,    months    /    12);    Years    =    FieldUtils.safeAdd(years,    months    /    12);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
43	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years    >=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	add
44	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [CE]  not  a  statement  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years    >=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	23	None	add
45	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years    >=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	23	3	add
46	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years    >=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	23	3	add
47	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	1	10	add
48	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	1	10	add
49	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(months);  result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	1	10	add
50	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(months);  result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	1	10	add
51	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	31	3	add
52	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	31	3	add
53	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [CE]  not  a  statement  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	31	None	add
54	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
55	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	15	10	add
56	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	15	10	add
57	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	15	10	add
58	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	15	10	add
59	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	15	10	add
60	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	15	10	add
61	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [CE]  illegal  start  of  type  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;	          years    =    FieldUtils.safeAdd(years,    months    %    12);    months    =    FieldUtils.safeAdd(years,    months    %    12);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
62	[BUG]  [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  %  12);  [CE]  illegal  start  of  type  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	months  =  FieldUtils.safeAdd(years,  months  %  12);	          years    =    FieldUtils.safeAdd(years,    months    %    12);    months    =    FieldUtils.safeAdd(years,    months    %    12);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
63	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
64	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
65	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
66	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
67	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
68	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
69	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	add
70	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [CE]  not  a  statement  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	19	None	add
71	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	19	3	add
72	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	19	3	add
73	[BUG]  [BUGGY]  result  =  result.withLocal(years);  [CE]  illegal  start  of  type  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  result  =  result.withLocal(years);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	result  =  result.withLocal(years);	  result    =    result.withYears(years);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
74	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  *  2);  [CE]  illegal  start  of  type  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  *  2);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	years  =  FieldUtils.safeAdd(years,  months  *  2);	  years    =    FieldUtils.safeAdd(years,    months    /    2);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
75	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	13	3	add
76	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	13	3	add
77	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	13	10	add
78	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	13	10	add
79	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	13	10	add
80	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	13	10	add
81	[BUG]  [BUGGY]  Years  =  FieldUtils.safeAdd(years,  months  %  12);  [CE]  illegal  start  of  type  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  Years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	Years  =  FieldUtils.safeAdd(years,  months  %  12);	          years    =    FieldUtils.safeAdd(years,    months    %    12);    Years    =    FieldUtils.safeAdd(years,    months    %    12);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
82	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years    >=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	4	add
83	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years    >=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	4	add
84	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [CE]  not  a  statement  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years    >=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	35	None	add
85	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years    >=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	add
86	[BUG]  [BUGGY]  result  =  result.withStandard(years);  [CE]  illegal  start  of  type  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  result  =  result.withStandard(years);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	result  =  result.withStandard(years);	  result    =    result.withMonths(years);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
87	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years    >=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	45	10	add
88	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years    >=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	45	10	add
89	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  [CE]  not  a  statement  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years    >=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	45	None	add
90	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years    >=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	add
91	[BUG]  [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  /  12);  [CE]  illegal  start  of  type  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	months  =  FieldUtils.safeAdd(years,  months  /  12);	          years    =    FieldUtils.safeAdd(years,    months    /    12);    months    =    FieldUtils.safeAdd(years,    months    /    12);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
92	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	29	10	add
93	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	29	10	add
94	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	29	10	add
95	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	29	10	add
96	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(months,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	29	10	add
97	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(months,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(months,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	29	10	add
98	[BUG]  [BUGGY]  Result  result  =  result.withYears(years);  [CE]  illegal  start  of  type  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  Result  result  =  result.withYears(years);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	Result  result  =  result.withYears(years);	          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=    0)    {    result    =    result.WithYears(years);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
99	[BUG]  [BUGGY]  result  =  result.withMillis(years);  [CE]  illegal  start  of  type  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  result  =  result.withMillis(years);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	result  =  result.withMillis(years);	  result    =    result.withYears(years);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
100	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [CE]  not  a  statement  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	33	None	add
101	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [CE]  not  a  statement  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result.withYears(years);    }    if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	33	None	add
102	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	29	10	add
103	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(months,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	29	10	add
104	[BUG]  [BUGGY]  months!=  0)  {  result  =  result.withDays(years);  }  [CE]  not  a  statement  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  months!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	months!=  0)  {  result  =  result.withDays(years);  }	  years!=    0)    {    result    =    result.withDays(years);    }    	non-compiled	[CE]  not  a  statement	38	None	replace
105	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
106	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
107	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
108	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
109	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
110	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
111	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if  [CE]  '('  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if	  	non-compiled	[CE]  '('  expected	41	None	add
112	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	41	9	add
113	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	41	9	add
114	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
115	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
116	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	3	10	add
117	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	3	10	add
118	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	13	10	add
119	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(months,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	13	10	add
120	[BUG]  [BUGGY]  if(months!=  0)  {  result  =  result.withMonths(months);  }  [CE]  illegal  start  of  type  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  if(months!=  0)  {  result  =  result.withMonths(months);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	if(months!=  0)  {  result  =  result.withMonths(months);  }	          result    =    result.withSeconds(years);    if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
121	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	31	3	add
122	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	31	3	add
123	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	17	10	add
124	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(months,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	17	10	add
125	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years    >=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	23	4	add
126	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years    >=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	23	4	add
127	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years    >=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	23	3	add
128	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years    >=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	23	3	add
129	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [CE]  not  a  statement  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	21	None	add
130	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  [CE]  not  a  statement  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	21	None	add
131	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	21	3	add
132	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withYears(years);  }  if(years!=  0)  {  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	21	3	add
133	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  [CE]  not  a  statement  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	43	None	add
134	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	43	9	add
135	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	43	9	add
136	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  Years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [CE]  cannot  find  symbol  Years  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  Years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    Years  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	non-compiled	[CE]  cannot  find  symbol  Years	25	None	add
137	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years    >=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	45	10	add
138	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years    >=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	45	10	add
139	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if  [CE]  '('  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years    >=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if	  	non-compiled	[CE]  '('  expected	45	None	add
140	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years    >=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	4	add
141	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years    >=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	4	add
142	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years    >=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	4	add
143	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years  >=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years    >=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	35	4	add
144	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	19	3	add
145	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	19	3	add
146	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	19	3	add
147	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	19	3	add
148	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	29	10	add
149	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	29	10	add
150	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  Years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [CE]  cannot  find  symbol  Years  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  Years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        months    =    FieldUtils.safeAdd(years,    months    %    12);    Years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	  	non-compiled	[CE]  cannot  find  symbol  Years	29	None	add
151	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	19	3	add
152	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	19	3	add
153	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if  [CE]  '('  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if	  	non-compiled	[CE]  '('  expected	19	None	add
154	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years  }  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years!=    0)    {    result.withMonths(years);    }    if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years!=  0)  {  result.withMonths(years);  }  if(years  }  	  	non-compiled	[CE]  ')'  expected	21	None	add
155	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  if(months!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  if(months!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    if(months!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
156	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	17	10	add
157	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        months    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	17	10	add
158	[BUG]  [BUGGY]  result  =  result.withSeconds(seconds);  [CE]  illegal  start  of  type  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  result  =  result.withSeconds(seconds);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	result  =  result.withSeconds(seconds);	          result    =    result.withSeconds(years);    if(years!=    0)    {    result    =    result.withSeconds(years);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
159	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	25	10	add
160	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	25	10	add
161	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years    >=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years	  	non-compiled	[CE]  ')'  expected	45	None	add
162	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years    >=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	45	10	add
163	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years  >=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years    >=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  >=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	45	10	add
164	[BUG]  [BUGGY]  years  =  result.withYears(years);  [CE]  illegal  start  of  type  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  years  =  result.withYears(years);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	years  =  result.withYears(years);	          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=    0)    {    result    =    result.WithYears(years);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
165	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	13	10	add
166	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	13	10	add
167	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	15	10	add
168	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    months  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	compilable	  [FE]  UnsupportedOperationException  	15	10	add
169	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  Years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [CE]  cannot  find  symbol  Years  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    /    12);    years  =  FieldUtils.safeAdd(years,  months  %  12);  Years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        /        12);        years    =    FieldUtils.safeAdd(years,    months    %    12);    Years  =  FieldUtils.safeAdd(years,  months  /  12);  years  =  FieldUtils.safeAdd(years,  months  %  12);	  	non-compiled	[CE]  cannot  find  symbol  Years	15	None	add
170	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	43	9	add
171	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	43	9	add
172	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result  [CE]  not  a  statement  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  }  if(years!=  0)  {  result	  	non-compiled	[CE]  not  a  statement	43	None	add
173	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
174	[BUG]  [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          years    =    FieldUtils.safeAdd(years,    months    %    12);    years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                years        =        FieldUtils.safeAdd(years,        months        %        12);        years    =    FieldUtils.safeAdd(years,    months    /    12);    months  =  FieldUtils.safeAdd(years,  months  %  12);  years  =  FieldUtils.safeAdd(years,  months  /  12);	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
175	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withYears(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withYears(months);  }  else  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
176	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withYears(months);  }  else  {  result  =  result.withSeconds(months);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withYears(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withYears(months);  }  else  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
177	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
178	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	10	add
179	[BUG]  [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [CE]  illegal  start  of  type  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  FieldUtils.safeAdd(years,  months  %  12);	          years    =    FieldUtils.safeAdd(years,    months    %    12);    months    =    FieldUtils.safeAdd(years,    months    %    12);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
180	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if  [CE]  '('  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if	  	non-compiled	[CE]  '('  expected	31	None	add
181	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.WithYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [CE]  cannot  find  symbol  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.WithYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withYears(years);        }        if(years!=    0)    {    result    =    result.withYears(years);    }    if(years!=  0)  {  result  =  result.WithYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }	  	non-compiled	[CE]  cannot  find  symbol	31	None	add
182	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years    >=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	23	3	add
183	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years  >=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withMonths(years);        }        if(years    >=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withYears(years);  }  if(years  >=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	23	3	add
184	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	1	10	add
185	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	1	10	add
186	[BUG]  [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  }  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;      [BUGGY]          if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  }  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	                if(years!=        0)        {        result        =        result.withDays(years);        }        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  if(years  }	  	non-compiled	[CE]  ')'  expected	41	None	add
