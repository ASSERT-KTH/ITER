bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] result = result.withYears(years); [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { [BUGGY] result = result.withYears(years); [BUGGY] } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	
2	[BUG] [BUGGY] [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { [BUGGY] [BUGGY] result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	
3	[BUG] [BUGGY] int[] values = getValues();// cloned getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] public Period withYears(int years) { [BUGGY] int[] values = getValues();// cloned  getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); [BUGGY] getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); return new Period(values, getPeriodType()); } [CLASS] Period [METHOD] withYears [RETURN_TYPE] Period  int years [VARIABLES] Period ZERO int[] values boolean long duration endInstant serialVersionUID startInstant int years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	
4	[BUG] [BUGGY] [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] public Period withYears(int years) { [BUGGY] [BUGGY] int[] values = getValues();// cloned  getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); return new Period(values, getPeriodType()); } [CLASS] Period [METHOD] withYears [RETURN_TYPE] Period  int years [VARIABLES] Period ZERO int[] values boolean long duration endInstant serialVersionUID startInstant int years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	add	
5	[BUG] [BUGGY] getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] public Period withYears(int years) { int[] values = getValues();// cloned [BUGGY] getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); [BUGGY] return new Period(values, getPeriodType()); } [CLASS] Period [METHOD] withYears [RETURN_TYPE] Period  int years [VARIABLES] Period ZERO int[] values boolean long duration endInstant serialVersionUID startInstant int years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	896	896	3	replace	
6	[BUG] [BUGGY] [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] public Period withYears(int years) { int[] values = getValues();// cloned [BUGGY] [BUGGY] getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); return new Period(values, getPeriodType()); } [CLASS] Period [METHOD] withYears [RETURN_TYPE] Period  int years [VARIABLES] Period ZERO int[] values boolean long duration endInstant serialVersionUID startInstant int years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	896	896	3	add	
7	[BUG] [BUGGY] months = months % 12; [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); [BUGGY] months = months % 12; [BUGGY] if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	
8	[BUG] [BUGGY] [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); [BUGGY] [BUGGY] months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	
9	[BUG] [BUGGY] if (years != 0) { [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; [BUGGY] if (years != 0) { [BUGGY] result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	
10	[BUG] [BUGGY] [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; [BUGGY] [BUGGY] if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	
11	[BUG] [BUGGY] years = FieldUtils.safeAdd(years, months / 12); [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { [BUGGY] years = FieldUtils.safeAdd(years, months / 12); [BUGGY] months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	
12	[BUG] [BUGGY] [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { [BUGGY] [BUGGY] years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	
13	[BUG] [BUGGY] } [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] public Period(long duration, PeriodType type, Chronology chronology) { super(duration, type, chronology); [BUGGY] } [BUGGY]  [CLASS] Period [METHOD] <init> [RETURN_TYPE] Chronology)  long duration PeriodType type Chronology chronology [VARIABLES] Period ZERO PeriodType type Chronology chronology boolean long duration serialVersionUID  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	445	445	3	replace	
14	[BUG] [BUGGY] [FE] UnsupportedOperationException testNormalizedStandard_periodType_months1 [CONTEXT] public Period(long duration, PeriodType type, Chronology chronology) { super(duration, type, chronology); [BUGGY] [BUGGY] } [CLASS] Period [METHOD] <init> [RETURN_TYPE] Chronology)  long duration PeriodType type Chronology chronology [VARIABLES] Period ZERO PeriodType type Chronology chronology boolean long duration serialVersionUID  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	445	445	3	add	
