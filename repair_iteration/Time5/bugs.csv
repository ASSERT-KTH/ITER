bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] result = result.withYears(years); [FE] UnsupportedOperationException [CONTEXT] millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { [BUGGY] result = result.withYears(years); [BUGGY] } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	replace	
2	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { [BUGGY] [BUGGY] result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5222329678670935	1631	1631	3	add	
3	[BUG] [BUGGY] int[] values = getValues();// cloned getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); [FE] UnsupportedOperationException [CONTEXT] public Period withYears(int years) { [BUGGY] int[] values = getValues();// cloned  getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); [BUGGY] getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); return new Period(values, getPeriodType()); } [CLASS] Period [METHOD] withYears [RETURN_TYPE] Period  int years [VARIABLES] Period ZERO int[] values boolean long duration endInstant serialVersionUID startInstant int years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	
4	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period withYears(int years) { [BUGGY] [BUGGY] int[] values = getValues();// cloned  getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); return new Period(values, getPeriodType()); } [CLASS] Period [METHOD] withYears [RETURN_TYPE] Period  int years [VARIABLES] Period ZERO int[] values boolean long duration endInstant serialVersionUID startInstant int years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	add	
5	[BUG] [BUGGY] getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); [FE] UnsupportedOperationException [CONTEXT] public Period withYears(int years) { int[] values = getValues();// cloned [BUGGY] getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); [BUGGY] return new Period(values, getPeriodType()); } [CLASS] Period [METHOD] withYears [RETURN_TYPE] Period  int years [VARIABLES] Period ZERO int[] values boolean long duration endInstant serialVersionUID startInstant int years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	896	896	3	replace	
6	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period withYears(int years) { int[] values = getValues();// cloned [BUGGY] [BUGGY] getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); return new Period(values, getPeriodType()); } [CLASS] Period [METHOD] withYears [RETURN_TYPE] Period  int years [VARIABLES] Period ZERO int[] values boolean long duration endInstant serialVersionUID startInstant int years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	896	896	3	add	
7	[BUG] [BUGGY] months = months % 12; [FE] UnsupportedOperationException [CONTEXT] millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); [BUGGY] months = months % 12; [BUGGY] if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	
8	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); [BUGGY] [BUGGY] months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	
9	[BUG] [BUGGY] if (years != 0) { [FE] UnsupportedOperationException [CONTEXT] millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; [BUGGY] if (years != 0) { [BUGGY] result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	replace	
10	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; [BUGGY] [BUGGY] if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1630	1630	3	add	
11	[BUG] [BUGGY] years = FieldUtils.safeAdd(years, months / 12); [FE] UnsupportedOperationException [CONTEXT] long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { [BUGGY] years = FieldUtils.safeAdd(years, months / 12); [BUGGY] months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	replace	
12	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { [BUGGY] [BUGGY] years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.4629100498862757	1628	1628	3	add	
13	[BUG] [BUGGY] } [FE] UnsupportedOperationException [CONTEXT] public Period(long duration, PeriodType type, Chronology chronology) { super(duration, type, chronology); [BUGGY] } [BUGGY]  [CLASS] Period [METHOD] <init> [RETURN_TYPE] Chronology)  long duration PeriodType type Chronology chronology [VARIABLES] Period ZERO PeriodType type Chronology chronology boolean long duration serialVersionUID  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	445	445	3	replace	
14	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period(long duration, PeriodType type, Chronology chronology) { super(duration, type, chronology); [BUGGY] [BUGGY] } [CLASS] Period [METHOD] <init> [RETURN_TYPE] Chronology)  long duration PeriodType type Chronology chronology [VARIABLES] Period ZERO PeriodType type Chronology chronology boolean long duration serialVersionUID  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	445	445	3	add	
15	[BUG] [BUGGY] int years = getYears(); [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); [BUGGY] int years = getYears(); [BUGGY] int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1625	1625	3	replace	
16	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); [BUGGY] [BUGGY] int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1625	1625	3	add	
17	[BUG] [BUGGY] int months = getMonths(); [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); [BUGGY] int months = getMonths(); [BUGGY] if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1626	1626	3	replace	
18	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); [BUGGY] [BUGGY] int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1626	1626	3	add	
19	[BUG] [BUGGY] if (years != 0 || months != 0) { [FE] UnsupportedOperationException [CONTEXT] type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); [BUGGY] if (years != 0 || months != 0) { [BUGGY] years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1627	1627	3	replace	
20	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); [BUGGY] [BUGGY] if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); } } return result; [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1627	1627	3	add	
21	[BUG] [BUGGY] super(duration, type, chronology); [FE] UnsupportedOperationException [CONTEXT] public Period(long duration, PeriodType type, Chronology chronology) { [BUGGY] super(duration, type, chronology); [BUGGY] } [CLASS] Period [METHOD] <init> [RETURN_TYPE] Chronology)  long duration PeriodType type Chronology chronology [VARIABLES] Period ZERO PeriodType type Chronology chronology boolean long duration serialVersionUID  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	444	444	3	replace	
22	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period(long duration, PeriodType type, Chronology chronology) { [BUGGY] [BUGGY] super(duration, type, chronology); } [CLASS] Period [METHOD] <init> [RETURN_TYPE] Chronology)  long duration PeriodType type Chronology chronology [VARIABLES] Period ZERO PeriodType type Chronology chronology boolean long duration serialVersionUID  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	444	444	3	add	
23	[BUG] [BUGGY] type = DateTimeUtils.getPeriodType(type); [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { [BUGGY] type = DateTimeUtils.getPeriodType(type); [BUGGY] long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	
24	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { [BUGGY] [BUGGY] type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	add	
25	[BUG] [BUGGY] long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); [BUGGY] long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs  millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); [BUGGY] millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	
26	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); [BUGGY] [BUGGY] long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs  millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	add	
27	[BUG] [BUGGY] millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs [BUGGY] millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); [BUGGY] millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	replace	
28	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs [BUGGY] [BUGGY] millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1619	1619	3	add	
29	[BUG] [BUGGY] millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); [BUGGY] millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); [BUGGY] millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	
30	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); [BUGGY] [BUGGY] millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	
31	[BUG] [BUGGY] millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); [BUGGY] millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); [BUGGY] millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	
32	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); [BUGGY] [BUGGY] millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	add	
33	[BUG] [BUGGY] millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); [BUGGY] millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); [BUGGY] millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1622	1622	3	replace	
34	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); [BUGGY] [BUGGY] millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1622	1622	3	add	
35	[BUG] [BUGGY] millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); [BUGGY] millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); [BUGGY] Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1623	1623	3	replace	
36	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); [BUGGY] [BUGGY] millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1623	1623	3	add	
37	[BUG] [BUGGY] Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); [BUGGY] Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); [BUGGY] int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1624	1624	3	replace	
38	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); [BUGGY] [BUGGY] Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } if (months != 0) { result = result.withMonths(months); [CLASS] Period [METHOD] normalizedStandard [RETURN_TYPE] Period  PeriodType type [VARIABLES] Period ZERO result PeriodType type boolean long days duration endInstant hours millis minutes seconds serialVersionUID startInstant weeks int months years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1624	1624	3	add	
39	[BUG] [BUGGY] super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard()); [FE] UnsupportedOperationException [CONTEXT] public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis) { [BUGGY] super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard()); [BUGGY] } [CLASS] Period [METHOD] <init> [RETURN_TYPE] Period(int,int,int,int,int,int,int,int)  int years int months int weeks int days int hours int minutes int seconds int millis [VARIABLES] Period ZERO boolean long serialVersionUID int days hours millis minutes months seconds weeks years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.2705008904002297	329	329	3	replace	
40	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis) { [BUGGY] [BUGGY] super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard()); } [CLASS] Period [METHOD] <init> [RETURN_TYPE] Period(int,int,int,int,int,int,int,int)  int years int months int weeks int days int hours int minutes int seconds int millis [VARIABLES] Period ZERO boolean long serialVersionUID int days hours millis minutes months seconds weeks years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.2705008904002297	329	329	3	add	
41	[BUG] [BUGGY] } [FE] UnsupportedOperationException [CONTEXT] public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis) { super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard()); [BUGGY] } [BUGGY]  [CLASS] Period [METHOD] <init> [RETURN_TYPE] Period(int,int,int,int,int,int,int,int)  int years int months int weeks int days int hours int minutes int seconds int millis [VARIABLES] Period ZERO boolean long serialVersionUID int days hours millis minutes months seconds weeks years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.2705008904002297	330	330	3	replace	
42	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis) { super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard()); [BUGGY] [BUGGY] } [CLASS] Period [METHOD] <init> [RETURN_TYPE] Period(int,int,int,int,int,int,int,int)  int years int months int weeks int days int hours int minutes int seconds int millis [VARIABLES] Period ZERO boolean long serialVersionUID int days hours millis minutes months seconds weeks years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.2705008904002297	330	330	3	add	
43	[BUG] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX); [FE] UnsupportedOperationException [CONTEXT] public int getYears() { [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX); [BUGGY] } [CLASS] Period [METHOD] getYears [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.26413527189768715	737	737	3	replace	
44	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public int getYears() { [BUGGY] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX); } [CLASS] Period [METHOD] getYears [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.26413527189768715	737	737	3	add	
45	[BUG] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX); [FE] UnsupportedOperationException [CONTEXT] public int getMonths() { [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX); [BUGGY] } [CLASS] Period [METHOD] getMonths [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.26413527189768715	746	746	3	replace	
46	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public int getMonths() { [BUGGY] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX); } [CLASS] Period [METHOD] getMonths [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.26413527189768715	746	746	3	add	
47	[BUG] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX); [FE] UnsupportedOperationException [CONTEXT] public int getWeeks() { [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX); [BUGGY] } [CLASS] Period [METHOD] getWeeks [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.25819888974716115	755	755	3	replace	
48	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public int getWeeks() { [BUGGY] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX); } [CLASS] Period [METHOD] getWeeks [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.25819888974716115	755	755	3	add	
49	[BUG] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX); [FE] UnsupportedOperationException [CONTEXT] public int getDays() { [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX); [BUGGY] } [CLASS] Period [METHOD] getDays [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.25819888974716115	764	764	3	replace	
50	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public int getDays() { [BUGGY] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX); } [CLASS] Period [METHOD] getDays [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.25819888974716115	764	764	3	add	
51	[BUG] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX); [FE] UnsupportedOperationException [CONTEXT] public int getHours() { [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX); [BUGGY] } [CLASS] Period [METHOD] getHours [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.25819888974716115	774	774	3	replace	
52	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public int getHours() { [BUGGY] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX); } [CLASS] Period [METHOD] getHours [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.25819888974716115	774	774	3	add	
53	[BUG] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX); [FE] UnsupportedOperationException [CONTEXT] public int getMinutes() { [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX); [BUGGY] } [CLASS] Period [METHOD] getMinutes [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.25819888974716115	783	783	3	replace	
54	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public int getMinutes() { [BUGGY] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX); } [CLASS] Period [METHOD] getMinutes [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.25819888974716115	783	783	3	add	
55	[BUG] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX); [FE] UnsupportedOperationException [CONTEXT] public int getSeconds() { [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX); [BUGGY] } [CLASS] Period [METHOD] getSeconds [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.2526455763199557	792	792	3	replace	
56	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public int getSeconds() { [BUGGY] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX); } [CLASS] Period [METHOD] getSeconds [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.2526455763199557	792	792	3	add	
57	[BUG] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX); [FE] UnsupportedOperationException [CONTEXT] public int getMillis() { [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX); [BUGGY] } [CLASS] Period [METHOD] getMillis [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.2526455763199557	801	801	3	replace	
58	[BUG] [BUGGY] [FE] UnsupportedOperationException [CONTEXT] public int getMillis() { [BUGGY] [BUGGY] return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX); } [CLASS] Period [METHOD] getMillis [RETURN_TYPE] int  [VARIABLES] Period ZERO long duration endInstant serialVersionUID startInstant boolean  	projects/Time5/src/main/java/org/joda/time/Period.java	0.2526455763199557	801	801	3	add	
