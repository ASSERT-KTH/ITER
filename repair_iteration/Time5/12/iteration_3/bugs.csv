bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  PeriodType  type  =  normalizedStandard(type,  result);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]                UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  type  =  normalizedStandard(type,  result);  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  normalizedStandard(type,  result);	  PeriodType    type    =    normalizedStandard(type,    ZERO);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	13	None	replace
2	[BUG]  [BUGGY]  Type  type  =  TypeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC());  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  Type  type  =  TypeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC());  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	Type  type  =  TypeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC());	  Type    type    =    TypeUtils.getPeriodType(type);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
3	[BUG]  [BUGGY]  PeriodType  type  =  TypeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC());  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  type  =  TypeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC());  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  TypeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC());	  PeriodType    type    =    TypeUtils.getPeriodType(type,    ZERO);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	21	None	replace
4	[BUG]  [BUGGY]  PeriodType  type  =  TypeUtils.getPeriodType(type,  0);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]              UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  type  =  TypeUtils.getPeriodType(type,  0);  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  TypeUtils.getPeriodType(type,  0);	  PeriodType    type    =    TypeUtils.getPeriodType(type,    ZERO);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	21	None	replace
5	[BUG]  [BUGGY]  PeriodType  result  =  normalizedStandardType.normalizedStandard();  [CE]  cannot  find  symbol  normalizedStandardType  [FE]        UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  result  =  normalizedStandardType.normalizedStandard();  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  result  =  normalizedStandardType.normalizedStandard();	          PeriodType    result    =    type.normalizedStandard();    	non-compiled	[CE]  cannot  find  symbol  normalizedStandardType	19	None	replace
6	[BUG]  [BUGGY]  type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  millis);  [CE]  cannot  find  symbol  millis  [FE]              UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  millis);  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  millis);	  type    =    DateTimeUtils.getPeriodType(type,    ISOChronology.getInstanceUTC(),    result);    	non-compiled	[CE]  cannot  find  symbol  millis	9	None	replace
7	[BUG]  [BUGGY]  int  months  =  getSeconds()  -  1;  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]              UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  int  months  =  getSeconds()  -  1;  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	int  months  =  getSeconds()  -  1;	  int    months    =    getMonths()    -    1;    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	3	None	replace
8	[BUG]  [BUGGY]  type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  this,  period);  [CE]  cannot  find  symbol  period  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  this,  period);  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  this,  period);	  type    =    DateTimeUtils.getPeriodType(type,    ISOChronology.getInstanceUTC(),    this);    	non-compiled	[CE]  cannot  find  symbol  period	22	None	replace
9	[BUG]  [BUGGY]  PeriodType  type  =  normalizedStandard(type,  true);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]              UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  type  =  normalizedStandard(type,  true);  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  normalizedStandard(type,  true);	  PeriodType    type    =    normalizedStandard(type,    false);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	12	None	replace
10	[BUG]  [BUGGY]  PeriodType  type  =  normalizedStandard(type,  false,  ZERO);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]                UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  type  =  normalizedStandard(type,  false,  ZERO);  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  normalizedStandard(type,  false,  ZERO);	  PeriodType    type    =    normalizedStandard(type,    false);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	12	None	replace
11	[BUG]  [BUGGY]  PeriodType  millis  =  type.getMillis(),  ISOChronology.getInstanceUTC();  [CE]  ';'  expected  [FE]        UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  millis  =  type.getMillis(),  ISOChronology.getInstanceUTC();  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  millis  =  type.getMillis(),  ISOChronology.getInstanceUTC();	  PeriodType    millis    =    type.getMillis();    	non-compiled	[CE]  ';'  expected	5	None	replace
12	[BUG]  [BUGGY]  int  days  =  getDays()  -  1;  int  days  =  getDays()  -  1;  [CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  int  days  =  getDays()  -  1;  int  days  =  getDays()  -  1;  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	int    days    =    getDays()    -    1;    int  days  =  getDays()  -  1;	  	non-compiled	[CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)	14	None	add
13	[BUG]  [BUGGY]  int  days  =  getDays()  -  1;  Integer  days  =  getDays()  -  1;  [CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  int  days  =  getDays()  -  1;  Integer  days  =  getDays()  -  1;  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	int    days    =    getDays()    -    1;    Integer  days  =  getDays()  -  1;	  	non-compiled	[CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)	14	None	add
14	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  long  days  =  getDays();  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	add	long  days  =  getDays();	          int    days    =    getDays();    int    days    =    getDays();    	compilable	  [FE]  UnsupportedOperationException  	1	3	replace
15	[BUG]  [BUGGY]  long  days  =  getDays();  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  long  days  =  getDays();  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	long  days  =  getDays();	          int    days    =    getDays();    int    days    =    getDays();    	compilable	  [FE]  UnsupportedOperationException  	1	3	replace
16	[BUG]  [BUGGY]  PeriodType  type  =  TypeUtils.getPeriodType(type,  true);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  type  =  TypeUtils.getPeriodType(type,  true);  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  TypeUtils.getPeriodType(type,  true);	  PeriodType    type    =    TypeUtils.getPeriodType(type,    false);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	4	None	replace
17	[BUG]  [BUGGY]  int  millis  =  getMillis();  [CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]          UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  int  millis  =  getMillis();  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	int  millis  =  getMillis();	  long    millis    =    getMillis();    	non-compiled	[CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)	6	None	replace
18	[BUG]  [BUGGY]  long  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  long  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	long  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;	  long    millis    =    getMillis();    	non-compiled	[CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)	6	None	replace
19	[BUG]  [BUGGY]  NormalizedStandard  type  =  normalizedStandard(type,  ISOChronology.getInstanceUTC());  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  NormalizedStandard  type  =  normalizedStandard(type,  ISOChronology.getInstanceUTC());  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	NormalizedStandard  type  =  normalizedStandard(type,  ISOChronology.getInstanceUTC());	  PeriodType    type    =    normalizedStandard(type,    ISOChronology.getInstance());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
20	[BUG]  [BUGGY]  PeriodType  type  =  getTypeRegistry().getPeriodType(type,  ZERO);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]                UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  type  =  getTypeRegistry().getPeriodType(type,  ZERO);  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  getTypeRegistry().getPeriodType(type,  ZERO);	  PeriodType    type    =    getTypeRegistry().getPeriodType(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	18	None	replace
21	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  Integer  days  =  getDays();  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	add	Integer  days  =  getDays();	          int    days    =    getDays();    Integer    days    =    getDays();    	compilable	  [FE]  UnsupportedOperationException  	2	3	replace
22	[BUG]  [BUGGY]  Integer  days  =  getDays();  [FE]  UnsupportedOperationException  [FE]          UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  Integer  days  =  getDays();  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	Integer  days  =  getDays();	          int    days    =    getDays();    Integer    days    =    getDays();    	compilable	  [FE]  UnsupportedOperationException  	2	3	replace
23	[BUG]  [BUGGY]  PeriodType  type  =  getType().getPeriodType(type);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]                UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  type  =  getType().getPeriodType(type);  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  getType().getPeriodType(type);	  PeriodType    type    =    getType().getPeriodType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	11	None	replace
24	[BUG]  [BUGGY]  PeriodType  type  =  getType().getPeriodType(0);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]                  UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  type  =  getType().getPeriodType(0);  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  getType().getPeriodType(0);	  PeriodType    type    =    getType().getPeriodType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	11	None	replace
25	[BUG]  [BUGGY]  type  =  ISOChronology.getPeriodType(type,  ISOChronology.class);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  type  =  ISOChronology.getPeriodType(type,  ISOChronology.class);  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	type  =  ISOChronology.getPeriodType(type,  ISOChronology.class);	  type    =    ISOChronology.getPeriodType(type,    ISOChronology.getInstanceUTC());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
26	[BUG]  [BUGGY]  type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  PeriodType.ZERO);  [CE]  cannot  find  symbol  ZERO  [FE]              UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  PeriodType.ZERO);  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  PeriodType.ZERO);	  type    =    DateTimeUtils.getPeriodType(type,    ISOChronology.getInstanceUTC(),    result);    	non-compiled	[CE]  cannot  find  symbol  ZERO	9	None	replace
27	[BUG]  [BUGGY]  PeriodType  result  =  normalizedStandard(type);  [CE]  incompatible  types  [FE]        UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  result  =  normalizedStandard(type);  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  result  =  normalizedStandard(type);	          PeriodType    result    =    type.normalizedStandard();    	non-compiled	[CE]  incompatible  types	19	None	replace
28	[BUG]  [BUGGY]  int  days  =  getDays().length;  [CE]  int  cannot  be  dereferenced  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  int  days  =  getDays().length;  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	int  days  =  getDays().length;	  int    days    =    getDays()    -    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
29	[BUG]  [BUGGY]  type  =  ISOChronology.getPeriodType(type,  ISOChronology.getInstance());  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  type  =  ISOChronology.getPeriodType(type,  ISOChronology.getInstance());  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	type  =  ISOChronology.getPeriodType(type,  ISOChronology.getInstance());	  type    =    ISOChronology.getPeriodType(type,    ISOChronology.getInstanceUTC());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
30	[BUG]  [BUGGY]  PeriodType  result  =  type.getRawwStandard();  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  result  =  type.getRawwStandard();  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  result  =  type.getRawwStandard();	          PeriodType    result    =    type.getRawStandard();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
31	[BUG]  [BUGGY]  int  days  =  getDays()  -  1;  long  days  =  getDays()  -  1;  [CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  int  days  =  getDays()  -  1;  long  days  =  getDays()  -  1;  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	int    days    =    getDays()    -    1;    long  days  =  getDays()  -  1;	  	non-compiled	[CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)	14	None	add
32	[BUG]  [BUGGY]  PeriodType  type  =  getTypeRegistry().getPeriodType(type,  ISOChronology.getInstanceUTC());  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]                UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  type  =  getTypeRegistry().getPeriodType(type,  ISOChronology.getInstanceUTC());  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  getTypeRegistry().getPeriodType(type,  ISOChronology.getInstanceUTC());	  PeriodType    type    =    getTypeRegistry().getPeriodType(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	18	None	replace
33	[BUG]  [BUGGY]  PeriodType  type  =  type.getPeriodType(1);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  type  =  type.getPeriodType(1);  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  type.getPeriodType(1);	  PeriodType    type    =    type.getPeriodType(0);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	20	None	replace
34	[BUG]  [BUGGY]  Type  type  =  TypeUtils.getPeriodType(type,  false);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  Type  type  =  TypeUtils.getPeriodType(type,  false);  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	Type  type  =  TypeUtils.getPeriodType(type,  false);	  Type    type    =    TypeUtils.getPeriodType(type);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
35	[BUG]  [BUGGY]  PeriodType  type  =  getTypeRegistry().getPeriodType(type,  this);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]                UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  type  =  getTypeRegistry().getPeriodType(type,  this);  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  getTypeRegistry().getPeriodType(type,  this);	  PeriodType    type    =    getTypeRegistry().getPeriodType(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	18	None	replace
36	[BUG]  [BUGGY]  PeriodType  result  =  type.getRawWarnings();  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  result  =  type.getRawWarnings();  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  result  =  type.getRawWarnings();	          PeriodType    result    =    type.getRawStandard();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
37	[BUG]  [BUGGY]  int  days  =  getDays().length  -  1;  [CE]  int  cannot  be  dereferenced  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  int  days  =  getDays().length  -  1;  [BUGGY]      type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	int  days  =  getDays().length  -  1;	  int    days    =    getDays()    -    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
38	[BUG]  [BUGGY]  PeriodType  result  =  type.standardizedStandard();  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  result  =  type.standardizedStandard();  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  result  =  type.standardizedStandard();	          PeriodType    result    =    type.normalizedStandard();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
39	[BUG]  [BUGGY]  long  millis  =  getMillis()  -  1;  [CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]          UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  long  millis  =  getMillis()  -  1;  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	long  millis  =  getMillis()  -  1;	  long    millis    =    getMillis();    	non-compiled	[CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)	6	None	replace
40	[BUG]  [BUGGY]  PeriodType  millis  =  type.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {      [BUGGY]  PeriodType  millis  =  type.restrictByNotNullOrUndefined();  [BUGGY]      long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  millis  =  type.restrictByNotNullOrUndefined();	  PeriodType    millis    =    type.getMillis();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
