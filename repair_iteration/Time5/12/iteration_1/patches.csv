bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      int  days  =  getDays();  int  days  =  getDays();  [CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]      int  days  =  getDays();  int  days  =  getDays();  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	        int    days    =    getDays();    int  days  =  getDays();	  	non-compiled	[CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)	9	None	add
2	[BUG]  [BUGGY]      int  days  =  getDays();  Integer  days  =  getDays();  [CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]      UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]      int  days  =  getDays();  Integer  days  =  getDays();  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	        int    days    =    getDays();    Integer  days  =  getDays();	  	non-compiled	[CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)	9	None	add
3	[BUG]  [BUGGY]  int  months  =  getMonths()  -  1;  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]          UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  int  months  =  getMonths()  -  1;  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	int  months  =  getMonths()  -  1;	      int    months    =    getMonths();    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	11	None	replace
4	[BUG]  [BUGGY]  PeriodType  type  =  TypeUtils.getPeriodType(type,  false);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  PeriodType  type  =  TypeUtils.getPeriodType(type,  false);  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  TypeUtils.getPeriodType(type,  false);	      PeriodType    type    =    TypeUtils.getPeriodType(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	7	None	replace
5	[BUG]  [BUGGY]  PeriodType  millis  =  type.getMillis();  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  PeriodType  millis  =  type.getMillis();  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  millis  =  type.getMillis();	      	non-compiled	[CE]  cannot  find  symbol	3	None	replace
6	[BUG]  [BUGGY]  long  millis  =  getMillis();  [CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]      UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  long  millis  =  getMillis();  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	long  millis  =  getMillis();	      	non-compiled	[CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)	3	None	replace
7	[BUG]  [BUGGY]  PeriodType  type  =  normalizedStandard(type,  ISOChronology.getInstance());  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]          UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  PeriodType  type  =  normalizedStandard(type,  ISOChronology.getInstance());  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  normalizedStandard(type,  ISOChronology.getInstance());	      PeriodType    type    =    normalizedStandard(type,    ISOChronology.getInstanceUTC());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	8	None	replace
8	[BUG]  [BUGGY]  type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  period);  [CE]  cannot  find  symbol  period  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  period);  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  period);	  type    =    DateTimeUtils.getPeriodType(type,    ISOChronology.getInstanceUTC());    	non-compiled	[CE]  cannot  find  symbol  period	1	None	replace
9	[BUG]  [BUGGY]  type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  result);  [CE]  cannot  find  symbol  result  [FE]          UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  result);  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  result);	  type    =    DateTimeUtils.getPeriodType(type,    ISOChronology.getInstanceUTC());    	non-compiled	[CE]  cannot  find  symbol  result	1	None	replace
10	[BUG]  [BUGGY]      PeriodType  result  =  type.getRawStandard();  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]      PeriodType  result  =  type.getRawStandard();  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	        PeriodType  result  =  type.getRawStandard();	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
11	[BUG]  [BUGGY]  PeriodType  type  =  getType().getPeriodType();  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]            UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  PeriodType  type  =  getType().getPeriodType();  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  getType().getPeriodType();	      PeriodType    type    =    getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	6	None	replace
12	[BUG]  [BUGGY]  PeriodType  type  =  normalizedStandard(type,  false);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]          UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  PeriodType  type  =  normalizedStandard(type,  false);  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  normalizedStandard(type,  false);	      PeriodType    type    =    normalizedStandard(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	5	None	replace
13	[BUG]  [BUGGY]  PeriodType  type  =  normalizedStandard(type,  ZERO);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]            UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  PeriodType  type  =  normalizedStandard(type,  ZERO);  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  normalizedStandard(type,  ZERO);	      PeriodType    type    =    normalizedStandard(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	5	None	replace
14	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  int  days  =  getDays()  -  1;  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	add	int  days  =  getDays()  -  1;	      int    days    =    getDays();    	compilable	  [FE]  UnsupportedOperationException  	10	3	replace
15	[BUG]  [BUGGY]  int  days  =  getDays()  -  1;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  int  days  =  getDays()  -  1;  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	int  days  =  getDays()  -  1;	      int    days    =    getDays();    	compilable	  [FE]  UnsupportedOperationException  	10	3	replace
16	[BUG]  [BUGGY]  Type  type  =  TypeUtils.getPeriodType(type);  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  Type  type  =  TypeUtils.getPeriodType(type);  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	Type  type  =  TypeUtils.getPeriodType(type);	      PeriodType    type    =    TypeUtils.getPeriodType(type);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
17	[BUG]  [BUGGY]  type  =  ISOChronology.getPeriodType(type,  ISOChronology.getInstanceUTC());  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  type  =  ISOChronology.getPeriodType(type,  ISOChronology.getInstanceUTC());  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	type  =  ISOChronology.getPeriodType(type,  ISOChronology.getInstanceUTC());	  type    =    DateTimeUtils.getPeriodType(type,    ISOChronology.getInstanceUTC());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
18	[BUG]  [BUGGY]  PeriodType  type  =  getTypeRegistry().getPeriodType(type);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]            UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  PeriodType  type  =  getTypeRegistry().getPeriodType(type);  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  getTypeRegistry().getPeriodType(type);	      PeriodType    type    =    getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	6	None	replace
19	[BUG]  [BUGGY]      PeriodType  result  =  type.normalizedStandard();  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]      PeriodType  result  =  type.normalizedStandard();  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	        PeriodType  result  =  type.normalizedStandard();	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
20	[BUG]  [BUGGY]  PeriodType  type  =  type.getPeriodType(0);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  PeriodType  type  =  type.getPeriodType(0);  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  type.getPeriodType(0);	      PeriodType    type    =    type.getPeriodType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	4	None	replace
21	[BUG]  [BUGGY]  PeriodType  type  =  TypeUtils.getPeriodType(type,  ZERO);  [CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  PeriodType  type  =  TypeUtils.getPeriodType(type,  ZERO);  [BUGGY]    type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	PeriodType  type  =  TypeUtils.getPeriodType(type,  ZERO);	      PeriodType    type    =    TypeUtils.getPeriodType(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  normalizedStandard(PeriodType)	7	None	replace
22	[BUG]  [BUGGY]  type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  this);  [CE]  method  getPeriodType  in  class  DateTimeUtils  cannot  be  applied  to  given  types;  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {    [BUGGY]  type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  this);  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1617	1617	3	replace	type  =  DateTimeUtils.getPeriodType(type,  ISOChronology.getInstanceUTC(),  this);	  type    =    DateTimeUtils.getPeriodType(type,    ISOChronology.getInstanceUTC());    	non-compiled	[CE]  method  getPeriodType  in  class  DateTimeUtils  cannot  be  applied  to  given  types;	1	None	replace
