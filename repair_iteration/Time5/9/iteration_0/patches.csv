bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException  [CONTEXT]  public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  [BUGGY]  int  months  =  getMonths()  -  1;  [BUGGY]  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1626	1626	3	add	int  months  =  getMonths()  -  1;	int  months  =  getMonths();  	compilable	  [FE]  AssertionFailedError  	17	15	replace
2	[BUG]  [BUGGY]  int  months  =  getMonths()  -  1;  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException  [CONTEXT]  public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  [BUGGY]  int  months  =  getMonths()  -  1;  [BUGGY]  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1626	1626	3	replace	int  months  =  getMonths()  -  1;	int  months  =  getMonths();  	compilable	  [FE]  AssertionFailedError  	17	15	replace
3	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  months  [FE]      UnsupportedOperationException  [CONTEXT]  public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  [BUGGY]    [BUGGY]  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1626	1626	3	replace	  	int  months  =  getMonths();  	non-compiled	[CE]  cannot  find  symbol  months	17	None	replace
4	[BUG]  [BUGGY]    int  months  =  getDays();  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    UnsupportedOperationException  [CONTEXT]  public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  [BUGGY]    int  months  =  getDays();  [BUGGY]  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1626	1626	3	replace	    int  months  =  getDays();		non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	18	None	add
5	[BUG]  [BUGGY]    int  months  =  getMinutes();  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]      UnsupportedOperationException  [CONTEXT]  public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  [BUGGY]    int  months  =  getMinutes();  [BUGGY]  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1626	1626	3	replace	    int  months  =  getMinutes();		non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	18	None	add
6	[BUG]  [BUGGY]    int  months  =  getYears();  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    UnsupportedOperationException  [CONTEXT]  public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  [BUGGY]    int  months  =  getYears();  [BUGGY]  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1626	1626	3	replace	    int  months  =  getYears();		non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	18	None	add
7	[BUG]  [BUGGY]    int  months  =  getSeconds();  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    UnsupportedOperationException  [CONTEXT]  public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  [BUGGY]    int  months  =  getSeconds();  [BUGGY]  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.39735970711951313	1626	1626	3	replace	    int  months  =  getSeconds();		non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	18	None	add
