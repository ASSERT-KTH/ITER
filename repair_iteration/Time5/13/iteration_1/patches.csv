bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  int  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  int  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]    millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	int    millis    =    getMillis();//    no    overflow    can    happen,    even    with    Integer.MAX_VALUEs    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    int  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	non-compiled	[CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)	5	None	add
2	[BUG]  [BUGGY]  int  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  int  millis  =  getMillis();//  no  overflow,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]      AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  int  millis  =  getMillis();//  no  overflow,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]    millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	int    millis    =    getMillis();//    no    overflow    can    happen,    even    with    Integer.MAX_VALUEs    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    int  millis  =  getMillis();//  no  overflow,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	non-compiled	[CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)	5	None	add
3	[BUG]  [BUGGY]  int  months  =  getMonths()  -  1;  [CE]  cannot  find  symbol  millis  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  months  =  getMonths()  -  1;  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	int  months  =  getMonths()  -  1;	      int    months    =    getMonths();    	non-compiled	[CE]  cannot  find  symbol  millis	10	None	replace
4	[BUG]  [BUGGY]      int  days  =  getDays();  int  days  =  getDays();  [CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]      int  days  =  getDays();  int  days  =  getDays();  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	        int    days    =    getDays();    int  days  =  getDays();	  	non-compiled	[CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)	2	None	add
5	[BUG]  [BUGGY]      int  days  =  getDays();  Integer  days  =  getDays();  [CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]      UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]      int  days  =  getDays();  Integer  days  =  getDays();  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	        int    days    =    getDays();    Integer  days  =  getDays();	  	non-compiled	[CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)	2	None	add
6	[BUG]  [BUGGY]      int  days  =  getDays();  long  days  =  getDays();  [CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]      int  days  =  getDays();  long  days  =  getDays();  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	        int    days    =    getDays();    long  days  =  getDays();	  	non-compiled	[CE]  variable  days  is  already  defined  in  method  normalizedStandard(PeriodType)	2	None	add
7	[BUG]  [BUGGY]  int  millis  =  getMillis();  int  millis  =  getMillis();  [CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  millis  =  getMillis();  int  millis  =  getMillis();  [BUGGY]    millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	int    millis    =    getMillis();    int  millis  =  getMillis();	  	non-compiled	[CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)	8	None	add
8	[BUG]  [BUGGY]  int  millis  =  getMillis();  Int  millis  =  getMillis();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  millis  =  getMillis();  Int  millis  =  getMillis();  [BUGGY]    millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	int    millis    =    getMillis();    Int  millis  =  getMillis();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
9	[BUG]  [BUGGY]  PeriodType  result  =  normalizedStandardType.normalizedStandard();  [CE]  cannot  find  symbol  normalizedStandardType  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  PeriodType  result  =  normalizedStandardType.normalizedStandard();  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	PeriodType  result  =  normalizedStandardType.normalizedStandard();	      PeriodType    result    =    type.normalizedStandard();    	non-compiled	[CE]  cannot  find  symbol  normalizedStandardType	7	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  long  millis  =  getMillis()  -  1;  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	add	long  millis  =  getMillis()  -  1;	      long    millis    =    getMillis();    	compilable	  [FE]  AssertionFailedError  	1	16	replace
11	[BUG]  [BUGGY]  long  millis  =  getMillis()  -  1;  [FE]  AssertionFailedError  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  long  millis  =  getMillis()  -  1;  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	long  millis  =  getMillis()  -  1;	      long    millis    =    getMillis();    	compilable	  [FE]  AssertionFailedError  	1	16	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  millis  =  getMillis()  -  1;  [BUGGY]    millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	add	int  millis  =  getMillis()  -  1;	  int    millis    =    getMillis();    	compilable	  [FE]  AssertionFailedError  	9	16	replace
13	[BUG]  [BUGGY]  int  millis  =  getMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  millis  =  getMillis()  -  1;  [BUGGY]    millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	int  millis  =  getMillis()  -  1;	  int    millis    =    getMillis();    	compilable	  [FE]  AssertionFailedError  	9	16	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  millis  =  getMillis()  /  2;  [BUGGY]    millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	add	int  millis  =  getMillis()  /  2;	  int    millis    =    getMillis();    	compilable	  [FE]  AssertionFailedError  	9	7	replace
15	[BUG]  [BUGGY]  int  millis  =  getMillis()  /  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  millis  =  getMillis()  /  2;  [BUGGY]    millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	int  millis  =  getMillis()  /  2;	  int    millis    =    getMillis();    	compilable	  [FE]  AssertionFailedError  	9	7	replace
16	[BUG]  [BUGGY]  int  days  =  getDays()  -  1;  [CE]  cannot  find  symbol  millis  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  days  =  getDays()  -  1;  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	int  days  =  getDays()  -  1;	      int    days    =    getDays();    	non-compiled	[CE]  cannot  find  symbol  millis	3	None	replace
17	[BUG]  [BUGGY]  int  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  int  millis  =  getMillis();  [CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  int  millis  =  getMillis();  [BUGGY]    millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	int    millis    =    getMillis();//    no    overflow    can    happen,    even    with    Integer.MAX_VALUEs    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    int  millis  =  getMillis();	  	non-compiled	[CE]  variable  millis  is  already  defined  in  method  normalizedStandard(PeriodType)	5	None	add
18	[BUG]  [BUGGY]  PeriodType  result  =  type.getRawwStandard();  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  PeriodType  result  =  type.getRawwStandard();  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	PeriodType  result  =  type.getRawwStandard();	      PeriodType    result    =    type.getRawStandard();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
19	[BUG]  [BUGGY]  PeriodType  result  =  normalizedStandard(type);  [CE]  incompatible  types  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  PeriodType  result  =  normalizedStandard(type);  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	PeriodType  result  =  normalizedStandard(type);	      PeriodType    result    =    type.normalizedStandard();    	non-compiled	[CE]  incompatible  types	7	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	add	int  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;	  int    millis    =    getMillis();    	compilable	  [FE]  AssertionFailedError  	9	7	replace
21	[BUG]  [BUGGY]  int  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  int  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	int  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;	  int    millis    =    getMillis();    	compilable	  [FE]  AssertionFailedError  	9	7	replace
22	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  long  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	add	long  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;	      long    millis    =    getMillis();    	compilable	  [FE]  UnsupportedOperationException  	1	3	replace
23	[BUG]  [BUGGY]  long  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  long  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	long  millis  =  getMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;	      long    millis    =    getMillis();    	compilable	  [FE]  UnsupportedOperationException  	1	3	replace
24	[BUG]  [BUGGY]  PeriodType  result  =  type.standardizedStandard();  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  PeriodType  result  =  type.standardizedStandard();  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	PeriodType  result  =  type.standardizedStandard();	      PeriodType    result    =    type.normalizedStandard();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
25	[BUG]  [BUGGY]  PeriodType  result  =  type.getRawWarnings();  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);    [BUGGY]  PeriodType  result  =  type.getRawWarnings();  [BUGGY]    long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1618	1619	3	replace	PeriodType  result  =  type.getRawWarnings();	      PeriodType    result    =    type.getRawStandard();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
