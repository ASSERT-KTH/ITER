bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_H  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_H  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_H	          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    	non-compiled	[CE]  ')'  expected	5	None	replace
2	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	16	5	add
3	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	16	5	add
4	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_	  	non-compiled	[CE]  ')'  expected	16	None	add
5	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	16	None	add
6	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]            UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER	          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_    	non-compiled	[CE]  ')'  expected	6	None	replace
7	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER	          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	non-compiled	[CE]  ')'  expected	13	None	replace
8	[BUG]  [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILL  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILL  [BUGGY]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILL	  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	non-compiled	[CE]  ')'  expected	11	None	replace
9	[BUG]  [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS	  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	non-compiled	[CE]  ')'  expected	11	None	replace
10	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_H  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_H  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getHours())*        ((        long)DateTimeConstants.MILLIS_PER_HOUR));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_H	  	non-compiled	[CE]  ')'  expected	4	None	add
11	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getHours())*        ((        long)DateTimeConstants.MILLIS_PER_HOUR));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));	  	compilable	  [FE]  UnsupportedOperationException  	4	6	add
12	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getHours())*        ((        long)DateTimeConstants.MILLIS_PER_HOUR));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));	  	compilable	  [FE]  UnsupportedOperationException  	4	6	add
13	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getHours())*        ((        long)DateTimeConstants.MILLIS_PER_HOUR));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_	  	non-compiled	[CE]  ')'  expected	4	None	add
14	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	17	5	replace
15	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	17	5	replace
16	[BUG]  [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILL  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILL  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILL	          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    	non-compiled	[CE]  ')'  expected	8	None	replace
17	[BUG]  [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS	          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    	non-compiled	[CE]  ')'  expected	8	None	replace
18	[BUG]  [BUGGY]          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILL  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILL  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getSeconds())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILL	  	non-compiled	[CE]  ')'  expected	7	None	add
19	[BUG]  [BUGGY]          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getSeconds())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS	  	non-compiled	[CE]  ')'  expected	7	None	add
20	[BUG]  [BUGGY]          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.M  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.M  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getSeconds())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.M	  	non-compiled	[CE]  ')'  expected	7	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	23	12	add
22	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	23	12	add
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	23	12	add
24	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	23	12	add
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));	  	compilable	  [FE]  AssertionFailedError  	23	12	add
26	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));	  	compilable	  [FE]  AssertionFailedError  	23	12	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	millis    +=    (((long)getMillis())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	1	10	add
28	[BUG]  [BUGGY]  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis    +=    (((long)getMillis())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	1	10	add
29	[BUG]  [BUGGY]  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis    +=    (((long)getMillis())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_	  	non-compiled	[CE]  ')'  expected	1	None	add
30	[BUG]  [BUGGY]  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_  [BUGGY]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis        +=        (((long)getSeconds())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_	  	non-compiled	[CE]  ')'  expected	10	None	add
31	[BUG]  [BUGGY]  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis        +=        (((long)getSeconds())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS	  	non-compiled	[CE]  ')'  expected	10	None	add
32	[BUG]  [BUGGY]  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILL  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILL  [BUGGY]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis        +=        (((long)getSeconds())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILL	  	non-compiled	[CE]  ')'  expected	10	None	add
33	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY	          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER    	non-compiled	[CE]  ')'  expected	22	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	12	12	add
35	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	12	12	add
36	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_	  	non-compiled	[CE]  ')'  expected	12	None	add
37	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	12	None	add
38	[BUG]  [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]        UnsupportedOperationException      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER	          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER    	non-compiled	[CE]  ')'  expected	20	None	replace
39	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	compilable	  [FE]  UnsupportedOperationException  	18	5	add
40	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	compilable	  [FE]  UnsupportedOperationException  	18	5	add
41	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_	  	non-compiled	[CE]  ')'  expected	16	None	add
42	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getHours())*        ((        long)DateTimeConstants.MILLIS_PER_HOUR));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	4	None	add
43	[BUG]  [BUGGY]  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis        +=        (((long)getSeconds())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	10	None	add
44	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER	          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    	non-compiled	[CE]  ')'  expected	8	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	compilable	  [FE]  AssertionFailedError  	13	12	replace
46	[BUG]  [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	compilable	  [FE]  AssertionFailedError  	13	12	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));	  	compilable	  [FE]  AssertionFailedError  	12	12	add
48	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));	  	compilable	  [FE]  AssertionFailedError  	12	12	add
49	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_H  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_H  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_H	  	non-compiled	[CE]  ')'  expected	12	None	add
50	[BUG]  [BUGGY]  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis    +=    (((long)getMillis())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMillis())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	1	None	add
51	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_H  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_H  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_H	  	non-compiled	[CE]  ')'  expected	23	None	add
52	[BUG]  [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER	  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	non-compiled	[CE]  ')'  expected	11	None	replace
53	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER	          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	non-compiled	[CE]  ')'  expected	17	None	replace
54	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getHours())*        ((        long)DateTimeConstants.MILLIS_PER_HOUR));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	4	6	add
55	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getHours())*        ((        long)DateTimeConstants.MILLIS_PER_HOUR));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	4	6	add
56	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	16	None	add
57	[BUG]  [BUGGY]  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis        +=        (((long)getSeconds())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	10	None	add
58	[BUG]  [BUGGY]  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis        +=        (((long)getSeconds())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS	  	non-compiled	[CE]  ')'  expected	10	None	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS    	compilable	  [FE]  AssertionFailedError  	15	12	replace
60	[BUG]  [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS    	compilable	  [FE]  AssertionFailedError  	15	12	replace
61	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	12	None	add
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  AssertionFailedError  	12	12	add
63	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  AssertionFailedError  	12	12	add
64	[BUG]  [BUGGY]          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getSeconds())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS	  	non-compiled	[CE]  ')'  expected	7	None	add
65	[BUG]  [BUGGY]          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getSeconds())*        ((        long)DateTimeConstants.MILLIS_PER_SECOND));        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS	  	non-compiled	[CE]  ')'  expected	7	None	add
66	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	23	None	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	add	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  AssertionFailedError  	23	12	add
68	[BUG]  [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));      [BUGGY]          millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1620	1620	3	replace	                millis        +=        (((long)getMinutes())*        ((        long)DateTimeConstants.MILLIS_PER_MINUTE));        millis        +=        (((long)getDays())*        ((        long)DateTimeConstants.MILLIS_PER_DAY));        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  AssertionFailedError  	23	12	add
