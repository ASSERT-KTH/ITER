bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	18	10	add
2	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	18	10	add
3	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
4	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	18	10	add
5	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	18	10	add
6	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	43	10	add
7	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	43	10	add
8	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	43	10	add
9	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	43	10	add
10	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	43	10	add
11	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	43	10	add
12	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    return    result;    }    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	14	10	add
13	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    return    result;    }    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	14	10	add
14	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    return    result;    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	14	10	add
15	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    return    result;    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	14	10	add
16	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    return    result;    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	14	10	add
17	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    return    result;    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	14	10	add
18	[BUG]  [BUGGY]  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)  [CE]  ')'  expected  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)	          result    =    result.withMonths(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR)    	non-compiled	[CE]  ')'  expected	48	None	replace
19	[BUG]  [BUGGY]  result  =  result.withMonths(years);  millis  +=  (((long)getMinutes())*  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILL  [CE]  ';'  expected  [FE]            UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withMonths(years);  millis  +=  (((long)getMinutes())*  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILL  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result  =  result.withMonths(years);  millis  +=  (((long)getMinutes())*  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILL	          result    =    result.withMonths(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR)    	non-compiled	[CE]  ';'  expected	48	None	replace
20	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withSeconds(months);  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
21	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withSeconds(months);  result  =  result.withSeconds(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withSeconds(months);  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
22	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        result    =    result.withSeconds(months);    result  =  result.withSeconds(years);  result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
23	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  result  =  result.withSeconds(months);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        result    =    result.withSeconds(months);    result  =  result.withSeconds(years);  result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
24	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS	          result    =    result.withSeconds(months);    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS    	non-compiled	[CE]  ')'  expected	55	None	replace
25	[BUG]  [BUGGY]  result  =  result.withSeconds(years);  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants  [CE]  ')'  expected  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withSeconds(years);  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result  =  result.withSeconds(years);  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants	          result    =    result.withSeconds(months);    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS    	non-compiled	[CE]  ')'  expected	55	None	replace
26	[BUG]  [BUGGY]  Months  %  12  +  1;  [CE]  not  a  statement  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  Months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	Months  %  12  +  1;	  months    =    months    %    12    +    1;    Months    %    12    +    1;    	non-compiled	[CE]  not  a  statement	54	None	replace
27	[BUG]  [BUGGY]  months  %  12  +  1;  [CE]  not  a  statement  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	months  %  12  +  1;	  months    =    months    %    12    +    1;    Months    %    12    +    1;    	non-compiled	[CE]  not  a  statement	54	None	replace
28	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  months  =  months  %  12  +  1;  years  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	months        =        months        %        12        +        1;        years    =    months    %    12    +    1;    months  =  months  %  12  +  1;  years  =  months  %  12  +  1;	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
29	[BUG]  [BUGGY]  months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  months  =  months  %  12  +  1;  years  =  months  %  12  +  1;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  months  =  months  %  12  +  1;  years  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	months        =        months        %        12        +        1;        years    =    months    %    12    +    1;    months  =  months  %  12  +  1;  years  =  months  %  12  +  1;	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
30	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  years  =  months  %  12  +  1;  years  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	months        =        months        %        12        +        1;        years    =    months    %    12    +    1;    years  =  months  %  12  +  1;  years  =  months  %  12  +  1;	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
31	[BUG]  [BUGGY]  months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  years  =  months  %  12  +  1;  years  =  months  %  12  +  1;  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  years  =  months  %  12  +  1;  years  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	months        =        months        %        12        +        1;        years    =    months    %    12    +    1;    years  =  months  %  12  +  1;  years  =  months  %  12  +  1;	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
32	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  years  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	months        =        months        %        12        +        1;        years    =    months    %    12    +    1;    years  =  months  %  12  +  1;	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
33	[BUG]  [BUGGY]  months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  years  =  months  %  12  +  1;  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  years  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	months        =        months        %        12        +        1;        years    =    months    %    12    +    1;    years  =  months  %  12  +  1;	  	compilable	  [FE]  UnsupportedOperationException  	27	10	add
34	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(months);  result  =  result.withDays(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result    =    result.withDays(months);    result  =  result.withDays(months);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
35	[BUG]  [BUGGY]  result  =  result.withDays(months);  result  =  result.withDays(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(months);  result  =  result.withDays(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withDays(months);    result  =  result.withDays(months);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
36	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(months);  result  =  result.withDays(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result    =    result.withDays(months);    result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
37	[BUG]  [BUGGY]  result  =  result.withDays(months);  result  =  result.withDays(years);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(months);  result  =  result.withDays(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withDays(months);    result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
38	[BUG]  [BUGGY]  result  =  result.withDays(months);  results  =  result.withDays(months);  [CE]  cannot  find  symbol  results  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(months);  results  =  result.withDays(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withDays(months);    results  =  result.withDays(months);	  	non-compiled	[CE]  cannot  find  symbol  results	8	None	add
39	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    result    =    result.withSeconds(months);    }    result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	39	10	add
40	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    result    =    result.withSeconds(months);    }    result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	39	10	add
41	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    result    =    result.withSeconds(months);    }    result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	39	10	add
42	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    result    =    result.withSeconds(months);    }    result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	39	10	add
43	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    result    =    result.withSeconds(months);    }    result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	39	10	add
44	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    result    =    result.withSeconds(months);    }    result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	39	10	add
45	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	10	10	add
46	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	10	10	add
47	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(months);  result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	10	10	add
48	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(months);  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(months);  result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	10	10	add
49	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  result  =  result.withMonths(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    else    {    return    result;    }    result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	5	4	add
50	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  result  =  result.withMonths(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  result  =  result.withMonths(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    else    {    return    result;    }    result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	5	4	add
51	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    else    {    return    result;    }    result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	5	4	add
52	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    else    {    return    result;    }    result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	5	4	add
53	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    else    {    return    result;    }    result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	4	add
54	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    else    {    return    result;    }    result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	5	4	add
55	[BUG]  [BUGGY]  result  =  result.withLocals(years,  months  -  1);  [CE]  cannot  find  symbol  [FE]              UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withLocals(years,  months  -  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result  =  result.withLocals(years,  months  -  1);	  result    =    result.withLocals(years,    months);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
56	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);  result  =  result.withDays(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	16	10	add
57	[BUG]  [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);  result  =  result.withDays(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);  result  =  result.withDays(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	16	10	add
58	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        result    =    result.withDays(years);    result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	16	10	add
59	[BUG]  [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.withDays(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        result    =    result.withDays(years);    result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	16	10	add
60	[BUG]  [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.WithDays(years);  result  =  result.withDays(years);  [CE]  cannot  find  symbol  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  result  =  result.WithDays(years);  result  =  result.withDays(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        result    =    result.withDays(years);    result  =  result.WithDays(years);  result  =  result.withDays(years);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
61	[BUG]  [BUGGY]  result  =  result.withSeconds(years);  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)  [CE]  illegal  start  of  expression  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withSeconds(years);  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result  =  result.withSeconds(years);  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)	          result    =    result.withSeconds(years);    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
62	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    months  =  months  %  12  +  1;  months  =  months  %  12  +  1;  months  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	months        =        months        %        12        +        1;        months    =    months    %    12    +    1;    months  =  months  %  12  +  1;  months  =  months  %  12  +  1;	  	compilable	  [FE]  UnsupportedOperationException  	25	10	add
63	[BUG]  [BUGGY]  months    =    months    %    12    +    1;    months  =  months  %  12  +  1;  months  =  months  %  12  +  1;  months  =  months  %  12  +  1;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    months  =  months  %  12  +  1;  months  =  months  %  12  +  1;  months  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	months        =        months        %        12        +        1;        months    =    months    %    12    +    1;    months  =  months  %  12  +  1;  months  =  months  %  12  +  1;	  	compilable	  [FE]  UnsupportedOperationException  	25	10	add
64	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    months  =  months  %  12  +  1;  years  =  months  %  12  +  1;  months  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	months        =        months        %        12        +        1;        months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  months  =  months  %  12  +  1;	  	compilable	  [FE]  UnsupportedOperationException  	25	10	add
65	[BUG]  [BUGGY]  months    =    months    %    12    +    1;    months  =  months  %  12  +  1;  years  =  months  %  12  +  1;  months  =  months  %  12  +  1;  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    months  =  months  %  12  +  1;  years  =  months  %  12  +  1;  months  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	months        =        months        %        12        +        1;        months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  months  =  months  %  12  +  1;	  	compilable	  [FE]  UnsupportedOperationException  	25	10	add
66	[BUG]  [BUGGY]  months    =    months    %    12    +    1;    months  =  months  %  12  +  1;  Months  months  =  months  %  12  +  1;  months  =  months  %  12  +  1;  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    months  =  months  %  12  +  1;  Months  months  =  months  %  12  +  1;  months  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	months        =        months        %        12        +        1;        months    =    months    %    12    +    1;    Months  months  =  months  %  12  +  1;  months  =  months  %  12  +  1;	  	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	25	None	add
67	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  years  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	years  =  months  %  12  +  1;	  months    =    months    %    12    +    1;    years    =    months    %    12    +    1;    	compilable	  [FE]  UnsupportedOperationException  	28	10	replace
68	[BUG]  [BUGGY]  years  =  months  %  12  +  1;  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  years  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	years  =  months  %  12  +  1;	  months    =    months    %    12    +    1;    years    =    months    %    12    +    1;    	compilable	  [FE]  UnsupportedOperationException  	28	10	replace
69	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  years  =  months  %  12;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	years  =  months  %  12;	  months    =    months    %    12    +    1;    years    =    months    %    12    +    1;    	compilable	  [FE]  UnsupportedOperationException  	28	10	replace
70	[BUG]  [BUGGY]  years  =  months  %  12;  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  years  =  months  %  12;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	years  =  months  %  12;	  months    =    months    %    12    +    1;    years    =    months    %    12    +    1;    	compilable	  [FE]  UnsupportedOperationException  	28	10	replace
71	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	12	10	add
72	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	12	10	add
73	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	12	10	add
74	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	12	10	add
75	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    if(years!=  0)  {  result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
76	[BUG]  [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  result  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)Date  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  result  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)Date  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    result  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)Date	  	non-compiled	[CE]  ')'  expected	51	None	add
77	[BUG]  [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  result  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  result  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    result  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants	  	non-compiled	[CE]  ')'  expected	51	None	add
78	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  result  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    result  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	51	10	add
79	[BUG]  [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  result  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  result  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    result  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	51	10	add
80	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withMonths(months);  result  =  result.withMonths(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result    =    result.withMonths(months);    result  =  result.withMonths(months);	  	compilable	  [FE]  UnsupportedOperationException  	36	3	add
81	[BUG]  [BUGGY]  result  =  result.withMonths(months);  result  =  result.withMonths(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withMonths(months);  result  =  result.withMonths(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withMonths(months);    result  =  result.withMonths(months);	  	compilable	  [FE]  UnsupportedOperationException  	36	3	add
82	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result    =    result.withMonths(months);    if(months!=  0)  {  result  =  result.withMonths(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	36	3	add
83	[BUG]  [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withMonths(months);    if(months!=  0)  {  result  =  result.withMonths(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	36	3	add
84	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result    =    result.withMonths(months);    if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	36	3	add
85	[BUG]  [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  return  result;  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withMonths(months);    if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	36	3	add
86	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	32	10	add
87	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	32	10	add
88	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [CE]  reached  end  of  file  while  parsing  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	add
89	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	32	10	add
90	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	32	10	add
91	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	          result    =    result.withDays(years);    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	52	9	replace
92	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	          result    =    result.withDays(years);    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	52	9	replace
93	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	          result    =    result.withDays(years);    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	52	10	replace
94	[BUG]  [BUGGY]  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	          result    =    result.withDays(years);    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	52	10	replace
95	[BUG]  [BUGGY]  days  =  months  %  12  +  1;  [CE]  cannot  find  symbol  days  [FE]            UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  days  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	days  =  months  %  12  +  1;	  months    =    months    %    12    +    1;    days    =    months    %    12    +    1;    	non-compiled	[CE]  cannot  find  symbol  days	29	None	replace
96	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    return    result;    }    result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	34	10	add
97	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  result  =  result.withSeconds(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    return    result;    }    result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	34	10	add
98	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    return    result;    }    result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	34	10	add
99	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    return    result;    }    result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	34	10	add
100	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    return    result;    }    result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	34	10	add
101	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    return    result;    }    result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	34	10	add
102	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  result  =  result.withDays(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    return    result;    }    result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	20	10	add
103	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  result  =  result.withDays(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  result  =  result.withDays(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    return    result;    }    result  =  result.withDays(years);	  	compilable	  [FE]  UnsupportedOperationException  	20	10	add
104	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    return    result;    }    result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	20	10	add
105	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    return    result;    }    result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	20	10	add
106	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    return    result;    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	20	10	add
107	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    return    result;    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	20	10	add
108	[BUG]  [BUGGY]  result  =  result.withSeconds(years);  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)Date  [CE]  ')'  expected  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withSeconds(years);  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)Date  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result  =  result.withSeconds(years);  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)Date	          result    =    result.withSeconds(years);    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_    	non-compiled	[CE]  ')'  expected	46	None	replace
109	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withYears(years);  result  =  result.withYears(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result    =    result.withYears(years);    result  =  result.withYears(years);	  	compilable	  [FE]  UnsupportedOperationException  	49	4	add
110	[BUG]  [BUGGY]  result  =  result.withYears(years);  result  =  result.withYears(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withYears(years);  result  =  result.withYears(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withYears(years);    result  =  result.withYears(years);	  	compilable	  [FE]  UnsupportedOperationException  	49	4	add
111	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withYears(years);  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result    =    result.withYears(years);    if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	49	4	add
112	[BUG]  [BUGGY]  result  =  result.withYears(years);  if(years!=  0)  {  result  =  result.withYears(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withYears(years);  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withYears(years);    if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	49	4	add
113	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withYears(years);  if(years!=  0)  {  result  =  result.withYears(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result    =    result.withYears(years);    if(years!=  0)  {  result  =  result.withYears(years);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	49	4	add
114	[BUG]  [BUGGY]  result  =  result.withYears(years);  if(years!=  0)  {  result  =  result.withYears(years);  }  else  {  return  result;  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withYears(years);  if(years!=  0)  {  result  =  result.withYears(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withYears(years);    if(years!=  0)  {  result  =  result.withYears(years);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	49	4	add
115	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND)  [CE]  ')'  expected  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND)  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND)	          result    =    result.withDays(years);    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND)    	non-compiled	[CE]  ')'  expected	53	None	replace
116	[BUG]  [BUGGY]  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND)  [CE]  ')'  expected  [FE]            UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND)  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND)	          result    =    result.withDays(years);    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND)    	non-compiled	[CE]  ')'  expected	53	None	replace
117	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	41	10	add
118	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	41	10	add
119	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	41	10	add
120	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	41	10	add
121	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	41	10	add
122	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	41	10	add
123	[BUG]  [BUGGY]  int  months  =  getMonths()  /  12L;  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]              UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  int  months  =  getMonths()  /  12L;  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	int  months  =  getMonths()  /  12L;	  int    months    =    getMonths()    /    12;    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	22	None	replace
124	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	3	3	add
125	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	3	3	add
126	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
127	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	3	3	add
128	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withYears(years);  }  [FE]  UnsupportedOperationException  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withYears(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	3	3	add
129	[BUG]  [BUGGY]  result  =  result.withLocal(years,  months  -  1);  [CE]  cannot  find  symbol  [FE]            UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withLocal(years,  months  -  1);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result  =  result.withLocal(years,  months  -  1);	  result    =    result.withLocal(years,    months);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
130	[BUG]  [BUGGY]  Months  months  =  months  %  12  +  1;  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  Months  months  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	Months  months  =  months  %  12  +  1;	  months    =    months    %    12    +    1;    Months    months    =    months    %    12    +    1;    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	38	None	replace
131	[BUG]  [BUGGY]  Months  months  =  months  %  12;  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  Months  months  =  months  %  12;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	Months  months  =  months  %  12;	  months    =    months    %    12    +    1;    Months    months    =    months    %    12    +    1;    	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	38	None	replace
132	[BUG]  [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]        UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS	          result    =    result.withMonths(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS    	non-compiled	[CE]  ')'  expected	47	None	replace
133	[BUG]  [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  >>  ')'  expected  [CE]  ')'  expected  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  >>  ')'  expected  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  >>  ')'  expected	          result    =    result.withMonths(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS    	non-compiled	[CE]  ')'  expected	47	None	replace
134	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  result  =  result.withMonths(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	1	3	add
135	[BUG]  [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  result  =  result.withMonths(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  result  =  result.withMonths(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	1	3	add
136	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	1	3	add
137	[BUG]  [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  result  =  result.withMonths(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    result  =  result.withMonths(years);	  	compilable	  [FE]  UnsupportedOperationException  	1	3	add
138	[BUG]  [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  results  =  result.withMonths(years);  result  =  result.withMonths(years);  [CE]  cannot  find  symbol  results  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  results  =  result.withMonths(years);  result  =  result.withMonths(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    results  =  result.withMonths(years);  result  =  result.withMonths(years);	  	non-compiled	[CE]  cannot  find  symbol  results	1	None	add
139	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	16	10	add
140	[BUG]  [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	16	10	add
141	[BUG]  [BUGGY]  result  =  result.withPeriods(years);  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withPeriods(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result  =  result.withPeriods(years);	          result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    return    result;    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
142	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	43	10	add
143	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	43	10	add
144	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_  [CE]  ')'  expected  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_	          result    =    result.withSeconds(years);    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_    	non-compiled	[CE]  ')'  expected	46	None	replace
145	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]            UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS	          result    =    result.withSeconds(years);    millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_    	non-compiled	[CE]  ')'  expected	46	None	replace
146	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	41	10	add
147	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	41	10	add
148	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	12	10	add
149	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	12	10	add
150	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    return    result;    }    if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
151	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result    =    result.withMonths(months);    if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  }	  	compilable	  [FE]  UnsupportedOperationException  	36	3	add
152	[BUG]  [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withMonths(months);    if(months!=  0)  {  result  =  result.withMonths(months);  }  else  {  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  }	  	compilable	  [FE]  UnsupportedOperationException  	36	3	add
153	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    return    result;    }    if(years!=  0)  {  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
154	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  result  =  result.withMonths(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	1	3	add
155	[BUG]  [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  result  =  result.withMonths(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	1	3	add
156	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	3	3	add
157	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    result  =  result.withMonths(years);  if(months!=  0)  {  result  =  result.withMonths(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	3	3	add
158	[BUG]  [BUGGY]  months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  Years  =  months  %  12  +  1;  years  =  months  %  12  +  1;  [CE]  cannot  find  symbol  Years  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    years  =  months  %  12  +  1;  Years  =  months  %  12  +  1;  years  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	months        =        months        %        12        +        1;        years    =    months    %    12    +    1;    Years  =  months  %  12  +  1;  years  =  months  %  12  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Years	27	None	add
159	[BUG]  [BUGGY]  result  =  result.withMonths(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants  [CE]  ')'  expected  [FE]          UnsupportedOperationException      [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withMonths(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result  =  result.withMonths(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants	          result    =    result.withMonths(years);    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR)    	non-compiled	[CE]  ')'  expected	48	None	replace
160	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    result    =    result.withSeconds(months);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	39	10	add
161	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    result    =    result.withSeconds(months);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	39	10	add
162	[BUG]  [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE)  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE)  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE)	  	non-compiled	[CE]  ')'  expected	51	None	add
163	[BUG]  [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)Date  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)Date  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  =  result.withDays(years);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)Date	  	non-compiled	[CE]  ')'  expected	51	None	add
164	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(months);  if(months!=  0)  {  result  =  result.withDays(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result    =    result.withDays(months);    if(months!=  0)  {  result  =  result.withDays(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
165	[BUG]  [BUGGY]  result  =  result.withDays(months);  if(months!=  0)  {  result  =  result.withDays(months);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(months);  if(months!=  0)  {  result  =  result.withDays(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withDays(months);    if(months!=  0)  {  result  =  result.withDays(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
166	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(months);  if(months!=  0)  {  result  =  result.withDays(months);  }  else  {  result  =  result.withDays(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result    =    result.withDays(months);    if(months!=  0)  {  result  =  result.withDays(months);  }  else  {  result  =  result.withDays(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
167	[BUG]  [BUGGY]  result  =  result.withDays(months);  if(months!=  0)  {  result  =  result.withDays(months);  }  else  {  result  =  result.withDays(months);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(months);  if(months!=  0)  {  result  =  result.withDays(months);  }  else  {  result  =  result.withDays(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withDays(months);    if(months!=  0)  {  result  =  result.withDays(months);  }  else  {  result  =  result.withDays(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
168	[BUG]  [BUGGY]  result  =  result.withSeconds(seconds);  [CE]  cannot  find  symbol  seconds  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withSeconds(seconds);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result  =  result.withSeconds(seconds);	          result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    	non-compiled	[CE]  cannot  find  symbol  seconds	44	None	replace
169	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	10	10	add
170	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	10	10	add
171	[BUG]  [BUGGY]  months    =    months    %    12    +    1;    months  =  months  %  12  +  1;  Months  =  months  %  12  +  1;  months  =  months  %  12  +  1;  [CE]  cannot  find  symbol  Months  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  months    =    months    %    12    +    1;    months  =  months  %  12  +  1;  Months  =  months  %  12  +  1;  months  =  months  %  12  +  1;  [BUGGY]      if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	months        =        months        %        12        +        1;        months    =    months    %    12    +    1;    Months  =  months  %  12  +  1;  months  =  months  %  12  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Months	25	None	add
172	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        result    =    result.withSeconds(months);    result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
173	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withSeconds(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        result    =    result.withSeconds(months);    result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
174	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	18	10	add
175	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    result  =  result.withDays(years);  if(months!=  0)  {  result  =  result.withDays(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	18	10	add
176	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  int  months  =  getMonths();  [CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  int  months  =  getMonths();  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    return    result;    }    int  months  =  getMonths();	  	non-compiled	[CE]  variable  months  is  already  defined  in  method  normalizedStandard(PeriodType)	34	None	add
177	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    return    result;    }    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	34	10	add
178	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  result  =  result.withSeconds(years);  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  result  =  result.withSeconds(years);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    return    result;    }    result  =  result.withSeconds(years);	  	compilable	  [FE]  UnsupportedOperationException  	34	10	add
179	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    else    {    return    result;    }    result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	5	4	add
180	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    else    {    return    result;    }    result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }	  	compilable	  [FE]  UnsupportedOperationException  	5	4	add
181	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	if(years!=  0)  {  result  =  result.withYears(years);  }	          result    =    result.withSeconds(months);    if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    result    =    result.withSeconds(months);    }    	compilable	  [FE]  UnsupportedOperationException  	40	9	replace
182	[BUG]  [BUGGY]  if(years!=  0)  {  result  =  result.withYears(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	if(years!=  0)  {  result  =  result.withYears(years);  }	          result    =    result.withSeconds(months);    if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    result    =    result.withSeconds(months);    }    	compilable	  [FE]  UnsupportedOperationException  	40	9	replace
183	[BUG]  [BUGGY]  result  =  result.withYears(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withYears(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withYears(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS	  	non-compiled	[CE]  ')'  expected	49	None	add
184	[BUG]  [BUGGY]  result  =  result.withYears(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withYears(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withYears(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR)	  	non-compiled	[CE]  ')'  expected	49	None	add
185	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    return    result;    }    if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  }	  	compilable	  [FE]  UnsupportedOperationException  	20	10	add
186	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    return    result;    }    if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  }	  	compilable	  [FE]  UnsupportedOperationException  	20	10	add
187	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  [CE]  reached  end  of  file  while  parsing  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    return    result;    }    if(years!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  return  result;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
188	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    return    result;    }    if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  }	  	compilable	  [FE]  UnsupportedOperationException  	34	10	add
189	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    return    result;    }    if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  }	  	compilable	  [FE]  UnsupportedOperationException  	34	10	add
190	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  [CE]  reached  end  of  file  while  parsing  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    return    result;    }    if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  return  result;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	add
191	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	32	10	add
192	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    result  =  result.withMonths(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }	  	compilable	  [FE]  UnsupportedOperationException  	32	10	add
193	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  if(months!=  0)  {  result  =  result.withMonths(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	if(months!=  0)  {  result  =  result.withMonths(months);  }	          result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    	compilable	  [FE]  UnsupportedOperationException  	44	9	replace
194	[BUG]  [BUGGY]  if(months!=  0)  {  result  =  result.withMonths(months);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  if(months!=  0)  {  result  =  result.withMonths(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	if(months!=  0)  {  result  =  result.withMonths(months);  }	          result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    	compilable	  [FE]  UnsupportedOperationException  	44	9	replace
195	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  if(months!=  0)  {  result  =  result.withDays(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	if(months!=  0)  {  result  =  result.withDays(months);  }	          result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    	compilable	  [FE]  UnsupportedOperationException  	44	10	replace
196	[BUG]  [BUGGY]  if(months!=  0)  {  result  =  result.withDays(months);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  if(months!=  0)  {  result  =  result.withDays(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	if(months!=  0)  {  result  =  result.withDays(months);  }	          result    =    result.withDays(years);    if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    	compilable	  [FE]  UnsupportedOperationException  	44	10	replace
197	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	10	10	add
198	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    result  =  result.withSeconds(years);  if(years!=  0)  {  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	10	10	add
199	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(months);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	result    =    result.withDays(months);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
200	[BUG]  [BUGGY]  result  =  result.withDays(months);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(months);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withDays(months);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	8	10	add
201	[BUG]  [BUGGY]  result  =  result.withDays(months);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND)  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withDays(months);  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND)  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withDays(months);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND)	  	non-compiled	[CE]  ')'  expected	8	None	add
202	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  if(months!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  if(months!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    else    {    result    =    result.withDays(years);    }    if(months!=  0)  {  result  =  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  else  {  result  =  result.withDays(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
203	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	41	10	add
204	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	41	10	add
205	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withYears(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withYears(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	41	10	add
206	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withYears(years);  }  else  {  result  =  result.withSeconds(years);  }  [FE]  UnsupportedOperationException  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  result  =  result.withSeconds(years);  }  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withYears(years);  }  else  {  result  =  result.withSeconds(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    result    =    result.withSeconds(years);    }    result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withYears(years);  }  else  {  result  =  result.withSeconds(years);  }	  	compilable	  [FE]  UnsupportedOperationException  	41	10	add
207	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    else    {    return    result;    }    if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  }	  	compilable	  [FE]  UnsupportedOperationException  	5	4	add
208	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    else    {    return    result;    }    if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  }	  	compilable	  [FE]  UnsupportedOperationException  	5	4	add
209	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  [CE]  reached  end  of  file  while  parsing  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    else    {    return    result;    }    if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withMonths(years);  }  else  {  return  result;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	add
210	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    return    result;    }    if(years!=  0)  {  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  }	  	compilable	  [FE]  UnsupportedOperationException  	14	10	add
211	[BUG]  [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  }  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(years);    if(years!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  if(years!=  0)  {  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(years);        if(years!=    0)    {    result    =    result.withSeconds(years);    }    else    {    return    result;    }    if(years!=  0)  {  result  =  result.withSeconds(years);  if(months!=  0)  {  result  =  result.withSeconds(years);  }  else  {  return  result;  }  }	  	compilable	  [FE]  UnsupportedOperationException  	14	10	add
212	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withMonths(months);  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	add	                result        =        result.withSeconds(months);        result    =    result.withSeconds(months);    result  =  result.withMonths(months);  result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
213	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withMonths(months);  result  =  result.withSeconds(months);  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    result  =  result.withSeconds(months);  result  =  result.withMonths(months);  result  =  result.withSeconds(months);  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        result    =    result.withSeconds(months);    result  =  result.withMonths(months);  result  =  result.withSeconds(months);	  	compilable	  [FE]  UnsupportedOperationException  	30	10	add
214	[BUG]  [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [CE]  incompatible  types  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	non-compiled	[CE]  incompatible  types	51	None	add
215	[BUG]  [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	51	None	add
216	[BUG]  [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS	  	non-compiled	[CE]  ')'  expected	51	None	add
217	[BUG]  [BUGGY]  result  =  result.withMonths(months);  millis  +=  (((long)getMonths())*  ((  long)DateTimeConstants.MILLIS_PER_MONTH));  [CE]  cannot  find  symbol  MILLIS_PER_MONTH  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]  result  =  result.withMonths(months);  millis  +=  (((long)getMonths())*  ((  long)DateTimeConstants.MILLIS_PER_MONTH));  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	result    =    result.withMonths(months);    millis  +=  (((long)getMonths())*  ((  long)DateTimeConstants.MILLIS_PER_MONTH));	  	non-compiled	[CE]  cannot  find  symbol  MILLIS_PER_MONTH	36	None	add
218	[BUG]  [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    result  =  result.withDays(years);  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        result    =    result.withDays(years);    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS	  	non-compiled	[CE]  ')'  expected	16	None	add
219	[BUG]  [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withDays(years);    if(years!=  0)  {  result  =  result.withDays(years);  }  if(years!=  0)  {  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withDays(years);        if(years!=    0)    {    result    =    result.withDays(years);    }    if(years!=  0)  {  result.withDays(years);  if(years!=  0)  {  result  =  result.withDays(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
220	[BUG]  [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withSeconds(months);    if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withSeconds(months);        if(months!=    0)    {    result    =    result.withSeconds(months);    }    else    {    result    =    result.withSeconds(months);    }    if(months!=  0)  {  result  =  result.withSeconds(months);  if(months!=  0)  {  result  =  result.withSeconds(months);  }  else  {  result  =  result.withSeconds(months);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
221	[BUG]  [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withYears(years);  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnsupportedOperationException    [CONTEXT]      millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);      [BUGGY]          result    =    result.withMonths(years);    if(years!=  0)  {  result  =  result.withMonths(years);  }  if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withYears(years);  }  [BUGGY]      months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  }  if  (months  !=  0)  {  result  =  result.withMonths(months);  }  }  return  result;  }  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	1629	1629	3	replace	                result        =        result.withMonths(years);        if(years!=    0)    {    result    =    result.withMonths(years);    }    if(years!=  0)  {  result  =  result.withMonths(years);  if(years!=  0)  {  result  =  result.withYears(years);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
