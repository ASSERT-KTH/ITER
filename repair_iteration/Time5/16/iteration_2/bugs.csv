bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	add	        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	7	6	add
2	[BUG]  [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	7	6	add
3	[BUG]  [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_  [CE]  ')'  expected  [FE]      UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_	  	non-compiled	[CE]  ')'  expected	7	None	add
4	[BUG]  [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE)  [CE]  ')'  expected  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE)  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE)	  	non-compiled	[CE]  ')'  expected	7	None	add
5	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	add	        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	compilable	  [FE]  UnsupportedOperationException  	11	3	add
6	[BUG]  [BUGGY]      millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	        millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	  	compilable	  [FE]  UnsupportedOperationException  	11	3	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	add	        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	9	12	add
8	[BUG]  [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	9	12	add
9	[BUG]  [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_	  	non-compiled	[CE]  ')'  expected	9	None	add
10	[BUG]  [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS	  	non-compiled	[CE]  ')'  expected	9	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	add	        millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	3	10	add
12	[BUG]  [BUGGY]      millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	        millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	  	compilable	  [FE]  AssertionFailedError  	3	10	add
13	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [BUGGY]    millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	add	millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));	  	compilable	  [FE]  UnsupportedOperationException  	5	5	add
14	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [BUGGY]    millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));	  	compilable	  [FE]  UnsupportedOperationException  	5	5	add
15	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	add	        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	1	5	add
16	[BUG]  [BUGGY]      millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	        millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	  	compilable	  [FE]  UnsupportedOperationException  	1	5	add
17	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	add	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	      millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	compilable	  [FE]  UnsupportedOperationException  	4	6	replace
18	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  UnsupportedOperationException  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	      millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	compilable	  [FE]  UnsupportedOperationException  	4	6	replace
19	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	add	millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	      millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	2	6	replace
20	[BUG]  [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	millis  +=  (((long)getSeconds())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));	      millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    	compilable	  [FE]  UnsupportedOperationException  	2	6	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [BUGGY]    millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	add	millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));	  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    	compilable	  [FE]  AssertionFailedError  	6	12	replace
22	[BUG]  [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [FE]  AssertionFailedError  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  [BUGGY]    millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));	  millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    	compilable	  [FE]  AssertionFailedError  	6	12	replace
23	[BUG]  [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_MINUTE));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	7	None	add
24	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	add	millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	      millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	compilable	  [FE]  UnsupportedOperationException  	4	6	replace
25	[BUG]  [BUGGY]  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [FE]  UnsupportedOperationException  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));	      millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    	compilable	  [FE]  UnsupportedOperationException  	4	6	replace
26	[BUG]  [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]      millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	        millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getDays())*    ((    long)DateTimeConstants.MILLIS_PER_DAY));    millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getDays())*  ((  long)DateTimeConstants.MILLIS_PER	  	non-compiled	[CE]  ')'  expected	9	None	add
27	[BUG]  [BUGGY]  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	add	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	      millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    	compilable	  [FE]  UnsupportedOperationException  	12	6	replace
28	[BUG]  [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [FE]  UnsupportedOperationException  [FE]    UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER_SECOND));	      millis    +=    (((long)getSeconds())*    ((    long)DateTimeConstants.MILLIS_PER_SECOND));    	compilable	  [FE]  UnsupportedOperationException  	12	6	replace
29	[BUG]  [BUGGY]  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [CE]  ')'  expected  [FE]          UnsupportedOperationException    [CONTEXT]    public  Period  normalizedStandard(PeriodType  type)  {  type  =  DateTimeUtils.getPeriodType(type);  long  millis  =  getMillis();//  no  overflow  can  happen,  even  with  Integer.MAX_VALUEs  millis  +=  (((long)  getSeconds())  *  ((long)  DateTimeConstants.MILLIS_PER_SECOND));  millis  +=  (((long)  getMinutes())  *  ((long)  DateTimeConstants.MILLIS_PER_MINUTE));    [BUGGY]  millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER  [BUGGY]    millis  +=  (((long)  getHours())  *  ((long)  DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)  getDays())  *  ((long)  DateTimeConstants.MILLIS_PER_DAY));  millis  +=  (((long)  getWeeks())  *  ((long)  DateTimeConstants.MILLIS_PER_WEEK));  Period  result  =  new  Period(millis,  type,  ISOChronology.getInstanceUTC());  int  years  =  getYears();  int  months  =  getMonths();  if  (years  !=  0  ||  months  !=  0)  {  years  =  FieldUtils.safeAdd(years,  months  /  12);  months  =  months  %  12;  if  (years  !=  0)  {  result  =  result.withYears(years);  [CLASS]  Period  [METHOD]  normalizedStandard  [RETURN_TYPE]  Period  PeriodType  type  [VARIABLES]  Period  ZERO  result  PeriodType  type  boolean  long  days  duration  endInstant  hours  millis  minutes  seconds  serialVersionUID  startInstant  weeks  int  months  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.3779644730092272	1621	1621	3	replace	millis  +=  (((long)getHours())*  ((  long)DateTimeConstants.MILLIS_PER_HOUR));  millis  +=  (((long)getMinutes())*  ((  long)DateTimeConstants.MILLIS_PER	      millis    +=    (((long)getHours())*    ((    long)DateTimeConstants.MILLIS_PER_HOUR));    millis    +=    (((long)getMinutes())*    ((    long)DateTimeConstants.MILLIS_PER_MINUTE)    	non-compiled	[CE]  ')'  expected	13	None	replace
