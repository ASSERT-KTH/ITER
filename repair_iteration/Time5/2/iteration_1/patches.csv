bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  years  =  getValues();  [CE]  incompatible  types  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  withYears(int  years)  {    [BUGGY]  years  =  getValues();  [BUGGY]    int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	years  =  getValues();	      if(years    ==    0)    {    return    new    Period(getPeriodType());    }    else    {    getPeriodType().setIndexedField(this,    PeriodType.YEAR_INDEX,    values,    years);    }    	non-compiled	[CE]  incompatible  types	7	None	replace
2	[BUG]  [BUGGY]  int[]  values  =  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  [CE]  incompatible  types  [FE]            UnsupportedOperationException    [CONTEXT]    public  Period  withYears(int  years)  {    [BUGGY]  int[]  values  =  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  [BUGGY]    int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	int[]  values  =  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);	      int[]    values    =    getPeriodType();    	non-compiled	[CE]  incompatible  types	3	None	replace
3	[BUG]  [BUGGY]  if(years  ==  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPerio  [CE]  ')'  expected  [FE]          UnsupportedOperationException    [CONTEXT]    public  Period  withYears(int  years)  {    [BUGGY]  if(years  ==  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPerio  [BUGGY]    int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	if(years  ==  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPerio	      if(years    ==    0)    {    return    new    Period(getPeriodType());    }    else    {    getPeriodType().setIndexedField(this,    PeriodType.YEAR_INDEX,    values,    years);    return    new    Period(values,    getPeriodType());    }    	non-compiled	[CE]  ')'  expected	8	None	replace
4	[BUG]  [BUGGY]  if(years  ==  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeri  [CE]  ')'  expected  [FE]            UnsupportedOperationException    [CONTEXT]    public  Period  withYears(int  years)  {    [BUGGY]  if(years  ==  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeri  [BUGGY]    int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	if(years  ==  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeri	      if(years    ==    0)    {    return    new    Period(getPeriodType());    }    else    {    getPeriodType().setIndexedField(this,    PeriodType.YEAR_INDEX,    values,    years);    return    new    Period(values,    getPeriodType());    }    	non-compiled	[CE]  ')'  expected	8	None	replace
5	[BUG]  [BUGGY]  if(years!=  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  }  [CE]  cannot  find  symbol  values  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  withYears(int  years)  {    [BUGGY]  if(years!=  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  }  [BUGGY]    int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	if(years!=  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  }	      if(years    ==    0)    {    return    new    Period(getPeriodType());    }    else    {    getPeriodType().setIndexedField(this,    PeriodType.YEAR_INDEX,    values,    years);    }    	non-compiled	[CE]  cannot  find  symbol  values	7	None	replace
6	[BUG]  [BUGGY]  int[]  values  =  getValues(years);  [CE]  method  getValues  in  class  AbstractPeriod  cannot  be  applied  to  given  types;  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  withYears(int  years)  {    [BUGGY]  int[]  values  =  getValues(years);  [BUGGY]    int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	int[]  values  =  getValues(years);	      int[]    values    =    getValues();    	non-compiled	[CE]  method  getValues  in  class  AbstractPeriod  cannot  be  applied  to  given  types;	1	None	replace
7	[BUG]  [BUGGY]  if(years  ==  0)  {  int[]  values  =  getValues();  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  }  [CE]  cannot  find  symbol  values  [FE]        UnsupportedOperationException    [CONTEXT]    public  Period  withYears(int  years)  {    [BUGGY]  if(years  ==  0)  {  int[]  values  =  getValues();  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  }  [BUGGY]    getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	if(years  ==  0)  {  int[]  values  =  getValues();  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  }	  if(years    ==    0)    {    int[]    values    =    getValues();//cloned    getPeriodType().setIndexedField(this,    PeriodType.YEAR_INDEX,    values,    years);    }    	non-compiled	[CE]  cannot  find  symbol  values	6	None	replace
