bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int[]  values  =  getValues();  [CE]  variable  values  is  already  defined  in  method  withYears(int)  [FE]    UnsupportedOperationException  [CONTEXT]  public  Period  withYears(int  years)  {  [BUGGY]    int[]  values  =  getValues();  [BUGGY]  int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	    int[]  values  =  getValues();		non-compiled	[CE]  variable  values  is  already  defined  in  method  withYears(int)	4	None	add
2	[BUG]  [BUGGY]    long[]  values  =  getValues();  [CE]  incompatible  types  [FE]      UnsupportedOperationException  [CONTEXT]  public  Period  withYears(int  years)  {  [BUGGY]    long[]  values  =  getValues();  [BUGGY]  int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	    long[]  values  =  getValues();		non-compiled	[CE]  incompatible  types	4	None	add
3	[BUG]  [BUGGY]    int[]  values  =  getPeriodType();  [CE]  incompatible  types  [FE]        UnsupportedOperationException  [CONTEXT]  public  Period  withYears(int  years)  {  [BUGGY]    int[]  values  =  getPeriodType();  [BUGGY]  int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	    int[]  values  =  getPeriodType();		non-compiled	[CE]  incompatible  types	4	None	add
4	[BUG]  [BUGGY]  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  [CE]  ';'  expected  [FE]    UnsupportedOperationException  [CONTEXT]  public  Period  withYears(int  years)  {  [BUGGY]  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  [BUGGY]  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);	int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  	non-compiled	[CE]  ';'  expected	3	None	replace
5	[BUG]  [BUGGY]    ZERO[]  values  =  getValues();  [CE]  cannot  find  symbol  [FE]    UnsupportedOperationException  [CONTEXT]  public  Period  withYears(int  years)  {  [BUGGY]    ZERO[]  values  =  getValues();  [BUGGY]  int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	    ZERO[]  values  =  getValues();		non-compiled	[CE]  cannot  find  symbol	4	None	add
6	[BUG]  [BUGGY]  if(years  ==  0)  {  int[]  values  =  getValues();//cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  }  [CE]  illegal  start  of  expression  [FE]    UnsupportedOperationException  [CONTEXT]  public  Period  withYears(int  years)  {  [BUGGY]  if(years  ==  0)  {  int[]  values  =  getValues();//cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  }  [BUGGY]  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	if(years  ==  0)  {  int[]  values  =  getValues();//cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  }	int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]    if(years  ==  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  }  [CE]  cannot  find  symbol  values  [FE]    UnsupportedOperationException  [CONTEXT]  public  Period  withYears(int  years)  {  [BUGGY]    if(years  ==  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  }  [BUGGY]  int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	    if(years  ==  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  }		non-compiled	[CE]  cannot  find  symbol  values	4	None	add
8	[BUG]  [BUGGY]    if(years  ==  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CE]  cannot  find  symbol  values  [FE]      UnsupportedOperationException  [CONTEXT]  public  Period  withYears(int  years)  {  [BUGGY]    if(years  ==  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [BUGGY]  int[]  values  =  getValues();//  cloned  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }  [CLASS]  Period  [METHOD]  withYears  [RETURN_TYPE]  Period  int  years  [VARIABLES]  Period  ZERO  int[]  values  boolean  long  duration  endInstant  serialVersionUID  startInstant  int  years  	projects/Time5/src/main/java/org/joda/time/Period.java	0.5	895	896	3	replace	    if(years  ==  0)  {  return  new  Period(getPeriodType());  }  else  {  getPeriodType().setIndexedField(this,  PeriodType.YEAR_INDEX,  values,  years);  return  new  Period(values,  getPeriodType());  }		non-compiled	[CE]  cannot  find  symbol  values	4	None	add
