bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(fieldType  ==  null  ||  value  ==  0)  {  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  [BUGGY]  if(fieldType  ==  null  ||  value  ==  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	if(fieldType  ==  null  ||  value  ==  0)  {	if  (fieldType  ==  null)  {  	non-compiled	[CE]  	57	None	replace
2	[BUG]  [BUGGY]    [CE]  [FE]      IllegalArgumentException  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  [BUGGY]    [BUGGY]  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	  	if  (fieldType  ==  null)  {  	non-compiled	[CE]  	57	None	replace
3	[BUG]  [BUGGY]    int[]  newValues  =  getValues();  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  [BUGGY]    int[]  newValues  =  getValues();  [BUGGY]  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	    int[]  newValues  =  getValues();		non-compiled	[CE]  	58	None	add
4	[BUG]  [BUGGY]    int[]  newValues  =  iPartial.getValues();  [CE]  [FE]      IllegalArgumentException  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  [BUGGY]    int[]  newValues  =  iPartial.getValues();  [BUGGY]  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	    int[]  newValues  =  iPartial.getValues();		non-compiled	[CE]  	58	None	add
5	[BUG]  [BUGGY]    int[]  newValues  =  iTypes.get(value);  [CE]  [FE]        IllegalArgumentException  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  [BUGGY]    int[]  newValues  =  iTypes.get(value);  [BUGGY]  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	    int[]  newValues  =  iTypes.get(value);		non-compiled	[CE]  	58	None	add
6	[BUG]  [BUGGY]    Partial  parser  =  getPartial();  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  [BUGGY]    Partial  parser  =  getPartial();  [BUGGY]  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	    Partial  parser  =  getPartial();		non-compiled	[CE]  	58	None	add
7	[BUG]  [BUGGY]    Partial  params  =  getParameters();  [CE]  [FE]      IllegalArgumentException  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  [BUGGY]    Partial  params  =  getParameters();  [BUGGY]  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	    Partial  params  =  getParameters();		non-compiled	[CE]  	58	None	add
8	[BUG]  [BUGGY]  if(fieldType  ==  null  ||  value  <  0)  {  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  [BUGGY]  if(fieldType  ==  null  ||  value  <  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	if(fieldType  ==  null  ||  value  <  0)  {	if  (fieldType  ==  null)  {  	non-compiled	[CE]  	57	None	replace
9	[BUG]  [BUGGY]    if(value  ==  0)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  [BUGGY]    if(value  ==  0)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }  [BUGGY]  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	    if(value  ==  0)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }		non-compiled	[CE]  	58	None	add
10	[BUG]  [BUGGY]    if(value  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      IllegalArgumentException  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  [BUGGY]    if(value  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	    if(value  ==  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  	58	None	add
11	[BUG]  [BUGGY]    Partial  <?>  fieldType  =  fieldType.getField(iChronology).withValue(value);  [CE]  [FE]        IllegalArgumentException  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  [BUGGY]    Partial  <?>  fieldType  =  fieldType.getField(iChronology).withValue(value);  [BUGGY]  if  (fieldType  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	    Partial  <?>  fieldType  =  fieldType.getField(iChronology).withValue(value);		non-compiled	[CE]  	58	None	add
12	[BUG]  [BUGGY]  if(fieldType  ==  null  ||  value  <  =  0)  {  [CE]  [FE]    IllegalArgumentException  [CONTEXT]  public  Partial  with(DateTimeFieldType  fieldType,  int  value)  {  [BUGGY]  if(fieldType  ==  null  ||  value  <  =  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null ");  }  int  index  =  indexOf(fieldType);  if  (index  ==  -1)  {  DateTimeFieldType[]  newTypes  =  new  DateTimeFieldType[iTypes.length  +  1];  int[]  newValues  =  new  int[newTypes.length];  int  i  =  0;  DurationField  unitField  =  fieldType.getDurationType().getField(iChronology);  [CLASS]  Partial  Property  [METHOD]  with  [RETURN_TYPE]  Partial  DateTimeFieldType  fieldType  int  value  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  newTypes  types  Partial  iPartial  newPartial  partial  DateTimeFieldType  fieldType  loopType  int[]  iValues  newValues  values  Chronology  chrono  chronology  iChronology  newChronology  DurationField  loopRangeField  loopUnitField  rangeField  unitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  fieldIndex  i  iFieldIndex  index  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.22941573387056174	429	429	1	replace	if(fieldType  ==  null  ||  value  <  =  0)  {	if  (fieldType  ==  null)  {  	non-compiled	[CE]  	57	None	replace
