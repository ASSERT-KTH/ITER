bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  DateTimeFieldType  type  =  type.getField(this,  value  -  1);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  type.getField(this,  value  -  1);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  type.getField(this,  value  -  1);	  DateTimeFieldType    type    =    type.getField(this,    value);    	non-compiled	[CE]  	4	None	replace
2	[BUG]  [BUGGY]  DateTimeFieldType  type  =  type.getField(this,  value,  chronology);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  type.getField(this,  value,  chronology);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  type.getField(this,  value,  chronology);	  DateTimeFieldType    type    =    type.getField(this,    value);    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  natures  =  new  LinkedHashMap  <  DateTimeFieldType>();  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  natures  =  new  LinkedHashMap  <  DateTimeFieldType>();  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	natures  =  new  LinkedHashMap  <  DateTimeFieldType>();	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null       ");    }    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  natures  =  new  LinkedList  <  DateTimeFieldType>();  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  natures  =  new  LinkedList  <  DateTimeFieldType>();  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	natures  =  new  LinkedList  <  DateTimeFieldType>();	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null       ");    }    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  DateTimeFieldType  type  =  chronology.getFieldType(type);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  chronology.getFieldType(type);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  chronology.getFieldType(type);	  DateTimeFieldType    type    =    iChronology.getFieldType(type);    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  DateTimeFieldType  type  =  iChronology.getFieldType(chronology);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  iChronology.getFieldType(chronology);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  iChronology.getFieldType(chronology);	  DateTimeFieldType    type    =    iChronology.getFieldType(type);    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  iPartial  =  type.withUTC(value);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iPartial  =  type.withUTC(value);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iPartial  =  type.withUTC(value);	  iPartial    =    chronology.withUTC(value);    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  DateTimeFieldType  type  =  iPartial.getField(type);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  iPartial.getField(type);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  iPartial.getField(type);	  DateTimeFieldType    type    =    iChronology.getField(type);    	non-compiled	[CE]  	13	None	replace
9	[BUG]  [BUGGY]  DateTimeFieldType  type  =  iPartial.getField(chronology);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  iPartial.getField(chronology);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  iPartial.getField(chronology);	  DateTimeFieldType    type    =    chronology.getField(type);    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  DateTimeFieldType  type  =  chronology.getFieldType(value);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  chronology.getFieldType(value);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  chronology.getFieldType(value);	  DateTimeFieldType    type    =    chronology.getField(type);    	non-compiled	[CE]  	11	None	replace
11	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology();  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.getChronology();  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iChronology  =  chronology.getChronology();	  iChronology    =    type.getChronology();    	non-compiled	[CE]  	6	None	replace
12	[BUG]  [BUGGY]  DateTimeFieldType  type  =  chronology.getField(iPartial);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  chronology.getField(iPartial);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  chronology.getField(iPartial);	  DateTimeFieldType    type    =    chronology.getField(iChronology);    	non-compiled	[CE]  	12	None	replace
13	[BUG]  [BUGGY]  DateTimeFieldType  type  =  iChronology.getField(chronology);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  iChronology.getField(chronology);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  iChronology.getField(chronology);	  DateTimeFieldType    type    =    chronology.getField(iChronology);    	non-compiled	[CE]  	12	None	replace
14	[BUG]  [BUGGY]  nested  =  new  LinkedList  <  DateTimeFieldType>();  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  nested  =  new  LinkedList  <  DateTimeFieldType>();  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	nested  =  new  LinkedList  <  DateTimeFieldType>();	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "   "),   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  nested  =  new  LinkedHashMap  <  DateTimeFieldType>();  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  nested  =  new  LinkedHashMap  <  DateTimeFieldType>();  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	nested  =  new  LinkedHashMap  <  DateTimeFieldType>();	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "   "),   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	14	None	replace
16	[BUG]  [BUGGY]  DateTimeFieldType  type  =  chronology.getField(chronology).withUTC();  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  chronology.getField(chronology).withUTC();  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  chronology.getField(chronology).withUTC();	  DateTimeFieldType    type    =    type.getField(chronology).withUTC();    	non-compiled	[CE]  	15	None	replace
17	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(this,  value);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.withUTC(this,  value);  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iChronology  =  chronology.withUTC(this,  value);	  iChronology    =    chronology.withUTC(value);    	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(this);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.withUTC(this);  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iChronology  =  chronology.withUTC(this);	  iChronology    =    chronology.withUTC(value);    	non-compiled	[CE]  	7	None	replace
19	[BUG]  [BUGGY]  iPartial  =  type.withZone();  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iPartial  =  type.withZone();  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iPartial  =  type.withZone();	  iPartial    =    type.withUTC();    	non-compiled	[CE]  	3	None	replace
20	[BUG]  [BUGGY]  iPartial  =  chronology.withUTC(this,  value);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iPartial  =  chronology.withUTC(this,  value);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iPartial  =  chronology.withUTC(this,  value);	  iPartial    =    chronology.withUTC(value);    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  nested  =  new  ArrayList  <  DateTimeFieldType>();  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  nested  =  new  ArrayList  <  DateTimeFieldType>();  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	nested  =  new  ArrayList  <  DateTimeFieldType>();	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null       ");    }    	non-compiled	[CE]  	2	None	replace
22	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(type);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.withUTC(type);  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iChronology  =  chronology.withUTC(type);	  iChronology    =    chronology.withUTC(value);    	non-compiled	[CE]  	7	None	replace
23	[BUG]  [BUGGY]  DateTimeFieldType  type  =  chronology.getField(chronology);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  chronology.getField(chronology);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  chronology.getField(chronology);	  DateTimeFieldType    type    =    chronology.getField(type);    	non-compiled	[CE]  	11	None	replace
24	[BUG]  [BUGGY]  DateTimeFieldType  type  =  chronology.getField(this.iPartial);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  chronology.getField(this.iPartial);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  chronology.getField(this.iPartial);	  DateTimeFieldType    type    =    chronology.getField(type);    	non-compiled	[CE]  	11	None	replace
25	[BUG]  [BUGGY]  iChronology  =  type.getChronology(chronology);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  type.getChronology(chronology);  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iChronology  =  type.getChronology(chronology);	  iChronology    =    type.getChronology();    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getInstance(chronology).withUTC();  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  DateTimeUtils.getInstance(chronology).withUTC();  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iChronology  =  DateTimeUtils.getInstance(chronology).withUTC();	  iChronology    =    DateTimeUtils.getChronology(chronology).withUTC();    	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  DateTimeFieldType  type  =  type.getField(this,  value  +  1);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  type.getField(this,  value  +  1);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  type.getField(this,  value  +  1);	  DateTimeFieldType    type    =    type.getField(this,    value);    	non-compiled	[CE]  	4	None	replace
28	[BUG]  [BUGGY]  NullPointerFactory.createChronology(chronology).set(this,  value);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  NullPointerFactory.createChronology(chronology).set(this,  value);  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	NullPointerFactory.createChronology(chronology).set(this,  value);	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "   "),   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	14	None	replace
29	[BUG]  [BUGGY]  NullPointerFactory.createChronology(chronology).validate(this);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  NullPointerFactory.createChronology(chronology).validate(this);  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	NullPointerFactory.createChronology(chronology).validate(this);	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "   "),   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	14	None	replace
30	[BUG]  [BUGGY]  DateTimeFieldType  type  =  chronology.getField(this.iChronology);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  chronology.getField(this.iChronology);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  chronology.getField(this.iChronology);	  DateTimeFieldType    type    =    chronology.getField(iChronology);    	non-compiled	[CE]  	12	None	replace
31	[BUG]  [BUGGY]  iPartial  =  type.getField(chronology).withUTC();  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iPartial  =  type.getField(chronology).withUTC();  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iPartial  =  type.getField(chronology).withUTC();	  iPartial    =    type.withUTC();    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  DateTimeFieldType  type  =  chronology.withUTC();  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  chronology.withUTC();  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  chronology.withUTC();	  DateTimeFieldType    type    =    chronology.getField(type);    	non-compiled	[CE]  	11	None	replace
33	[BUG]  [BUGGY]  nature  <  0  ||  type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  nature  <  0  ||  type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	nature  <  0  ||  type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null       ");    }    	non-compiled	[CE]  	2	None	replace
34	[BUG]  [BUGGY]  nature  <  0  ||  value  ==  0)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  nature  <  0  ||  value  ==  0)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	nature  <  0  ||  value  ==  0)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null       ");    }    	non-compiled	[CE]  	2	None	replace
35	[BUG]  [BUGGY]  DateTimeFieldType  type  =  chronology.getField(this,  value);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType  type  =  chronology.getField(this,  value);  [BUGGY]      iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  chronology.getField(this,  value);	  DateTimeFieldType    type    =    chronology.getField(iChronology);    	non-compiled	[CE]  	12	None	replace
36	[BUG]  [BUGGY]  if(value  ==  0)  {  throw  new  IllegalArgumentException( " "), "The  field  type  must  not  be  null. ");  }  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  if(value  ==  0)  {  throw  new  IllegalArgumentException( " "), "The  field  type  must  not  be  null. ");  }  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	if(value  ==  0)  {  throw  new  IllegalArgumentException( " "), "The  field  type  must  not  be  null. ");  }	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "   "),   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	14	None	replace
37	[BUG]  [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " "), "The  field  type  must  not  be  null. ");  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  if(value  <  0)  {  throw  new  IllegalArgumentException( " "), "The  field  type  must  not  be  null. ");  }  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	if(value  <  0)  {  throw  new  IllegalArgumentException( " "), "The  field  type  must  not  be  null. ");  }	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "   "),   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	14	None	replace
38	[BUG]  [BUGGY]  NullPointer  <  DateTimeFieldType>  it  =  type.getValue();  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  NullPointer  <  DateTimeFieldType>  it  =  type.getValue();  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	NullPointer  <  DateTimeFieldType>  it  =  type.getValue();	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	1	None	replace
39	[BUG]  [BUGGY]  NullPointerFactory  <  DateTimeFieldType>  it  =  type.getField(chronology);  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  NullPointerFactory  <  DateTimeFieldType>  it  =  type.getField(chronology);  [BUGGY]      if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	NullPointerFactory  <  DateTimeFieldType>  it  =  type.getField(chronology);	  if(type    ==    null)    {    throw    new    IllegalArgumentException(   "The    field    type    must    not    be    null.   ");    }    	non-compiled	[CE]  	1	None	replace
