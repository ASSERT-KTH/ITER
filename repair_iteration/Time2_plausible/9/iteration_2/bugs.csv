bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  if(type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }  [BUGGY]    if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	if(type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null. ");  }	      	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  if(type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null   ");  }  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  if(type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null   ");  }  [BUGGY]    if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	if(type  ==  null)  {  throw  new  IllegalArgumentException( "The  field  type  must  not  be  null   ");  }	      	non-compiled	[CE]  	3	None	replace
3	[BUG]  [BUGGY]  iPartial  =  type.withUTC();  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  iPartial  =  type.withUTC();  [BUGGY]    iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iPartial  =  type.withUTC();	      iPartial    =    type.getPartial();    	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  DateTimeFieldType  type  =  type.getField(this,  value);  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  DateTimeFieldType  type  =  type.getField(this,  value);  [BUGGY]    iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  type.getField(this,  value);	      DateTimeFieldType    type    =    type.getField(chronology);    	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]  DateTimeFieldType  type  =  iChronology.getFieldType(type);  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  DateTimeFieldType  type  =  iChronology.getFieldType(type);  [BUGGY]    iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  iChronology.getFieldType(type);	      DateTimeFieldType    type    =    type.getField(iChronology);    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  iChronology  =  type.getChronology();  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  iChronology  =  type.getChronology();  [BUGGY]    if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iChronology  =  type.getChronology();	  iChronology    =    type;    	non-compiled	[CE]  	2	None	replace
7	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(value);  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  iChronology  =  chronology.withUTC(value);  [BUGGY]    if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iChronology  =  chronology.withUTC(value);	  iChronology    =    chronology.withUTC();    	non-compiled	[CE]  	1	None	replace
8	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  iChronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]    if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iChronology  =  DateTimeUtils.getChronology(chronology).withUTC();	      	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(chronology);  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  iChronology  =  DateTimeUtils.getChronology(chronology);  [BUGGY]    if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iChronology  =  DateTimeUtils.getChronology(chronology);	      	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  iPartial  =  chronology.withUTC(value);  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  iPartial  =  chronology.withUTC(value);  [BUGGY]    iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	iPartial  =  chronology.withUTC(value);	      iPartial    =    chronology.withUTC();    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  DateTimeFieldType  type  =  chronology.getField(type);  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  DateTimeFieldType  type  =  chronology.getField(type);  [BUGGY]    iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  chronology.getField(type);	      DateTimeFieldType    type    =    type.getField(chronology);    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  DateTimeFieldType  type  =  chronology.getField(iChronology);  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  DateTimeFieldType  type  =  chronology.getField(iChronology);  [BUGGY]    iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  chronology.getField(iChronology);	      DateTimeFieldType    type    =    type.getField(iChronology);    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  DateTimeFieldType  type  =  iChronology.getField(type);  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  DateTimeFieldType  type  =  iChronology.getField(type);  [BUGGY]    iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  iChronology.getField(type);	      DateTimeFieldType    type    =    type.getField(iChronology);    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  if(type  ==  null)  {  throw  new  IllegalArgumentException( " "), "The  field  type  must  not  be  null. ");  }  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  if(type  ==  null)  {  throw  new  IllegalArgumentException( " "), "The  field  type  must  not  be  null. ");  }  [BUGGY]    if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	if(type  ==  null)  {  throw  new  IllegalArgumentException( " "), "The  field  type  must  not  be  null. ");  }	      	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  DateTimeFieldType  type  =  type.getField(chronology).withUTC();  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  DateTimeFieldType  type  =  type.getField(chronology).withUTC();  [BUGGY]    iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	155	155	1	replace	DateTimeFieldType  type  =  type.getField(chronology).withUTC();	      DateTimeFieldType    type    =    type.getField(chronology);    	non-compiled	[CE]  	9	None	replace
