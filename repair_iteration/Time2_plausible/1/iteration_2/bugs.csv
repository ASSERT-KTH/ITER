bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  iChronology.getRangeDurationType();  [CE]  not  a  statement  [FE]          IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]  DateTimeFieldType  loopType  =  iChronology.getRangeDurationType();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	DateTimeFieldType  loopType  =  iChronology.getRangeDurationType();	      DateTimeFieldType    loopType    =    loopType.getRangeDurationType();    	non-compiled	[CE]  not  a  statement	6	None	replace
2	[BUG]  [BUGGY]  DurationFieldType  loopType  =  loopType.getRangeDurationType();  [CE]  not  a  statement  [FE]            IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]  DurationFieldType  loopType  =  loopType.getRangeDurationType();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	DurationFieldType  loopType  =  loopType.getRangeDurationType();	      DateTimeFieldType    loopType    =    loopType.getRangeDurationType();    	non-compiled	[CE]  not  a  statement	6	None	replace
3	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType();  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]          IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]  int[]  types  =  loopType.getDurationType();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	int[]  types  =  loopType.getDurationType();	      int[]    types    =    loopType.getRangeDurationType();    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	2	None	replace
4	[BUG]  [BUGGY]  aughtException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]  aughtException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	aughtException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());	      if(i    >    0)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  int[]  types  =  loopType.getRangeDurationType().getField(iChronology,  i);  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]  int[]  types  =  loopType.getRangeDurationType().getField(iChronology,  i);  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	int[]  types  =  loopType.getRangeDurationType().getField(iChronology,  i);	      int[]    types    =    loopType.getRangeDurationType().getField(iChronology);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]      if(i  >  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +     "  and   "  +  loopType.getName());  }  if(i  >  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]    IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]      if(i  >  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +     "  and   "  +  loopType.getName());  }  if(i  >  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	        if(i    >    0)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    if(i  >  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }	  	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	4	None	add
7	[BUG]  [BUGGY]  int[]  types  =  loopType.getRangeDurationType().getFields(iChronology,  i);  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]            IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]  int[]  types  =  loopType.getRangeDurationType().getFields(iChronology,  i);  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	int[]  types  =  loopType.getRangeDurationType().getFields(iChronology,  i);	      int[]    types    =    loopType.getRangeDurationType().getFields(iChronology);    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	3	None	replace
8	[BUG]  [BUGGY]  int[]  types  =  loopType.getRangeDurationType().getField(iChronology,  i  -  1);  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]        IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]  int[]  types  =  loopType.getRangeDurationType().getField(iChronology,  i  -  1);  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	int[]  types  =  loopType.getRangeDurationType().getField(iChronology,  i  -  1);	      int[]    types    =    loopType.getRangeDurationType().getField(iChronology);    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	1	None	replace
9	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]  [Delete]  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	[Delete]	      if(i    >    0)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  aughtException( " ");  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]  aughtException( " ");  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	aughtException( " ");	      if(i    >    0)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getField(iChronology);  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]        IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]  int[]  types  =  loopType.getDurationType().getField(iChronology);  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	int[]  types  =  loopType.getDurationType().getField(iChronology);	      int[]    types    =    loopType.getRangeDurationType().getField(iChronology);    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	1	None	replace
12	[BUG]  [BUGGY]      if(i  >  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +     "  and   "  +  loopType.getName());  }  if(i  >  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and... "  +  loopType.getName());  }  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]    IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]      if(i  >  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +     "  and   "  +  loopType.getName());  }  if(i  >  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and... "  +  loopType.getName());  }  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	        if(i    >    0)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    if(i  >  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and... "  +  loopType.getName());  }	  	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	4	None	add
13	[BUG]  [BUGGY]  aught(iChronology)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]    DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0  ||  (compare  !=  0  &&  loopUnitField.isSupported()  ==  false))  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {    [BUGGY]  aught(iChronology)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  }  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +            types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  DurationField  lastRangeField  =  types[i  -  1].getRangeDurationType().getField(iChronology);  DurationField  loopRangeField  =  loopType.getRangeDurationType().getField(iChronology);  if  (lastRangeField.compareTo(loopRangeField)  <  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	1.0	224	225	1	replace	aught(iChronology)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  }	      if(i    >    0)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.getName());    }    	non-compiled	[CE]  	5	None	replace
