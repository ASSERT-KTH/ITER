bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iPartial  =  type.withUTC();  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  iPartial  =  type.withUTC();  [BUGGY]    iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	iPartial  =  type.withUTC();	      iPartial    =    type.getPartial();    	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  iTypes  =  new  DateTimeFieldType[]  {  type,  value,  chronology  }  ;  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  iTypes  =  new  DateTimeFieldType[]  {  type,  value,  chronology  }  ;  [BUGGY]    iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	iTypes  =  new  DateTimeFieldType[]  {  type,  value,  chronology  }  ;	  iTypes    =    new    DateTimeFieldType[]    {    type,    value    }    ;    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  iPartial  =  type.getParent();  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  iPartial  =  type.getParent();  [BUGGY]    iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	iPartial  =  type.getParent();	      	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  DateTimeFieldType  type  =  type.getField(iChronology);  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  DateTimeFieldType  type  =  type.getField(iChronology);  [BUGGY]    iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	DateTimeFieldType  type  =  type.getField(iChronology);	      DateTimeFieldType    type    =    type.getField(chronology);    	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]  DateTimeFieldType  type  =  chronology.getField(type);  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  DateTimeFieldType  type  =  chronology.getField(type);  [BUGGY]    iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	DateTimeFieldType  type  =  chronology.getField(type);	      DateTimeFieldType    type    =    type.getField(chronology);    	non-compiled	[CE]  	9	None	replace
6	[BUG]  [BUGGY]  iPartial  =  dateTimeUtils.getChronology(chronology).withUTC();  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  iPartial  =  dateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]    iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	iPartial  =  dateTimeUtils.getChronology(chronology).withUTC();	      iPartial    =    DateTimeUtils.getChronology(chronology).withUTC();    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(value);  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  iChronology  =  chronology.withUTC(value);  [BUGGY]    iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	iChronology  =  chronology.withUTC(value);	      iChronology    =    chronology.withUTC();    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  DateTimeFieldType[]  iTypes  =  type.getFieldTypes();  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  DateTimeFieldType[]  iTypes  =  type.getFieldTypes();  [BUGGY]    iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	DateTimeFieldType[]  iTypes  =  type.getFieldTypes();	      	non-compiled	[CE]  	2	None	replace
9	[BUG]  [BUGGY]  DateTimeFieldType  type  =  iChronology.getField(chronology);  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  DateTimeFieldType  type  =  iChronology.getField(chronology);  [BUGGY]    iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	DateTimeFieldType  type  =  iChronology.getField(chronology);	      DateTimeFieldType    type    =    type.getField(chronology);    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  iPartial  =  getPartial().withUTC();  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  iPartial  =  getPartial().withUTC();  [BUGGY]    iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	iPartial  =  getPartial().withUTC();	      iPartial    =    getPartial();    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  iPartial  =  chronology.getPartial();  [CE]  [FE]            IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  iPartial  =  chronology.getPartial();  [BUGGY]    iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	iPartial  =  chronology.getPartial();	      iPartial    =    getPartial();    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  int[]  iValues  =  type.getFieldIndex();  [CE]  [FE]          IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  int[]  iValues  =  type.getFieldIndex();  [BUGGY]    iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	int[]  iValues  =  type.getFieldIndex();	      	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  iPartial  =  type.withField(iChronology);  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(   "The  field  type  must  not  be  null   ");  }    [BUGGY]  iPartial  =  type.withField(iChronology);  [BUGGY]    iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	159	159	1	replace	iPartial  =  type.withField(iChronology);	      iPartial    =    type.getPartial();    	non-compiled	[CE]  	3	None	replace
