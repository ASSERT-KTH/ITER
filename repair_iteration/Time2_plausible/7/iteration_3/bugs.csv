bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iPartial  =  DateTimeUtils.getChronology(type,  value,  chronology);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  iPartial  =  DateTimeUtils.getChronology(type,  value,  chronology);  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	iPartial  =  DateTimeUtils.getChronology(type,  value,  chronology);	  iPartial    =    DateTimeUtils.getChronology(type,    value);    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  super(type,  value,  0,  iFieldIndex);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  super(type,  value,  0,  iFieldIndex);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	super(type,  value,  0,  iFieldIndex);	  super(type,    value,    iFieldIndex);    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  this(type,  value);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  this(type,  value);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	this(type,  value);	  super(value,    type);    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  iPartial  =  type.getField(iChronology);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  iPartial  =  type.getField(iChronology);  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	iPartial  =  type.getField(iChronology);	  iPartial    =    type.withField(iChronology);    	non-compiled	[CE]  	14	None	replace
5	[BUG]  [BUGGY]  this.iPartial  =  type.getImplicitPartial();  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  this.iPartial  =  type.getImplicitPartial();  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	this.iPartial  =  type.getImplicitPartial();	  this.iPartial    =    type.getImplicitPrototype();    	non-compiled	[CE]  	13	None	replace
6	[BUG]  [BUGGY]  this.iPartial  =  type.getImplicitParameter();  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  this.iPartial  =  type.getImplicitParameter();  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	this.iPartial  =  type.getImplicitParameter();	  this.iPartial    =    type.getImplicitPrototype();    	non-compiled	[CE]  	13	None	replace
7	[BUG]  [BUGGY]  this(type,  value,  chronology,  null,  null);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  this(type,  value,  chronology,  null,  null);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	this(type,  value,  chronology,  null,  null);	  this(type,    value,    chronology,    null);    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  this(type,  value,  null,  chronology);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  this(type,  value,  null,  chronology);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	this(type,  value,  null,  chronology);	  this(type,    value,    null);    	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  this.iPartial  =  type.getImmediateParent(),  value);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  this.iPartial  =  type.getImmediateParent(),  value);  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	this.iPartial  =  type.getImmediateParent(),  value);	  this.iPartial    =    type.getImmediateParent();    	non-compiled	[CE]  	6	None	replace
10	[BUG]  [BUGGY]  super(type.getFieldIndex(),  value);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  super(type.getFieldIndex(),  value);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	super(type.getFieldIndex(),  value);	  super(value);    	non-compiled	[CE]  	11	None	replace
11	[BUG]  [BUGGY]  super(type,  value,  chronology,  iChronology);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  super(type,  value,  chronology,  iChronology);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	super(type,  value,  chronology,  iChronology);	  super(type,    value,    chronology);    	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  this.iPartial  =  type.getImmediateParentPointer(),  value);  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  this.iPartial  =  type.getImmediateParentPointer(),  value);  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	this.iPartial  =  type.getImmediateParentPointer(),  value);	  this.iPartial    =    type.getImmediateParentPointer();    	non-compiled	[CE]  	10	None	replace
13	[BUG]  [BUGGY]  iPartial  =  type.withZone();  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  iPartial  =  type.withZone();  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	iPartial  =  type.withZone();	  iPartial    =    type.withUTC();    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  iPartial  =  DateTimeUtils.getChronology(type,  chronology);  [CE]  [FE]                IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  iPartial  =  DateTimeUtils.getChronology(type,  chronology);  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	iPartial  =  DateTimeUtils.getChronology(type,  chronology);	  iPartial    =    DateTimeUtils.getChronology(type,    value);    	non-compiled	[CE]  	2	None	replace
15	[BUG]  [BUGGY]  iPartial  =  iChronology.withField(type);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  iPartial  =  iChronology.withField(type);  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	iPartial  =  iChronology.withField(type);	  iPartial    =    type.withField(iChronology);    	non-compiled	[CE]  	14	None	replace
16	[BUG]  [BUGGY]  super(value,  type,  iFieldIndex);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  super(value,  type,  iFieldIndex);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	super(value,  type,  iFieldIndex);	  super(type,    value,    iFieldIndex);    	non-compiled	[CE]  	9	None	replace
17	[BUG]  [BUGGY]  this.iPartial  =  type.getImmediateParent()  +  1;  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  this.iPartial  =  type.getImmediateParent()  +  1;  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	this.iPartial  =  type.getImmediateParent()  +  1;	  this.iPartial    =    type.getImmediateParent();    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  this.iPartial  =  type.getImplicitChronology();  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  this.iPartial  =  type.getImplicitChronology();  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	this.iPartial  =  type.getImplicitChronology();	  this.iPartial    =    type.getImplicitPrototype();    	non-compiled	[CE]  	13	None	replace
19	[BUG]  [BUGGY]  this.iPartial  =  type.getImmediateParentPointer()  -  1;  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  this.iPartial  =  type.getImmediateParentPointer()  -  1;  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	this.iPartial  =  type.getImmediateParentPointer()  -  1;	  this.iPartial    =    type.getImmediateParentPointer();    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  this(type,  value,  chronology,  null,  0);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  this(type,  value,  chronology,  null,  0);  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	this(type,  value,  chronology,  null,  0);	  this(type,    value,    chronology,    null);    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  iPartial  =  type.getField(chronology);  [CE]  [FE]              IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  iPartial  =  type.getField(chronology);  [BUGGY]      super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	iPartial  =  type.getField(chronology);	  iPartial    =    type.withField(iChronology);    	non-compiled	[CE]  	14	None	replace
22	[BUG]  [BUGGY]  super(type,  value,  chronology,  ISOChronology.getInstanceUTC());  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      public  Partial(DateTimeFieldType  type,  int  value,  Chronology  chronology)  {      [BUGGY]  super(type,  value,  chronology,  ISOChronology.getInstanceUTC());  [BUGGY]      chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (type  ==  null)  {  throw  new  IllegalArgumentException(     "The  field  type  must  not  be  null     ");  }  iTypes  =  new  DateTimeFieldType[]  {type};  iValues  =  new  int[]  {value};  chronology.validate(this,  iValues);  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType  type  int  value  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  Partial  iPartial  DateTimeFieldType  type  int[]  iValues  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time2/src/main/java/org/joda/time/Partial.java	0.2886751345948129	153	153	1	replace	super(type,  value,  chronology,  ISOChronology.getInstanceUTC());	  super(type,    value,    chronology);    	non-compiled	[CE]  	8	None	replace
