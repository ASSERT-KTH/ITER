bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  option  =(Option)option.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  option  =(Option)option.clone();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	option  =(Option)option.clone();	      Option    option    =(Option)option.clone();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  Option  option  =(Option)this.options.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Option  option  =(Option)this.options.clone();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Option  option  =(Option)this.options.clone();	      Option    option    =(Option)option.clone();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  Option  option  =(Option)this.super.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Option  option  =(Option)this.super.clone();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Option  option  =(Option)this.super.clone();	      Option    option    =(Option)super.clone();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  Object  value  =  option.values();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Object  value  =  option.values();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Object  value  =  option.values();	      Object    value    =    option.clone();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]  Object  value  =  option.getValue();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Object  value  =  option.getValue();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Object  value  =  option.getValue();	      Object    value    =    option.clone();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
6	[BUG]  [BUGGY]  Object  value  =  option.next();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Object  value  =  option.next();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Object  value  =  option.next();	      Object    value    =    option.clone();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  Class  <?>  opt  =  option.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Class  <?>  opt  =  option.clone();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Class  <?>  opt  =  option.clone();	      Class    <?>    opt    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
8	[BUG]  [BUGGY]  Class  <?>  opt  =  option.getOption(defaultValue);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Class  <?>  opt  =  option.getOption(defaultValue);  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Class  <?>  opt  =  option.getOption(defaultValue);	      Class    <?>    opt    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
9	[BUG]  [BUGGY]  Class  <?>  opt  =  option.getOption( "longOpt ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Class  <?>  opt  =  option.getOption( "longOpt ");  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Class  <?>  opt  =  option.getOption( "longOpt ");	      Class    <?>    opt    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
10	[BUG]  [BUGGY]  option.values  =  new  LinkedList  <  Option>(values);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  option.values  =  new  LinkedList  <  Option>(values);  [BUGGY]    return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	option.values  =  new  LinkedList  <  Option>(values);	  option.values    =    new    ArrayList    <    Option>(values);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  Option  option  =(Option)option.clone();  if(option!=  null)  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Option  option  =(Option)option.clone();  if(option!=  null)  {  return  option;  }  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Option  option  =(Option)option.clone();  if(option!=  null)  {  return  option;  }	      if(option.hasArg())    {    Option    option    =(Option)option.clone();    if(option!=    null)    {    return    option;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  if(option.values!=  null)  {  if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option!=  null)  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  if(option.values!=  null)  {  if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option!=  null)  {  return  option;  }  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	if(option.values!=  null)  {  if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option!=  null)  {  return  option;  }	      if(option.hasArg())    {    Option    option    =(Option)option.clone();    if(option!=    null)    {    return    option;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  if(option.values!=  null)  {  if(option.hasArg())  {  option  =(Option)option.clone();  if(option!=  null)  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  if(option.values!=  null)  {  if(option.hasArg())  {  option  =(Option)option.clone();  if(option!=  null)  {  return  option;  }  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	if(option.values!=  null)  {  if(option.hasArg())  {  option  =(Option)option.clone();  if(option!=  null)  {  return  option;  }	      if(option.hasArg())    {    Option    option    =(Option)option.clone();    if(option!=    null)    {    return    option;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
14	[BUG]  [BUGGY]  Option  option  =(Option)option.clone();  if(option.values!=  null)  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Option  option  =(Option)option.clone();  if(option.values!=  null)  {  return  option;  }  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Option  option  =(Option)option.clone();  if(option.values!=  null)  {  return  option;  }	      if(option.hasArg())    {    Option    option    =(Option)option.clone();    if(option.values!=    null)    {    return    option;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  option  =(Option)option.clone();  if(option.values!=  null)  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  option  =(Option)option.clone();  if(option.values!=  null)  {  return  option;  }  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	option  =(Option)option.clone();  if(option.values!=  null)  {  return  option;  }	      if(option.hasArg())    {    Option    option    =(Option)option.clone();    if(option.values!=    null)    {    return    option;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
16	[BUG]  [BUGGY]  if(option.values!=  null)  {  if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option.hasArg())  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  if(option.values!=  null)  {  if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option.hasArg())  {  return  option;  }  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	if(option.values!=  null)  {  if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option.hasArg())  {  return  option;  }	      if(option.hasArg())    {    Option    option    =(Option)option.clone();    if(option.hasArg())    {    return    option;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  Option  option  =(Option)option.clone();  if(option.hasArg())  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Option  option  =(Option)option.clone();  if(option.hasArg())  {  return  option;  }  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Option  option  =(Option)option.clone();  if(option.hasArg())  {  return  option;  }	      if(option.hasArg())    {    Option    option    =(Option)option.clone();    if(option.hasArg())    {    return    option;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  Option  option  =(Option)option.clone();  if(option.hasValues())  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Option  option  =(Option)option.clone();  if(option.hasValues())  {  return  option;  }  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Option  option  =(Option)option.clone();  if(option.hasValues())  {  return  option;  }	      if(option.hasArg())    {    Option    option    =(Option)option.clone();    if(option.hasArg())    {    return    option;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  option.values  =  new  LinkedList();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  option.values  =  new  LinkedList();  [BUGGY]    return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	option.values  =  new  LinkedList();	  option.values    =    new    ArrayList();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
20	[BUG]  [BUGGY]  Option  option  =(Option)option.clone();  if(option.hasArg())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Option  option  =(Option)option.clone();  if(option.hasArg())  {  throw  new  RuntimeException( " ");  }  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Option  option  =(Option)option.clone();  if(option.hasArg())  {  throw  new  RuntimeException( " ");  }	      if(option.hasArg())    {    Option    option    =(Option)option.clone();    if(option.hasArg())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
21	[BUG]  [BUGGY]  Option  option  =(Option)option.clone();  if(option.hasValues())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Option  option  =(Option)option.clone();  if(option.hasValues())  {  throw  new  RuntimeException( " ");  }  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Option  option  =(Option)option.clone();  if(option.hasValues())  {  throw  new  RuntimeException( " ");  }	      if(option.hasArg())    {    Option    option    =(Option)option.clone();    if(option.hasArg())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
22	[BUG]  [BUGGY]  Option  option  =(Option)option.clone();  if(option.values!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Option  option  =(Option)option.clone();  if(option.values!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Option  option  =(Option)option.clone();  if(option.values!=  null)  {  throw  new  RuntimeException( " ");  }	      if(option.hasArg())    {    Option    option    =(Option)option.clone();    if(option.hasArg())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
23	[BUG]  [BUGGY]  Class  <?>  opt  =  option.getOptionType();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Class  <?>  opt  =  option.getOptionType();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Class  <?>  opt  =  option.getOptionType();	      Class    <?>    opt    =    option.getOption();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
24	[BUG]  [BUGGY]  Class  <?>  opt  =  options.getOption();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  Class  <?>  opt  =  options.getOption();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	Class  <?>  opt  =  options.getOption();	      Class    <?>    opt    =    option.getOption();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
25	[BUG]  [BUGGY]  option.values  =  new  ArrayList(values.size()  -  1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  option.values  =  new  ArrayList(values.size()  -  1);  [BUGGY]    return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	option.values  =  new  ArrayList(values.size()  -  1);	  option.values    =    new    ArrayList(values.size());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
26	[BUG]  [BUGGY]  option.values  =  new  ArrayList(values.size()  +  1);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();    [BUGGY]  option.values  =  new  ArrayList(values.size()  +  1);  [BUGGY]    return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	option.values  =  new  ArrayList(values.size()  +  1);	  option.values    =    new    ArrayList(values.size());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
