bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Option  option  =(Option)option.clone();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]    Option  option  =(Option)option.clone();  [BUGGY]  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	    Option  option  =(Option)option.clone();		non-compiled	[CE]  illegal  start  of  expression	59	None	add
2	[BUG]  [BUGGY]    Option  option  =(Option)super.clone();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]    Option  option  =(Option)super.clone();  [BUGGY]  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	    Option  option  =(Option)super.clone();		non-compiled	[CE]  illegal  start  of  expression	59	None	add
3	[BUG]  [BUGGY]    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option.hasArg())  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option.hasArg())  {  return  option;  }  [BUGGY]  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option.hasArg())  {  return  option;  }		non-compiled	[CE]  illegal  start  of  expression	59	None	add
4	[BUG]  [BUGGY]    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option.values!=  null)  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option.values!=  null)  {  return  option;  }  [BUGGY]  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option.values!=  null)  {  return  option;  }		non-compiled	[CE]  illegal  start  of  expression	59	None	add
5	[BUG]  [BUGGY]    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option.hasArg())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option.hasArg())  {  throw  new  RuntimeException( " ");  }  [BUGGY]  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option.hasArg())  {  throw  new  RuntimeException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	59	None	add
6	[BUG]  [BUGGY]  option.values  =  new  ArrayList(values.size());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]  option.values  =  new  ArrayList(values.size());  [BUGGY]  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	option.values  =  new  ArrayList(values.size());	option.values  =  new  ArrayList(values);  	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
7	[BUG]  [BUGGY]  option.values  =  new  ArrayList();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]  option.values  =  new  ArrayList();  [BUGGY]  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	option.values  =  new  ArrayList();	option.values  =  new  ArrayList(values);  	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
8	[BUG]  [BUGGY]  option.values  =  new  ArrayList  <  Option>(values);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]  option.values  =  new  ArrayList  <  Option>(values);  [BUGGY]  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	option.values  =  new  ArrayList  <  Option>(values);	option.values  =  new  ArrayList(values);  	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
9	[BUG]  [BUGGY]    Object  value  =  option.clone();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]    Object  value  =  option.clone();  [BUGGY]  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	    Object  value  =  option.clone();		non-compiled	[CE]  illegal  start  of  expression	59	None	add
10	[BUG]  [BUGGY]    option.values  =  new  ArrayList(option.values);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]    option.values  =  new  ArrayList(option.values);  [BUGGY]  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	    option.values  =  new  ArrayList(option.values);		non-compiled	[CE]  illegal  start  of  expression	59	None	add
11	[BUG]  [BUGGY]    Class  <?>  opt  =  option.getOption();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]    Class  <?>  opt  =  option.getOption();  [BUGGY]  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	    Class  <?>  opt  =  option.getOption();		non-compiled	[CE]  illegal  start  of  expression	59	None	add
12	[BUG]  [BUGGY]    Class  <?>  opt  =  option.getOptions();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]    Class  <?>  opt  =  option.getOptions();  [BUGGY]  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	    Class  <?>  opt  =  option.getOptions();		non-compiled	[CE]  illegal  start  of  expression	59	None	add
13	[BUG]  [BUGGY]    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option!=  null)  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option!=  null)  {  return  option;  }  [BUGGY]  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(option!=  null)  {  return  option;  }		non-compiled	[CE]  illegal  start  of  expression	59	None	add
14	[BUG]  [BUGGY]    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(!option.hasArg())  {  return  option;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  public  Object  clone()  {  try  {  Option  option  =  (Option)  super.clone();  [BUGGY]    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(!option.hasArg())  {  return  option;  }  [BUGGY]  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException( "A  CloneNotSupportedException  was  thrown:   "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	641	641	2	replace	    if(option.hasArg())  {  Option  option  =(Option)option.clone();  if(!option.hasArg())  {  return  option;  }		non-compiled	[CE]  illegal  start  of  expression	59	None	add
