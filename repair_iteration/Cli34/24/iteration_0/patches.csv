bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    String  argName  =  value.toLowerCase();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]    String  argName  =  value.toLowerCase();  [BUGGY]  if  (!acceptsArg())  {  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	    String  argName  =  value.toLowerCase();		non-compiled	[CE]  illegal  start  of  expression	49	None	add
2	[BUG]  [BUGGY]    int  numberOfArgs  =  getNumberOfArgs();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]    int  numberOfArgs  =  getNumberOfArgs();  [BUGGY]  if  (!acceptsArg())  {  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	    int  numberOfArgs  =  getNumberOfArgs();		non-compiled	[CE]  illegal  start  of  expression	49	None	add
3	[BUG]  [BUGGY]    String  value  =(String)this.values.get(value);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]    String  value  =(String)this.values.get(value);  [BUGGY]  if  (!acceptsArg())  {  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	    String  value  =(String)this.values.get(value);		non-compiled	[CE]  illegal  start  of  expression	49	None	add
4	[BUG]  [BUGGY]    String  value  =(String)this.values.get(0);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]    String  value  =(String)this.values.get(0);  [BUGGY]  if  (!acceptsArg())  {  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	    String  value  =(String)this.values.get(0);		non-compiled	[CE]  illegal  start  of  expression	49	None	add
5	[BUG]  [BUGGY]    int  numberOfArgs  =  getNumberOfArgs().size();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]    int  numberOfArgs  =  getNumberOfArgs().size();  [BUGGY]  if  (!acceptsArg())  {  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	    int  numberOfArgs  =  getNumberOfArgs().size();		non-compiled	[CE]  illegal  start  of  expression	49	None	add
6	[BUG]  [BUGGY]  if  (!hasArg())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]  if  (!hasArg())  {  [BUGGY]  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg())  {	if  (!acceptsArg())  {  	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
7	[BUG]  [BUGGY]  if  (!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]  if  (!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	if  (!acceptsArg())  {  	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
8	[BUG]  [BUGGY]  if  (!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]  if  (!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	if  (!acceptsArg())  {  	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
9	[BUG]  [BUGGY]    if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]    if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]  if  (!acceptsArg())  {  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	    if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	49	None	add
10	[BUG]  [BUGGY]    if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]    if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]  if  (!acceptsArg())  {  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	    if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	49	None	add
11	[BUG]  [BUGGY]    if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]    if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( " ");  }  [BUGGY]  if  (!acceptsArg())  {  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	    if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	49	None	add
12	[BUG]  [BUGGY]    if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]    if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]  if  (!acceptsArg())  {  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	    if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	49	None	add
13	[BUG]  [BUGGY]  if  (hasArg  ||!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]  if  (hasArg  ||!acceptsArg())  {  [BUGGY]  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasArg  ||!acceptsArg())  {	if  (!acceptsArg())  {  	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
14	[BUG]  [BUGGY]  if  (hasArg  ||!acceptsList())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]  if  (hasArg  ||!acceptsList())  {  [BUGGY]  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasArg  ||!acceptsList())  {	if  (!acceptsArg())  {  	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
15	[BUG]  [BUGGY]  if(!hasArg  &&!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]  if(!hasArg  &&!acceptsArg())  {  [BUGGY]  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&!acceptsArg())  {	if  (!acceptsArg())  {  	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
16	[BUG]  [BUGGY]  if(!hasArg  ||!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]  if(!hasArg  ||!acceptsArg())  {  [BUGGY]  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  ||!acceptsArg())  {	if  (!acceptsArg())  {  	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
17	[BUG]  [BUGGY]    if(value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]    if(value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]  if  (!acceptsArg())  {  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	    if(value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	49	None	add
18	[BUG]  [BUGGY]    if(value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]    if(value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (!acceptsArg())  {  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	    if(value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	49	None	add
19	[BUG]  [BUGGY]    List  <  String>  values  =  Lists.newArrayList();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  void  add(String  value)  {  [BUGGY]    List  <  String>  values  =  Lists.newArrayList();  [BUGGY]  if  (!acceptsArg())  {  {  throw  new  RuntimeException( "Cannot  add  value,  list  full. ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	    List  <  String>  values  =  Lists.newArrayList();		non-compiled	[CE]  illegal  start  of  expression	49	None	add
