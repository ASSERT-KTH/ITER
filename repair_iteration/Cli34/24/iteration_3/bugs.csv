bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(hasArg  &&!hasErrors())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  &&!hasErrors())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  &&!hasErrors())  {	  if(hasArg    ||!hasErrors())    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
2	[BUG]  [BUGGY]  if(hasOptionalArg  ||!hasErrors())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasOptionalArg  ||!hasErrors())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasOptionalArg  ||!hasErrors())  {	  if(hasArg    ||!hasErrors())    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
3	[BUG]  [BUGGY]  if(value  ==  null  ||  value.length()!=  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||  value.length()!=  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||  value.length()!=  0)  {  throw  new  RuntimeException( " ");  }	  if(value    ==    null    ||    value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
4	[BUG]  [BUGGY]  ||  value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||  value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||  value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }	  if(value    ==    null    ||    value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
5	[BUG]  [BUGGY]  String  argName  =  value.substring(0,  value.length());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value.substring(0,  value.length());  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.substring(0,  value.length());	  String    argName    =    value.substring(0,    value.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
6	[BUG]  [BUGGY]  char  argName  =  value.substring(0,  value.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  char  argName  =  value.substring(0,  value.length()  -  1);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	char  argName  =  value.substring(0,  value.length()  -  1);	  String    argName    =    value.substring(0,    value.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
7	[BUG]  [BUGGY]  String  argName  =  value.substring(0,  value.length()  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value.substring(0,  value.length()  +  1);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.substring(0,  value.length()  +  1);	  String    argName    =    value.substring(0,    value.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
8	[BUG]  [BUGGY]  String  argName  =  value.substring(0,  value.length()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value.substring(0,  value.length()));  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.substring(0,  value.length()));	  String    argName    =    value.substring(0,    value.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
9	[BUG]  [BUGGY]  if(hasArg()  ||  hasOptionalArg())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg()  ||  hasOptionalArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  ||  hasOptionalArg())  {	  if(hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
10	[BUG]  [BUGGY]  if(hasMoreArg())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasMoreArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasMoreArg())  {	  if(hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
11	[BUG]  [BUGGY]  if(hasArgs())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArgs())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArgs())  {	  if(hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
12	[BUG]  [BUGGY]  String  numberOfArgs  =  getNumberOfArgs();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  numberOfArgs  =  getNumberOfArgs();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  numberOfArgs  =  getNumberOfArgs();	  char    numberOfArgs    =    getNumberOfArgs();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
13	[BUG]  [BUGGY]  Number  numberOfArgs  =  getNumberOfArgs();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  Number  numberOfArgs  =  getNumberOfArgs();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	Number  numberOfArgs  =  getNumberOfArgs();	  char    numberOfArgs    =    getNumberOfArgs();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
14	[BUG]  [BUGGY]  string  numberOfArgs  =  getNumberOfArgs();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  string  numberOfArgs  =  getNumberOfArgs();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	string  numberOfArgs  =  getNumberOfArgs();	  char    numberOfArgs    =    getNumberOfArgs();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
15	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "	  if(value    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
16	[BUG]  [BUGGY]  if  (hasArg  &&!isLocal())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (hasArg  &&!isLocal())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasArg  &&!isLocal())  {	  if    (hasArg    ||!isLocal())    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
17	[BUG]  [BUGGY]  String  value  =(String)this.values.get(0).toLowerCase();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.get(0).toLowerCase();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(0).toLowerCase();	  String    value    =(String)this.values.get(value).toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
18	[BUG]  [BUGGY]  String  value  =(String)this.values.get(value).toUpperCase();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.get(value).toUpperCase();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(value).toUpperCase();	  String    value    =(String)this.values.get(value).toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
19	[BUG]  [BUGGY]  String  value  =(String)this.values.getValue(value).toLowerCase();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.getValue(value).toLowerCase();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.getValue(value).toLowerCase();	  String    value    =(String)this.values.get(value).toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
20	[BUG]  [BUGGY]  String  argName  =  value.trim().toLowerCase();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value.trim().toLowerCase();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.trim().toLowerCase();	  String    argName    =    value.trim();    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
21	[BUG]  [BUGGY]  String  argName  =  value.trim()  + "n ";  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value.trim()  + "n ";  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.trim()  + "n ";	  String    argName    =    value.trim();    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
22	[BUG]  [BUGGY]  String  argName  =  value.trim()  + ";n ";  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value.trim()  + ";n ";  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.trim()  + ";n ";	  String    argName    =    value.trim();    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
23	[BUG]  [BUGGY]  ||  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
24	[BUG]  [BUGGY]  if(value  ==  null  ||  value.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||  value.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||  value.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
25	[BUG]  [BUGGY]  String  argName  =  values.toLowerCase();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  values.toLowerCase();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  values.toLowerCase();	  String    argName    =    value.toLowerCase()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
26	[BUG]  [BUGGY]  if  (hasArg  &&!acceptsArg(value))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (hasArg  &&!acceptsArg(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasArg  &&!acceptsArg(value))  {	  if    (hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  ArrayList  <  String>  values  =  Lists.newArrayListWithCapacity(value);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ArrayList  <  String>  values  =  Lists.newArrayListWithCapacity(value);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	ArrayList  <  String>  values  =  Lists.newArrayListWithCapacity(value);	  List    <    String>    values    =    Lists.newArrayListWithCapacity(value);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
28	[BUG]  [BUGGY]  List  <  String>  values  =  Lists.newArrayListWithCapacity(lengthOpt);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  List  <  String>  values  =  Lists.newArrayListWithCapacity(lengthOpt);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	List  <  String>  values  =  Lists.newArrayListWithCapacity(lengthOpt);	  List    <    String>    values    =    Lists.newArrayListWithCapacity(value);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
29	[BUG]  [BUGGY]  if  (hasArgs()  ||(values.size()  ==  1))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (hasArgs()  ||(values.size()  ==  1))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasArgs()  ||(values.size()  ==  1))  {	  if    (!hasArgs())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
30	[BUG]  [BUGGY]  if(!hasArgs()  ||  value.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArgs()  ||  value.length()  ==  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArgs()  ||  value.length()  ==  0)  {	  if    (!hasArgs())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
31	[BUG]  [BUGGY]  if(hasArg  &&!cannotAddValue(value))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  &&!cannotAddValue(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  &&!cannotAddValue(value))  {	  if(!hasArg    &&!cannotAddValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
32	[BUG]  [BUGGY]  if(values.size()  ==  0  ||!hasArg  &&!cannotAddValue(value))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values.size()  ==  0  ||!hasArg  &&!cannotAddValue(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values.size()  ==  0  ||!hasArg  &&!cannotAddValue(value))  {	  if(!hasArg    &&!cannotAddValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
33	[BUG]  [BUGGY]  if(hasArg  ||!cannotAddValue(value))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||!cannotAddValue(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||!cannotAddValue(value))  {	  if(!hasArg    &&!cannotAddValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
34	[BUG]  [BUGGY]  if(hasArg  ||  hasOptionalArg)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||  hasOptionalArg)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||  hasOptionalArg)  {	  if(hasArg)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
35	[BUG]  [BUGGY]  if(hasOptionalArg)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasOptionalArg)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasOptionalArg)  {	  if(hasArg)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
36	[BUG]  [BUGGY]  if(hasArg  ||  hasMoreElements())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||  hasMoreElements())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||  hasMoreElements())  {	  if(hasArg)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
37	[BUG]  [BUGGY]  if(hasArg  ||  hasMoreElements)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||  hasMoreElements)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||  hasMoreElements)  {	  if(hasArg)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
38	[BUG]  [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
39	[BUG]  [BUGGY]  ||(values!=  null  &&  values.size()  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values!=  null  &&  values.size()  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values!=  null  &&  values.size()  >  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
40	[BUG]  [BUGGY]  ||(values!=  null  &&  value.length()  >  0)||(values.contains(value)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values!=  null  &&  value.length()  >  0)||(values.contains(value)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values!=  null  &&  value.length()  >  0)||(values.contains(value)))  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
41	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().size()  *  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().size()  *  2;  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs().size()  *  2;	  int    numberOfArgs    =    getNumberOfArgs().size()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
42	[BUG]  [BUGGY]  if(hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
43	[BUG]  [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  value))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  value))  {	  if(hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
44	[BUG]  [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasOptionalArg())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasOptionalArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasOptionalArg())  {	  if(hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
45	[BUG]  [BUGGY]  int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }	  for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
46	[BUG]  [BUGGY]  int  i  =  0;  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  i  =  0;  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  i  =  0;  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }	  for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
47	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
49	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(!list.isEmpty())  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(!list.isEmpty())  {  throw  new  RuntimeException( "  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(!list.isEmpty())  {  throw  new  RuntimeException( "	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
50	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  &&!canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  &&!canHaveSideEffects())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  &&!canHaveSideEffects())  {	  if(values    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
51	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  &&!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  &&!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  &&!isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(values    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
52	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  &&!isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  &&!isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  &&!isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(values    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
53	[BUG]  [BUGGY]  String  argName  =  value  ==  null?  value.toLowerCase()  : "null ";  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value  ==  null?  value.toLowerCase()  : "null ";  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value  ==  null?  value.toLowerCase()  : "null ";	  String    argName    =    value!=    null?    value.toLowerCase()    :   "null   ";    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
54	[BUG]  [BUGGY]  if  (hasArg  &&!hasOptionalArg())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (hasArg  &&!hasOptionalArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasArg  &&!hasOptionalArg())  {	  if    (hasArg    ||!hasOptionalArg())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
55	[BUG]  [BUGGY]  if  (hasOptionalArg  ||  hasArg())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (hasOptionalArg  ||  hasArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasOptionalArg  ||  hasArg())  {	  if    (hasArg    ||!hasOptionalArg())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
56	[BUG]  [BUGGY]  ||(value.length()  <  0  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  <  0  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  <  0  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  if(value.length()    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
57	[BUG]  [BUGGY]  ||(value.length()  <  =  0  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  <  =  0  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  <  =  0  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  if(value.length()    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
58	[BUG]  [BUGGY]  ||(value.length()  <  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  <  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  <  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  if(value.length()    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
59	[BUG]  [BUGGY]  if(hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {	  if(hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
62	[BUG]  [BUGGY]  ||(value.length()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  ||(value.length()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  ||(value.length()  ==  2  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  ==  2  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  ==  2  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  ||(value.length()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
64	[BUG]  [BUGGY]  ||(value.length()  ==  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  ==  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  ==  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  ||(value.length()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
65	[BUG]  [BUGGY]  ||(values.size()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.size()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.size()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  ||(values.size()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
66	[BUG]  [BUGGY]  ||(values.size()  ==  2  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.size()  ==  2  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.size()  ==  2  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  ||(values.size()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
67	[BUG]  [BUGGY]  ||(values.size()!=  1  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.size()!=  1  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.size()!=  1  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  ||(values.size()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {	  if    (!hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)&&    value.length()    ==    UNLIMITED_VALUES)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
69	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {	  if    (!hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)&&    value.length()    ==    UNLIMITED_VALUES)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
70	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "	  if(value    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
71	[BUG]  [BUGGY]  ArrayList  <  String>  values  =  Lists.newArrayList(values);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ArrayList  <  String>  values  =  Lists.newArrayList(values);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	ArrayList  <  String>  values  =  Lists.newArrayList(values);	  ArrayList    <    String>    values    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
72	[BUG]  [BUGGY]  ArrayList  <  String>  values  =  Lists.newArrayList(values.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ArrayList  <  String>  values  =  Lists.newArrayList(values.size());  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	ArrayList  <  String>  values  =  Lists.newArrayList(values.size());	  ArrayList    <    String>    values    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
73	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs()  /  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  numberOfArgs  =  getNumberOfArgs()  /  1;  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs()  /  1;	  int    numberOfArgs    =    getNumberOfArgs()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
74	[BUG]  [BUGGY]  if(optionalArg  ==  null  ||!hasArg  &&!optionalArgs.contains(value))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(optionalArg  ==  null  ||!hasArg  &&!optionalArgs.contains(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(optionalArg  ==  null  ||!hasArg  &&!optionalArgs.contains(value))  {	  if(!hasArg    &&!optionalArgs.contains(value))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
75	[BUG]  [BUGGY]  if(hasArg  &&!optionalArgs.contains(value))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  &&!optionalArgs.contains(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  &&!optionalArgs.contains(value))  {	  if(!hasArg    &&!optionalArgs.contains(value))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
76	[BUG]  [BUGGY]  if(!hasArg  &&  options.contains(value))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg  &&  options.contains(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&  options.contains(value))  {	  if(!hasArg    &&!optionalArgs.contains(value))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
77	[BUG]  [BUGGY]  if  (!hasArg()  ||  value.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (!hasArg()  ||  value.length()  >  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg()  ||  value.length()  >  0)  {	  if    (!hasArg()    &&    value.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
78	[BUG]  [BUGGY]  if(hasArg()  ||  value.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg()  ||  value.length()  >  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  ||  value.length()  >  0)  {	  if    (!hasArg()    &&    value.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
79	[BUG]  [BUGGY]  while(value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  while(value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	while(value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  while(value.length()    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
80	[BUG]  [BUGGY]  while(value.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  while(value.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	while(value.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  while(value.length()    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
81	[BUG]  [BUGGY]  while(value.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  while(value.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	while(value.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  while(value.length()    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
82	[BUG]  [BUGGY]  if(!hasArgs  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArgs  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArgs  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasArgs)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
83	[BUG]  [BUGGY]  if(!hasArgs  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArgs  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArgs  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!hasArgs)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
84	[BUG]  [BUGGY]  if(!hasArgs  &&  value.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArgs  &&  value.length()  >  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArgs  &&  value.length()  >  0)  {	  if(!hasArgs)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
85	[BUG]  [BUGGY]  if(hasArgs  &&  value.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArgs  &&  value.length()  >  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArgs  &&  value.length()  >  0)  {	  if(!hasArgs)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
86	[BUG]  [BUGGY]  if(hasArg  &&!cannotAddValues())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  &&!cannotAddValues())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  &&!cannotAddValues())  {	  if(hasArg    ||!cannotAddValues())    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
87	[BUG]  [BUGGY]  if(values.size()  ==  0  ||!hasArg  &&!cannotAddValue())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values.size()  ==  0  ||!hasArg  &&!cannotAddValue())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values.size()  ==  0  ||!hasArg  &&!cannotAddValue())  {	  if(!hasArg    &&!cannotAddValue())    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
88	[BUG]  [BUGGY]  if(!hasArg  ||!cannotAddValue())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg  ||!cannotAddValue())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  ||!cannotAddValue())  {	  if(!hasArg    &&!cannotAddValue())    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
89	[BUG]  [BUGGY]  if(hasArg  ||!cannotAddValue())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||!cannotAddValue())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||!cannotAddValue())  {	  if(!hasArg    &&!cannotAddValue())    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
91	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
92	[BUG]  [BUGGY]  if(hasArg  &&!hasMoreArgs())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  &&!hasMoreArgs())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  &&!hasMoreArgs())  {	  if(hasArg    ||!hasMoreArgs())    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
93	[BUG]  [BUGGY]  if(hasMoreArgs  ||!hasMoreArgs())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasMoreArgs  ||!hasMoreArgs())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasMoreArgs  ||!hasMoreArgs())  {	  if(hasArg    ||!hasMoreArgs())    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
94	[BUG]  [BUGGY]  Integer  numberOfArgs  =  getNumberOfArgs().size();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  Integer  numberOfArgs  =  getNumberOfArgs().size();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	Integer  numberOfArgs  =  getNumberOfArgs().size();	  int    numberOfArgs    =    getNumberOfArgs().size()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
95	[BUG]  [BUGGY]  if(value!=  null  ||!hasArg  &&!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null  ||!hasArg  &&!acceptsArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null  ||!hasArg  &&!acceptsArg())  {	  if(value    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
96	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg  &&!hasErrors())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||!hasArg  &&!hasErrors())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg  &&!hasErrors())  {	  if(value    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
97	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg  &&!acceptsArgName())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||!hasArg  &&!acceptsArgName())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg  &&!acceptsArgName())  {	  if(value    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
98	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "	  if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
99	[BUG]  [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(!list.isEmpty())  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(!list.isEmpty())  {  throw  new  RuntimeException( "  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(!list.isEmpty())  {  throw  new  RuntimeException( "	  if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
100	[BUG]  [BUGGY]  ||(values.length()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.length()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.length()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }	  ||(values.length()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
101	[BUG]  [BUGGY]  ||(values.length()  ==  2  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.length()  ==  2  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.length()  ==  2  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }	  ||(values.length()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
102	[BUG]  [BUGGY]  ||(values.size()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.size()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.size()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }	  ||(values.length()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
103	[BUG]  [BUGGY]  ||(value.length()  ==  1  &&  value.charAt(0)!=  '-'))  throw  new  RuntimeException( " ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  ==  1  &&  value.charAt(0)!=  '-'))  throw  new  RuntimeException( " ");  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  ==  1  &&  value.charAt(0)!=  '-'))  throw  new  RuntimeException( " ");	  ||(value.length()    ==    0    &&    value.charAt(0)!=    '-'))    throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
104	[BUG]  [BUGGY]  ||(value.length()  ==  2  &&  value.charAt(0)!=  '-'))  throw  new  RuntimeException( " ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  ==  2  &&  value.charAt(0)!=  '-'))  throw  new  RuntimeException( " ");  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  ==  2  &&  value.charAt(0)!=  '-'))  throw  new  RuntimeException( " ");	  ||(value.length()    ==    0    &&    value.charAt(0)!=    '-'))    throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
105	[BUG]  [BUGGY]  ||(value.length()  ==  0  &&  value.charAt(0)  ==  '-'))  throw  new  RuntimeException( " ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  ==  0  &&  value.charAt(0)  ==  '-'))  throw  new  RuntimeException( " ");  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  ==  0  &&  value.charAt(0)  ==  '-'))  throw  new  RuntimeException( " ");	  ||(value.length()    ==    0    &&    value.charAt(0)!=    '-'))    throw    new    RuntimeException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
106	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(	  if(value!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
107	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(	  if(value!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
108	[BUG]  [BUGGY]  if(this.values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(this.values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(this.values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(	  if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
109	[BUG]  [BUGGY]  Iterator  <  String>  it  =  this.values.iterator();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  Iterator  <  String>  it  =  this.values.iterator();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	Iterator  <  String>  it  =  this.values.iterator();	  Iterator    <    String>    it    =    values.iterator();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
110	[BUG]  [BUGGY]  Iterator  <  String>  it  =  value.iterator();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  Iterator  <  String>  it  =  value.iterator();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	Iterator  <  String>  it  =  value.iterator();	  Iterator    <    String>    it    =    values.iterator();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
111	[BUG]  [BUGGY]  Iterator  <  String>  it  =  argNames.iterator();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  Iterator  <  String>  it  =  argNames.iterator();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	Iterator  <  String>  it  =  argNames.iterator();	  Iterator    <    String>    it    =    values.iterator();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
112	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs(value.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  numberOfArgs  =  getNumberOfArgs(value.length);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs(value.length);	  int    numberOfArgs    =    getNumberOfArgs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
113	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs(numberOfArgs);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  numberOfArgs  =  getNumberOfArgs(numberOfArgs);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs(numberOfArgs);	  int    numberOfArgs    =    getNumberOfArgs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
114	[BUG]  [BUGGY]  char  numberOfArgs  =  getNumberOfArgs(value);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  char  numberOfArgs  =  getNumberOfArgs(value);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	char  numberOfArgs  =  getNumberOfArgs(value);	  int    numberOfArgs    =    getNumberOfArgs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
115	[BUG]  [BUGGY]  String  value  =(String)this.values.get(value  *  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.get(value  *  1);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(value  *  1);	  String    value    =(String)this.values.get(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
116	[BUG]  [BUGGY]  String  value  =(String)this.values.get(value  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.get(value  -  1  +  1);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(value  -  1  +  1);	  String    value    =(String)this.values.get(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
117	[BUG]  [BUGGY]  if(values.size()  ==  0  ||!hasArg  &&!cannotAddValues())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values.size()  ==  0  ||!hasArg  &&!cannotAddValues())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values.size()  ==  0  ||!hasArg  &&!cannotAddValues())  {	  if(!hasArg    &&!cannotAddValues())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
118	[BUG]  [BUGGY]  ||(value.length()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }	  ||(value.length()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
119	[BUG]  [BUGGY]  ||(value.length()  ==  2  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  ==  2  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  ==  2  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }	  ||(value.length()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
120	[BUG]  [BUGGY]  ||(value.length()  ==  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  ==  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  ==  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  RuntimeException( " ");  }	  ||(value.length()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
121	[BUG]  [BUGGY]  String  value  =(String)this.values.get(value  /  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.get(value  /  1);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(value  /  1);	  String    value    =(String)this.values.get(value    +    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
122	[BUG]  [BUGGY]  ||(value.length()!=  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()!=  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()!=  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  RuntimeException( " ");  }	  if(value.length()!=    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
123	[BUG]  [BUGGY]  ||(value.length()!=  0  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()!=  0  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()!=  0  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }	  if(value.length()!=    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
124	[BUG]  [BUGGY]  String  value  =(String)this.values.get(2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.get(2);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(2);	  String    value    =(String)this.values.get(1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
125	[BUG]  [BUGGY]  char  value  =(char)this.values.get(1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  char  value  =(char)this.values.get(1);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	char  value  =(char)this.values.get(1);	  String    value    =(String)this.values.get(1);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
126	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs()  *  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  numberOfArgs  =  getNumberOfArgs()  *  1;  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs()  *  1;	  int    numberOfArgs    =    getNumberOfArgs()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
127	[BUG]  [BUGGY]  this.values.add(longOpt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  this.values.add(longOpt);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	this.values.add(longOpt);	  this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
128	[BUG]  [BUGGY]  this.values.add(value  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  this.values.add(value  +  1);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	this.values.add(value  +  1);	  this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
129	[BUG]  [BUGGY]  this.values.add(value,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  this.values.add(value,  null);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	this.values.add(value,  null);	  this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
131	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(	  if(this.values!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
132	[BUG]  [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(	  if(this.values!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
133	[BUG]  [BUGGY]  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException	  if(this.values!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
134	[BUG]  [BUGGY]  ArrayList  <  String>  values  =  Lists.newArrayList(value);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ArrayList  <  String>  values  =  Lists.newArrayList(value);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	ArrayList  <  String>  values  =  Lists.newArrayList(value);	  List    <    String>    values    =    Lists.newArrayList(value);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
135	[BUG]  [BUGGY]  List  <  String>  values  =  Lists.newArrayList(this.values);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  List  <  String>  values  =  Lists.newArrayList(this.values);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	List  <  String>  values  =  Lists.newArrayList(this.values);	  List    <    String>    values    =    Lists.newArrayList(value);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
136	[BUG]  [BUGGY]  if(hasArg  &&!optionalArgs.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  &&!optionalArgs.isEmpty())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  &&!optionalArgs.isEmpty())  {	  if(!hasArg    &&!optionalArgs.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
137	[BUG]  [BUGGY]  if(!hasArg  &&!optionalArg.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg  &&!optionalArg.isEmpty())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&!optionalArg.isEmpty())  {	  if(!hasArg    &&!optionalArgs.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
138	[BUG]  [BUGGY]  if(hasArg  ||!optionalArgs.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||!optionalArgs.isEmpty())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||!optionalArgs.isEmpty())  {	  if(!hasArg    &&!optionalArgs.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
139	[BUG]  [BUGGY]  String  numberOfArgs  =  getNumberOfArgs().size();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  numberOfArgs  =  getNumberOfArgs().size();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  numberOfArgs  =  getNumberOfArgs().size();	  char    numberOfArgs    =    getNumberOfArgs().size();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
140	[BUG]  [BUGGY]  Number  numberOfArgs  =  getNumberOfArgs().size();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  Number  numberOfArgs  =  getNumberOfArgs().size();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	Number  numberOfArgs  =  getNumberOfArgs().size();	  char    numberOfArgs    =    getNumberOfArgs().size();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
141	[BUG]  [BUGGY]  string  numberOfArgs  =  getNumberOfArgs().size();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  string  numberOfArgs  =  getNumberOfArgs().size();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	string  numberOfArgs  =  getNumberOfArgs().size();	  char    numberOfArgs    =    getNumberOfArgs().size();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
142	[BUG]  [BUGGY]  String  argName  =  this.values.toLowerCase(Locale.ENGLISH);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  this.values.toLowerCase(Locale.ENGLISH);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  this.values.toLowerCase(Locale.ENGLISH);	  String    argName    =    value.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
143	[BUG]  [BUGGY]  String  argName  =  locale.toLowerCase(Locale.ENGLISH);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  locale.toLowerCase(Locale.ENGLISH);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  locale.toLowerCase(Locale.ENGLISH);	  String    argName    =    value.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
144	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.	  if(value    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
145	[BUG]  [BUGGY]  String  argName  =  value.toUpperCase(Locale.ENGLISH);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value.toUpperCase(Locale.ENGLISH);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.toUpperCase(Locale.ENGLISH);	  String    argName    =    value.toUpperCase();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
146	[BUG]  [BUGGY]  if  (hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {	  if    (!hasArg()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    value))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
147	[BUG]  [BUGGY]  if(value.length()  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value.length()  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value.length()  ==  0  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {	  if    (!hasArg()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    value))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
148	[BUG]  [BUGGY]  if(value!=  null  ||!hasArg  ||!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null  ||!hasArg  ||!acceptsArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null  ||!hasArg  ||!acceptsArg())  {	  if(value    ==    null    ||!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
149	[BUG]  [BUGGY]  if(value  ==  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  throw  new  RuntimeException( " ");  }	  if(value!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
150	[BUG]  [BUGGY]  ||(values!=  null  &&  values.size()  >  0))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values!=  null  &&  values.size()  >  0))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values!=  null  &&  values.size()  >  0))  {  throw  new  RuntimeException( " ");  }	  if(value!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
151	[BUG]  [BUGGY]  ||(values!=  null  &&  value.length()  >  0))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values!=  null  &&  value.length()  >  0))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values!=  null  &&  value.length()  >  0))  {  throw  new  RuntimeException( " ");  }	  if(value!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
152	[BUG]  [BUGGY]  if(hasArg  ||  hasOptionalArg  &&!acceptsList())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||  hasOptionalArg  &&!acceptsList())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||  hasOptionalArg  &&!acceptsList())  {	  if    (hasArg    &&!acceptsList())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
153	[BUG]  [BUGGY]  if(hasArg  ||  hasValuesList())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||  hasValuesList())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||  hasValuesList())  {	  if    (hasArg    &&!acceptsList())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }	  for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }	  for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
156	[BUG]  [BUGGY]  int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }	  for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
157	[BUG]  [BUGGY]  char  numberOfArgs  =  getNumberOfArgs().size()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  char  numberOfArgs  =  getNumberOfArgs().size()  -  1;  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	char  numberOfArgs  =  getNumberOfArgs().size()  -  1;	  int    numberOfArgs    =    getNumberOfArgs().size()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
158	[BUG]  [BUGGY]  long  numberOfArgs  =  getNumberOfArgs().size()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  long  numberOfArgs  =  getNumberOfArgs().size()  -  1;  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	long  numberOfArgs  =  getNumberOfArgs().size()  -  1;	  int    numberOfArgs    =    getNumberOfArgs().size()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
159	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.	  if(value    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
160	[BUG]  [BUGGY]  List  <  String>  values  =  Lists.newArrayList(values.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  List  <  String>  values  =  Lists.newArrayList(values.size());  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	List  <  String>  values  =  Lists.newArrayList(values.size());	  List    <    String>    values    =    Lists.newArrayList(values);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
161	[BUG]  [BUGGY]  Character  value  =(char)this.values.get(0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  Character  value  =(char)this.values.get(0);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	Character  value  =(char)this.values.get(0);	  char    value    =(char)this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
162	[BUG]  [BUGGY]  if(values!=  null  ||!hasArg  &&!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null  ||!hasArg  &&!acceptsArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null  ||!hasArg  &&!acceptsArg())  {	  if(values    ==    null    ||!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
163	[BUG]  [BUGGY]  if(values  ==  null  ||  values.size()  ==  0  ||!hasArg  ||!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||  values.size()  ==  0  ||!hasArg  ||!acceptsArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||  values.size()  ==  0  ||!hasArg  ||!acceptsArg())  {	  if(values    ==    null    ||!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
164	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
166	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }	  for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
168	[BUG]  [BUGGY]  int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }	  for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }	  for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
170	[BUG]  [BUGGY]  ||(values.size()  ==  1  &&  value.charAt(0)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.size()  ==  1  &&  value.charAt(0)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.size()  ==  1  &&  value.charAt(0)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }	  ||(values.size()    ==    0    &&    value.charAt(0)!=    '/'))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
171	[BUG]  [BUGGY]  ||(values.size()  ==  2  &&  value.charAt(0)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.size()  ==  2  &&  value.charAt(0)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.size()  ==  2  &&  value.charAt(0)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }	  ||(values.size()    ==    0    &&    value.charAt(0)!=    '/'))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
172	[BUG]  [BUGGY]  ||(values.size()!=  1  &&  value.charAt(0)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.size()!=  1  &&  value.charAt(0)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.size()!=  1  &&  value.charAt(0)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }	  ||(values.size()    ==    0    &&    value.charAt(0)!=    '/'))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
173	[BUG]  [BUGGY]  if(hasOptionalArg()  ||  hasOptionalArg())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasOptionalArg()  ||  hasOptionalArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasOptionalArg()  ||  hasOptionalArg())  {	  if    (hasOptionalArg())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
174	[BUG]  [BUGGY]  if(hasOptionalArg()  &&  value.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasOptionalArg()  &&  value.length()  >  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasOptionalArg()  &&  value.length()  >  0)  {	  if    (hasOptionalArg())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
176	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
177	[BUG]  [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
178	[BUG]  [BUGGY]  if(!hasArg  &&!acceptsArgName())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg  &&!acceptsArgName())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&!acceptsArgName())  {	  if(!hasArg    ||!acceptsArgName())    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
179	[BUG]  [BUGGY]  if(hasArg  &&!acceptsArgName())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  &&!acceptsArgName())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  &&!acceptsArgName())  {	  if(!hasArg    ||!acceptsArgName())    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
180	[BUG]  [BUGGY]  if(values.size()  ==  0  ||!hasArg  &&!acceptsArgName())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values.size()  ==  0  ||!hasArg  &&!acceptsArgName())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values.size()  ==  0  ||!hasArg  &&!acceptsArgName())  {	  if(!hasArg    ||!acceptsArgName())    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
181	[BUG]  [BUGGY]  if(values.size()  ==  0  ||!hasArg  ||!acceptsArgName())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values.size()  ==  0  ||!hasArg  ||!acceptsArgName())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values.size()  ==  0  ||!hasArg  ||!acceptsArgName())  {	  if(!hasArg    ||!acceptsArgName())    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
182	[BUG]  [BUGGY]  String  value  =(String)this.values.get(index  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.get(index  +  1);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(index  +  1);	  String    value    =(String)this.values.get(index);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
183	[BUG]  [BUGGY]  String  value  =(String)this.values.get(index  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.get(index  -  1);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(index  -  1);	  String    value    =(String)this.values.get(index);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
184	[BUG]  [BUGGY]  String  value  =(String)this.values.get(index++);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.get(index++);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(index++);	  String    value    =(String)this.values.get(index);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
185	[BUG]  [BUGGY]  if  (!hasArgs()  ||(values.size()  ==  1))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (!hasArgs()  ||(values.size()  ==  1))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArgs()  ||(values.size()  ==  1))  {	  if    (!hasArgs())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
186	[BUG]  [BUGGY]  if(values  ==  null  ||!hasErrors())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasErrors())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasErrors())  {	  if(hasArg    ||!hasErrors())    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
187	[BUG]  [BUGGY]  if(optionalArg  ==  null  ||!hasArg  &&!optionalArgs.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(optionalArg  ==  null  ||!hasArg  &&!optionalArgs.isEmpty())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(optionalArg  ==  null  ||!hasArg  &&!optionalArgs.isEmpty())  {	  if(!hasArg    &&!optionalArgs.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
188	[BUG]  [BUGGY]  if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  value.length()  ==  0))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  value.length()  ==  0))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  value.length()  ==  0))  {	  if    (!hasArg()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
189	[BUG]  [BUGGY]  if(hasOptionalArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasOptionalArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasOptionalArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (hasOptionalArg())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
190	[BUG]  [BUGGY]  if(hasOptionalArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasOptionalArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasOptionalArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (hasOptionalArg())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
191	[BUG]  [BUGGY]  if(hasOptionalArg()  ||  value.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasOptionalArg()  ||  value.length()  ==  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasOptionalArg()  ||  value.length()  ==  0)  {	  if    (hasOptionalArg())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
192	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
193	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
194	[BUG]  [BUGGY]  ((  value!=  null)||(value.length()  ==  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ((  value!=  null)||(value.length()  ==  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	((  value!=  null)||(value.length()  ==  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
195	[BUG]  [BUGGY]  if(value!=  null  ||  value.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null  ||  value.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null  ||  value.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
196	[BUG]  [BUGGY]  List  <  String>  values  =  Lists.newArrayListWithLongOpt(value);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  List  <  String>  values  =  Lists.newArrayListWithLongOpt(value);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	List  <  String>  values  =  Lists.newArrayListWithLongOpt(value);	  List    <    String>    values    =    Lists.newArrayListWithCapacity(value);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
197	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(	  if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
198	[BUG]  [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException	  if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
199	[BUG]  [BUGGY]  this.values.add(value,  longOpt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  this.values.add(value,  longOpt);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	this.values.add(value,  longOpt);	  this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
200	[BUG]  [BUGGY]  this.values.add(argName);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  this.values.add(argName);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	this.values.add(argName);	  this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
201	[BUG]  [BUGGY]  if(value  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {	  if    (!hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)&&    value.length()    ==    UNLIMITED_VALUES)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
202	[BUG]  [BUGGY]  if  (value!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (value!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (value!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {	  if    (!hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)&&    value.length()    ==    UNLIMITED_VALUES)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
203	[BUG]  [BUGGY]  ||(values.size()  ==  0  &&  value.charAt(0)  ==  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.size()  ==  0  &&  value.charAt(0)  ==  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.size()  ==  0  &&  value.charAt(0)  ==  '/'))  {  throw  new  IllegalArgumentException( " ");  }	  ||(values.size()    ==    0    &&    value.charAt(0)!=    '/'))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  numberOfArgs.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }	  for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
205	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  &&!cannotAddValues())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  &&!cannotAddValues())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  &&!cannotAddValues())  {	  if(!hasArg    &&!cannotAddValues())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
206	[BUG]  [BUGGY]  if(values!=  null  ||!hasArg  &&!cannotAddValues())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null  ||!hasArg  &&!cannotAddValues())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null  ||!hasArg  &&!cannotAddValues())  {	  if(!hasArg    &&!cannotAddValues())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
207	[BUG]  [BUGGY]  int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( " ");  }	  for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
208	[BUG]  [BUGGY]  String  argName  =  value.toUpperCase()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value.toUpperCase()  +  1;  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.toUpperCase()  +  1;	  String    argName    =    value.toLowerCase()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
209	[BUG]  [BUGGY]  String  value  =(String)this.values.get(value).toLowerCase()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.get(value).toLowerCase()  +  1;  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(value).toLowerCase()  +  1;	  String    value    =(String)this.values.get(value).toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
210	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().size()  /  2  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().size()  /  2  +  1;  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs().size()  /  2  +  1;	  int    numberOfArgs    =    getNumberOfArgs().size()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
211	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().size()  +  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().size()  +  2;  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs().size()  +  2;	  int    numberOfArgs    =    getNumberOfArgs().size()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
212	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg  &&!hasOptionalArg())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||!hasArg  &&!hasOptionalArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg  &&!hasOptionalArg())  {	  if(value    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
213	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg  &&!hasExpression())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||!hasArg  &&!hasExpression())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg  &&!hasExpression())  {	  if(value    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
214	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg  &&!cannotAddValue(value))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||!hasArg  &&!cannotAddValue(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg  &&!cannotAddValue(value))  {	  if(value    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
215	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().indexOf(value)-  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().indexOf(value)-  1;  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs().indexOf(value)-  1;	  int    numberOfArgs    =    getNumberOfArgs().size()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
216	[BUG]  [BUGGY]  if  (hasOptionalArg  ||!hasArg())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (hasOptionalArg  ||!hasArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasOptionalArg  ||!hasArg())  {	  if    (hasArg    ||!hasOptionalArg())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
217	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
218	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  &&!optionalArgs.contains(value))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  &&!optionalArgs.contains(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  &&!optionalArgs.contains(value))  {	  if(!hasArg    &&!optionalArgs.contains(value))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
219	[BUG]  [BUGGY]  if(!hasArg  &&!optionalArgs.containsKey(value))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg  &&!optionalArgs.containsKey(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&!optionalArgs.containsKey(value))  {	  if(!hasArg    &&!optionalArgs.contains(value))    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
220	[BUG]  [BUGGY]  if(value  ==  null  ||  value.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||  value.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||  value.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    ==    null    ||    value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
221	[BUG]  [BUGGY]  if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  value))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  value))  {	  if    (!hasArg()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
222	[BUG]  [BUGGY]  ((  value  ==  null)||(value.length()  ==  0))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ((  value  ==  null)||(value.length()  ==  0))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	((  value  ==  null)||(value.length()  ==  0))  {  throw  new  RuntimeException( " ");  }	  if(value    ==    null    ||    value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
223	[BUG]  [BUGGY]  String  argName  =  value.substring(0,  value.length()).trim();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value.substring(0,  value.length()).trim();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.substring(0,  value.length()).trim();	  String    argName    =    value.substring(0,    value.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
224	[BUG]  [BUGGY]  if(this.opt  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(this.opt  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(this.opt  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "	  if(value    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
225	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  ||!acceptsArgName())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  ||!acceptsArgName())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  ||!acceptsArgName())  {	  if(!hasArg    ||!acceptsArgName())    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
226	[BUG]  [BUGGY]  if(values  ==  null  ||!hasMoreArgs())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasMoreArgs())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasMoreArgs())  {	  if(hasArg    ||!hasMoreArgs())    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
227	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg  ||!hasOptionalArg())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||!hasArg  ||!hasOptionalArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg  ||!hasOptionalArg())  {	  if(value    ==    null    ||!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
228	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg  ||!hasErrors())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||!hasArg  ||!hasErrors())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg  ||!hasErrors())  {	  if(value    ==    null    ||!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
229	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg  ||!cannotAddValue(value))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||!hasArg  ||!cannotAddValue(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg  ||!cannotAddValue(value))  {	  if(value    ==    null    ||!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
230	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  &&!cannotAddValue())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  &&!cannotAddValue())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  &&!cannotAddValue())  {	  if(!hasArg    &&!cannotAddValue())    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
231	[BUG]  [BUGGY]  if(hasArg  &&!cannotAddValue())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  &&!cannotAddValue())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  &&!cannotAddValue())  {	  if(!hasArg    &&!cannotAddValue())    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
232	[BUG]  [BUGGY]  if(value.length()  ==  0  ||!hasArg  &&!cannotAddValue())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value.length()  ==  0  ||!hasArg  &&!cannotAddValue())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value.length()  ==  0  ||!hasArg  &&!cannotAddValue())  {	  if(!hasArg    &&!cannotAddValue())    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
233	[BUG]  [BUGGY]  String  argName  =  value!=  null?  value.trim()  : "null ";  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value!=  null?  value.trim()  : "null ";  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value!=  null?  value.trim()  : "null ";	  String    argName    =    value.trim();    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
234	[BUG]  [BUGGY]  String  argName  =  value.trim().trim();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value.trim().trim();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.trim().trim();	  String    argName    =    value.trim();    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
235	[BUG]  [BUGGY]  ||(values.size()  ==  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.size()  ==  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.size()  ==  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  ||(values.size()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
236	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs(value,  UNLIMITED_VALUES);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  numberOfArgs  =  getNumberOfArgs(value,  UNLIMITED_VALUES);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs(value,  UNLIMITED_VALUES);	  int    numberOfArgs    =    getNumberOfArgs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
237	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs(value.length());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  numberOfArgs  =  getNumberOfArgs(value.length());  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs(value.length());	  int    numberOfArgs    =    getNumberOfArgs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
238	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs(value  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  numberOfArgs  =  getNumberOfArgs(value  +  1);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs(value  +  1);	  int    numberOfArgs    =    getNumberOfArgs(value);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
239	[BUG]  [BUGGY]  if(hasArg())  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg())  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg())  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(	  if(this.values!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
240	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException	  if(this.values!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
241	[BUG]  [BUGGY]  if(value.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(value.length()    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
242	[BUG]  [BUGGY]  ((  List)values.get(value)).add(this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ((  List)values.get(value)).add(this);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	((  List)values.get(value)).add(this);	  if(value.length()    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
243	[BUG]  [BUGGY]  ((  value!=  null)||(value.length()  ==  0))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ((  value!=  null)||(value.length()  ==  0))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	((  value!=  null)||(value.length()  ==  0))  {  throw  new  RuntimeException( " ");  }	  if(value!=    null    ||    value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
244	[BUG]  [BUGGY]  if(value!=  null  ||  value.length()  >=  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null  ||  value.length()  >=  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null  ||  value.length()  >=  0)  {  throw  new  RuntimeException( " ");  }	  if(value!=    null    ||    value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  numberOfArgs.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }	  for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
246	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  &&!hasOptionalArg())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  &&!hasOptionalArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  &&!hasOptionalArg())  {	  if(values    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
247	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  &&!optionalArg.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  &&!optionalArg.isEmpty())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  &&!optionalArg.isEmpty())  {	  if(values    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
248	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  &&!hasErrors())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  &&!hasErrors())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  &&!hasErrors())  {	  if(values    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
249	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  &&!optionalArg)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  &&!optionalArg)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  &&!optionalArg)  {	  if(values    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
250	[BUG]  [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  value.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  value.length()  ==  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  value.length()  ==  0)  {	  if(hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
251	[BUG]  [BUGGY]  if(hasArg  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasArg)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
252	[BUG]  [BUGGY]  if(hasArg  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasArg)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
253	[BUG]  [BUGGY]  if(hasArg  ||  value.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||  value.length()  ==  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||  value.length()  ==  0)  {	  if(hasArg)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
254	[BUG]  [BUGGY]  ||(values.length()  ==  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.length()  ==  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.length()  ==  0  &&  value.charAt(0)  ==  '-'))  {  throw  new  RuntimeException( " ");  }	  ||(values.length()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
255	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException	  if(this.values!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
256	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  &&!cannotAddValue(value))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  &&!cannotAddValue(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  &&!cannotAddValue(value))  {	  if(!hasArg    &&!cannotAddValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
257	[BUG]  [BUGGY]  if(values!=  null  ||!hasArg  &&!cannotAddValue(value))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null  ||!hasArg  &&!cannotAddValue(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null  ||!hasArg  &&!cannotAddValue(value))  {	  if(!hasArg    &&!cannotAddValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
258	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
259	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  ||!hasOptionalArg())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  ||!hasOptionalArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  ||!hasOptionalArg())  {	  if(values    ==    null    ||!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
260	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  ||!optionalArg)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  ||!optionalArg)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  ||!optionalArg)  {	  if(values    ==    null    ||!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
261	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  ||!optionalArg())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasArg  ||!optionalArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  ||!optionalArg())  {	  if(values    ==    null    ||!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
262	[BUG]  [BUGGY]  Iterator  <  String>  it  =  selectedIterator();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  Iterator  <  String>  it  =  selectedIterator();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	Iterator  <  String>  it  =  selectedIterator();	  Iterator    <    String>    it    =    values.iterator();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
263	[BUG]  [BUGGY]  if(!hasArgs  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArgs  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArgs  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {	  if(!hasArgs)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
264	[BUG]  [BUGGY]  if(hasArgs()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArgs()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArgs()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
265	[BUG]  [BUGGY]  if(hasArgs()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArgs()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArgs()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
266	[BUG]  [BUGGY]  if(hasArgName())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArgName())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArgName())  {	  if(hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
267	[BUG]  [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {	  if(hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
268	[BUG]  [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  value.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  value.length()  ==  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  value.length()  ==  0)  {	  if(hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
269	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
270	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "	  if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
271	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException(	  if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
272	[BUG]  [BUGGY]  if  (value!=  null  ||!hasArg()  &&  value.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (value!=  null  ||!hasArg()  &&  value.length()  >  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (value!=  null  ||!hasArg()  &&  value.length()  >  0)  {	  if    (!hasArg()    &&    value.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
273	[BUG]  [BUGGY]  String  value  =(String)this.values.get(value  -  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.get(value  -  2);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(value  -  2);	  String    value    =(String)this.values.get(value    -    1);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
274	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(	  if(this.values!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
275	[BUG]  [BUGGY]  while(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  while(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	while(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
276	[BUG]  [BUGGY]  while(value!=  null  &&  value.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  while(value!=  null  &&  value.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	while(value!=  null  &&  value.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
277	[BUG]  [BUGGY]  List  <  String>  values  =  Lists.newArrayList(argName);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  List  <  String>  values  =  Lists.newArrayList(argName);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	List  <  String>  values  =  Lists.newArrayList(argName);	  List    <    String>    values    =    Lists.newArrayList(value);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
278	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
279	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list.add( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list.add( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list.add( " ");  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
280	[BUG]  [BUGGY]  String  argName  =  value  ==  null?  value.trim()  : "null ";  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value  ==  null?  value.trim()  : "null ";  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value  ==  null?  value.trim()  : "null ";	  String    argName    =    value.trim();    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
281	[BUG]  [BUGGY]  List  <  String>  values  =  Lists.newArrayList(values,  description);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  List  <  String>  values  =  Lists.newArrayList(values,  description);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	List  <  String>  values  =  Lists.newArrayList(values,  description);	  List    <    String>    values    =    Lists.newArrayList(values);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
282	[BUG]  [BUGGY]  if(values  ==  null  ||!hasMoreArg  &&!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasMoreArg  &&!acceptsArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasMoreArg  &&!acceptsArg())  {	  if(values    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
283	[BUG]  [BUGGY]  while(value.length()  <  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  while(value.length()  <  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	while(value.length()  <  1)  {  throw  new  IllegalArgumentException( " ");  }	  while(value.length()    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
284	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
285	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
286	[BUG]  [BUGGY]  String  value  =(String)this.values.get(value).trim();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  value  =(String)this.values.get(value).trim();  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(value).trim();	  String    value    =(String)this.values.get(value).toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
287	[BUG]  [BUGGY]  if(value!=  null  &&!hasArg  &&!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null  &&!hasArg  &&!acceptsArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null  &&!hasArg  &&!acceptsArg())  {	  if(value    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
288	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg  &&!isExported(value.toLowerCase()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||!hasArg  &&!isExported(value.toLowerCase()))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg  &&!isExported(value.toLowerCase()))  {	  if(value    ==    null    ||!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
289	[BUG]  [BUGGY]  String  argName  =  value.substring(0,  value.length())+  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value.substring(0,  value.length())+  1;  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.substring(0,  value.length())+  1;	  String    argName    =    value.substring(0,    value.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
290	[BUG]  [BUGGY]  if(!hasArg())  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg())  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg())  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(	  if(value!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
291	[BUG]  [BUGGY]  if(hasOptionalArg()  ||  hasValues())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasOptionalArg()  ||  hasValues())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasOptionalArg()  ||  hasValues())  {	  if    (hasOptionalArg())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
292	[BUG]  [BUGGY]  if(value!=  null  &&  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null  &&  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null  &&  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
293	[BUG]  [BUGGY]  ArrayList  <  String>  values  =  Lists.newArrayListWithCapacity(values);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ArrayList  <  String>  values  =  Lists.newArrayListWithCapacity(values);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	ArrayList  <  String>  values  =  Lists.newArrayListWithCapacity(values);	  ArrayList    <    String>    values    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
294	[BUG]  [BUGGY]  if(hasArg()  ||  isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg()  ||  isEmpty())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  ||  isEmpty())  {	  if(hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
295	[BUG]  [BUGGY]  if(hasArg  ||  isEnabled(Feature.QUOTE_FIELD_NON_NULL_VALUES))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||  isEnabled(Feature.QUOTE_FIELD_NON_NULL_VALUES))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||  isEnabled(Feature.QUOTE_FIELD_NON_NULL_VALUES))  {	  if(hasArg)    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
296	[BUG]  [BUGGY]  if(!hasArg())  {  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg())  {  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg())  {  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(	  if(this.values!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
297	[BUG]  [BUGGY]  if(value.length()  ==  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value.length()  ==  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value.length()  ==  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  if(value!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
298	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full	  if(value    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "Cannot    add    value,    list    full.       ");    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
299	[BUG]  [BUGGY]  if(!hasArg  &&!optionalArgs.isEmpty()  &&  value.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg  &&!optionalArgs.isEmpty()  &&  value.length()  >  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&!optionalArgs.isEmpty()  &&  value.length()  >  0)  {	  if(!hasArg    &&!optionalArgs.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
300	[BUG]  [BUGGY]  List  <  String>  values  =  Lists.newArrayListWithCapacity(value)+  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  List  <  String>  values  =  Lists.newArrayListWithCapacity(value)+  1;  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	List  <  String>  values  =  Lists.newArrayListWithCapacity(value)+  1;	  List    <    String>    values    =    Lists.newArrayListWithCapacity(value);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
301	[BUG]  [BUGGY]  while(value.length()!=  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  while(value.length()!=  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	while(value.length()!=  0)  {  throw  new  RuntimeException( " ");  }	  if(value.length()!=    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
302	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
303	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
304	[BUG]  [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
306	[BUG]  [BUGGY]  this.values.add(new  char[]  {  value  }  );  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  this.values.add(new  char[]  {  value  }  );  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	this.values.add(new  char[]  {  value  }  );	  this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
307	[BUG]  [BUGGY]  this.values.add(this.argName);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  this.values.add(this.argName);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	this.values.add(this.argName);	  this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
308	[BUG]  [BUGGY]  while(value!=  null  &&  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  while(value!=  null  &&  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	while(value!=  null  &&  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    ==    null    ||    value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
309	[BUG]  [BUGGY]  if(!hasArg  &&  cannotAddValue(value))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg  &&  cannotAddValue(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&  cannotAddValue(value))  {	  if(!hasArg    &&!cannotAddValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
310	[BUG]  [BUGGY]  if(value.length()  ==  0  ||!hasArg  &&!cannotAddValue(value))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value.length()  ==  0  ||!hasArg  &&!cannotAddValue(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value.length()  ==  0  ||!hasArg  &&!cannotAddValue(value))  {	  if(!hasArg    &&!cannotAddValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
311	[BUG]  [BUGGY]  if(!hasArg  &&!cannotAddValue(value,  list.size()))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg  &&!cannotAddValue(value,  list.size()))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&!cannotAddValue(value,  list.size()))  {	  if(!hasArg    &&!cannotAddValue(value))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
312	[BUG]  [BUGGY]  if(hasArg  ||  isEmpty())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||  isEmpty())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||  isEmpty())  {	  if    (hasArg    &&!acceptsList())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
313	[BUG]  [BUGGY]  if(hasArg  ||  acceptsList())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||  acceptsList())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||  acceptsList())  {	  if    (hasArg    &&!acceptsList())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
314	[BUG]  [BUGGY]  if(hasArg  &&!getValues())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  &&!getValues())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  &&!getValues())  {	  if    (hasArg    &&!acceptsList())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
315	[BUG]  [BUGGY]  if(hasArg  &&!isLongOpt())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  &&!isLongOpt())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  &&!isLongOpt())  {	  if    (hasArg    &&!acceptsList())    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	  for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
317	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( " ");  }	  for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
318	[BUG]  [BUGGY]  if(!hasArg  &&  cannotAddValues())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg  &&  cannotAddValues())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&  cannotAddValues())  {	  if(!hasArg    &&!cannotAddValues())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
319	[BUG]  [BUGGY]  if(!hasArg  ||  cannotAddValues())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg  ||  cannotAddValues())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  ||  cannotAddValues())  {	  if(!hasArg    &&!cannotAddValues())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
320	[BUG]  [BUGGY]  if(values  ==  null  ||!hasMoreArgs  ||!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(values  ==  null  ||!hasMoreArgs  ||!acceptsArg())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasMoreArgs  ||!acceptsArg())  {	  if(values    ==    null    ||!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
321	[BUG]  [BUGGY]  String  argName  =  value!=  null?  value.toUpperCase()  : "null ";  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value!=  null?  value.toUpperCase()  : "null ";  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value!=  null?  value.toUpperCase()  : "null ";	  String    argName    =    value.toUpperCase();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
322	[BUG]  [BUGGY]  if(hasArg  ||  cannotAddValues())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  ||  cannotAddValues())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||  cannotAddValues())  {	  if(hasArg    ||!cannotAddValues())    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
323	[BUG]  [BUGGY]  String  argName  =  value.trim().toLowerCase(Locale.ENGLISH);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  String  argName  =  value.trim().toLowerCase(Locale.ENGLISH);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.trim().toLowerCase(Locale.ENGLISH);	  String    argName    =    value.toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
324	[BUG]  [BUGGY]  if(value.length()  ==  0)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value.length()  ==  0)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value.length()  ==  0)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(	  if(this.values!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
325	[BUG]  [BUGGY]  while(value!=  null  &&  value.length()  >  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  while(value!=  null  &&  value.length()  >  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	while(value!=  null  &&  value.length()  >  0)  {  throw  new  RuntimeException( " ");  }	  if(value!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
326	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }	  if(value    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
327	[BUG]  [BUGGY]  if(hasArgs  &&  isEmpty())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArgs  &&  isEmpty())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArgs  &&  isEmpty())  {	  if(!hasArgs)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
328	[BUG]  [BUGGY]  if(hasArgs  ||  value.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArgs  ||  value.length()  ==  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArgs  ||  value.length()  ==  0)  {	  if(!hasArgs)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
329	[BUG]  [BUGGY]  if(hasArgs()  ||  isEmpty())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArgs()  ||  isEmpty())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArgs()  ||  isEmpty())  {	  if    (!hasArgs())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
330	[BUG]  [BUGGY]  if(!hasArgs()  ||  value.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArgs()  ||  value.length()!=  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArgs()  ||  value.length()!=  0)  {	  if    (!hasArgs())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
331	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().indexOf(value);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().indexOf(value);  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs().indexOf(value);	  int    numberOfArgs    =    getNumberOfArgs().size()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
332	[BUG]  [BUGGY]  if(!hasArg())  {  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg())  {  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg())  {  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(	  if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
333	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg  ||!acceptsArgName())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||!hasArg  ||!acceptsArgName())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg  ||!acceptsArgName())  {	  if(!hasArg    ||!acceptsArgName())    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
334	[BUG]  [BUGGY]  if  (!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if  (!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {	  if    (!hasArg()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES,    value))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
335	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg()  &&  value.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||!hasArg()  &&  value.length()  >  0)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg()  &&  value.length()  >  0)  {	  if    (!hasArg()    &&    value.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
336	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)this.values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "	  if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
337	[BUG]  [BUGGY]  if(!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  1)  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  1)  {	  if    (!hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)&&    value.length()    ==    UNLIMITED_VALUES)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
338	[BUG]  [BUGGY]  if(value  ==  null  ||  value.length()  <  =  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value  ==  null  ||  value.length()  <  =  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||  value.length()  <  =  0)  {  throw  new  RuntimeException( " ");  }	  if(value    ==    null    ||    value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
339	[BUG]  [BUGGY]  ||(values.size()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(values.size()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.size()  ==  1  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }	  ||(values.length()    ==    0    &&    value.charAt(0)!=    '-'))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
340	[BUG]  [BUGGY]  if(hasArg  &&!isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  &&!isEmpty())  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  &&!isEmpty())  {	  if    (hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
341	[BUG]  [BUGGY]  if(hasArg  &&!isExported(value))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(hasArg  &&!isExported(value))  {  [BUGGY]      {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  &&!isExported(value))  {	  if    (hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
342	[BUG]  [BUGGY]  ||(value.length()  <  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  ||(value.length()  <  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  <  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(value.length()    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
343	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	throw  new  IllegalArgumentException( " ");	  if(value.length()    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
344	[BUG]  [BUGGY]  if(value.length()  ==  0)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value.length()  ==  0)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value.length()  ==  0)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "	  if(this.values!=    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
345	[BUG]  [BUGGY]  if(value!=  null  &&  value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  void  add(String  value)  {      [BUGGY]  if(value!=  null  &&  value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      if  (!acceptsArg())  {  {  throw  new  RuntimeException(     "Cannot  add  value,  list  full.     ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null  &&  value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }	  if(value!=    null    ||    value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
