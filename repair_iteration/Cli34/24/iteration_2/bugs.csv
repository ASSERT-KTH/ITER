bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||(values.size()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  ||(values.size()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.size()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }	      if(value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
2	[BUG]  [BUGGY]  ||(value.length()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  ||(value.length()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }	      if(value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
3	[BUG]  [BUGGY]  ||(values.size()  ==  0  &&  value.charAt(0)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  ||(values.size()  ==  0  &&  value.charAt(0)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.size()  ==  0  &&  value.charAt(0)!=  '/'))  {  throw  new  IllegalArgumentException( " ");  }	      if(value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
4	[BUG]  [BUGGY]  String  value  =(String)this.values.get(1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  String  value  =(String)this.values.get(1);  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(1);	      String    value    =(String)this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  char  value  =(char)this.values.get(0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  char  value  =(char)this.values.get(0);  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	char  value  =(char)this.values.get(0);	      String    value    =(String)this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  if  (hasArg  &&!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if  (hasArg  &&!acceptsArg())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasArg  &&!acceptsArg())  {	  if    (hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
9	[BUG]  [BUGGY]  ArrayList  <  String>  values  =  Lists.newArrayList();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  ArrayList  <  String>  values  =  Lists.newArrayList();  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	ArrayList  <  String>  values  =  Lists.newArrayList();	      List    <    String>    values    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
10	[BUG]  [BUGGY]  List  <  String>  values  =  Lists.newArrayList(values);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  List  <  String>  values  =  Lists.newArrayList(values);  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	List  <  String>  values  =  Lists.newArrayList(values);	      List    <    String>    values    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
11	[BUG]  [BUGGY]  List  <  String>  values  =  Lists.newArrayList(value);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  List  <  String>  values  =  Lists.newArrayList(value);  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	List  <  String>  values  =  Lists.newArrayList(value);	      List    <    String>    values    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
12	[BUG]  [BUGGY]  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( " ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
14	[BUG]  [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
15	[BUG]  [BUGGY]  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
16	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
18	[BUG]  [BUGGY]  String  argName  =  value.toUpperCase();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  String  argName  =  value.toUpperCase();  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.toUpperCase();	      String    argName    =    value.toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
19	[BUG]  [BUGGY]  String  argName  =  value.toLowerCase()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  String  argName  =  value.toLowerCase()  +  1;  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.toLowerCase()  +  1;	      String    argName    =    value.toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
20	[BUG]  [BUGGY]  String  argName  =  value.substring(0,  value.length()  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  String  argName  =  value.substring(0,  value.length()  -  1);  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.substring(0,  value.length()  -  1);	      String    argName    =    value.toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  ||(value.length()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  ||(value.length()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }	      if(value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
22	[BUG]  [BUGGY]  ||(values.length()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  ||(values.length()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(values.length()  ==  0  &&  value.charAt(0)!=  '-'))  {  throw  new  RuntimeException( " ");  }	      if(value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
23	[BUG]  [BUGGY]  ||(value.length()  ==  0  &&  value.charAt(0)!=  '-'))  throw  new  RuntimeException( " ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  ||(value.length()  ==  0  &&  value.charAt(0)!=  '-'))  throw  new  RuntimeException( " ");  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	||(value.length()  ==  0  &&  value.charAt(0)!=  '-'))  throw  new  RuntimeException( " ");	      if(value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
24	[BUG]  [BUGGY]  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
26	[BUG]  [BUGGY]  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException(	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
29	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
30	[BUG]  [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
31	[BUG]  [BUGGY]  if  (hasArg  &&!acceptsList())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if  (hasArg  &&!acceptsList())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasArg  &&!acceptsList())  {	  if    (hasArg    ||!acceptsList())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
32	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().size()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().size()  -  1;  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs().size()  -  1;	      int    numberOfArgs    =    getNumberOfArgs().size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().size()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().size()  +  1;  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs().size()  +  1;	      int    numberOfArgs    =    getNumberOfArgs().size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  char  numberOfArgs  =  getNumberOfArgs().size();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  char  numberOfArgs  =  getNumberOfArgs().size();  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	char  numberOfArgs  =  getNumberOfArgs().size();	      int    numberOfArgs    =    getNumberOfArgs().size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs()  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  int  numberOfArgs  =  getNumberOfArgs()  -  1;  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs()  -  1;	      int    numberOfArgs    =    getNumberOfArgs();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  int  numberOfArgs  =  getNumberOfArgs()  +  1;  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs()  +  1;	      int    numberOfArgs    =    getNumberOfArgs();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
37	[BUG]  [BUGGY]  char  numberOfArgs  =  getNumberOfArgs();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  char  numberOfArgs  =  getNumberOfArgs();  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	char  numberOfArgs  =  getNumberOfArgs();	      int    numberOfArgs    =    getNumberOfArgs();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
38	[BUG]  [BUGGY]  if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
39	[BUG]  [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  if  (hasOptionalArg())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if  (hasOptionalArg())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasOptionalArg())  {	  if    (!hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  if  (!hasArgs())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if  (!hasArgs())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArgs())  {	  if    (!hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
42	[BUG]  [BUGGY]  if(hasArg())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(hasArg())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg())  {	  if    (!hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
43	[BUG]  [BUGGY]  if  (!hasArg()  &&  value.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if  (!hasArg()  &&  value.length()  >  0)  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg()  &&  value.length()  >  0)  {	  if    (!hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
44	[BUG]  [BUGGY]  String  value  =(String)this.values.get(value  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  String  value  =(String)this.values.get(value  -  1);  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(value  -  1);	      String    value    =(String)this.values.get(value);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
45	[BUG]  [BUGGY]  String  value  =(String)this.values.get(value).toLowerCase();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  String  value  =(String)this.values.get(value).toLowerCase();  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(value).toLowerCase();	      String    value    =(String)this.values.get(value);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
46	[BUG]  [BUGGY]  String  value  =(String)this.values.get(value  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  String  value  =(String)this.values.get(value  +  1);  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(value  +  1);	      String    value    =(String)this.values.get(value);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
47	[BUG]  [BUGGY]  List  <  String>  values  =  Lists.newArrayListWithCapacity(value);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  List  <  String>  values  =  Lists.newArrayListWithCapacity(value);  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	List  <  String>  values  =  Lists.newArrayListWithCapacity(value);	      List    <    String>    values    =    Lists.newArrayList();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
48	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
49	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( " ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
50	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
51	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
52	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  ||!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(values  ==  null  ||!hasArg  ||!acceptsArg())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  ||!acceptsArg())  {	  if(!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
53	[BUG]  [BUGGY]  if(values  ==  null  ||!hasArg  &&!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(values  ==  null  ||!hasArg  &&!acceptsArg())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null  ||!hasArg  &&!acceptsArg())  {	  if(!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
54	[BUG]  [BUGGY]  if(!hasArg  &&!cannotAddValues())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(!hasArg  &&!cannotAddValues())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&!cannotAddValues())  {	  if(!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
55	[BUG]  [BUGGY]  if(!hasArg  &&!cannotAddValue(value))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(!hasArg  &&!cannotAddValue(value))  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&!cannotAddValue(value))  {	  if(!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  if(!hasArg  &&!cannotAddValue())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(!hasArg  &&!cannotAddValue())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&!cannotAddValue())  {	  if(!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
57	[BUG]  [BUGGY]  if  (hasArg  ||!hasOptionalArg())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if  (hasArg  ||!hasOptionalArg())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasArg  ||!hasOptionalArg())  {	  if    (hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
58	[BUG]  [BUGGY]  if(value  ==  null  ||  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value  ==  null  ||  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
59	[BUG]  [BUGGY]  if(value!=  null  ||  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null  ||  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null  ||  value.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
60	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
61	[BUG]  [BUGGY]  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(this.values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
62	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
63	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
64	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException(	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
65	[BUG]  [BUGGY]  if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  value))  {	  if    (!hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
66	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
67	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
68	[BUG]  [BUGGY]  String  argName  =  value.toLowerCase(Locale.ENGLISH);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  String  argName  =  value.toLowerCase(Locale.ENGLISH);  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.toLowerCase(Locale.ENGLISH);	      String    argName    =    value.toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
69	[BUG]  [BUGGY]  String  argName  =  value.trim();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  String  argName  =  value.trim();  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value.trim();	      String    argName    =    value.toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
70	[BUG]  [BUGGY]  if  (hasArg  ||!isLocal())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if  (hasArg  ||!isLocal())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (hasArg  ||!isLocal())  {	  if    (hasArg    ||!acceptsList())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
71	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
72	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
73	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values!=  null)  {  throw  new  RuntimeException( "	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
74	[BUG]  [BUGGY]  if(value  ==  null  ||  value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value  ==  null  ||  value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||  value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }	      if(value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
75	[BUG]  [BUGGY]  if(value!=  null  ||  value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null  ||  value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null  ||  value.length()  ==  0)  {  throw  new  RuntimeException( " ");  }	      if(value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
76	[BUG]  [BUGGY]  this.values.add(value);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  this.values.add(value);  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	this.values.add(value);	      if(value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
77	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs(value);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  int  numberOfArgs  =  getNumberOfArgs(value);  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs(value);	      int    numberOfArgs    =    getNumberOfArgs();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
78	[BUG]  [BUGGY]  if  (!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if  (!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if  (!hasArg()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  value.length()  ==  UNLIMITED_VALUES)  {	  if    (!hasArg()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().size()  /  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  int  numberOfArgs  =  getNumberOfArgs().size()  /  2;  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	int  numberOfArgs  =  getNumberOfArgs().size()  /  2;	      int    numberOfArgs    =    getNumberOfArgs().size();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
80	[BUG]  [BUGGY]  if(value.length()  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value.length()  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value.length()  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
81	[BUG]  [BUGGY]  while(value.length()  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  while(value.length()  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	while(value.length()  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
82	[BUG]  [BUGGY]  Iterator  <  String>  it  =  values.iterator();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  Iterator  <  String>  it  =  values.iterator();  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	Iterator  <  String>  it  =  values.iterator();	      if(value.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
83	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg  ||!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value  ==  null  ||!hasArg  ||!acceptsArg())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg  ||!acceptsArg())  {	  if(!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
84	[BUG]  [BUGGY]  if(!hasArg  ||!acceptsArgName())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(!hasArg  ||!acceptsArgName())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  ||!acceptsArgName())  {	  if(!hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
85	[BUG]  [BUGGY]  if(value  ==  null  ||!hasArg  &&!acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value  ==  null  ||!hasArg  &&!acceptsArg())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null  ||!hasArg  &&!acceptsArg())  {	  if(!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
86	[BUG]  [BUGGY]  if(!hasArg  &&!optionalArgs.contains(value))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(!hasArg  &&!optionalArgs.contains(value))  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&!optionalArgs.contains(value))  {	  if(!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
87	[BUG]  [BUGGY]  if(!hasArg  &&!optionalArgs.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(!hasArg  &&!optionalArgs.isEmpty())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArg  &&!optionalArgs.isEmpty())  {	  if(!hasArg    &&!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
88	[BUG]  [BUGGY]  String  argName  =  value!=  null?  value.toLowerCase()  : "null ";  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  String  argName  =  value!=  null?  value.toLowerCase()  : "null ";  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  argName  =  value!=  null?  value.toLowerCase()  : "null ";	      String    argName    =    value.toLowerCase();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
89	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  throw  new  RuntimeException( " ");  }	      if(value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
90	[BUG]  [BUGGY]  if(value.length()!=  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value.length()!=  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value.length()!=  0)  {  throw  new  RuntimeException( " ");  }	      if(value.length()    ==    0)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
91	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
92	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
93	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list!=  null)  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
94	[BUG]  [BUGGY]  if(hasArg)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(hasArg)  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg)  {	  if    (!hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
95	[BUG]  [BUGGY]  if(!hasArgs)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(!hasArgs)  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(!hasArgs)  {	  if    (!hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
96	[BUG]  [BUGGY]  if(hasArg  ||!cannotAddValues())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(hasArg  ||!cannotAddValues())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||!cannotAddValues())  {	  if    (hasArg    ||!acceptsList())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
97	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
98	[BUG]  [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(values  ==  null)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  List  values  =(List)this.values.get(i);  if(values.contains(value))  {  throw  new  RuntimeException( "	      if(values    ==    null)    {    for(int    i    =    0;    i    <    this.values.size();    ++i)    {    List    values    =(List)this.values.get(i);    if(values.contains(value))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
99	[BUG]  [BUGGY]  String  value  =(String)this.values.get(index);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  String  value  =(String)this.values.get(index);  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	String  value  =(String)this.values.get(index);	      String    value    =(String)this.values.get(0);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
100	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
101	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
102	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }  [BUGGY]    if  (!acceptsArg())  {  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  list  =(List)values.get(i);  if(list.isEmpty())  {  throw  new  RuntimeException( "Cannot  add  value,  list  full.   ");  }	      if(values    ==    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    list    =(List)values.get(i);    if(list.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
103	[BUG]  [BUGGY]  if(hasArg  ||!hasErrors())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(hasArg  ||!hasErrors())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||!hasErrors())  {	  if    (hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
104	[BUG]  [BUGGY]  if(hasArg  ||!hasMoreArgs())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {    [BUGGY]  if(hasArg  ||!hasMoreArgs())  {  [BUGGY]    {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);  }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	467	468	2	replace	if(hasArg  ||!hasMoreArgs())  {	  if    (hasArg    ||!acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
