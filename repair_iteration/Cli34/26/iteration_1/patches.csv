bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
2	[BUG]  [BUGGY]  while(values!=  null  &&  values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  while(values!=  null  &&  values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	while(values!=  null  &&  values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
3	[BUG]  [BUGGY]  int  numberOfArgs  =  values.size();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  int  numberOfArgs  =  values.size();  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	int  numberOfArgs  =  values.size();	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( "  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( "	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(value);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(value);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    values.add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
7	[BUG]  [BUGGY]  while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(value);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(value);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    values.add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
8	[BUG]  [BUGGY]  while(values!=  null  &&  values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(value);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  while(values!=  null  &&  values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	while(values!=  null  &&  values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(value);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    values.add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }	      if(values.size()    >    0)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  int  valuessize()  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  int  valuessize()  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	int  valuessize()  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }	      if(values.size()    >    0)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  types.size();  ++i)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  types.size();  ++i)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  types.size();  ++i)  {  add(values[i]);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException( " ");  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.endsWith(sep))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
14	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException( "  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException( "	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.endsWith(sep))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
15	[BUG]  [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException(  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException(	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.endsWith(sep))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException(  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException(	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.endsWith(sep))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException( " ");  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.startsWith(sep))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  Il  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  Il  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  Il	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.startsWith(sep))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
19	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException( "  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException( "  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException( "	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.startsWith(sep))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException(  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException(	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.startsWith(sep))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  if(numberOfArgs!=  null)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(numberOfArgs!=  null)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(numberOfArgs!=  null)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
25	[BUG]  [BUGGY]  int  hasArg  =  values.size();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  int  hasArg  =  values.size();  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	int  hasArg  =  values.size();	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i  +  1,  value);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i  +  1,  value);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i  +  1,  value);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    values.add(i    +    1,    value);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
27	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i  +  1,  value);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i  +  1,  value);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i  +  1,  value);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    values.add(i    +    1,    value);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
28	[BUG]  [BUGGY]  while(values!=  null)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i  +  1,  value);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  while(values!=  null)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i  +  1,  value);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	while(values!=  null)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i  +  1,  value);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    values.add(i    +    1,    value);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.equals(opt))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.equals(opt))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.equals(opt))  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.equals(opt))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
30	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  value  =(List)values.get(i);  if(opt.equals(value))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  value  =(List)values.get(i);  if(opt.equals(value))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  value  =(List)values.get(i);  if(opt.equals(value))  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.equals(opt))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
32	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  IllegalArgumentException( "  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  IllegalArgumentException( "  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  IllegalArgumentException( "	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
34	[BUG]  [BUGGY]  while(values!=  null  &&  values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  while(values!=  null  &&  values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	while(values!=  null  &&  values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
35	[BUG]  [BUGGY]  while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
36	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(value);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(value);  }	  if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  if(values.size()  >  1)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values.size()  >  1)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values.size()  >  1)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }	      if(values.size()    >    0)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException( " ");  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.startsWith(sep))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
39	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException( "  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException( "  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException( "	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.startsWith(sep))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException(  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException(  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException(	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.startsWith(sep))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
41	[BUG]  [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.startsWith(sep))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
42	[BUG]  [BUGGY]  this.values.add(longOpt);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  this.values.add(longOpt);  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	this.values.add(longOpt);	      this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
43	[BUG]  [BUGGY]  this.values.add(this.opt);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  this.values.add(this.opt);  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	this.values.add(this.opt);	      this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  this.values.add(value  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  this.values.add(value  +  1);  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	this.values.add(value  +  1);	      this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  if(numberOfArgs  ==  1)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(numberOfArgs  ==  1)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(numberOfArgs  ==  1)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }	      if(values.size()    ==    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
46	[BUG]  [BUGGY]  if(numberOfArgs!=  1)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(numberOfArgs!=  1)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(numberOfArgs!=  1)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }	      if(values.size()    ==    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
48	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  value  =(List)values.get(i);  if(value!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  value  =(List)values.get(i);  if(value!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  value  =(List)values.get(i);  if(value!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
49	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  string  =(List)values.get(i);  if(string!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  string  =(List)values.get(i);  if(string!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  string  =(List)values.get(i);  if(string!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
50	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.equals(opt))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.equals(opt))  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.equals(opt))  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.equals(opt))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
51	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  longOpt  =(List)values.get(i);  if(opt.equals(longOpt))  {  throw  new  RuntimeException  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  longOpt  =(List)values.get(i);  if(opt.equals(longOpt))  {  throw  new  RuntimeException  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  longOpt  =(List)values.get(i);  if(opt.equals(longOpt))  {  throw  new  RuntimeException	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.equals(opt))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException( " ");  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.startsWith(sep))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
53	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  RuntimeException	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.startsWith(sep))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
54	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
55	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  longOpt  =(List)values.get(i);  if(longOpt!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  longOpt  =(List)values.get(i);  if(longOpt!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  longOpt  =(List)values.get(i);  if(longOpt!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
56	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  add(values[i]);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
57	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  i++)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  i++)  {  add(values[i]);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  i++)  {  add(values[i]);  }	  if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  value.size();  i++)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  value.size();  i++)  {  add(values[i]);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  value.size();  i++)  {  add(values[i]);  }	  if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
59	[BUG]  [BUGGY]  while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
60	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
61	[BUG]  [BUGGY]  while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(i);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
62	[BUG]  [BUGGY]  this.values.add(value,  longOpt);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  this.values.add(value,  longOpt);  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	this.values.add(value,  longOpt);	      this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  lengthOfArgs;  ++i)  {  values.add(i  +  1,  value);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  lengthOfArgs;  ++i)  {  values.add(i  +  1,  value);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  lengthOfArgs;  ++i)  {  values.add(i  +  1,  value);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    values.add(i    +    1,    value);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
64	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.endsWith(sep))  {  throw  new  RuntimeException( " ");  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.endsWith(sep))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
65	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }	      if(values.size()    >    0)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
66	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException( " ");  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.startsWith(sep))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
67	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException( "  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException( "  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  str  =(String)values.get(i);  if(str.startsWith(sep))  {  throw  new  IllegalArgumentException( "	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    str    =(String)values.get(i);    if(str.startsWith(sep))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
68	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(value);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(value);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    values.add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
69	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(longOpt);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(longOpt);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  values.add(longOpt);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    values.add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
70	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
71	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
72	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  value  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  value  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  value  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
73	[BUG]  [BUGGY]  if(opt!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(opt!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(opt!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
74	[BUG]  [BUGGY]  this.values.add(argName);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  this.values.add(argName);  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	this.values.add(argName);	      this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
75	[BUG]  [BUGGY]  this.values.add(name);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  this.values.add(name);  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	this.values.add(name);	      this.values.add(value);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
76	[BUG]  [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }	  if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
77	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  values.add(value);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  values.add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  values.add(value);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    values.add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
78	[BUG]  [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
79	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  add(values[i]);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
80	[BUG]  [BUGGY]  if(values.size()  >  1)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values.size()  >  1)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values.size()  >  1)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }	      if(values.size()    >    0)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
81	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.equals(opt))  {  throw  new  RuntimeException( " ");  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.equals(opt))  {  throw  new  RuntimeException( " ");  }  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.equals(opt))  {  throw  new  RuntimeException( " ");  }  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.equals(opt))    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  values.add(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  values.add(i);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  values.add(i);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
83	[BUG]  [BUGGY]  while(values.size()  >  1)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  while(values.size()  >  1)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	while(values.size()  >  1)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  values.add(i);  }	      if(values.size()    ==    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
84	[BUG]  [BUGGY]  if(opt!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(opt!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(opt!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
85	[BUG]  [BUGGY]  if(opt!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)this.values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(opt!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)this.values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(opt!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)this.values.get(i);  if(opt.isEmpty())  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt.isEmpty())    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
86	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.numberOfArgs;  ++i)  {  values.add(i);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.numberOfArgs;  ++i)  {  values.add(i);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  this.numberOfArgs;  ++i)  {  values.add(i);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    values.add(i);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
87	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.numberOfArgs;  ++i)  {  values.add(i  +  1,  value);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  this.numberOfArgs;  ++i)  {  values.add(i  +  1,  value);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  this.numberOfArgs;  ++i)  {  values.add(i  +  1,  value);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    values.add(i    +    1,    value);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
88	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(null);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(null);  }  [BUGGY]      [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(null);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
89	[BUG]  [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  add(String  value)  {  if  (!acceptsArg())  {  throw  new  RuntimeException(   "Cannot  add  value,  list  full.   ");  }  values.add(value);    [BUGGY]  if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  add  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	474	474	2	replace	if(values  ==  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  List  opt  =(List)values.get(i);  if(opt!=  null)  {  throw  new  RuntimeException( " ");  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    List    opt    =(List)values.get(i);    if(opt!=    null)    {    throw    new    RuntimeException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
