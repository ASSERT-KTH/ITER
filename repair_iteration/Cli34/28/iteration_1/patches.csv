bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  option  =(Option)this.options.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  option  =(Option)this.options.clone();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	option  =(Option)this.options.clone();	  option    =(Option)super.clone();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  Object  option  =  this.super.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Object  option  =  this.super.clone();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Object  option  =  this.super.clone();	      Object    option    =    super.clone();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  Object  option  =  super.cloneOption();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Object  option  =  super.cloneOption();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Object  option  =  super.cloneOption();	      Object    option    =    super.clone();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  Class  <?>  opt  =  getOption(this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getOption(this);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getOption(this);	      Class    <?>    opt    =    getOption(null);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  Class  <?>  opt  =  getOption(null,  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getOption(null,  null);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getOption(null,  null);	      Class    <?>    opt    =    getOption(null);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  Class  <?>  opt  =  getOption(type);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getOption(type);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getOption(type);	      Class    <?>    opt    =    getOption(null);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  Class  <?>  option  =  getOption(argName);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  option  =  getOption(argName);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  option  =  getOption(argName);	      Class    <?>    option    =    getOption(defaultValue);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  Class  <?>  option  =  getOption(defaultValue,  description);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  option  =  getOption(defaultValue,  description);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  option  =  getOption(defaultValue,  description);	      Class    <?>    option    =    getOption(defaultValue);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  Class  <?>  option  =  getOption(option);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  option  =  getOption(option);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  option  =  getOption(option);	      Class    <?>    option    =    getOption(defaultValue);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  Object  option  =(Option)this.super.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Object  option  =(Option)this.super.clone();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Object  option  =(Option)this.super.clone();	      Object    option    =(Option)super.clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  Object  option  =(Option)this.options.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Object  option  =(Option)this.options.clone();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Object  option  =(Option)this.options.clone();	      Object    option    =(Option)super.clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
12	[BUG]  [BUGGY]  options  =(Option)this.options.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  options  =(Option)this.options.clone();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	options  =(Option)this.options.clone();	  Option    option    =(Option)this.options.clone();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
13	[BUG]  [BUGGY]  Option  option  =(Option)this.opts.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Option  option  =(Option)this.opts.clone();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Option  option  =(Option)this.opts.clone();	  Option    option    =(Option)this.options.clone();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
14	[BUG]  [BUGGY]  Class  <?>  opt  =  getOption(defaultValue,  description);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getOption(defaultValue,  description);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getOption(defaultValue,  description);	      Class    <?>    opt    =    getOption(defaultValue);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  Class  <?>  opt  =  getOption(longOpt);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getOption(longOpt);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getOption(longOpt);	      Class    <?>    opt    =    getOption(defaultValue);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
16	[BUG]  [BUGGY]  Class  <?>  opt  =  getOption(argName);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getOption(argName);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getOption(argName);	      Class    <?>    opt    =    getOption(defaultValue);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
17	[BUG]  [BUGGY]  Option  option  =  this.super.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Option  option  =  this.super.clone();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Option  option  =  this.super.clone();	  Option    option    =    super.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
18	[BUG]  [BUGGY]  Option  option  =  super.cloneOption();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Option  option  =  super.cloneOption();  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Option  option  =  super.cloneOption();	  Option    option    =    super.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
19	[BUG]  [BUGGY]  Class  <?>  opt  =  getLongOpt();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getLongOpt();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getLongOpt();	      Class    <?>    opt    =    getDefaultValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  Class  <?>  opt  =  getOptionalValue();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getOptionalValue();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getOptionalValue();	      Class    <?>    opt    =    getDefaultValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  Class  <?>  opt  =  getDefaultValue().clone();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getDefaultValue().clone();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getDefaultValue().clone();	      Class    <?>    opt    =    getDefaultValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
22	[BUG]  [BUGGY]  Class  <?>  options  =  this.getOptions();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  options  =  this.getOptions();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  options  =  this.getOptions();	      Class    <?>    options    =    getOptions();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  Class  <?>  options  =  super.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  options  =  super.clone();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  options  =  super.clone();	      Class    <?>    options    =    getOptions();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  Class  <?>  options  =  getOptions().clone();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  options  =  getOptions().clone();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  options  =  getOptions().clone();	      Class    <?>    options    =    getOptions();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  Class  <?>  option  =  getOption(this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  option  =  getOption(this);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  option  =  getOption(this);	      Class    <?>    option    =    getOption(null);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  Class  <?>  option  =  getOption(type);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  option  =  getOption(type);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  option  =  getOption(type);	      Class    <?>    option    =    getOption(null);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  Class  <?>  option  =  getOption(null,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  option  =  getOption(null,  null);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  option  =  getOption(null,  null);	      Class    <?>    option    =    getOption(null);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  Option  option  =(Option)this.super.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Option  option  =(Option)this.super.clone();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Option  option  =(Option)this.super.clone();	      Option    option    =(Option)super.clone();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  options  =(Option)super.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  options  =(Option)super.clone();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	options  =(Option)super.clone();	      Option    option    =(Option)super.clone();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  Class  <?>  opt  =  getOption(defaultValue,  value);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getOption(defaultValue,  value);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getOption(defaultValue,  value);	      Class    <?>    opt    =    getOption(defaultValue);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
31	[BUG]  [BUGGY]  Class  <?>  opt  =  getOption(this.defaultValue);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getOption(this.defaultValue);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getOption(this.defaultValue);	      Class    <?>    opt    =    getOption(defaultValue);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
32	[BUG]  [BUGGY]  Class  <?>  options  =  getOptOptions();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  options  =  getOptOptions();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  options  =  getOptOptions();	      Class    <?>    options    =    getOptions();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
33	[BUG]  [BUGGY]  Class  <?>  options  =(Option)getOptions();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  options  =(Option)getOptions();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  options  =(Option)getOptions();	      Class    <?>    options    =    getOptions();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
34	[BUG]  [BUGGY]  Class  <?>  opt  =  getOptionValue();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getOptionValue();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getOptionValue();	      Class    <?>    opt    =    getDefaultValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
35	[BUG]  [BUGGY]  Class  <?>  opt  =  getOption();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  opt  =  getOption();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  opt  =  getOption();	      Class    <?>    opt    =    getDefaultValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  Class  <?>  option  =  getOption(opt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  option  =  getOption(opt);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  option  =  getOption(opt);	      Class    <?>    option    =    getOption(defaultValue);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  Class  <?>  option  =  getOption(defaultValue,  value);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  option  =  getOption(defaultValue,  value);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  option  =  getOption(defaultValue,  value);	      Class    <?>    option    =    getOption(defaultValue);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  Option  option  =  super.cloneOption(option);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Option  option  =  super.cloneOption(option);  [BUGGY]    option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Option  option  =  super.cloneOption(option);	  Option    option    =    super.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
39	[BUG]  [BUGGY]  Object  option  =(Option)this.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Object  option  =(Option)this.clone();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Object  option  =(Option)this.clone();	      Object    option    =(Option)super.clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  Object  option  =  this.options.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Object  option  =  this.options.clone();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Object  option  =  this.options.clone();	      Object    option    =    super.clone();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
41	[BUG]  [BUGGY]  Class  <?>  option  =  getDefaultValue();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  option  =  getDefaultValue();  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  option  =  getDefaultValue();	      Class    <?>    opt    =    getDefaultValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
42	[BUG]  [BUGGY]  Class  <?>  option  =  getOption(null,  defaultValue);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  option  =  getOption(null,  defaultValue);  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  option  =  getOption(null,  defaultValue);	      Class    <?>    opt    =    getOption(null);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  Class  <?>  options  =  getOption( "clone ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  Object  clone()  {  try  {    [BUGGY]  Class  <?>  options  =  getOption( "clone ");  [BUGGY]    Option  option  =  (Option)  super.clone();  option.values  =  new  ArrayList(values);  return  option;  }  catch  (CloneNotSupportedException  cnse)  {  throw  new  RuntimeException(   "A  CloneNotSupportedException  was  thrown:     "  +  cnse.getMessage());  }  }  [CLASS]  Option  [METHOD]  clone  [RETURN_TYPE]  Object  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  Option  option  String  argName  defaultValue  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  result  CloneNotSupportedException  cnse  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	640	640	2	replace	Class  <?>  options  =  getOption( "clone ");	      Class    <?>    options    =    getOptions();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
