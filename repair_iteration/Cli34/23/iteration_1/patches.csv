bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value.append('n');  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value.append('n');  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value.append('n');  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value.append('n');  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value.append('n');  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value.append('n');  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
3	[BUG]  [BUGGY]  if(numberOfArgs!=  0)  {  for(int  i  =  0;  i  <  valuesep;  ++i)  {  value.append('n');  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(numberOfArgs!=  0)  {  for(int  i  =  0;  i  <  valuesep;  ++i)  {  value.append('n');  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(numberOfArgs!=  0)  {  for(int  i  =  0;  i  <  valuesep;  ++i)  {  value.append('n');  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
4	[BUG]  [BUGGY]  if(numberOfArgs!=  null)  {  for(int  i  =  0;  i  <  valuesep;  ++i)  {  value.append('n');  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(numberOfArgs!=  null)  {  for(int  i  =  0;  i  <  valuesep;  ++i)  {  value.append('n');  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(numberOfArgs!=  null)  {  for(int  i  =  0;  i  <  valuesep;  ++i)  {  value.append('n');  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	while(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  while(values!=  null  &&  index  <  values.size())  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  while(values!=  null  &&  index  <  values.size())  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	while(values!=  null  &&  index  <  values.size())  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1,  value.length());  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1,  value.length());  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1,  value.length());  }	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1,    value.length());    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  value  =  value.substring(index  +  1,  value.length());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  value  =  value.substring(index  +  1,  value.length());  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	value  =  value.substring(index  +  1,  value.length());	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1,    value.length());    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  valuesep;  i++)  {  value  =  value.substring(index  +  1,  value.length());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  valuesep;  i++)  {  value  =  value.substring(index  +  1,  value.length());  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  valuesep;  i++)  {  value  =  value.substring(index  +  1,  value.length());  }	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1,    value.length());    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1,  index.length());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1,  index.length());  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1,  index.length());  }	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1,    value.length());    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1);  }	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  value  =  value.substring(index  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  value  =  value.substring(index  +  1);  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	value  =  value.substring(index  +  1);	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  int  numberOfArgs  =  value.indexOf(sep);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  int  numberOfArgs  =  value.indexOf(sep);  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	int  numberOfArgs  =  value.indexOf(sep);	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
16	[BUG]  [BUGGY]  Integer  numberOfArgs  =  value.substring(0,  index);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  Integer  numberOfArgs  =  value.substring(0,  index);  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	Integer  numberOfArgs  =  value.substring(0,  index);	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1,  sep);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1,  sep);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1,  sep);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value    =    value.substring(index    +    1,    sep);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1,  sep);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1,  sep);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1,  sep);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value    =    value.substring(index    +    1,    sep);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sep;  ++i)  {  value  =  value.substring(index  +  1,  sep);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  sep;  ++i)  {  value  =  value.substring(index  +  1,  sep);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  sep;  ++i)  {  value  =  value.substring(index  +  1,  sep);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value    =    value.substring(index    +    1,    sep);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lengthOfArgs;  ++i)  {  value  =  value.substring(index  +  1,  sep);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  lengthOfArgs;  ++i)  {  value  =  value.substring(index  +  1,  sep);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  lengthOfArgs;  ++i)  {  value  =  value.substring(index  +  1,  sep);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value    =    value.substring(index    +    1,    sep);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
21	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lengthOfArgs;  ++i)  {  value  =  value.substring(index  +  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  lengthOfArgs;  ++i)  {  value  =  value.substring(index  +  1);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  lengthOfArgs;  ++i)  {  value  =  value.substring(index  +  1);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
24	[BUG]  [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	while(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  index;  i++)  {  value  =  value.substring(index  +  1);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  index;  i++)  {  value  =  value.substring(index  +  1);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	while(hasArg)  {  for(int  i  =  0;  i  <  index;  i++)  {  value  =  value.substring(index  +  1);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs.length;  i++)  {  value  =  value.substring(index  +  1);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs.length;  i++)  {  value  =  value.substring(index  +  1);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	while(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs.length;  i++)  {  value  =  value.substring(index  +  1);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  while(values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  while(values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	while(values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
28	[BUG]  [BUGGY]  while(values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  while(values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	while(values.size()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
29	[BUG]  [BUGGY]  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);	      if(numberOfArgs    >    1)    {    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    else    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
30	[BUG]  [BUGGY]  if(hasArg)  {  if(numberOfArgs  >  1)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  if(numberOfArgs  >  1)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  if(numberOfArgs  >  1)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }	      if(numberOfArgs    >    1)    {    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    else    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  if(hasArg)  {  if(numberOfArgs  >  1)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  else  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  if(numberOfArgs  >  1)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  else  {  add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  if(numberOfArgs  >  1)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  else  {  add(value);  }	      if(numberOfArgs    >    1)    {    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    else    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  +=  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  +=  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  +=  value.substring(index  +  1);  index  =  value.indexOf(sep);  }	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    sep    =    values.substring(index    +    1);    if(sep    ==    null)    {    add(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
35	[BUG]  [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    sep    =    values.substring(index    +    1);    if(sep    ==    null)    {    add(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
36	[BUG]  [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    sep    =    values.substring(index    +    1);    if(sep    ==    null)    {    add(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    sep    =    values.substring(index    +    1);    if(sep    ==    null)    {    add(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
38	[BUG]  [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(values[i]);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(value);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  i++)  {  add(value);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  index  =  value.indexOf(sep);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  index  =  value.indexOf(sep);  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	index  =  value.indexOf(sep);	      if(numberOfArgs    >    1)    {    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    String    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  string  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  string  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  string  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    String    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    sep    =    values.substring(index    +    1);    if(sep!=    null)    {    add(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
45	[BUG]  [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    sep    =    values.substring(index    +    1);    if(sep!=    null)    {    add(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  value.length());  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  value.length());  index  =  value.indexOf(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  value.length());  index  =  value.indexOf(sep);  }	      if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    String    value    =    value.substring(index    +    1,    value.length());    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  value.length()).toLowerCase();  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  value.length()).toLowerCase();  index  =  value.indexOf(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  value.length()).toLowerCase();  index  =  value.indexOf(sep);  }	      if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    String    value    =    value.substring(index    +    1,    value.length());    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  index.length());  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  index.length());  index  =  value.indexOf(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  index.length());  index  =  value.indexOf(sep);  }	      if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    String    value    =    value.substring(index    +    1,    value.length());    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  values.length());  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  values.length());  index  =  value.indexOf(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  values.length());  index  =  value.indexOf(sep);  }	      if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    String    value    =    value.substring(index    +    1,    value.length());    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  index);  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  index);  index  =  value.indexOf(sep);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  index);  index  =  value.indexOf(sep);  }	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    String    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
51	[BUG]  [BUGGY]  if(hasArg)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  else  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  else  {  add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  else  {  add(value);  }	      if(numberOfArgs    >    1)    {    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    else    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
52	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  add(values[i]);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
53	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  ++i)  {  add(values[i]);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
54	[BUG]  [BUGGY]  value.append('n');  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  value.append('n');  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	value.append('n');	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lengthOfArgs;  ++i)  {  value.append('n');  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  lengthOfArgs;  ++i)  {  value.append('n');  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  lengthOfArgs;  ++i)  {  value.append('n');  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1,  len);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1,  len);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1,  len);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value    =    value.substring(index    +    1,    sep);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
57	[BUG]  [BUGGY]  Integer  numberOfArgs  =  value.indexOf(numberOfArgs);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  Integer  numberOfArgs  =  value.indexOf(numberOfArgs);  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	Integer  numberOfArgs  =  value.indexOf(numberOfArgs);	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
58	[BUG]  [BUGGY]  int  numberOfArgs  =  value.length();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  int  numberOfArgs  =  value.length();  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	int  numberOfArgs  =  value.length();	      if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    String    value    =    value.substring(index    +    1,    value.length());    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
59	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    sep    =    values.substring(index    +    1);    if(sep!=    null)    {    add(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
60	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    sep    =    values.substring(index    +    1);    if(sep!=    null)    {    add(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
61	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  value.size();  i++)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  value.size();  i++)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  value.size();  i++)  {  add(values[i]);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
62	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  i++)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  i++)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  this.values.size();  i++)  {  add(values[i]);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
63	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs.size();  i++)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs.size();  i++)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs.size();  i++)  {  add(values[i]);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    i++)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
64	[BUG]  [BUGGY]  if(hasArg)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }	      if(numberOfArgs    >    1)    {    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
65	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    sep    =    values.substring(index    +    1);    if(sep    ==    null)    {    add(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
66	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  String  sep  =  values.substring(index  +  1);  if(sep  ==  null)  {  add(sep);  }  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    sep    =    values.substring(index    +    1);    if(sep    ==    null)    {    add(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
67	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  value.size();  ++i)  {  add(value);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
68	[BUG]  [BUGGY]  value  =  value.substring(index  +  1,  sep);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  value  =  value.substring(index  +  1,  sep);  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	value  =  value.substring(index  +  1,  sep);	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value    =    value.substring(index    +    1,    sep);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
69	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  numberOfArgs;  ++i)  {  value  =  value.substring(index  +  1);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
70	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  sep;  ++i)  {  value  =  value.substring(index  +  1);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  sep;  ++i)  {  value  =  value.substring(index  +  1);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  sep;  ++i)  {  value  =  value.substring(index  +  1);  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
71	[BUG]  [BUGGY]  value  =  value.substring(0,  index);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  value  =  value.substring(0,  index);  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	value  =  value.substring(0,  index);	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1,    value.length());    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
72	[BUG]  [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	while(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(values[i]);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(values[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
73	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  value.length());  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  value.length());  index  =  value.indexOf(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1,  value.length());  index  =  value.indexOf(sep);  }	      if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    String    value    =    value.substring(index    +    1,    value.length());    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
74	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1,  value.length());  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1,  value.length());  index  =  value.indexOf(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1,  value.length());  index  =  value.indexOf(sep);  }	      if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    String    value    =    value.substring(index    +    1,    value.length());    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
75	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  String  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    String    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
76	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  numberOfArgs;  i++)  {  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }	  if(numberOfArgs    >    1)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    String    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
77	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    sep    =    values.substring(index    +    1);    if(sep!=    null)    {    add(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
78	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  sep  =  values.substring(index  +  1);  if(sep!=  null)  {  add(sep);  }  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    String    sep    =    values.substring(index    +    1);    if(sep!=    null)    {    add(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
79	[BUG]  [BUGGY]  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }	      if(numberOfArgs    >    1)    {    value    =    value.substring(index    +    1);    index    =    value.indexOf(sep);    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
80	[BUG]  [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  index;  i++)  {  value  =  value.substring(index  +  1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(hasArg)  {  for(int  i  =  0;  i  <  index;  i++)  {  value  =  value.substring(index  +  1);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(hasArg)  {  for(int  i  =  0;  i  <  index;  i++)  {  value  =  value.substring(index  +  1);  }	      if(hasArg)    {    for(int    i    =    0;    i    <    numberOfArgs;    i++)    {    value    =    value.substring(index    +    1);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
81	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  index;  ++i)  {  value.append('n');  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  index;  ++i)  {  value.append('n');  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  index;  ++i)  {  value.append('n');  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
82	[BUG]  [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  sep;  ++i)  {  value.append('n');  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  if(values!=  null)  {  for(int  i  =  0;  i  <  sep;  ++i)  {  value.append('n');  }  [BUGGY]      [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	if(values!=  null)  {  for(int  i  =  0;  i  <  sep;  ++i)  {  value.append('n');  }	  if(values!=    null)    {    for(int    i    =    0;    i    <    numberOfArgs;    ++i)    {    value.append('n');    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
83	[BUG]  [BUGGY]  while(values!=  null  &&  value.length()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      value  =  value.substring(index  +  1);  index  =  value.indexOf(sep);  }  }  add(value);    [BUGGY]  while(values!=  null  &&  value.length()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }  [BUGGY]    }  [CLASS]  Option  [METHOD]  processValue  [RETURN_TYPE]  void  String  value  [VARIABLES]  boolean  hasArg  optionalArg  required  char  sep  valuesep  Class  type  List  values  String  argName  description  longOpt  opt  value  long  serialVersionUID  int  UNINITIALIZED  UNLIMITED_VALUES  index  num  numberOfArgs  	projects/Cli34/src/main/java/org/apache/commons/cli/Option.java	0.5	454	454	2	replace	while(values!=  null  &&  value.length()  >  0)  {  for(int  i  =  0;  i  <  values.size();  ++i)  {  add(value);  }	      if(values!=    null)    {    for(int    i    =    0;    i    <    values.size();    ++i)    {    add(value);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
