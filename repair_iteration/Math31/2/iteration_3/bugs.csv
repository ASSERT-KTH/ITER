bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  -  1.0)/  deltaN;	  n    =    Math.abs(dPrev    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
2	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  -  1.0)/  epsilon;	  n    =    Math.abs(dPrev    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
3	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  *  q1;	  dPrev    =    cN    *    q2;    	compilable	  [FE]  OutOfRangeException  	107	11	replace
4	[BUG]  [BUGGY]  dPrev  =  cN  *  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  *  q1;	  dPrev    =    cN    *    q2;    	compilable	  [FE]  OutOfRangeException  	107	11	replace
5	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  *  p0;	  dPrev    =    cN    *    q2;    	compilable	  [FE]  OutOfRangeException  	107	11	replace
6	[BUG]  [BUGGY]  dPrev  =  cN  *  p0;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  *  p0;	  dPrev    =    cN    *    q2;    	compilable	  [FE]  OutOfRangeException  	107	11	replace
7	[BUG]  [BUGGY]  double  n  =  Math.abs(cN  -  1.0)/  deltaN;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(cN  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(cN  -  1.0)/  deltaN;	  double    n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	131	None	replace
8	[BUG]  [BUGGY]  double  n  =  Math.abs(dPrev  -  1.0)/  cN;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(dPrev  -  1.0)/  cN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(dPrev  -  1.0)/  cN;	  double    n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	131	None	replace
9	[BUG]  [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  deltaN;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(epsilon  -  1.0)/  deltaN;	  double    n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	131	None	replace
10	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  dPrev;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(deltaN  -  1.0)/  dPrev;	  double    n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	131	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  dPrev  =  cN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        dPrev    =    cN;    dPrev  =  cN;  dPrev  =  cN;	  	compilable	  [FE]  AssertionError  	71	2	add
12	[BUG]  [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  dPrev  =  cN;  dPrev  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  dPrev  =  cN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        dPrev    =    cN;    dPrev  =  cN;  dPrev  =  cN;	  	compilable	  [FE]  AssertionError  	71	2	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  cPrev  =  cN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        dPrev    =    cN;    cPrev  =  cN;  dPrev  =  cN;	  	compilable	  [FE]  AssertionError  	71	2	add
14	[BUG]  [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  cPrev  =  cN;  dPrev  =  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  cPrev  =  cN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        dPrev    =    cN;    cPrev  =  cN;  dPrev  =  cN;	  	compilable	  [FE]  AssertionError  	71	2	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  cN  =  cN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        dPrev    =    cN;    cN  =  cN;  dPrev  =  cN;	  	compilable	  [FE]  AssertionError  	71	2	add
16	[BUG]  [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  cN  =  cN;  dPrev  =  cN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  cN  =  cN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        dPrev    =    cN;    cN  =  cN;  dPrev  =  cN;	  	compilable	  [FE]  AssertionError  	71	2	add
17	[BUG]  [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  n  =  cN;  dPrev  =  cN;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  n  =  cN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        dPrev    =    cN;    n  =  cN;  dPrev  =  cN;	  	non-compiled	[CE]  possible  loss  of  precision	71	None	add
18	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  q2);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  dPrev  =  q2);	  dPrev    =    q2;    dPrev    =    q2);    	non-compiled	[CE]  ';'  expected	48	None	replace
19	[BUG]  [BUGGY]  dPrev  =  cN;  dPrev  =  q2);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  dPrev  =  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN;  dPrev  =  q2);	  dPrev    =    q2;    dPrev    =    q2);    	non-compiled	[CE]  ';'  expected	48	None	replace
20	[BUG]  [BUGGY]  dPrev  =  cN  -  q2;  dPrev  =  q2);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  dPrev  =  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  -  q2;  dPrev  =  q2);	  dPrev    =    q2;    dPrev    =    q2);    	non-compiled	[CE]  ';'  expected	48	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  dPrev  =  q2;	  dPrev    =    q2;    dPrev    =    q2);    	compilable	  [FE]  AssertionError  	48	9	replace
22	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  q2;  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  dPrev  =  q2;	  dPrev    =    q2;    dPrev    =    q2);    	compilable	  [FE]  AssertionError  	48	9	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  dPrev  =  cN  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    p0;    dPrev  =  cN  /  p0;	  	compilable	  [FE]  AssertionError  	138	2	add
24	[BUG]  [BUGGY]  dPrev  =  cN  /  p0;  dPrev  =  cN  /  p0;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  dPrev  =  cN  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    p0;    dPrev  =  cN  /  p0;	  	compilable	  [FE]  AssertionError  	138	2	add
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  cPrev  =  cN  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    p0;    cPrev  =  cN  /  p0;	  	compilable	  [FE]  AssertionError  	138	2	add
26	[BUG]  [BUGGY]  dPrev  =  cN  /  p0;  cPrev  =  cN  /  p0;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  cPrev  =  cN  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    p0;    cPrev  =  cN  /  p0;	  	compilable	  [FE]  AssertionError  	138	2	add
27	[BUG]  [BUGGY]  dPrev  =  cN  /  p0;  int  dPrev  =  cN  /  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  int  dPrev  =  cN  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    p0;    int  dPrev  =  cN  /  p0;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	138	None	add
28	[BUG]  [BUGGY]  dPrev  =  cN  /  p0;  dPrev  =  cN  /  p1;  [CE]  cannot  find  symbol  p1  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  dPrev  =  cN  /  p1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    p0;    dPrev  =  cN  /  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	138	None	add
29	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  -  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q2  -  cN;	  dPrev    =    cN    -    q2;    	compilable	  [FE]  ConvergenceException  	5	8	replace
30	[BUG]  [BUGGY]  dPrev  =  q2  -  cN;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  -  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q2  -  cN;	  dPrev    =    cN    -    q2;    	compilable	  [FE]  ConvergenceException  	5	8	replace
31	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  -  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q1  -  q2;	  dPrev    =    cN    -    q2;    	compilable	  [FE]  OutOfRangeException  	5	11	replace
32	[BUG]  [BUGGY]  dPrev  =  q1  -  q2;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  -  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q1  -  q2;	  dPrev    =    cN    -    q2;    	compilable	  [FE]  OutOfRangeException  	5	11	replace
33	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cPrev  =  cN  /  q2;	  dPrev    =    cN    /    q1;    cPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	9	11	replace
34	[BUG]  [BUGGY]  cPrev  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cPrev  =  cN  /  q2;	  dPrev    =    cN    /    q1;    cPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	9	11	replace
35	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;	  dPrev    =    cN    /    q1;    cPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	9	11	replace
36	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;	  dPrev    =    cN    /    q1;    cPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	9	11	replace
37	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;	  dPrev    =    cN    /    q1;    cPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	9	11	replace
38	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;	  dPrev    =    cN    /    q1;    cPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	9	11	replace
39	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cPrev  =  cN  /  q1;	  dPrev    =    cN    /    q1;    cPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	9	11	replace
40	[BUG]  [BUGGY]  cPrev  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cPrev  =  cN  /  q1;	  dPrev    =    cN    /    q1;    cPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	9	11	replace
41	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  -  1.0)/  dPrev;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
42	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  1.0)/  dPrev;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  dPrev  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    hN;    dPrev  =  hN;	  	compilable	  [FE]  AssertionError  	81	2	add
44	[BUG]  [BUGGY]  dPrev  =  hN;  dPrev  =  hN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  dPrev  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    hN;    dPrev  =  hN;	  	compilable	  [FE]  AssertionError  	81	2	add
45	[BUG]  [BUGGY]  dPrev  =  hN;  int  dPrev  =  hN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  int  dPrev  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    hN;    int  dPrev  =  hN;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	81	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  cPrev  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    hN;    cPrev  =  hN;	  	compilable	  [FE]  AssertionError  	81	2	add
47	[BUG]  [BUGGY]  dPrev  =  hN;  cPrev  =  hN;  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  cPrev  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    hN;    cPrev  =  hN;	  	compilable	  [FE]  AssertionError  	81	2	add
48	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  hPrev  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    hN;    hPrev  =  hN;	  	compilable	  [FE]  OutOfRangeException  	81	7	add
49	[BUG]  [BUGGY]  dPrev  =  hN;  hPrev  =  hN;  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  hPrev  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    hN;    hPrev  =  hN;	  	compilable	  [FE]  OutOfRangeException  	81	7	add
50	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  n;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  n;	  dPrev    =    epsilon;    	compilable	  [FE]  OutOfRangeException  	137	11	replace
51	[BUG]  [BUGGY]  dPrev  =  n;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  n;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  n;	  dPrev    =    epsilon;    	compilable	  [FE]  OutOfRangeException  	137	11	replace
52	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  epsilon,  deltaN);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(dPrev,  epsilon,  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(dPrev,  epsilon,  deltaN);	  n    =    Math.min(epsilon,    deltaN);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	84	None	replace
53	[BUG]  [BUGGY]  n  =  Math.max(cN,  hN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(cN,  hN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(cN,  hN);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
54	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  p0);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(dPrev,  p0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  p0);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
55	[BUG]  [BUGGY]  double  n  =  Math.abs(x  -  1.0)/  epsilon;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(x  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(x  -  1.0)/  epsilon;	  n    =    Math.abs(x    -    1.0)/    epsilon;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	141	None	replace
56	[BUG]  [BUGGY]  n  =  Math.abs(x  -  1.0)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(x  -  1.0)/  DEFAULT_EPSILON;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(x  -  1.0)/  DEFAULT_EPSILON;	  n    =    Math.abs(x    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	141	None	replace
57	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  deltaN;  dPrev  =  cN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    deltaN;    dPrev  =  cN  /  deltaN;	  	compilable	  [FE]  AssertionError  	33	2	add
58	[BUG]  [BUGGY]  dPrev  =  cN  /  deltaN;  dPrev  =  cN  /  deltaN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  deltaN;  dPrev  =  cN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    deltaN;    dPrev  =  cN  /  deltaN;	  	compilable	  [FE]  AssertionError  	33	2	add
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  deltaN;  cPrev  =  cN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    deltaN;    cPrev  =  cN  /  deltaN;	  	compilable	  [FE]  AssertionError  	33	2	add
60	[BUG]  [BUGGY]  dPrev  =  cN  /  deltaN;  cPrev  =  cN  /  deltaN;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  deltaN;  cPrev  =  cN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    deltaN;    cPrev  =  cN  /  deltaN;	  	compilable	  [FE]  AssertionError  	33	2	add
61	[BUG]  [BUGGY]  dPrev  =  cN  /  deltaN;  int  dPrev  =  cN  /  deltaN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  deltaN;  int  dPrev  =  cN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    deltaN;    int  dPrev  =  cN  /  deltaN;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	33	None	add
62	[BUG]  [BUGGY]  dPrev  =  cN  /  deltaN;  dPrev  =  cN  /  deltaN);  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  deltaN;  dPrev  =  cN  /  deltaN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    deltaN;    dPrev  =  cN  /  deltaN);	  	non-compiled	[CE]  ';'  expected	33	None	add
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        cPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	8	2	add
64	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        cPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	8	2	add
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        cPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	8	2	add
66	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        cPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	8	2	add
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        cPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	8	2	add
68	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        cPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	8	2	add
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        cPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	8	2	add
70	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        cPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	8	2	add
71	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  cPrev  =  cN;	  dPrev    =    cN;    cPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	74	11	replace
72	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  cN;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  cPrev  =  cN;	  dPrev    =    cN;    cPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	74	11	replace
73	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0;  cPrev  =  cN;	  dPrev    =    cN;    cPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	74	11	replace
74	[BUG]  [BUGGY]  dPrev  =  p0;  cPrev  =  cN;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  cPrev  =  cN;	  dPrev    =    cN;    cPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	74	11	replace
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  dPrev  =  cN;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        cPrev    =    cN;    dPrev  =  cN;  cPrev  =  cN;	  	compilable	  [FE]  AssertionError  	73	2	add
76	[BUG]  [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  dPrev  =  cN;  cPrev  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  dPrev  =  cN;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        cPrev    =    cN;    dPrev  =  cN;  cPrev  =  cN;	  	compilable	  [FE]  AssertionError  	73	2	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  cPrev  =  cN;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        cPrev    =    cN;    cPrev  =  cN;  cPrev  =  cN;	  	compilable	  [FE]  AssertionError  	73	2	add
78	[BUG]  [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  cPrev  =  cN;  cPrev  =  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  cPrev  =  cN;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        cPrev    =    cN;    cPrev  =  cN;  cPrev  =  cN;	  	compilable	  [FE]  AssertionError  	73	2	add
79	[BUG]  [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  int  dPrev  =  cN;  cPrev  =  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  int  dPrev  =  cN;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        cPrev    =    cN;    int  dPrev  =  cN;  cPrev  =  cN;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	73	None	add
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  cN  =  cN;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        cPrev    =    cN;    cN  =  cN;  cPrev  =  cN;	  	compilable	  [FE]  AssertionError  	73	2	add
81	[BUG]  [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  cN  =  cN;  cPrev  =  cN;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  cN  =  cN;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        cPrev    =    cN;    cN  =  cN;  cPrev  =  cN;	  	compilable	  [FE]  AssertionError  	73	2	add
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	37	2	add
83	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	37	2	add
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	37	2	add
85	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	37	2	add
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	37	2	add
87	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	37	2	add
88	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2);	  	non-compiled	[CE]  ';'  expected	37	None	add
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	35	2	add
90	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	35	2	add
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	35	2	add
92	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	35	2	add
93	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  n  =  cN  /  q2;  dPrev  =  cN  /  q2;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  n  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    n  =  cN  /  q2;  dPrev  =  cN  /  q2;	  	non-compiled	[CE]  possible  loss  of  precision	35	None	add
94	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2);	  	non-compiled	[CE]  ';'  expected	35	None	add
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	35	2	add
96	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	35	2	add
97	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  hN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(deltaN  -  1.0)/  hN;	  cN    =    Math.abs(deltaN    -    1.0)/    epsilon;    	compilable	  [FE]  OutOfRangeException  	65	8	replace
98	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  hN;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  hN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  hN;	  cN    =    Math.abs(deltaN    -    1.0)/    epsilon;    	compilable	  [FE]  OutOfRangeException  	65	8	replace
99	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  deltaN  +  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  deltaN  +  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  -  1.0)/  deltaN  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    cN    +    1;    	non-compiled	[CE]  possible  loss  of  precision	108	None	replace
100	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  cN  +  1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  cN  +  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  -  1.0)/  cN  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    cN    +    1;    	non-compiled	[CE]  possible  loss  of  precision	108	None	replace
101	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  deltaN  +  1;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  deltaN  +  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  1.0)/  deltaN  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    cN    +    1;    	non-compiled	[CE]  possible  loss  of  precision	108	None	replace
102	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  epsilon);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(dPrev  /  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  /  epsilon);	  n    =    Math.abs(dPrev    -    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
103	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  epsilon);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  -  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  -  epsilon);	  n    =    Math.abs(dPrev    -    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
104	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  deltaN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(dPrev  -  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  -  deltaN);	  n    =    Math.abs(dPrev    -    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
105	[BUG]  [BUGGY]  n  =  Math.abs(x  -  epsilon);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(x  -  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(x  -  epsilon);	  n    =    Math.abs(dPrev    -    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
106	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  p0  /  q1,  q2;  [CE]  ';'  expected  [FE]        OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  p0  /  q1,  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q1;  dPrev  =  p0  /  q1,  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1,    q2;    	non-compiled	[CE]  ';'  expected	135	None	replace
107	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  cN  /  q1,  q2;  [CE]  ';'  expected  [FE]          OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  cN  /  q1,  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q1;  dPrev  =  cN  /  q1,  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1,    q2;    	non-compiled	[CE]  ';'  expected	135	None	replace
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        q2    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  AssertionError  	109	6	add
109	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        q2    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  AssertionError  	109	6	add
110	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        q2    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	109	11	add
111	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        q2    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	109	11	add
112	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        q2    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	timeout	109	1	add
113	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q1;  timeout  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        q2    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	timeout	109	1	add
114	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        q2    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	109	11	add
115	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        q2    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	109	11	add
116	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        q2    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2,  q2  =  Math.abs(deltaN  -  1.0)/  q2;	  	non-compiled	[CE]  ';'  expected	109	None	add
117	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	66	11	add
118	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	66	11	add
119	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  int  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  int  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    q1;    int  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	66	None	add
120	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	66	11	add
121	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	66	11	add
122	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q1);	  	non-compiled	[CE]  ';'  expected	66	None	add
123	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0  /  cN;	  dPrev    =    cN    /    p0;    	compilable	  [FE]  OutOfRangeException  	139	7	replace
124	[BUG]  [BUGGY]  dPrev  =  p0  /  cN;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  cN;	  dPrev    =    cN    /    p0;    	compilable	  [FE]  OutOfRangeException  	139	7	replace
125	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q1  /  p0;	  dPrev    =    cN    /    p0;    	compilable	  [FE]  ConvergenceException  	139	11	replace
126	[BUG]  [BUGGY]  dPrev  =  q1  /  p0;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q1  /  p0;	  dPrev    =    cN    /    p0;    	compilable	  [FE]  ConvergenceException  	139	11	replace
127	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	52	11	add
128	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	52	11	add
129	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  n  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]      ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  n  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    n  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	non-compiled	[CE]  possible  loss  of  precision	52	None	add
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  AssertionError  	52	6	add
131	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  AssertionError  [FE]        ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  AssertionError  	52	6	add
132	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	52	11	add
133	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	52	11	add
134	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	52	11	add
135	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]            ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    dPrev  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	52	11	add
136	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  epsilon;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(deltaN  -  1.0)/  epsilon;	  double    n    =    Math.abs(deltaN    -    1.0)/    deltaN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	122	None	replace
137	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  DEFAULT_EPSILON;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  DEFAULT_EPSILON;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(deltaN  -  1.0)/  DEFAULT_EPSILON;	  double    n    =    Math.abs(deltaN    -    1.0)/    deltaN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	122	None	replace
138	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  hN;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  hN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(deltaN  -  1.0)/  hN;	  double    n    =    Math.abs(deltaN    -    1.0)/    deltaN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	122	None	replace
139	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  dPrev  =  p0;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        cN    =    p0;    dPrev  =  p0;  cN  =  p0;	  	compilable	  [FE]  AssertionError  	93	6	add
140	[BUG]  [BUGGY]  dPrev    =    p0;    cN  =  p0;  dPrev  =  p0;  cN  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  dPrev  =  p0;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cN    =    p0;    dPrev  =  p0;  cN  =  p0;	  	compilable	  [FE]  AssertionError  	93	6	add
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  cN  =  p0;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        cN    =    p0;    cN  =  p0;  cN  =  p0;	  	compilable	  [FE]  AssertionError  	93	6	add
142	[BUG]  [BUGGY]  dPrev    =    p0;    cN  =  p0;  cN  =  p0;  cN  =  p0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  cN  =  p0;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cN    =    p0;    cN  =  p0;  cN  =  p0;	  	compilable	  [FE]  AssertionError  	93	6	add
143	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  p0  =  p0;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        cN    =    p0;    p0  =  p0;  cN  =  p0;	  	compilable	  [FE]  AssertionError  	93	6	add
144	[BUG]  [BUGGY]  dPrev    =    p0;    cN  =  p0;  p0  =  p0;  cN  =  p0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  p0  =  p0;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cN    =    p0;    p0  =  p0;  cN  =  p0;	  	compilable	  [FE]  AssertionError  	93	6	add
145	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  cPrev  =  p0;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        cN    =    p0;    cPrev  =  p0;  cN  =  p0;	  	compilable	  [FE]  AssertionError  	93	6	add
146	[BUG]  [BUGGY]  dPrev    =    p0;    cN  =  p0;  cPrev  =  p0;  cN  =  p0;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  cPrev  =  p0;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cN    =    p0;    cPrev  =  p0;  cN  =  p0;	  	compilable	  [FE]  AssertionError  	93	6	add
147	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cN  =  cN;  dPrev  =  cN;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        cN    =    cN;    dPrev  =  cN;  cN  =  cN;	  	compilable	  [FE]  AssertionError  	101	2	add
148	[BUG]  [BUGGY]  dPrev    =    cN;    cN  =  cN;  dPrev  =  cN;  cN  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cN  =  cN;  dPrev  =  cN;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        cN    =    cN;    dPrev  =  cN;  cN  =  cN;	  	compilable	  [FE]  AssertionError  	101	2	add
149	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cN  =  cN;  cN  =  cN;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        cN    =    cN;    cN  =  cN;  cN  =  cN;	  	compilable	  [FE]  AssertionError  	101	2	add
150	[BUG]  [BUGGY]  dPrev    =    cN;    cN  =  cN;  cN  =  cN;  cN  =  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cN  =  cN;  cN  =  cN;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        cN    =    cN;    cN  =  cN;  cN  =  cN;	  	compilable	  [FE]  AssertionError  	101	2	add
151	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cN  =  cN;  cPrev  =  cN;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        cN    =    cN;    cPrev  =  cN;  cN  =  cN;	  	compilable	  [FE]  AssertionError  	101	2	add
152	[BUG]  [BUGGY]  dPrev    =    cN;    cN  =  cN;  cPrev  =  cN;  cN  =  cN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cN  =  cN;  cPrev  =  cN;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        cN    =    cN;    cPrev  =  cN;  cN  =  cN;	  	compilable	  [FE]  AssertionError  	101	2	add
153	[BUG]  [BUGGY]  dPrev    =    cN;    cN  =  cN;  int  dPrev  =  cN;  cN  =  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cN  =  cN;  int  dPrev  =  cN;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        cN    =    cN;    int  dPrev  =  cN;  cN  =  cN;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	101	None	add
154	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(dPrev  -  1.0)/  deltaN;	  cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    	compilable	timeout	63	1	replace
155	[BUG]  [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  timeout  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(dPrev  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(dPrev  -  1.0)/  deltaN;	  cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    	compilable	timeout	63	1	replace
156	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  cPrev  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  *  q2;  cPrev  =  cN  *  q2;	  dPrev    =    cN    /    q2;    cPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	38	11	replace
157	[BUG]  [BUGGY]  dPrev  =  cN  *  q2;  cPrev  =  cN  *  q2;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  cPrev  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  *  q2;  cPrev  =  cN  *  q2;	  dPrev    =    cN    /    q2;    cPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	38	11	replace
158	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  cPrev  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0  /  q2;  cPrev  =  p0  /  q2;	  dPrev    =    cN    /    q2;    cPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	38	10	replace
159	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  cPrev  =  p0  /  q2;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  cPrev  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q2;  cPrev  =  p0  /  q2;	  dPrev    =    cN    /    q2;    cPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	38	10	replace
160	[BUG]  [BUGGY]  int  dPrev  =  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  dPrev  =  p0;	  dPrev    =    p0;    int    dPrev    =    p0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
161	[BUG]  [BUGGY]  p0  =  p0;  int  dPrev  =  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  p0;  int  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  p0;  int  dPrev  =  p0;	  dPrev    =    p0;    int    dPrev    =    p0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
162	[BUG]  [BUGGY]  cPrev  =  p0;  int  dPrev  =  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  p0;  int  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cPrev  =  p0;  int  dPrev  =  p0;	  dPrev    =    p0;    int    dPrev    =    p0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
163	[BUG]  [BUGGY]  n  =  p0;  int  dPrev  =  p0;  [CE]  possible  loss  of  precision  [FE]                OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  p0;  int  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  p0;  int  dPrev  =  p0;	  dPrev    =    p0;    int    dPrev    =    p0;    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
164	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  dPrev  =  cN  -  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    -    q2;    dPrev  =  cN  -  q2;	  	compilable	  [FE]  AssertionError  	4	2	add
165	[BUG]  [BUGGY]  dPrev  =  cN  -  q2;  dPrev  =  cN  -  q2;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  dPrev  =  cN  -  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    -    q2;    dPrev  =  cN  -  q2;	  	compilable	  [FE]  AssertionError  	4	2	add
166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  cPrev  =  cN  -  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    -    q2;    cPrev  =  cN  -  q2;	  	compilable	  [FE]  AssertionError  	4	2	add
167	[BUG]  [BUGGY]  dPrev  =  cN  -  q2;  cPrev  =  cN  -  q2;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  cPrev  =  cN  -  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    -    q2;    cPrev  =  cN  -  q2;	  	compilable	  [FE]  AssertionError  	4	2	add
168	[BUG]  [BUGGY]  dPrev  =  cN  -  q2;  dPrev  =  cN  -  q2);  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  dPrev  =  cN  -  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    -    q2;    dPrev  =  cN  -  q2);	  	non-compiled	[CE]  ';'  expected	4	None	add
169	[BUG]  [BUGGY]  dPrev  =  cN  -  q2;  int  dPrev  =  cN  -  q2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  int  dPrev  =  cN  -  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    -    q2;    int  dPrev  =  cN  -  q2;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	4	None	add
170	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0  /  hN;	  dPrev    =    cN    /    hN;    	compilable	  [FE]  OutOfRangeException  	30	7	replace
171	[BUG]  [BUGGY]  dPrev  =  p0  /  hN;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  hN;	  dPrev    =    cN    /    hN;    	compilable	  [FE]  OutOfRangeException  	30	7	replace
172	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q2  /  hN;	  dPrev    =    cN    /    hN;    	compilable	  [FE]  OutOfRangeException  	30	7	replace
173	[BUG]  [BUGGY]  dPrev  =  q2  /  hN;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q2  /  hN;	  dPrev    =    cN    /    hN;    	compilable	  [FE]  OutOfRangeException  	30	7	replace
174	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  hN  /  cN;	  dPrev    =    cN    /    hN;    	compilable	  [FE]  OutOfRangeException  	30	11	replace
175	[BUG]  [BUGGY]  dPrev  =  hN  /  cN;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  hN  /  cN;	  dPrev    =    cN    /    hN;    	compilable	  [FE]  OutOfRangeException  	30	11	replace
176	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  dPrev  =  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        cPrev    =    q2;    dPrev  =  q2;  cPrev  =  q2;	  	compilable	  [FE]  AssertionError  	46	2	add
177	[BUG]  [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  dPrev  =  q2;  cPrev  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  dPrev  =  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        cPrev    =    q2;    dPrev  =  q2;  cPrev  =  q2;	  	compilable	  [FE]  AssertionError  	46	2	add
178	[BUG]  [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  int  dPrev  =  q2;  cPrev  =  q2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  int  dPrev  =  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        cPrev    =    q2;    int  dPrev  =  q2;  cPrev  =  q2;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	46	None	add
179	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  cPrev  =  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        cPrev    =    q2;    cPrev  =  q2;  cPrev  =  q2;	  	compilable	  [FE]  AssertionError  	46	2	add
180	[BUG]  [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  cPrev  =  q2;  cPrev  =  q2;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  cPrev  =  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        cPrev    =    q2;    cPrev  =  q2;  cPrev  =  q2;	  	compilable	  [FE]  AssertionError  	46	2	add
181	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  q2  =  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        cPrev    =    q2;    q2  =  q2;  cPrev  =  q2;	  	compilable	  [FE]  AssertionError  	46	2	add
182	[BUG]  [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  q2  =  q2;  cPrev  =  q2;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  q2  =  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        cPrev    =    q2;    q2  =  q2;  cPrev  =  q2;	  	compilable	  [FE]  AssertionError  	46	2	add
183	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  epsilon);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(dPrev  *  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  *  epsilon);	  n    =    Math.abs(deltaN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
184	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  *  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  *  epsilon  +  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  *  epsilon  +  1);	  n    =    Math.abs(deltaN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
185	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  *  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  *  DEFAULT_EPSILON);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  *  DEFAULT_EPSILON);	  n    =    Math.abs(deltaN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
186	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  *  x);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  *  x);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  *  x);	  n    =    Math.abs(deltaN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
187	[BUG]  [BUGGY]  dPrev  =  pN  /  q2;  [CE]  cannot  find  symbol  pN  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  pN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  pN  /  q2;	  dPrev    =    p0    /    q2;    	non-compiled	[CE]  cannot  find  symbol  pN	32	None	replace
188	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  cN;  dPrev  =  q2  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q2    /    cN;    dPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	123	2	add
189	[BUG]  [BUGGY]  dPrev  =  q2  /  cN;  dPrev  =  q2  /  cN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  cN;  dPrev  =  q2  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    cN;    dPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	123	2	add
190	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	123	2	add
191	[BUG]  [BUGGY]  dPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  cN;  cPrev  =  q2  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    cN;    cPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	123	2	add
192	[BUG]  [BUGGY]  dPrev  =  q2  /  cN;  int  dPrev  =  q2  /  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  cN;  int  dPrev  =  q2  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    cN;    int  dPrev  =  q2  /  cN;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	123	None	add
193	[BUG]  [BUGGY]  dPrev  =  q2  /  cN;  dPrev  =  q2  /  cN);  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  cN;  dPrev  =  q2  /  cN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    cN;    dPrev  =  q2  /  cN);	  	non-compiled	[CE]  ';'  expected	123	None	add
194	[BUG]  [BUGGY]  n  =  Math.max(cN,  epsilon);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(cN,  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(cN,  epsilon);	  n    =    Math.max(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	77	None	replace
195	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(cN,  dPrev,  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(cN,  dPrev,  epsilon);	  n    =    Math.max(cN,    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	77	None	replace
196	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	41	2	add
197	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	41	2	add
198	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	41	2	add
199	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	41	2	add
200	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1);	  	non-compiled	[CE]  ';'  expected	41	None	add
201	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1,  n);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1,  n);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1,  n);	  	non-compiled	[CE]  ';'  expected	41	None	add
202	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  n  =  cN  /  q2;  dPrev  =  cN  /  q1;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  n  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    n  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	non-compiled	[CE]  possible  loss  of  precision	41	None	add
203	[BUG]  [BUGGY]  n  =  Math.min(cN,  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(cN,  epsilon  +  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(cN,  epsilon  +  1);	  n    =    Math.min(cN,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	87	None	replace
204	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  cN);  [CE]  possible  loss  of  precision  [FE]                          AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(epsilon,  cN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(epsilon,  cN);	  n    =    Math.min(cN,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	87	None	replace
205	[BUG]  [BUGGY]  n  =  Math.min(cN,  epsilon  *  deltaN);  [CE]  possible  loss  of  precision  [FE]                            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(cN,  epsilon  *  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(cN,  epsilon  *  deltaN);	  n    =    Math.min(cN,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	87	None	replace
206	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  x);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  x);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  x);	  n    =    Math.abs(x    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
207	[BUG]  [BUGGY]  n  =  Math.abs(x  -  deltaN,  epsilon);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(x  -  deltaN,  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(x  -  deltaN,  epsilon);	  n    =    Math.abs(x    -    deltaN);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	140	None	replace
208	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  cN  =  Math.abs(cN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN    =    Math.abs(cN    -    1.0)/    q2;    cN  =  Math.abs(cN  -  1.0)/  q2;	  timeout    	compilable	  [FE]  ConvergenceException  	120	11	add
209	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  cN  =  Math.abs(cN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  cN  =  Math.abs(cN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(cN    -    1.0)/    q2;    cN  =  Math.abs(cN  -  1.0)/  q2;	  timeout    	compilable	  [FE]  ConvergenceException  	120	11	add
210	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  int  cN  =  Math.abs(cN  -  1.0)/  q2;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  int  cN  =  Math.abs(cN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(cN    -    1.0)/    q2;    int  cN  =  Math.abs(cN  -  1.0)/  q2;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	120	None	add
211	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  cN  =  Math.abs(cN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN    =    Math.abs(cN    -    1.0)/    q2;    cN  =  Math.abs(cN  -  1.0)/  q1;	  timeout    	compilable	  [FE]  ConvergenceException  	120	11	add
212	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  cN  =  Math.abs(cN  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  cN  =  Math.abs(cN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(cN    -    1.0)/    q2;    cN  =  Math.abs(cN  -  1.0)/  q1;	  timeout    	compilable	  [FE]  ConvergenceException  	120	11	add
213	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  cN  =  Math.abs(cN  -  1.0)/  q2);  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  cN  =  Math.abs(cN  -  1.0)/  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(cN    -    1.0)/    q2;    cN  =  Math.abs(cN  -  1.0)/  q2);	  timeout    	non-compiled	[CE]  ';'  expected	120	None	add
214	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  DEFAULT_EPSILON;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  -  1.0)/  DEFAULT_EPSILON;	  n    =    Math.abs(cN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	142	None	replace
215	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  -  1.0)/  q1;	  n    =    Math.abs(cN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	142	None	replace
216	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	49	11	add
217	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	49	11	add
218	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	49	11	add
219	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	49	11	add
220	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	49	11	add
221	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	49	11	add
222	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	49	11	add
223	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	49	11	add
224	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  n  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  possible  loss  of  precision  [FE]            ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  n  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    n  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	non-compiled	[CE]  possible  loss  of  precision	49	None	add
225	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0;  dPrev  =  cN;	  dPrev    =    cN;    dPrev    =    cN);    	compilable	  [FE]  OutOfRangeException  	76	11	replace
226	[BUG]  [BUGGY]  dPrev  =  p0;  dPrev  =  cN;  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  dPrev  =  cN;	  dPrev    =    cN;    dPrev    =    cN);    	compilable	  [FE]  OutOfRangeException  	76	11	replace
227	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  p0  =  hPrev;  p1  =  hPrev;  [CE]  cannot  find  symbol  p1  [FE]                OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  p0  =  hPrev;  p1  =  hPrev;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  p0  =  hPrev;  p1  =  hPrev;	  dPrev    =    cN;    dPrev    =    cN);    	non-compiled	[CE]  cannot  find  symbol  p1	76	None	replace
228	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                  OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  dPrev  =  cN;	  dPrev    =    cN;    dPrev    =    cN);    	compilable	  [FE]  OutOfRangeException  	76	11	replace
229	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN;  [FE]  OutOfRangeException  [FE]                  OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  dPrev  =  cN;	  dPrev    =    cN;    dPrev    =    cN);    	compilable	  [FE]  OutOfRangeException  	76	11	replace
230	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  q2  =  q2;	  dPrev    =    q2;    q2    =    q2;    	compilable	  [FE]  OutOfRangeException  	98	11	replace
231	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  q2  =  q2;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  q2  =  q2;	  dPrev    =    q2;    q2    =    q2;    	compilable	  [FE]  OutOfRangeException  	98	11	replace
232	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN;  q2  =  q2;	  dPrev    =    q2;    q2    =    q2;    	compilable	  [FE]  OutOfRangeException  	98	11	replace
233	[BUG]  [BUGGY]  dPrev  =  cN;  q2  =  q2;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN;  q2  =  q2;	  dPrev    =    q2;    q2    =    q2;    	compilable	  [FE]  OutOfRangeException  	98	11	replace
234	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  -  q2;  q2  =  q2;	  dPrev    =    q2;    q2    =    q2;    	compilable	  [FE]  OutOfRangeException  	98	11	replace
235	[BUG]  [BUGGY]  dPrev  =  cN  -  q2;  q2  =  q2;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  -  q2;  q2  =  q2;	  dPrev    =    q2;    q2    =    q2;    	compilable	  [FE]  OutOfRangeException  	98	11	replace
236	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  q2  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0;  q2  =  p0;	  dPrev    =    q2;    q2    =    q2;    	compilable	  [FE]  AssertionError  	98	8	replace
237	[BUG]  [BUGGY]  dPrev  =  p0;  q2  =  p0;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  q2  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  q2  =  p0;	  dPrev    =    q2;    q2    =    q2;    	compilable	  [FE]  AssertionError  	98	8	replace
238	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  p0  =  hPrev;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  p0  =  hPrev;  dPrev  =  cN;	  dPrev    =    cN;    dPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	72	11	replace
239	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  p0  =  hPrev;  dPrev  =  cN;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  p0  =  hPrev;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  p0  =  hPrev;  dPrev  =  cN;	  dPrev    =    cN;    dPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	72	11	replace
240	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    dPrev  =  cN  /  q2;  q2  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	99	2	add
241	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  q2  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    dPrev  =  cN  /  q2;  q2  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	99	2	add
242	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  cPrev  =  cN  /  q2;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    cPrev  =  cN  /  q2;  q2  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	99	2	add
243	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  cPrev  =  cN  /  q2;  q2  =  cN  /  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  cPrev  =  cN  /  q2;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    cPrev  =  cN  /  q2;  q2  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	99	2	add
244	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  q2  =  cN  /  q2);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  q2  =  cN  /  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    dPrev  =  cN  /  q2;  q2  =  cN  /  q2);	  	non-compiled	[CE]  ';'  expected	99	None	add
245	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  q2  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    dPrev  =  cN  /  q2;  q2  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	99	6	add
246	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  q2  =  cN  /  q1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  q2  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    dPrev  =  cN  /  q2;  q2  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	99	6	add
247	[BUG]  [BUGGY]  dPrev  =  p0;  dPrev  =  p1;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  dPrev  =  p1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  dPrev  =  p1;	  dPrev    =    p0;    dPrev    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	15	None	replace
248	[BUG]  [BUGGY]  dPrev  =  p0;  dPrev  =  p2;  [CE]  cannot  find  symbol  p2  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  dPrev  =  p2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  dPrev  =  p2;	  dPrev    =    p0;    dPrev    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	15	None	replace
249	[BUG]  [BUGGY]  dPrev  =  p0;  dPrev  =  pN;  [CE]  cannot  find  symbol  pN  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  dPrev  =  pN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  dPrev  =  pN;	  dPrev    =    p0;    dPrev    =    p0;    	non-compiled	[CE]  cannot  find  symbol  pN	15	None	replace
250	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN;  dPrev  =  p0;	  dPrev    =    p0;    dPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	15	11	replace
251	[BUG]  [BUGGY]  dPrev  =  cN;  dPrev  =  p0;  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN;  dPrev  =  p0;	  dPrev    =    p0;    dPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	15	11	replace
252	[BUG]  [BUGGY]  n  =  cN  /  q1;  dPrev  =  cN  /  q2;  [CE]  possible  loss  of  precision  [FE]                OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  cN  /  q1;  dPrev  =  cN  /  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1,;    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
253	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    q2  =  q2;  dPrev  =  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        q2    =    q2;    dPrev  =  q2;  q2  =  q2;	  	compilable	  [FE]  AssertionError  	97	2	add
254	[BUG]  [BUGGY]  dPrev    =    q2;    q2  =  q2;  dPrev  =  q2;  q2  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    q2  =  q2;  dPrev  =  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        q2    =    q2;    dPrev  =  q2;  q2  =  q2;	  	compilable	  [FE]  AssertionError  	97	2	add
255	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    q2  =  q2;  cPrev  =  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        q2    =    q2;    cPrev  =  q2;  q2  =  q2;	  	compilable	  [FE]  AssertionError  	97	2	add
256	[BUG]  [BUGGY]  dPrev    =    q2;    q2  =  q2;  cPrev  =  q2;  q2  =  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    q2  =  q2;  cPrev  =  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        q2    =    q2;    cPrev  =  q2;  q2  =  q2;	  	compilable	  [FE]  AssertionError  	97	2	add
257	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    q2  =  q2;  q2  =  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        q2    =    q2;    q2  =  q2;  q2  =  q2;	  	compilable	  [FE]  AssertionError  	97	2	add
258	[BUG]  [BUGGY]  dPrev    =    q2;    q2  =  q2;  q2  =  q2;  q2  =  q2;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    q2  =  q2;  q2  =  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        q2    =    q2;    q2  =  q2;  q2  =  q2;	  	compilable	  [FE]  AssertionError  	97	2	add
259	[BUG]  [BUGGY]  dPrev    =    q2;    q2  =  q2;  dPrev  =  q2;  q2  =  q2);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    q2  =  q2;  dPrev  =  q2;  q2  =  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        q2    =    q2;    dPrev  =  q2;  q2  =  q2);	  	non-compiled	[CE]  ';'  expected	97	None	add
260	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  dPrev  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    hN;    dPrev  =  cN  /  hN;	  	compilable	  [FE]  AssertionError  	29	2	add
261	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  dPrev  =  cN  /  hN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  dPrev  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    hN;    dPrev  =  cN  /  hN;	  	compilable	  [FE]  AssertionError  	29	2	add
262	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  cPrev  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    hN;    cPrev  =  cN  /  hN;	  	compilable	  [FE]  AssertionError  	29	2	add
263	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  cPrev  =  cN  /  hN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  cPrev  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    hN;    cPrev  =  cN  /  hN;	  	compilable	  [FE]  AssertionError  	29	2	add
264	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  int  dPrev  =  cN  /  hN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  int  dPrev  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    hN;    int  dPrev  =  cN  /  hN;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	29	None	add
265	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  dPrev  =  cN  /  hN);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  dPrev  =  cN  /  hN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    hN;    dPrev  =  cN  /  hN);	  	non-compiled	[CE]  ';'  expected	29	None	add
266	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN;  dPrev  =  q2;	  dPrev    =    q2;    dPrev    =    q2;    	compilable	  [FE]  AssertionError  	44	9	replace
267	[BUG]  [BUGGY]  dPrev  =  cN;  dPrev  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN;  dPrev  =  q2;	  dPrev    =    q2;    dPrev    =    q2;    	compilable	  [FE]  AssertionError  	44	9	replace
268	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  -  q2;  dPrev  =  q2;	  dPrev    =    q2;    dPrev    =    q2;    	compilable	  [FE]  AssertionError  	44	9	replace
269	[BUG]  [BUGGY]  dPrev  =  cN  -  q2;  dPrev  =  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  -  q2;  dPrev  =  q2;	  dPrev    =    q2;    dPrev    =    q2;    	compilable	  [FE]  AssertionError  	44	9	replace
270	[BUG]  [BUGGY]  int  dPrev  =  q2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  dPrev  =  q2;	  dPrev    =    q2;    int    dPrev    =    q2;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	45	None	replace
271	[BUG]  [BUGGY]  int  dPrev  =  q1;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  dPrev  =  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  dPrev  =  q1;	  dPrev    =    q2;    int    dPrev    =    q2;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	45	None	replace
272	[BUG]  [BUGGY]  int  dPrev  =  hN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  dPrev  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  dPrev  =  hN;	  dPrev    =    q2;    int    dPrev    =    q2;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	45	None	replace
273	[BUG]  [BUGGY]  int  dPrev  =  qN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  dPrev  =  qN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  dPrev  =  qN;	  dPrev    =    q2;    int    dPrev    =    q2;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	45	None	replace
274	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	p0  =  p0;	  dPrev    =    p0;    p0    =    p0;    	compilable	  [FE]  OutOfRangeException  	20	11	replace
275	[BUG]  [BUGGY]  p0  =  p0;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  p0;	  dPrev    =    p0;    p0    =    p0;    	compilable	  [FE]  OutOfRangeException  	20	11	replace
276	[BUG]  [BUGGY]  dPrev  =  p0;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  p0  =  p1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  p0  =  p1;	  dPrev    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	20	None	replace
277	[BUG]  [BUGGY]  dPrev  =  p0;  p0  =  pN;  [CE]  cannot  find  symbol  pN  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  p0  =  pN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  p0  =  pN;	  dPrev    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  pN	20	None	replace
278	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN;  p0  =  p0;	  dPrev    =    p0;    p0    =    p0;    	compilable	  [FE]  OutOfRangeException  	20	11	replace
279	[BUG]  [BUGGY]  dPrev  =  cN;  p0  =  p0;  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN;  p0  =  p0;	  dPrev    =    p0;    p0    =    p0;    	compilable	  [FE]  OutOfRangeException  	20	11	replace
280	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0  /  q2;  dPrev  =  cN  /  q1;	  dPrev    =    cN    /    q2;    dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	42	11	replace
281	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q2;  dPrev  =  cN  /  q1;	  dPrev    =    cN    /    q2;    dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	42	11	replace
282	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	110	6	replace
283	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q1;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	110	6	replace
284	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	q2  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  OutOfRangeException  	110	11	replace
285	[BUG]  [BUGGY]  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	q2  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  OutOfRangeException  	110	11	replace
286	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q1;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	110	6	replace
287	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q1;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	110	6	replace
288	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	110	8	replace
289	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	110	8	replace
290	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  p0  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0    /    q1;    dPrev  =  p0  /  q1;	  	compilable	  [FE]  AssertionError  	55	2	add
291	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  p0  /  q1;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  p0  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q1;    dPrev  =  p0  /  q1;	  	compilable	  [FE]  AssertionError  	55	2	add
292	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  cPrev  =  p0  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0    /    q1;    cPrev  =  p0  /  q1;	  	compilable	  [FE]  AssertionError  	55	2	add
293	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  cPrev  =  p0  /  q1;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  cPrev  =  p0  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q1;    cPrev  =  p0  /  q1;	  	compilable	  [FE]  AssertionError  	55	2	add
294	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0    /    q1;    dPrev  =  p0  /  q2;	  	compilable	  [FE]  AssertionError  	55	2	add
295	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  p0  /  q2;  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q1;    dPrev  =  p0  /  q2;	  	compilable	  [FE]  AssertionError  	55	2	add
296	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  p0  /  q1);  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  p0  /  q1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q1;    dPrev  =  p0  /  q1);	  	non-compiled	[CE]  ';'  expected	55	None	add
297	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  p0  /  q1,  cN;  [CE]  ';'  expected  [FE]            OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  p0  /  q1,  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q1;    dPrev  =  p0  /  q1,  cN;	  	non-compiled	[CE]  ';'  expected	55	None	add
298	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	q2  =  cN  /  q2;	  dPrev    =    cN    /    q2;    q2    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	100	10	replace
299	[BUG]  [BUGGY]  q2  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	q2  =  cN  /  q2;	  dPrev    =    cN    /    q2;    q2    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	100	10	replace
300	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  cN  /  q1;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cPrev  =  cN  /  q1;  q2  =  cN  /  q2;	  dPrev    =    cN    /    q2;    q2    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	100	10	replace
301	[BUG]  [BUGGY]  cPrev  =  cN  /  q1;  q2  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  cN  /  q1;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cPrev  =  cN  /  q1;  q2  =  cN  /  q2;	  dPrev    =    cN    /    q2;    q2    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	100	10	replace
302	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  q2  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  *  q2;  q2  =  cN  *  q2;	  dPrev    =    cN    /    q2;    q2    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	100	11	replace
303	[BUG]  [BUGGY]  dPrev  =  cN  *  q2;  q2  =  cN  *  q2;  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  q2  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  *  q2;  q2  =  cN  *  q2;	  dPrev    =    cN    /    q2;    q2    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	100	11	replace
304	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q1;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q1;  q2  =  cN  /  q2;	  dPrev    =    cN    /    q2;    q2    =    cN    /    q2;    	compilable	timeout	100	1	replace
305	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  q2  =  cN  /  q2;  timeout  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q1;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q1;  q2  =  cN  /  q2;	  dPrev    =    cN    /    q2;    q2    =    cN    /    q2;    	compilable	timeout	100	1	replace
306	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  cN  =  cN;	  dPrev    =    cN;    cN    =    cN;    	compilable	  [FE]  OutOfRangeException  	102	11	replace
307	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  cN  =  cN;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  cN  =  cN;	  dPrev    =    cN;    cN    =    cN;    	compilable	  [FE]  OutOfRangeException  	102	11	replace
308	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  cN;	  dPrev    =    cN;    cN    =    cN;    	compilable	  [FE]  OutOfRangeException  	102	11	replace
309	[BUG]  [BUGGY]  cN  =  cN;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  cN;	  dPrev    =    cN;    cN    =    cN;    	compilable	  [FE]  OutOfRangeException  	102	11	replace
310	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  cPrev;  p0  =  cN;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	p0  =  cPrev;  p0  =  cN;  cN  =  cN;	  dPrev    =    cN;    cN    =    cN;    	compilable	  [FE]  OutOfRangeException  	102	11	replace
311	[BUG]  [BUGGY]  p0  =  cPrev;  p0  =  cN;  cN  =  cN;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  cPrev;  p0  =  cN;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  cPrev;  p0  =  cN;  cN  =  cN;	  dPrev    =    cN;    cN    =    cN;    	compilable	  [FE]  OutOfRangeException  	102	11	replace
312	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cPrev  -  1.0)/  dPrev;	  n    =    Math.abs(dPrev    -    1.0)/    cN;    	non-compiled	[CE]  possible  loss  of  precision	60	None	replace
313	[BUG]  [BUGGY]  dPrev  =  qN  /  q1;  [CE]  cannot  find  symbol  qN  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  qN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  qN  /  q1;	  dPrev    =    q2    /    q1;    	non-compiled	[CE]  cannot  find  symbol  qN	134	None	replace
314	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev  -  1);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(cN,  dPrev  -  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(cN,  dPrev  -  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	132	None	replace
315	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  /  1);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(dPrev,  cN  /  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  cN  /  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	132	None	replace
316	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(dPrev,  cN  *  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  cN  *  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	132	None	replace
317	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon  -  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon  -  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  cN  *  epsilon  -  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	132	None	replace
318	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  1.0);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(dPrev  /  1.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  /  1.0);	  n    =    Math.abs(dPrev    -    1.0);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
319	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  -  1.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  -  1.0);	  n    =    Math.abs(dPrev    -    1.0);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
320	[BUG]  [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  q2;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(epsilon  -  1.0)/  q2;	  n    =    Math.abs(epsilon    -    1.0)/    q2;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	143	None	replace
321	[BUG]  [BUGGY]  dPrev  =  p0;  hPrev  =  p1;  [CE]  cannot  find  symbol  p1  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  hPrev  =  p1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  hPrev  =  p1;	  dPrev    =    p0;    hPrev    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	92	None	replace
322	[BUG]  [BUGGY]  timeout  [FE]      ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN;  hPrev  =  p0;	  dPrev    =    p0;    hPrev    =    p0;    	compilable	timeout	92	1	replace
323	[BUG]  [BUGGY]  dPrev  =  cN;  hPrev  =  p0;  timeout  [FE]      ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN;  hPrev  =  p0;	  dPrev    =    p0;    hPrev    =    p0;    	compilable	timeout	92	1	replace
324	[BUG]  [BUGGY]  dPrev  =  p0;  hPrev  =  pN;  [CE]  cannot  find  symbol  pN  [FE]        ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  hPrev  =  pN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  hPrev  =  pN;	  dPrev    =    p0;    hPrev    =    p0;    	non-compiled	[CE]  cannot  find  symbol  pN	92	None	replace
325	[BUG]  [BUGGY]  dPrev  =  p0;  hPrev  =  p2;  [CE]  cannot  find  symbol  p2  [FE]          ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  hPrev  =  p2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  hPrev  =  p2;	  dPrev    =    p0;    hPrev    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	92	None	replace
326	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0,  deltaN);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  -  1.0,  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  1.0,  deltaN);	  n    =    Math.abs(deltaN    -    1.0,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	116	None	replace
327	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0,  x,  epsilon);  [CE]  no  suitable  method  found  for  abs(double,double,double)  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  1.0,  x,  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0,  x,  epsilon);	  n    =    Math.abs(deltaN    -    1.0,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,double)	116	None	replace
328	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0,  epsilon,  hN);  [CE]  no  suitable  method  found  for  abs(double,double,double)  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  1.0,  epsilon,  hN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0,  epsilon,  hN);	  n    =    Math.abs(deltaN    -    1.0,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,double)	116	None	replace
329	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0,  epsilon);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(dPrev  -  1.0,  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  -  1.0,  epsilon);	  n    =    Math.abs(deltaN    -    1.0,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	116	None	replace
330	[BUG]  [BUGGY]  n  =  Math.abs(hN  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(hN  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(hN  -  1.0)/  deltaN;	  n    =    Math.abs(deltaN    -    1.0)/    hN;    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
331	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	6	2	add
332	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	6	2	add
333	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	6	2	add
334	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	6	2	add
335	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	6	2	add
336	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	6	2	add
337	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	6	2	add
338	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	6	2	add
339	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1,  dPrev  =  cN  /  q1;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1,  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1,  dPrev  =  cN  /  q1;	  	non-compiled	[CE]  ';'  expected	6	None	add
340	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  q1);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(dPrev,  q1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(dPrev,  q1);	  n    =    Math.min(deltaN,    q1);    	non-compiled	[CE]  possible  loss  of  precision	111	None	replace
341	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  q1);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(epsilon,  q1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(epsilon,  q1);	  n    =    Math.min(deltaN,    q1);    	non-compiled	[CE]  possible  loss  of  precision	111	None	replace
342	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev,  epsilon);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(cN,  dPrev,  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(cN,  dPrev,  epsilon);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	78	None	replace
343	[BUG]  [BUGGY]  n  =  Math.min(cN,  p0);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(cN,  p0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(cN,  p0);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
344	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    cN  =  Math.abs(deltaN  -  1.0)/  dPrev;	  	compilable	  [FE]  ConvergenceException  	62	12	add
345	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    cN  =  Math.abs(deltaN  -  1.0)/  dPrev;	  	compilable	  [FE]  ConvergenceException  	62	12	add
346	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  dPrev  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    dPrev  =  Math.abs(deltaN  -  1.0)/  dPrev;	  	compilable	  [FE]  ConvergenceException  	62	12	add
347	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  dPrev  =  Math.abs(deltaN  -  1.0)/  dPrev;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  dPrev  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    dPrev  =  Math.abs(deltaN  -  1.0)/  dPrev;	  	compilable	  [FE]  ConvergenceException  	62	12	add
348	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  int  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  int  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    int  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	62	None	add
349	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev);  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dPrev);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    cN  =  Math.abs(deltaN  -  1.0)/  dPrev);	  	non-compiled	[CE]  ';'  expected	62	None	add
350	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(epsilon,  dPrev);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(epsilon,  dPrev);	  n    =    Math.min(dPrev,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
351	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(dPrev,  epsilon  +  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(dPrev,  epsilon  +  1);	  n    =    Math.min(dPrev,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	85	None	replace
352	[BUG]  [BUGGY]  n  =  Math.min(cN,  q2);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(cN,  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(cN,  q2);	  n    =    Math.min(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
353	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  q1,  q2);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(dPrev,  q1,  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(dPrev,  q1,  q2);	  n    =    Math.min(dPrev,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	24	None	replace
354	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	q1  =  cN  /  q1;	  dPrev    =    cN    /    q1;    q1    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	115	11	replace
355	[BUG]  [BUGGY]  q1  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	q1  =  cN  /  q1;	  dPrev    =    cN    /    q1;    q1    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	115	11	replace
356	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  q1  =  cN  /  q1;	  dPrev    =    cN    /    q1;    q1    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	115	11	replace
357	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  q1  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  q1  =  cN  /  q1;	  dPrev    =    cN    /    q1;    q1    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	115	11	replace
358	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q1;  q1  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q1;  q1  =  cN  /  q2;	  dPrev    =    cN    /    q1;    q1    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	115	11	replace
359	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  q1  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q1;  q1  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q1;  q1  =  cN  /  q2;	  dPrev    =    cN    /    q1;    q1    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	115	11	replace
360	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  cN  /  q2;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cPrev  =  cN  /  q2;  q1  =  cN  /  q1;	  dPrev    =    cN    /    q1;    q1    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	115	11	replace
361	[BUG]  [BUGGY]  cPrev  =  cN  /  q2;  q1  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  cN  /  q2;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cPrev  =  cN  /  q2;  q1  =  cN  /  q1;	  dPrev    =    cN    /    q1;    q1    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	115	11	replace
362	[BUG]  [BUGGY]  n  =  Math.min(hN,  deltaN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(hN,  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(hN,  deltaN);	  n    =    Math.min(deltaN,    hN);    	non-compiled	[CE]  possible  loss  of  precision	112	None	replace
363	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  hN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(epsilon,  hN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(epsilon,  hN);	  n    =    Math.min(deltaN,    hN);    	non-compiled	[CE]  possible  loss  of  precision	112	None	replace
364	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  hN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(dPrev,  hN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(dPrev,  hN);	  n    =    Math.min(deltaN,    hN);    	non-compiled	[CE]  possible  loss  of  precision	112	None	replace
365	[BUG]  [BUGGY]  n  =  Math.min(cN,  hN);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(cN,  hN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(cN,  hN);	  n    =    Math.min(deltaN,    hN);    	non-compiled	[CE]  possible  loss  of  precision	112	None	replace
366	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  epsilon  *  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  epsilon  *  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  epsilon  *  1);	  n    =    Math.abs(deltaN    -    epsilon    +    1);    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
367	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  deltaN  +  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  -  deltaN  +  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  deltaN  +  1);	  n    =    Math.abs(deltaN    -    epsilon    +    1);    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
368	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(dPrev  -  epsilon  +  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  -  epsilon  +  1);	  n    =    Math.abs(deltaN    -    epsilon    +    1);    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
369	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0  /  q1;  dPrev  =  cN  /  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	11	replace
370	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q1;  dPrev  =  cN  /  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	11	replace
371	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0  /  q1;  dPrev  =  cN  /  q1;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	11	replace
372	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q1;  dPrev  =  cN  /  q1;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	11	replace
373	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  p0;	  dPrev    =    p0;    cN    =    p0;    	compilable	timeout	94	1	replace
374	[BUG]  [BUGGY]  cN  =  p0;  timeout  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  p0;	  dPrev    =    p0;    cN    =    p0;    	compilable	timeout	94	1	replace
375	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  cN  =  p0;	  dPrev    =    p0;    cN    =    p0;    	compilable	timeout	94	1	replace
376	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  cN  =  p0;  timeout  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  cN  =  p0;	  dPrev    =    p0;    cN    =    p0;    	compilable	timeout	94	1	replace
377	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  p0;  cN  =  p0;	  dPrev    =    p0;    cN    =    p0;    	compilable	timeout	94	1	replace
378	[BUG]  [BUGGY]  dPrev  =  cN  /  p0;  cN  =  p0;  timeout  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  p0;  cN  =  p0;	  dPrev    =    p0;    cN    =    p0;    	compilable	timeout	94	1	replace
379	[BUG]  [BUGGY]  dPrev  =  p0;  cN  =  p1;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  cN  =  p1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  cN  =  p1;	  dPrev    =    p0;    cN    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	94	None	replace
380	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0    /    q2;    dPrev  =  p0  /  q2;	  	compilable	  [FE]  AssertionError  	31	2	add
381	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q2;    dPrev  =  p0  /  q2;	  	compilable	  [FE]  AssertionError  	31	2	add
382	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  int  dPrev  =  p0  /  q2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  int  dPrev  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q2;    int  dPrev  =  p0  /  q2;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	31	None	add
383	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2);  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q2;    dPrev  =  p0  /  q2);	  	non-compiled	[CE]  ';'  expected	31	None	add
384	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  p0  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0    /    q2;    p0  =  p0  /  q2;	  	compilable	  [FE]  AssertionError  	31	2	add
385	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  p0  =  p0  /  q2;  [FE]  AssertionError  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  p0  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q2;    p0  =  p0  /  q2;	  	compilable	  [FE]  AssertionError  	31	2	add
386	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  dPrev  =  p0;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        p0    =    p0;    dPrev  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	19	2	add
387	[BUG]  [BUGGY]  dPrev    =    p0;    p0  =  p0;  dPrev  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  dPrev  =  p0;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        p0    =    p0;    dPrev  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	19	2	add
388	[BUG]  [BUGGY]  dPrev    =    p0;    p0  =  p0;  int  dPrev  =  p0;  p0  =  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  int  dPrev  =  p0;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        p0    =    p0;    int  dPrev  =  p0;  p0  =  p0;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	19	None	add
389	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	19	2	add
390	[BUG]  [BUGGY]  dPrev    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	19	2	add
391	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  cPrev  =  p0;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        p0    =    p0;    cPrev  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	19	2	add
392	[BUG]  [BUGGY]  dPrev    =    p0;    p0  =  p0;  cPrev  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  cPrev  =  p0;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        p0    =    p0;    cPrev  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	19	2	add
393	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  cN,  q1,  q2);  [CE]  no  suitable  method  found  for  min(double,double,double,double)  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(deltaN,  cN,  q1,  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(deltaN,  cN,  q1,  q2);	  n    =    Math.min(deltaN,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double,double)	113	None	replace
394	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  deltaN,  q1,  q2);  [CE]  no  suitable  method  found  for  min(double,double,double,double)  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(dPrev,  deltaN,  q1,  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(dPrev,  deltaN,  q1,  q2);	  n    =    Math.min(deltaN,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double,double)	113	None	replace
395	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  p0,  q1,  q2);  [CE]  no  suitable  method  found  for  min(double,double,double,double)  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(deltaN,  p0,  q1,  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(deltaN,  p0,  q1,  q2);	  n    =    Math.min(deltaN,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double,double)	113	None	replace
396	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  cPrev  =  q2;	  dPrev    =    q2;    cPrev    =    q2;    	compilable	  [FE]  OutOfRangeException  	47	11	replace
397	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  q2;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  cPrev  =  q2;	  dPrev    =    q2;    cPrev    =    q2;    	compilable	  [FE]  OutOfRangeException  	47	11	replace
398	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN;  cPrev  =  q2;	  dPrev    =    q2;    cPrev    =    q2;    	compilable	  [FE]  OutOfRangeException  	47	11	replace
399	[BUG]  [BUGGY]  dPrev  =  cN;  cPrev  =  q2;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN;  cPrev  =  q2;	  dPrev    =    q2;    cPrev    =    q2;    	compilable	  [FE]  OutOfRangeException  	47	11	replace
400	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  -  q2;  cPrev  =  q2;	  dPrev    =    q2;    cPrev    =    q2;    	compilable	  [FE]  OutOfRangeException  	47	11	replace
401	[BUG]  [BUGGY]  dPrev  =  cN  -  q2;  cPrev  =  q2;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  -  q2;  cPrev  =  q2;	  dPrev    =    q2;    cPrev    =    q2;    	compilable	  [FE]  OutOfRangeException  	47	11	replace
402	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  dPrev  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    *    q2;    dPrev  =  cN  *  q2;	  	compilable	  [FE]  AssertionError  	106	2	add
403	[BUG]  [BUGGY]  dPrev  =  cN  *  q2;  dPrev  =  cN  *  q2;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  dPrev  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    *    q2;    dPrev  =  cN  *  q2;	  	compilable	  [FE]  AssertionError  	106	2	add
404	[BUG]  [BUGGY]  dPrev  =  cN  *  q2;  int  dPrev  =  cN  *  q2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  int  dPrev  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    *    q2;    int  dPrev  =  cN  *  q2;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	106	None	add
405	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  cN  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    *    q2;    cN  =  cN  *  q2;	  	compilable	  [FE]  ConvergenceException  	106	11	add
406	[BUG]  [BUGGY]  dPrev  =  cN  *  q2;  cN  =  cN  *  q2;  [FE]  ConvergenceException  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  cN  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    *    q2;    cN  =  cN  *  q2;	  	compilable	  [FE]  ConvergenceException  	106	11	add
407	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  /  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  /  epsilon  +  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  /  epsilon  +  1);	  n    =    Math.abs(deltaN    /    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
408	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  /  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  /  DEFAULT_EPSILON);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  /  DEFAULT_EPSILON);	  n    =    Math.abs(deltaN    /    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
409	[BUG]  [BUGGY]  n  =  Math.abs(FastMath.abs(deltaN  -  1.0));  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(FastMath.abs(deltaN  -  1.0));  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(FastMath.abs(deltaN  -  1.0));	  n    =    Math.abs(fastMath.abs(deltaN    -    1.0));    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
410	[BUG]  [BUGGY]  n  =  Math.abs(tMath.abs(deltaN  -  1.0));  [CE]  cannot  find  symbol  tMath  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(tMath.abs(deltaN  -  1.0));  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(tMath.abs(deltaN  -  1.0));	  n    =    Math.abs(fastMath.abs(deltaN    -    1.0));    	non-compiled	[CE]  cannot  find  symbol  tMath	2	None	replace
411	[BUG]  [BUGGY]  n  =  Math.abs(cN.abs(deltaN  -  1.0));  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN.abs(deltaN  -  1.0));  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN.abs(deltaN  -  1.0));	  n    =    Math.abs(fastMath.abs(deltaN    -    1.0));    	non-compiled	[CE]  double  cannot  be  dereferenced	2	None	replace
412	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  deltaN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  deltaN);	  n    =    Math.abs(epsilon    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	69	None	replace
413	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  /  deltaN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  /  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  /  deltaN);	  n    =    Math.abs(epsilon    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	69	None	replace
414	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev  *  epsilon);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(cN,  dPrev  *  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(cN,  dPrev  *  epsilon);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	79	None	replace
415	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  deltaN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(dPrev,  cN  *  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  cN  *  deltaN);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	79	None	replace
416	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  cN  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(epsilon,  cN  *  dPrev);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(epsilon,  cN  *  dPrev);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	79	None	replace
417	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  epsilon  *  cN);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(dPrev,  epsilon  *  cN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  epsilon  *  cN);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	79	None	replace
418	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q1    /    q2;    dPrev  =  q1  /  q2;	  	compilable	  [FE]  AssertionError  	125	2	add
419	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    q2;    dPrev  =  q1  /  q2;	  	compilable	  [FE]  AssertionError  	125	2	add
420	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2);  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    q2;    dPrev  =  q1  /  q2);	  	non-compiled	[CE]  ';'  expected	125	None	add
421	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  int  dPrev  =  q1  /  q2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2;  int  dPrev  =  q1  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    q2;    int  dPrev  =  q1  /  q2;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	125	None	add
422	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2;  cPrev  =  q1  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q1    /    q2;    cPrev  =  q1  /  q2;	  	compilable	  [FE]  AssertionError  	125	2	add
423	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  cPrev  =  q1  /  q2;  [FE]  AssertionError  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2;  cPrev  =  q1  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    q2;    cPrev  =  q1  /  q2;	  	compilable	  [FE]  AssertionError  	125	2	add
424	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2,;  [CE]  ';'  expected  [FE]            OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q1  /  q2,;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    q2;    dPrev  =  q1  /  q2,;	  	non-compiled	[CE]  ';'  expected	125	None	add
425	[BUG]  [BUGGY]  n  =  Math.max(cN,  q2);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(cN,  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(cN,  q2);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	103	None	replace
426	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  q1);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(dPrev,  q1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  q1);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	103	None	replace
427	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    dPrev  =  cN  /  q1;  q1  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	114	2	add
428	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  q1  =  cN  /  q1;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    dPrev  =  cN  /  q1;  q1  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	114	2	add
429	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  q1  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    dPrev  =  cN  /  q1;  q1  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	114	11	add
430	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  q1  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  q1  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    dPrev  =  cN  /  q1;  q1  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	114	11	add
431	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  cPrev  =  cN  /  q1;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    cPrev  =  cN  /  q1;  q1  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	114	2	add
432	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  cPrev  =  cN  /  q1;  q1  =  cN  /  q1;  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  cPrev  =  cN  /  q1;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    cPrev  =  cN  /  q1;  q1  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	114	2	add
433	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  q2  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    dPrev  =  cN  /  q1;  q2  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	114	11	add
434	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  q2  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  q2  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    dPrev  =  cN  /  q1;  q2  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	114	11	add
435	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  q1  =  cN  /  q1);  [CE]  ';'  expected  [FE]            OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  q1  =  cN  /  q1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    dPrev  =  cN  /  q1;  q1  =  cN  /  q1);	  	non-compiled	[CE]  ';'  expected	114	None	add
436	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(cN  -  1.0)/  deltaN;	  cN    =    Math.abs(cN    -    1.0)/    q2;    timeout    	compilable	timeout	121	1	replace
437	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  deltaN;  timeout  [FE]        ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(cN  -  1.0)/  deltaN;	  cN    =    Math.abs(cN    -    1.0)/    q2;    timeout    	compilable	timeout	121	1	replace
438	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(cN  -  1.0)/  dPrev;	  cN    =    Math.abs(cN    -    1.0)/    q2;    timeout    	compilable	  [FE]  ConvergenceException  	121	12	replace
439	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  dPrev;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(cN  -  1.0)/  dPrev;	  cN    =    Math.abs(cN    -    1.0)/    q2;    timeout    	compilable	  [FE]  ConvergenceException  	121	12	replace
440	[BUG]  [BUGGY]  timeout  [FE]            ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(cN  -  1.0)/  q1;	  cN    =    Math.abs(cN    -    1.0)/    q2;    timeout    	compilable	timeout	121	1	replace
441	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q1;  timeout  [FE]            ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(cN  -  1.0)/  q1;	  cN    =    Math.abs(cN    -    1.0)/    q2;    timeout    	compilable	timeout	121	1	replace
442	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(cN  -  1.0)/  epsilon;	  cN    =    Math.abs(cN    -    1.0)/    q2;    timeout    	compilable	  [FE]  AssertionError  	121	8	replace
443	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  epsilon;  [FE]  AssertionError  [FE]              ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(cN  -  1.0)/  epsilon;	  cN    =    Math.abs(cN    -    1.0)/    q2;    timeout    	compilable	  [FE]  AssertionError  	121	8	replace
444	[BUG]  [BUGGY]  int  dPrev  =  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  dPrev  =  cN;	  dPrev    =    cN;    int    dPrev    =    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	75	None	replace
445	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cPrev  =  cN;	  dPrev    =    cN;    int    dPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	75	11	replace
446	[BUG]  [BUGGY]  cPrev  =  cN;  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cPrev  =  cN;	  dPrev    =    cN;    int    dPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	75	11	replace
447	[BUG]  [BUGGY]  int  cPrev  =  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  cPrev  =  cN;	  dPrev    =    cN;    int    dPrev    =    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	75	None	replace
448	[BUG]  [BUGGY]  p0  =  cPrev;  int  dPrev  =  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  cPrev;  int  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  cPrev;  int  dPrev  =  cN;	  dPrev    =    cN;    int    dPrev    =    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	75	None	replace
449	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2,  q1;  [CE]  ';'  expected  [FE]        OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2,  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q2;  dPrev  =  p0  /  q2,  q1;	  dPrev    =    cN    /    q2;    dPrev    =    cN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	127	None	replace
450	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  cN  /  q2,  q1;  [CE]  ';'  expected  [FE]          OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  cN  /  q2,  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q2;  dPrev  =  cN  /  q2,  q1;	  dPrev    =    cN    /    q2;    dPrev    =    cN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	127	None	replace
451	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  dPrev  =  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        dPrev    =    q2;    dPrev  =  q2;  dPrev  =  q2;	  	compilable	  [FE]  AssertionError  	43	2	add
452	[BUG]  [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  dPrev  =  q2;  dPrev  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  dPrev  =  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        dPrev    =    q2;    dPrev  =  q2;  dPrev  =  q2;	  	compilable	  [FE]  AssertionError  	43	2	add
453	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  cPrev  =  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        dPrev    =    q2;    cPrev  =  q2;  dPrev  =  q2;	  	compilable	  [FE]  AssertionError  	43	2	add
454	[BUG]  [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  cPrev  =  q2;  dPrev  =  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  cPrev  =  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        dPrev    =    q2;    cPrev  =  q2;  dPrev  =  q2;	  	compilable	  [FE]  AssertionError  	43	2	add
455	[BUG]  [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  int  dPrev  =  q2;  dPrev  =  q2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  int  dPrev  =  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        dPrev    =    q2;    int  dPrev  =  q2;  dPrev  =  q2;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	43	None	add
456	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  q2  =  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        dPrev    =    q2;    q2  =  q2;  dPrev  =  q2;	  	compilable	  [FE]  AssertionError  	43	2	add
457	[BUG]  [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  q2  =  q2;  dPrev  =  q2;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  q2  =  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        dPrev    =    q2;    q2  =  q2;  dPrev  =  q2;	  	compilable	  [FE]  AssertionError  	43	2	add
458	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN    =    Math.abs(deltaN    -    1.0)/    epsilon;    cN  =  Math.abs(deltaN  -  1.0)/  epsilon;	  	compilable	  [FE]  ConvergenceException  	64	11	add
459	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    epsilon;    cN  =  Math.abs(deltaN  -  1.0)/  epsilon;	  	compilable	  [FE]  ConvergenceException  	64	11	add
460	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  int  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  int  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    epsilon;    int  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	64	None	add
461	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  cN  =  Math.abs(deltaN  -  1.0)/  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    epsilon;    cN  =  Math.abs(deltaN  -  1.0)/  epsilon);	  	non-compiled	[CE]  ';'  expected	64	None	add
462	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  double  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  double  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    epsilon;    double  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	64	None	add
463	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  dPrev  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  dPrev  /  q2;	  dPrev    =    qN    /    q2;    	compilable	  [FE]  OutOfRangeException  	119	11	replace
464	[BUG]  [BUGGY]  dPrev  =  dPrev  /  q2;  [FE]  OutOfRangeException  [FE]        AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  dPrev  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  dPrev  /  q2;	  dPrev    =    qN    /    q2;    	compilable	  [FE]  OutOfRangeException  	119	11	replace
465	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  hN  /  q2;	  dPrev    =    qN    /    q2;    	compilable	  [FE]  OutOfRangeException  	119	11	replace
466	[BUG]  [BUGGY]  dPrev  =  hN  /  q2;  [FE]  OutOfRangeException  [FE]          AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  hN  /  q2;	  dPrev    =    qN    /    q2;    	compilable	  [FE]  OutOfRangeException  	119	11	replace
467	[BUG]  [BUGGY]  dPrev  =  pN  /  q1;  [CE]  cannot  find  symbol  pN  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  pN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  pN  /  q1;	  dPrev    =    p0    /    q1;    	non-compiled	[CE]  cannot  find  symbol  pN	56	None	replace
468	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  dPrev  =  p0;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        dPrev    =    p0;    dPrev  =  p0;  dPrev  =  p0;	  	compilable	  [FE]  AssertionError  	14	2	add
469	[BUG]  [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  dPrev  =  p0;  dPrev  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  dPrev  =  p0;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        dPrev    =    p0;    dPrev  =  p0;  dPrev  =  p0;	  	compilable	  [FE]  AssertionError  	14	2	add
470	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  p0  =  p0;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        dPrev    =    p0;    p0  =  p0;  dPrev  =  p0;	  	compilable	  [FE]  AssertionError  	14	2	add
471	[BUG]  [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  p0  =  p0;  dPrev  =  p0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  p0  =  p0;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        dPrev    =    p0;    p0  =  p0;  dPrev  =  p0;	  	compilable	  [FE]  AssertionError  	14	2	add
472	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  cPrev  =  p0;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        dPrev    =    p0;    cPrev  =  p0;  dPrev  =  p0;	  	compilable	  [FE]  AssertionError  	14	2	add
473	[BUG]  [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  cPrev  =  p0;  dPrev  =  p0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  cPrev  =  p0;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        dPrev    =    p0;    cPrev  =  p0;  dPrev  =  p0;	  	compilable	  [FE]  AssertionError  	14	2	add
474	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  cN  =  p0;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        dPrev    =    p0;    cN  =  p0;  dPrev  =  p0;	  	compilable	  [FE]  AssertionError  	14	6	add
475	[BUG]  [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  cN  =  p0;  dPrev  =  p0;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  cN  =  p0;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        dPrev    =    p0;    cN  =  p0;  dPrev  =  p0;	  	compilable	  [FE]  AssertionError  	14	6	add
476	[BUG]  [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  n  =  p0;  dPrev  =  p0;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  n  =  p0;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        dPrev    =    p0;    n  =  p0;  dPrev  =  p0;	  	non-compiled	[CE]  possible  loss  of  precision	14	None	add
477	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q2    /    q1;    dPrev  =  q2  /  q1;	  	compilable	  [FE]  AssertionError  	133	2	add
478	[BUG]  [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    q1;    dPrev  =  q2  /  q1;	  	compilable	  [FE]  AssertionError  	133	2	add
479	[BUG]  [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1);  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    q1;    dPrev  =  q2  /  q1);	  	non-compiled	[CE]  ';'  expected	133	None	add
480	[BUG]  [BUGGY]  dPrev  =  q2  /  q1;  int  dPrev  =  q2  /  q1;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  q1;  int  dPrev  =  q2  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    q1;    int  dPrev  =  q2  /  q1;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	133	None	add
481	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  q1;  cPrev  =  q2  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q2    /    q1;    cPrev  =  q2  /  q1;	  	compilable	  [FE]  AssertionError  	133	2	add
482	[BUG]  [BUGGY]  dPrev  =  q2  /  q1;  cPrev  =  q2  /  q1;  [FE]  AssertionError  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  q1;  cPrev  =  q2  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    q1;    cPrev  =  q2  /  q1;	  	compilable	  [FE]  AssertionError  	133	2	add
483	[BUG]  [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1,  n;  [CE]  ';'  expected  [FE]            OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1,  n;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    q1;    dPrev  =  q2  /  q1,  n;	  	non-compiled	[CE]  ';'  expected	133	None	add
484	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	10	2	add
485	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	10	2	add
486	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q2;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	10	2	add
487	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  cPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q2;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	10	2	add
488	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2);	  	non-compiled	[CE]  ';'  expected	10	None	add
489	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  q1  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q2;    q1  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	10	11	add
490	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  q1  =  cN  /  q1;  dPrev  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  q1  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q2;    q1  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	10	11	add
491	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  n  =  cN  /  q1;  dPrev  =  cN  /  q2;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  n  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q2;    n  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	non-compiled	[CE]  possible  loss  of  precision	10	None	add
492	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  p0;  cPrev  =  p0;	  dPrev    =    p0;    cPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	18	9	replace
493	[BUG]  [BUGGY]  dPrev  =  cN  /  p0;  cPrev  =  p0;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  p0;  cPrev  =  p0;	  dPrev    =    p0;    cPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	18	9	replace
494	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN;  cPrev  =  p0;	  dPrev    =    p0;    cPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	18	11	replace
495	[BUG]  [BUGGY]  dPrev  =  cN;  cPrev  =  p0;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN;  cPrev  =  p0;	  dPrev    =    p0;    cPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	18	11	replace
496	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  cPrev  =  p0;	  dPrev    =    p0;    cPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	18	11	replace
497	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  p0;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  cPrev  =  p0;	  dPrev    =    p0;    cPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	18	11	replace
498	[BUG]  [BUGGY]  dPrev  =  p0;  cPrev  =  p1;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  cPrev  =  p1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  cPrev  =  p1;	  dPrev    =    p0;    cPrev    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	18	None	replace
499	[BUG]  [BUGGY]  int  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  cN  =  Math.abs(deltaN  -  1.0)/  q1;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    int    cN    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	51	None	replace
500	[BUG]  [BUGGY]  int  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  cN  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    int    cN    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	51	None	replace
501	[BUG]  [BUGGY]  int  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    int    cN    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	51	None	replace
502	[BUG]  [BUGGY]  n  =  Math.max(cN,  q1);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(cN,  q1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(cN,  q1);	  n    =    Math.max(q1,    cN);    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
503	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  cN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(epsilon,  cN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(epsilon,  cN);	  n    =    Math.max(q1,    cN);    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
504	[BUG]  [BUGGY]  n  =  Math.min(cN,  q1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(cN,  q1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(cN,  q1);	  n    =    Math.max(q1,    cN);    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
505	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  DEFAULT_EPSILON;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  1.0)/  DEFAULT_EPSILON;	  n    =    Math.abs(deltaN    -    1.0)/    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
506	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  DEFAULT_EPSILON;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  -  1.0)/  DEFAULT_EPSILON;	  n    =    Math.abs(deltaN    -    1.0)/    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
507	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  DEFAULT_EPSILON  +  1;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  DEFAULT_EPSILON  +  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0)/  DEFAULT_EPSILON  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    DEFAULT_EPSILON;    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
508	[BUG]  [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(epsilon  -  1.0);	  n    =    Math.abs(epsilon    -    1.0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	1	None	replace
509	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  deltaN  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(epsilon,  deltaN  +  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(epsilon,  deltaN  +  1);	  n    =    Math.min(deltaN,    epsilon    +    1);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
510	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  epsilon  *  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(deltaN,  epsilon  *  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(deltaN,  epsilon  *  1);	  n    =    Math.min(deltaN,    epsilon    +    1);    	non-compiled	[CE]  possible  loss  of  precision	86	None	replace
511	[BUG]  [BUGGY]  n  =  Math.min(cN,  deltaN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(cN,  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(cN,  deltaN);	  n    =    Math.min(deltaN,    cN);    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
512	[BUG]  [BUGGY]  double  n  =  Math.abs(hN  -  1.0);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(hN  -  1.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(hN  -  1.0);	  double    n    =    Math.abs(deltaN    -    1.0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	128	None	replace
513	[BUG]  [BUGGY]  double  n  =  Math.abs(x  -  1.0);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(x  -  1.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(x  -  1.0);	  double    n    =    Math.abs(deltaN    -    1.0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	128	None	replace
514	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  dPrev  =  p0;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        cPrev    =    p0;    dPrev  =  p0;  cPrev  =  p0;	  	compilable	  [FE]  AssertionError  	17	2	add
515	[BUG]  [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  dPrev  =  p0;  cPrev  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  dPrev  =  p0;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cPrev    =    p0;    dPrev  =  p0;  cPrev  =  p0;	  	compilable	  [FE]  AssertionError  	17	2	add
516	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  cPrev  =  p0;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        cPrev    =    p0;    cPrev  =  p0;  cPrev  =  p0;	  	compilable	  [FE]  AssertionError  	17	2	add
517	[BUG]  [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  cPrev  =  p0;  cPrev  =  p0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  cPrev  =  p0;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cPrev    =    p0;    cPrev  =  p0;  cPrev  =  p0;	  	compilable	  [FE]  AssertionError  	17	2	add
518	[BUG]  [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  int  dPrev  =  p0;  cPrev  =  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  int  dPrev  =  p0;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cPrev    =    p0;    int  dPrev  =  p0;  cPrev  =  p0;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
519	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  p0  =  p0;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        cPrev    =    p0;    p0  =  p0;  cPrev  =  p0;	  	compilable	  [FE]  AssertionError  	17	2	add
520	[BUG]  [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  p0  =  p0;  cPrev  =  p0;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  p0  =  p0;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cPrev    =    p0;    p0  =  p0;  cPrev  =  p0;	  	compilable	  [FE]  AssertionError  	17	2	add
521	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  /  2.0);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  /  2.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  /  2.0);	  n    =    Math.abs(deltaN    /    1.0);    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
522	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  /  1.0);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  /  1.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  /  1.0);	  n    =    Math.abs(deltaN    /    1.0);    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
523	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  *  1.0);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  *  1.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  *  1.0);	  n    =    Math.abs(deltaN    /    1.0);    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
524	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  cN  /  q1);  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  dPrev  =  cN  /  q1);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q1;  dPrev  =  cN  /  q1);	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1);    	non-compiled	[CE]  ';'  expected	12	None	replace
525	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  dPrev  =  q1  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q1    /    cN;    dPrev  =  q1  /  cN;	  	compilable	  [FE]  AssertionError  	57	2	add
526	[BUG]  [BUGGY]  dPrev  =  q1  /  cN;  dPrev  =  q1  /  cN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  dPrev  =  q1  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    cN;    dPrev  =  q1  /  cN;	  	compilable	  [FE]  AssertionError  	57	2	add
527	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;	  	compilable	  [FE]  AssertionError  	57	2	add
528	[BUG]  [BUGGY]  dPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  cPrev  =  q1  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    cN;    cPrev  =  q1  /  cN;	  	compilable	  [FE]  AssertionError  	57	2	add
529	[BUG]  [BUGGY]  dPrev  =  q1  /  cN;  int  dPrev  =  q1  /  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  int  dPrev  =  q1  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    cN;    int  dPrev  =  q1  /  cN;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	57	None	add
530	[BUG]  [BUGGY]  dPrev  =  q1  /  cN;  dPrev  =  q1  /  cN);  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  dPrev  =  q1  /  cN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    cN;    dPrev  =  q1  /  cN);	  	non-compiled	[CE]  ';'  expected	57	None	add
531	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q0;  [CE]  cannot  find  symbol  q0  [FE]              ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q0;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q0;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2);    	non-compiled	[CE]  cannot  find  symbol  q0	54	None	replace
532	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q2  /  deltaN;	  dPrev    =    cN    /    deltaN;    	compilable	  [FE]  OutOfRangeException  	34	7	replace
533	[BUG]  [BUGGY]  dPrev  =  q2  /  deltaN;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q2  /  deltaN;	  dPrev    =    cN    /    deltaN;    	compilable	  [FE]  OutOfRangeException  	34	7	replace
534	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0  /  deltaN;	  dPrev    =    cN    /    deltaN;    	compilable	  [FE]  OutOfRangeException  	34	7	replace
535	[BUG]  [BUGGY]  dPrev  =  p0  /  deltaN;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  deltaN;	  dPrev    =    cN    /    deltaN;    	compilable	  [FE]  OutOfRangeException  	34	7	replace
536	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  epsilon  *  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  epsilon  *  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0)/  epsilon  *  1;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon    +    1;    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
537	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN,  epsilon);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(dPrev,  cN,  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(dPrev,  cN,  epsilon);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	80	None	replace
538	[BUG]  [BUGGY]  n  =  Math.min(q1,  cN);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(q1,  cN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(q1,  cN);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	80	None	replace
539	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  dPrev  =  p0;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        hPrev    =    p0;    dPrev  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  ConvergenceException  	91	11	add
540	[BUG]  [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  dPrev  =  p0;  hPrev  =  p0;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  dPrev  =  p0;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        hPrev    =    p0;    dPrev  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  ConvergenceException  	91	11	add
541	[BUG]  [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  int  dPrev  =  p0;  hPrev  =  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  int  dPrev  =  p0;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        hPrev    =    p0;    int  dPrev  =  p0;  hPrev  =  p0;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	91	None	add
542	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  cPrev  =  p0;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        hPrev    =    p0;    cPrev  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  ConvergenceException  	91	11	add
543	[BUG]  [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  cPrev  =  p0;  hPrev  =  p0;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  cPrev  =  p0;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        hPrev    =    p0;    cPrev  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  ConvergenceException  	91	11	add
544	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  p0  =  p0;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        hPrev    =    p0;    p0  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  ConvergenceException  	91	11	add
545	[BUG]  [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  p0  =  p0;  hPrev  =  p0;  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  p0  =  p0;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        hPrev    =    p0;    p0  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  ConvergenceException  	91	11	add
546	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  epsilon;  dPrev  =  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    epsilon;    dPrev  =  epsilon;	  	compilable	  [FE]  AssertionError  	136	2	add
547	[BUG]  [BUGGY]  dPrev  =  epsilon;  dPrev  =  epsilon;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  epsilon;  dPrev  =  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    epsilon;    dPrev  =  epsilon;	  	compilable	  [FE]  AssertionError  	136	2	add
548	[BUG]  [BUGGY]  dPrev  =  epsilon;  int  dPrev  =  epsilon;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  epsilon;  int  dPrev  =  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    epsilon;    int  dPrev  =  epsilon;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	136	None	add
549	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  epsilon;  cPrev  =  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    epsilon;    cPrev  =  epsilon;	  	compilable	  [FE]  AssertionError  	136	2	add
550	[BUG]  [BUGGY]  dPrev  =  epsilon;  cPrev  =  epsilon;  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  epsilon;  cPrev  =  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    epsilon;    cPrev  =  epsilon;	  	compilable	  [FE]  AssertionError  	136	2	add
551	[BUG]  [BUGGY]  dPrev  =  epsilon;  dPrev  =  epsilon);  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  epsilon;  dPrev  =  epsilon);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    epsilon;    dPrev  =  epsilon);	  	non-compiled	[CE]  ';'  expected	136	None	add
552	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  cN  =  cN  /  q1;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    cN  =  cN  /  q1;  q1  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	114	9	add
553	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  cN  =  cN  /  q1;  q1  =  cN  /  q1;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  cN  =  cN  /  q1;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    cN  =  cN  /  q1;  q1  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	114	9	add
554	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  q1  =  cN  /  q1;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    q1  =  cN  /  q1;  q1  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	114	11	add
555	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  q1  =  cN  /  q1;  q1  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  q1  =  cN  /  q1;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    q1  =  cN  /  q1;  q1  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	114	11	add
556	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  dPrev  =  cN  *  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  *  q2;  dPrev  =  cN  *  q1;	  dPrev    =    cN    /    q2;    dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	42	11	replace
557	[BUG]  [BUGGY]  dPrev  =  cN  *  q2;  dPrev  =  cN  *  q1;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  dPrev  =  cN  *  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  *  q2;  dPrev  =  cN  *  q1;	  dPrev    =    cN    /    q2;    dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	42	11	replace
558	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  q2  =  cN  /  q2;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    q2  =  cN  /  q2;  q2  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	99	6	add
559	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  q2  =  cN  /  q2;  q2  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  q2  =  cN  /  q2;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    q2  =  cN  /  q2;  q2  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	99	6	add
560	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  q2)  =  cN  /  q2;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  q2)  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    dPrev  =  cN  /  q2;  q2)  =  cN  /  q2;	  	non-compiled	[CE]  not  a  statement	99	None	add
561	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  cN  =  cN  /  q2;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    cN  =  cN  /  q2;  q2  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	99	7	add
562	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  cN  =  cN  /  q2;  q2  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  cN  =  cN  /  q2;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    cN  =  cN  /  q2;  q2  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	99	7	add
563	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  1.0);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(q1  -  1.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(q1  -  1.0);	  n    =    Math.abs(x    -    1.0);    	non-compiled	[CE]  possible  loss  of  precision	129	None	replace
564	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  q2  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    q2  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	41	6	add
565	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  q2  =  cN  /  q2;  dPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  q2  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    q2  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	41	6	add
566	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  cN  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    cN  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  ConvergenceException  	41	11	add
567	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  cN  =  cN  /  q2;  dPrev  =  cN  /  q1;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  cN  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    cN  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  ConvergenceException  	41	11	add
568	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  1.0)/  cN;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(q1  -  1.0)/  cN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(q1  -  1.0)/  cN;	  n    =    Math.abs(dPrev    -    1.0)/    cN;    	non-compiled	[CE]  possible  loss  of  precision	60	None	replace
569	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
570	[BUG]  [BUGGY]  dPrev  =  cN;  int  dPrev  =  q2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  int  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN;  int  dPrev  =  q2;	  dPrev    =    q2;    int    dPrev    =    q2;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	45	None	replace
571	[BUG]  [BUGGY]  p0  =  q2;  int  dPrev  =  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  q2;  int  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  q2;  int  dPrev  =  p0;	  dPrev    =    q2;    int    dPrev    =    q2;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	45	None	replace
572	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q1  /  cN;  cPrev  =  cN  /  q2;	  dPrev    =    cN    /    q1;    cPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	9	7	replace
573	[BUG]  [BUGGY]  dPrev  =  q1  /  cN;  cPrev  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q1  /  cN;  cPrev  =  cN  /  q2;	  dPrev    =    cN    /    q1;    cPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	9	7	replace
574	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  int  q2  =  Math.abs(deltaN  -  1.0)/  epsilon;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  int  q2  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    epsilon;    int  q2  =  Math.abs(deltaN  -  1.0)/  epsilon;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	64	None	add
575	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  cN  =  p0;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        p0    =    p0;    cN  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	19	6	add
576	[BUG]  [BUGGY]  dPrev    =    p0;    p0  =  p0;  cN  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  cN  =  p0;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        p0    =    p0;    cN  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	19	6	add
577	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  q2  =  p0;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        p0    =    p0;    q2  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	19	10	add
578	[BUG]  [BUGGY]  dPrev    =    p0;    p0  =  p0;  q2  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  q2  =  p0;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        p0    =    p0;    q2  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	19	10	add
579	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  hN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(cN  -  1.0)/  hN;	  cN    =    Math.abs(cN    -    1.0)/    q2;    timeout    	compilable	timeout	121	1	replace
580	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  hN;  timeout  [FE]        ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  hN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(cN  -  1.0)/  hN;	  cN    =    Math.abs(cN    -    1.0)/    q2;    timeout    	compilable	timeout	121	1	replace
581	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q3;  [CE]  cannot  find  symbol  q3  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q3;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        cPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q3;	  	non-compiled	[CE]  cannot  find  symbol  q3	8	None	add
582	[BUG]  [BUGGY]  dPrev  =  cN  *  q1;  dPrev  =  cN  *  q1,  q2;  [CE]  ';'  expected  [FE]        OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q1;  dPrev  =  cN  *  q1,  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  *  q1;  dPrev  =  cN  *  q1,  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1,    q2;    	non-compiled	[CE]  ';'  expected	135	None	replace
583	[BUG]  [BUGGY]  dPrev  =  cN  /  q0;  dPrev  =  cN  /  q1,  q2;  [CE]  ';'  expected  [FE]          OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q0;  dPrev  =  cN  /  q1,  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q0;  dPrev  =  cN  /  q1,  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1,    q2;    	non-compiled	[CE]  ';'  expected	135	None	replace
584	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  /  epsilon  *  2);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  /  epsilon  *  2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  /  epsilon  *  2);	  n    =    Math.abs(deltaN    /    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
585	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  hN;  cPrev  =  cN  /  q2;	  dPrev    =    cN    /    q2;    cPrev    =    cN    /    q2;    	compilable	  [FE]  AssertionError  	38	9	replace
586	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  cPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  hN;  cPrev  =  cN  /  q2;	  dPrev    =    cN    /    q2;    cPrev    =    cN    /    q2;    	compilable	  [FE]  AssertionError  	38	9	replace
587	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0  /  q2;  cPrev  =  cN  /  q2;	  dPrev    =    cN    /    q2;    cPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	38	10	replace
588	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  cPrev  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q2;  cPrev  =  cN  /  q2;	  dPrev    =    cN    /    q2;    cPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	38	10	replace
589	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0,  epsilon);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0,  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(deltaN  -  1.0,  epsilon);	  double    n    =    Math.abs(deltaN    -    1.0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	128	None	replace
590	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  cN  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    hN;    cN  =  cN  /  hN;	  	compilable	  [FE]  AssertionError  	29	6	add
591	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  cN  =  cN  /  hN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  cN  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    hN;    cN  =  cN  /  hN;	  	compilable	  [FE]  AssertionError  	29	6	add
592	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  n  =  cN  /  hN;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  n  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    hN;    n  =  cN  /  hN;	  	non-compiled	[CE]  possible  loss  of  precision	29	None	add
593	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  hN  +  1;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  hN  +  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0)/  hN  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    hN;    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
594	[BUG]  [BUGGY]  N  =  Math.abs(deltaN  -  1.0);  [CE]  cannot  find  symbol  N  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  N  =  Math.abs(deltaN  -  1.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	N  =  Math.abs(deltaN  -  1.0);	  n    =    Math.abs(epsilon    -    1.0);    	non-compiled	[CE]  cannot  find  symbol  N	1	None	replace
595	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(q1  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(q1  -  1.0)/  epsilon;	  n    =    Math.abs(dPrev    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
596	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  epsilon  +  1;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  epsilon  +  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  -  1.0)/  epsilon  +  1;	  n    =    Math.abs(dPrev    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
597	[BUG]  [BUGGY]  p0  =  p0;  int  pPrev  =  p0;  [CE]  possible  loss  of  precision  [FE]          OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  p0;  int  pPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  p0;  int  pPrev  =  p0;	  dPrev    =    p0;    int    dPrev    =    p0;    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
598	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  cN  =  cN  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    p0;    cN  =  cN  /  p0;	  	compilable	  [FE]  ConvergenceException  	138	11	add
599	[BUG]  [BUGGY]  dPrev  =  cN  /  p0;  cN  =  cN  /  p0;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  cN  =  cN  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    p0;    cN  =  cN  /  p0;	  	compilable	  [FE]  ConvergenceException  	138	11	add
600	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  p0  =  cN  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    p0;    p0  =  cN  /  p0;	  	compilable	  [FE]  AssertionError  	138	2	add
601	[BUG]  [BUGGY]  dPrev  =  cN  /  p0;  p0  =  cN  /  p0;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  p0;  p0  =  cN  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    p0;    p0  =  cN  /  p0;	  	compilable	  [FE]  AssertionError  	138	2	add
602	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  defsilon;  [CE]  cannot  find  symbol  defsilon  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  defsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0)/  defsilon;	  n    =    Math.abs(epsilon    -    1.0)/    deltaN;    	non-compiled	[CE]  cannot  find  symbol  defsilon	21	None	replace
603	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q2  /  p0;	  dPrev    =    cN    /    p0;    	compilable	  [FE]  ConvergenceException  	139	11	replace
604	[BUG]  [BUGGY]  dPrev  =  q2  /  p0;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q2  /  p0;	  dPrev    =    cN    /    p0;    	compilable	  [FE]  ConvergenceException  	139	11	replace
605	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q2;  dPrev  =  cN;	  dPrev    =    cN;    dPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	72	11	replace
606	[BUG]  [BUGGY]  dPrev  =  q2;  dPrev  =  cN;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q2;  dPrev  =  cN;	  dPrev    =    cN;    dPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	72	11	replace
607	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	timeout	49	1	add
608	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  timeout  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	timeout	49	1	add
609	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2);  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2);  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2);  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	non-compiled	[CE]  ';'  expected	49	None	add
610	[BUG]  [BUGGY]  dPrev  =  p0;  p0  =  p2;  [CE]  cannot  find  symbol  p2  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  p0  =  p2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  p0  =  p2;	  dPrev    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	20	None	replace
611	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q1  /  q2  +  1;	  dPrev    =    q1    /    q2;    	compilable	  [FE]  OutOfRangeException  	126	11	replace
612	[BUG]  [BUGGY]  dPrev  =  q1  /  q2  +  1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2  +  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q1  /  q2  +  1;	  dPrev    =    q1    /    q2;    	compilable	  [FE]  OutOfRangeException  	126	11	replace
613	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  cN;  q2  =  q2  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q2    /    cN;    q2  =  q2  /  cN;	  	compilable	  [FE]  ConvergenceException  	123	11	add
614	[BUG]  [BUGGY]  dPrev  =  q2  /  cN;  q2  =  q2  /  cN;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  cN;  q2  =  q2  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    cN;    q2  =  q2  /  cN;	  	compilable	  [FE]  ConvergenceException  	123	11	add
615	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  hN  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    hN;    hN  =  hN;	  	compilable	  [FE]  AssertionError  	81	2	add
616	[BUG]  [BUGGY]  dPrev  =  hN;  hN  =  hN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  hN  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    hN;    hN  =  hN;	  	compilable	  [FE]  AssertionError  	81	2	add
617	[BUG]  [BUGGY]  dPrev  =  p0;  cPrev  =  pN;  [CE]  cannot  find  symbol  pN  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  cPrev  =  pN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  cPrev  =  pN;	  dPrev    =    p0;    cPrev    =    p0;    	non-compiled	[CE]  cannot  find  symbol  pN	18	None	replace
618	[BUG]  [BUGGY]  dPrev  =  p0;  cPrev  =  p2;  [CE]  cannot  find  symbol  p2  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  cPrev  =  p2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  cPrev  =  p2;	  dPrev    =    p0;    cPrev    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	18	None	replace
619	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  cN  *  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  cN  *  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0)/  cN  *  1;	  n    =    Math.abs(deltaN    -    1.0)/    cN    +    1;    	non-compiled	[CE]  possible  loss  of  precision	108	None	replace
620	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    q2  =  q2;  cN  =  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        q2    =    q2;    cN  =  q2;  q2  =  q2;	  	compilable	  [FE]  AssertionError  	97	6	add
621	[BUG]  [BUGGY]  dPrev    =    q2;    q2  =  q2;  cN  =  q2;  q2  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    q2  =  q2;  cN  =  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        q2    =    q2;    cN  =  q2;  q2  =  q2;	  	compilable	  [FE]  AssertionError  	97	6	add
622	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  hN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(epsilon,  hN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(epsilon,  hN);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
623	[BUG]  [BUGGY]  n  =  Math.max(q1,  hN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(q1,  hN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(q1,  hN);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
624	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q2;  cPrev  =  cN;	  dPrev    =    cN;    cPrev    =    cN;    	compilable	  [FE]  AssertionError  	74	9	replace
625	[BUG]  [BUGGY]  dPrev  =  q2;  cPrev  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q2;  cPrev  =  cN;	  dPrev    =    cN;    cPrev    =    cN;    	compilable	  [FE]  AssertionError  	74	9	replace
626	[BUG]  [BUGGY]  dPrev  =  epsilon;  double  dPrev  =  epsilon;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  epsilon;  double  dPrev  =  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    epsilon;    double  dPrev  =  epsilon;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	136	None	add
627	[BUG]  [BUGGY]  timeout  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  epsilon;  cN  =  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    epsilon;    cN  =  epsilon;	  	compilable	timeout	136	1	add
628	[BUG]  [BUGGY]  dPrev  =  epsilon;  cN  =  epsilon;  timeout  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  epsilon;  cN  =  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    epsilon;    cN  =  epsilon;	  	compilable	timeout	136	1	add
629	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2);  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2);  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2);  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	non-compiled	[CE]  ';'  expected	52	None	add
630	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	non-compiled	[CE]  ';'  expected	52	None	add
631	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  cN  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  cN  +  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(deltaN  -  1.0)/  cN  +  1;	  double    n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	131	None	replace
632	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  cN  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0    /    q2;    cN  =  p0  /  q2;	  	compilable	  [FE]  AssertionError  	31	6	add
633	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  cN  =  p0  /  q2;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  cN  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q2;    cN  =  p0  /  q2;	  	compilable	  [FE]  AssertionError  	31	6	add
634	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  cN  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q2;    cN  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  ConvergenceException  	10	11	add
635	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  cN  =  cN  /  q1;  dPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  cN  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q2;    cN  =  cN  /  q1;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  ConvergenceException  	10	11	add
636	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  cN  =  Math.abs(cN  -  1.0)/  q2,;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  cN  =  Math.abs(cN  -  1.0)/  q2,;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(cN    -    1.0)/    q2;    cN  =  Math.abs(cN  -  1.0)/  q2,;	  timeout    	non-compiled	[CE]  ';'  expected	120	None	add
637	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  q2  -  1);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(dPrev,  q2  -  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  q2  -  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	132	None	replace
638	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2;  cN  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q2;  cN  =  q2;	  dPrev    =    cN;    cN    =    cN;    	compilable	timeout	102	1	replace
639	[BUG]  [BUGGY]  dPrev  =  q2;  cN  =  q2;  timeout  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2;  cN  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q2;  cN  =  q2;	  dPrev    =    cN;    cN    =    cN;    	compilable	timeout	102	1	replace
640	[BUG]  [BUGGY]  dPrev  =  dN  /  q2;  [CE]  cannot  find  symbol  dN  [FE]        AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  dN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  dN  /  q2;	  dPrev    =    qN    /    q2;    	non-compiled	[CE]  cannot  find  symbol  dN	119	None	replace
641	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  cN  /  q1;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	p0  =  cN  /  q1;  q1  =  cN  /  q1;	  dPrev    =    cN    /    q1;    q1    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	115	11	replace
642	[BUG]  [BUGGY]  p0  =  cN  /  q1;  q1  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  cN  /  q1;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  cN  /  q1;  q1  =  cN  /  q1;	  dPrev    =    cN    /    q1;    q1    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	115	11	replace
643	[BUG]  [BUGGY]  dPrev  =  cN  /  q0;  dPrev  =  cN  /  q2,  q1;  [CE]  ';'  expected  [FE]        OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q0;  dPrev  =  cN  /  q2,  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q0;  dPrev  =  cN  /  q2,  q1;	  dPrev    =    cN    /    q2;    dPrev    =    cN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	127	None	replace
644	[BUG]  [BUGGY]  dPrev  =  cN  *  q2;  dPrev  =  cN  *  q2,  q1;  [CE]  ';'  expected  [FE]          OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  dPrev  =  cN  *  q2,  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  *  q2;  dPrev  =  cN  *  q2,  q1;	  dPrev    =    cN    /    q2;    dPrev    =    cN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	127	None	replace
645	[BUG]  [BUGGY]  dPrev  =  qN;  q2  =  q2;  [CE]  cannot  find  symbol  qN  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  qN;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  qN;  q2  =  q2;	  dPrev    =    q2;    q2    =    q2;    	non-compiled	[CE]  cannot  find  symbol  qN	98	None	replace
646	[BUG]  [BUGGY]  dPrev  =  qN;  dPrev  =  q2;  [CE]  cannot  find  symbol  qN  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  qN;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  qN;  dPrev  =  q2;	  dPrev    =    q2;    dPrev    =    q2;    	non-compiled	[CE]  cannot  find  symbol  qN	44	None	replace
647	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  n  /  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  n  /  q2;  dPrev  =  q2;	  dPrev    =    q2;    dPrev    =    q2;    	compilable	  [FE]  AssertionError  	44	9	replace
648	[BUG]  [BUGGY]  dPrev  =  n  /  q2;  dPrev  =  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  n  /  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  n  /  q2;  dPrev  =  q2;	  dPrev    =    q2;    dPrev    =    q2;    	compilable	  [FE]  AssertionError  	44	9	replace
649	[BUG]  [BUGGY]  n  =  Math.min(q1,  q2);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(q1,  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(q1,  q2);	  n    =    Math.min(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
650	[BUG]  [BUGGY]  n  =  Math.min(q2,  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(q2,  dPrev);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(q2,  dPrev);	  n    =    Math.min(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
651	[BUG]  [BUGGY]  n  =  Math.min(q2,  cN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(q2,  cN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(q2,  cN);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	80	None	replace
652	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  p0  /  q1;  p0  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	p0  =  p0  /  q1;  p0  =  p0  /  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1,;    	compilable	  [FE]  OutOfRangeException  	13	11	replace
653	[BUG]  [BUGGY]  p0  =  p0  /  q1;  p0  =  p0  /  q2;  [FE]  OutOfRangeException  [FE]                OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  p0  /  q1;  p0  =  p0  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  p0  /  q1;  p0  =  p0  /  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1,;    	compilable	  [FE]  OutOfRangeException  	13	11	replace
654	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;	  cN    =    Math.abs(deltaN    -    1.0)/    epsilon;    	compilable	  [FE]  AssertionError  	65	8	replace
655	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;	  cN    =    Math.abs(deltaN    -    1.0)/    epsilon;    	compilable	  [FE]  AssertionError  	65	8	replace
656	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  -  dPrev);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  dPrev);	  n    =    Math.abs(dPrev    -    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
657	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  epsilon);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(q1  -  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(q1  -  epsilon);	  n    =    Math.abs(dPrev    -    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	68	None	replace
658	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2;  q1  =  q1  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q1    /    q2;    q1  =  q1  /  q2;	  	compilable	  [FE]  OutOfRangeException  	125	11	add
659	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  q1  =  q1  /  q2;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2;  q1  =  q1  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    q2;    q1  =  q1  /  q2;	  	compilable	  [FE]  OutOfRangeException  	125	11	add
660	[BUG]  [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  dPrev  =  q2;  cPrev  =  q2);  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  dPrev  =  q2;  cPrev  =  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        cPrev    =    q2;    dPrev  =  q2;  cPrev  =  q2);	  	non-compiled	[CE]  ';'  expected	46	None	add
661	[BUG]  [BUGGY]  dPrev  =  qN;  cPrev  =  q2;  [CE]  cannot  find  symbol  qN  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  qN;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  qN;  cPrev  =  q2;	  dPrev    =    q2;    cPrev    =    q2;    	non-compiled	[CE]  cannot  find  symbol  qN	47	None	replace
662	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  deltaN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(q1  -  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(q1  -  deltaN);	  n    =    Math.abs(x    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
663	[BUG]  [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  dPrev  =  cN;  dprev  =  cN;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  dPrev  =  cN;  dprev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        dPrev    =    cN;    dPrev  =  cN;  dprev  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	71	None	add
664	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  q2  =  cN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        dPrev    =    cN;    q2  =  cN;  dPrev  =  cN;	  	compilable	  [FE]  AssertionError  	71	6	add
665	[BUG]  [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  q2  =  cN;  dPrev  =  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  q2  =  cN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        dPrev    =    cN;    q2  =  cN;  dPrev  =  cN;	  	compilable	  [FE]  AssertionError  	71	6	add
666	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  -  q1;	  dPrev    =    cN    -    q2;    	compilable	  [FE]  OutOfRangeException  	5	11	replace
667	[BUG]  [BUGGY]  dPrev  =  cN  -  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  -  q1;	  dPrev    =    cN    -    q2;    	compilable	  [FE]  OutOfRangeException  	5	11	replace
668	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  +  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  dPrev  =  cN  +  q2;	  dPrev    =    cN;    dPrev    =    cN);    	compilable	  [FE]  OutOfRangeException  	76	10	replace
669	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  +  q2;  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  +  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  dPrev  =  cN  +  q2;	  dPrev    =    cN;    dPrev    =    cN);    	compilable	  [FE]  OutOfRangeException  	76	10	replace
670	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2);  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.abs(deltaN  -  1.0)/  q2);	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2);    	non-compiled	[CE]  ';'  expected	54	None	replace
671	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]            OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  cN;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	p0  =  cN;  p0  =  p0;	  dPrev    =    cN;    int    dPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	75	11	replace
672	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p0;  [FE]  OutOfRangeException  [FE]            OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  cN;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  cN;  p0  =  p0;	  dPrev    =    cN;    int    dPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	75	11	replace
673	[BUG]  [BUGGY]  p0  =  cN;  int  dPrev  =  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  cN;  int  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  cN;  int  dPrev  =  cN;	  dPrev    =    cN;    int    dPrev    =    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	75	None	replace
674	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  cN  =  cN  /  q1;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    cN  =  cN  /  q1;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  ConvergenceException  	6	11	add
675	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  cN  =  cN  /  q1;  dPrev  =  cN  /  q1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  cN  =  cN  /  q1;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    cN  =  cN  /  q1;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  ConvergenceException  	6	11	add
676	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	6	11	add
677	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;  q1  =  cN  /  q1;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	6	11	add
678	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  q0,  q2);  [CE]  cannot  find  symbol  q0  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(deltaN,  q0,  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(deltaN,  q0,  q2);	  n    =    Math.min(deltaN,    q1,    q2);    	non-compiled	[CE]  cannot  find  symbol  q0	113	None	replace
679	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  epsilon,  q1);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(deltaN,  epsilon,  q1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(deltaN,  epsilon,  q1);	  n    =    Math.min(deltaN,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	113	None	replace
680	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	35	6	add
681	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  q2  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	35	6	add
682	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  cN  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    cN  =  cN  /  q2;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  ConvergenceException  	35	11	add
683	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  cN  =  cN  /  q2;  dPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  cN  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    cN  =  cN  /  q2;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  ConvergenceException  	35	11	add
684	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  deltaN;  cN  =  cN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    deltaN;    cN  =  cN  /  deltaN;	  	compilable	  [FE]  AssertionError  	33	6	add
685	[BUG]  [BUGGY]  dPrev  =  cN  /  deltaN;  cN  =  cN  /  deltaN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  deltaN;  cN  =  cN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    deltaN;    cN  =  cN  /  deltaN;	  	compilable	  [FE]  AssertionError  	33	6	add
686	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  q1;  q2  =  q2  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q2    /    q1;    q2  =  q2  /  q1;	  	compilable	  [FE]  OutOfRangeException  	133	11	add
687	[BUG]  [BUGGY]  dPrev  =  q2  /  q1;  q2  =  q2  /  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  q1;  q2  =  q2  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    q1;    q2  =  q2  /  q1;	  	compilable	  [FE]  OutOfRangeException  	133	11	add
688	[BUG]  [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1,;  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1,;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    q1;    dPrev  =  q2  /  q1,;	  	non-compiled	[CE]  ';'  expected	133	None	add
689	[BUG]  [BUGGY]  dPrev  =  cN  *  q2;  dPrev  =  cN  *  q2);  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  dPrev  =  cN  *  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    *    q2;    dPrev  =  cN  *  q2);	  	non-compiled	[CE]  ';'  expected	106	None	add
690	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q1;  dPrev  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  *  q1;  dPrev  =  cN  *  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	11	11	replace
691	[BUG]  [BUGGY]  dPrev  =  cN  *  q1;  dPrev  =  cN  *  q2;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q1;  dPrev  =  cN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  *  q1;  dPrev  =  cN  *  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	11	11	replace
692	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  q2  =  cN  /  q2;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    q2  =  cN  /  q2;  cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	37	6	add
693	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  q2  =  cN  /  q2;  cPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  q2  =  cN  /  q2;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    q2  =  cN  /  q2;  cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	37	6	add
694	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(deltaN  -  1.0)/  q2;	  double    n    =    Math.abs(deltaN    -    1.0)/    deltaN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	122	None	replace
695	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0,  epsilon,  maxIterations);  [CE]  no  suitable  method  found  for  abs(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  1.0,  epsilon,  maxIterations);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0,  epsilon,  maxIterations);	  n    =    Math.abs(deltaN    -    1.0,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,int)	116	None	replace
696	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0,  epsilon,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(deltaN  -  1.0,  epsilon,  scaleFactor);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0,  epsilon,  scaleFactor);	  n    =    Math.abs(deltaN    -    1.0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	116	None	replace
697	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  q1  =  q1  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q1    /    cN;    q1  =  q1  /  cN;	  	compilable	  [FE]  OutOfRangeException  	57	7	add
698	[BUG]  [BUGGY]  dPrev  =  q1  /  cN;  q1  =  q1  /  cN;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  q1  =  q1  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    cN;    q1  =  q1  /  cN;	  	compilable	  [FE]  OutOfRangeException  	57	7	add
699	[BUG]  [BUGGY]  timeout  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  cN  =  q1  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q1    /    cN;    cN  =  q1  /  cN;	  	compilable	timeout	57	1	add
700	[BUG]  [BUGGY]  dPrev  =  q1  /  cN;  cN  =  q1  /  cN;  timeout  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  cN  =  q1  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    cN;    cN  =  q1  /  cN;	  	compilable	timeout	57	1	add
701	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cN  =  cN;  q2  =  cN;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        cN    =    cN;    q2  =  cN;  cN  =  cN;	  	compilable	  [FE]  AssertionError  	101	6	add
702	[BUG]  [BUGGY]  dPrev    =    cN;    cN  =  cN;  q2  =  cN;  cN  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cN  =  cN;  q2  =  cN;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        cN    =    cN;    q2  =  cN;  cN  =  cN;	  	compilable	  [FE]  AssertionError  	101	6	add
703	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  cN  =  p0;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        hPrev    =    p0;    cN  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  AssertionError  	91	6	add
704	[BUG]  [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  cN  =  p0;  hPrev  =  p0;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  cN  =  p0;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        hPrev    =    p0;    cN  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  AssertionError  	91	6	add
705	[BUG]  [BUGGY]  timeout  [FE]      ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  q2  =  p0;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        hPrev    =    p0;    q2  =  p0;  hPrev  =  p0;	  	compilable	timeout	91	1	add
706	[BUG]  [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  q2  =  p0;  hPrev  =  p0;  timeout  [FE]      ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    hPrev  =  p0;  q2  =  p0;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        hPrev    =    p0;    q2  =  p0;  hPrev  =  p0;	  	compilable	timeout	91	1	add
707	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  cN  =  p0;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        cPrev    =    p0;    cN  =  p0;  cPrev  =  p0;	  	compilable	  [FE]  AssertionError  	17	6	add
708	[BUG]  [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  cN  =  p0;  cPrev  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  cN  =  p0;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cPrev    =    p0;    cN  =  p0;  cPrev  =  p0;	  	compilable	  [FE]  AssertionError  	17	6	add
709	[BUG]  [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  dPrev  =  p0;  cPrev  =  p1;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  dPrev  =  p0;  cPrev  =  p1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cPrev    =    p0;    dPrev  =  p0;  cPrev  =  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	17	None	add
710	[BUG]  [BUGGY]  timeout  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  cN  =  cN  -  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    -    q2;    cN  =  cN  -  q2;	  	compilable	timeout	4	1	add
711	[BUG]  [BUGGY]  dPrev  =  cN  -  q2;  cN  =  cN  -  q2;  timeout  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  cN  =  cN  -  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    -    q2;    cN  =  cN  -  q2;	  	compilable	timeout	4	1	add
712	[BUG]  [BUGGY]  dPrev  =  cN  -  q2;  dPrev  =  cN  -  q2,;  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  -  q2;  dPrev  =  cN  -  q2,;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    -    q2;    dPrev  =  cN  -  q2,;	  	non-compiled	[CE]  ';'  expected	4	None	add
713	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  p0  =  p0  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0    /    q1;    p0  =  p0  /  q1;	  	compilable	  [FE]  AssertionError  	55	2	add
714	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  p0  =  p0  /  q1;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  p0  =  p0  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q1;    p0  =  p0  /  q1;	  	compilable	  [FE]  AssertionError  	55	2	add
715	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  cN  =  p0  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0    /    q1;    cN  =  p0  /  q1;	  	compilable	  [FE]  AssertionError  	55	6	add
716	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  cN  =  p0  /  q1;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  cN  =  p0  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q1;    cN  =  p0  /  q1;	  	compilable	  [FE]  AssertionError  	55	6	add
717	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  q1  =  p0  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0    /    q1;    q1  =  p0  /  q1;	  	compilable	  [FE]  OutOfRangeException  	55	10	add
718	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  q1  =  p0  /  q1;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q1;  q1  =  p0  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0    /    q1;    q1  =  p0  /  q1;	  	compilable	  [FE]  OutOfRangeException  	55	10	add
719	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  cN  =  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        dPrev    =    q2;    cN  =  q2;  dPrev  =  q2;	  	compilable	  [FE]  AssertionError  	43	6	add
720	[BUG]  [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  cN  =  q2;  dPrev  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  cN  =  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        dPrev    =    q2;    cN  =  q2;  dPrev  =  q2;	  	compilable	  [FE]  AssertionError  	43	6	add
721	[BUG]  [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  dPrev  =  q2;  dPrev  =  q2);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  dPrev  =  q2;  dPrev  =  q2);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        dPrev    =    q2;    dPrev  =  q2;  dPrev  =  q2);	  	non-compiled	[CE]  ';'  expected	43	None	add
722	[BUG]  [BUGGY]  n  =  Math.max(q1,  q2);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(q1,  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(q1,  q2);	  n    =    Math.max(q1,    cN);    	non-compiled	[CE]  possible  loss  of  precision	104	None	replace
723	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  q2  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	q2  =  Math.abs(deltaN  -  1.0)/  q1;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  OutOfRangeException  	110	11	replace
724	[BUG]  [BUGGY]  q2  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  q2  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	q2  =  Math.abs(deltaN  -  1.0)/  q1;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  OutOfRangeException  	110	11	replace
725	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  hN;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(deltaN  -  1.0)/  hN;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	110	9	replace
726	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  hN;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  hN;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  hN;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	110	9	replace
727	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dprev;  [CE]  cannot  find  symbol  dprev  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  cN  =  Math.abs(deltaN  -  1.0)/  dprev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    cN  =  Math.abs(deltaN  -  1.0)/  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	62	None	add
728	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        q2    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  AssertionError  	109	6	add
729	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        q2    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  AssertionError  	109	6	add
730	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2)  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2)  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        q2    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2)  =  Math.abs(deltaN  -  1.0)/  q2;	  	non-compiled	[CE]  not  a  statement	109	None	add
731	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  q1,  q2);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(dPrev,  q1,  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  q1,  q2);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	103	None	replace
732	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  q2  =  p0;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        cN    =    p0;    q2  =  p0;  cN  =  p0;	  	compilable	  [FE]  AssertionError  	93	6	add
733	[BUG]  [BUGGY]  dPrev    =    p0;    cN  =  p0;  q2  =  p0;  cN  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  q2  =  p0;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cN    =    p0;    q2  =  p0;  cN  =  p0;	  	compilable	  [FE]  AssertionError  	93	6	add
734	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  hN;  q2  =  cN  /  q2;	  dPrev    =    cN    /    q2;    q2    =    cN    /    q2;    	compilable	  [FE]  AssertionError  	100	6	replace
735	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  q2  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  hN;  q2  =  cN  /  q2;	  dPrev    =    cN    /    q2;    q2    =    cN    /    q2;    	compilable	  [FE]  AssertionError  	100	6	replace
736	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN;  cN  =  p0;	  dPrev    =    p0;    cN    =    p0;    	compilable	timeout	94	1	replace
737	[BUG]  [BUGGY]  dPrev  =  cN;  cN  =  p0;  timeout  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN;  cN  =  p0;	  dPrev    =    p0;    cN    =    p0;    	compilable	timeout	94	1	replace
738	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  cN  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0;  cN  =  hN;	  dPrev    =    p0;    cN    =    p0;    	compilable	  [FE]  OutOfRangeException  	94	11	replace
739	[BUG]  [BUGGY]  dPrev  =  p0;  cN  =  hN;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  cN  =  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  cN  =  hN;	  dPrev    =    p0;    cN    =    p0;    	compilable	  [FE]  OutOfRangeException  	94	11	replace
740	[BUG]  [BUGGY]  dPrev  =  p0;  cN  =  p2;  [CE]  cannot  find  symbol  p2  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  cN  =  p2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  cN  =  p2;	  dPrev    =    p0;    cN    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	94	None	replace
741	[BUG]  [BUGGY]  n  =  Math.abs(x  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(x  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(x  -  1.0)/  deltaN;	  n    =    Math.abs(epsilon    -    1.0)/    deltaN;    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
742	[BUG]  [BUGGY]  p0  =  p0;  cN  =  p2;  [CE]  cannot  find  symbol  p2  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  p0;  cN  =  p2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  p0;  cN  =  p2;	  dPrev    =    p0;    cN    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	94	None	replace
743	[BUG]  [BUGGY]  p0  =  p0;  int  dPrev  =  p1;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  p0;  int  dPrev  =  p1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  p0;  int  dPrev  =  p1;	  dPrev    =    p0;    int    dPrev    =    p0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
744	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1,  cPrev  =  cN  /  q1;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;  dPrev  =  cN  /  q1,  cPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        cPrev    =    cN    /    q1;    dPrev  =  cN  /  q1,  cPrev  =  cN  /  q1;	  	non-compiled	[CE]  ';'  expected	8	None	add
745	[BUG]  [BUGGY]  dPrev  =  hN;  dPrev  =  hN);  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  dPrev  =  hN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    hN;    dPrev  =  hN);	  	non-compiled	[CE]  ';'  expected	81	None	add
746	[BUG]  [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  cN;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  cN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(epsilon  -  1.0)/  cN;	  double    n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	131	None	replace
747	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  hN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q1;  dPrev  =  hN  /  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	11	11	replace
748	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  hN  /  q2;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  hN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q1;  dPrev  =  hN  /  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	11	11	replace
749	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  q1,  q2);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(epsilon,  q1,  q2);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(epsilon,  q1,  q2);	  n    =    Math.min(deltaN,    q1,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	113	None	replace
750	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  dPrev  =  cN  /  q2;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        cPrev    =    p0;    dPrev  =  cN  /  q2;  cPrev  =  p0;	  	compilable	  [FE]  AssertionError  	17	2	add
751	[BUG]  [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  dPrev  =  cN  /  q2;  cPrev  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  dPrev  =  cN  /  q2;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cPrev    =    p0;    dPrev  =  cN  /  q2;  cPrev  =  p0;	  	compilable	  [FE]  AssertionError  	17	2	add
752	[BUG]  [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  dPrev  =  q0;  cPrev  =  p0;  [CE]  cannot  find  symbol  q0  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cPrev  =  p0;  dPrev  =  q0;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cPrev    =    p0;    dPrev  =  q0;  cPrev  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  q0	17	None	add
753	[BUG]  [BUGGY]  dPrev  =  hN;  dPrev  =  cN);  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  dPrev  =  cN);  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  hN;  dPrev  =  cN);	  dPrev    =    cN;    dPrev    =    cN);    	non-compiled	[CE]  ';'  expected	76	None	replace
754	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  epsilon);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  /  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  /  epsilon);	  n    =    Math.abs(deltaN    /    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
755	[BUG]  [BUGGY]  n  =  Math.abs(x  /  deltaN);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(x  /  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(x  /  deltaN);	  n    =    Math.abs(deltaN    /    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
756	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q2  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q1    /    q2;    dPrev  =  q2  /  q2;	  	compilable	  [FE]  AssertionError  	125	2	add
757	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q2  /  q2;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  q2;  dPrev  =  q2  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    q2;    dPrev  =  q2  /  q2;	  	compilable	  [FE]  AssertionError  	125	2	add
758	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  epsilon);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(dPrev,  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  epsilon);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  possible  loss  of  precision	103	None	replace
759	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  int  q2  =  Math.abs(deltaN  -  1.0)/  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  int  q2  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    int  q2  =  Math.abs(deltaN  -  1.0)/  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	62	None	add
760	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  hN;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  hN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  1.0)/  hN;	  n    =    Math.abs(deltaN    -    1.0)/    hN;    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
761	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  q1  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	q1  =  cN  /  q2;	  dPrev    =    cN    /    q1;    q1    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	115	11	replace
762	[BUG]  [BUGGY]  q1  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  q1  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	q1  =  cN  /  q2;	  dPrev    =    cN    /    q1;    q1    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	115	11	replace
763	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  hN;  hPrev  =  p0;	  dPrev    =    p0;    hPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	92	8	replace
764	[BUG]  [BUGGY]  dPrev  =  hN;  hPrev  =  p0;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  hPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  hN;  hPrev  =  p0;	  dPrev    =    p0;    hPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	92	8	replace
765	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0  /  q2;  dPrev  =  cN  /  q2;	  dPrev    =    cN    /    q2;    dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	36	11	replace
766	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q2;  dPrev  =  cN  /  q2;	  dPrev    =    cN    /    q2;    dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	36	11	replace
767	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  *  q2;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    dPrev  =  cN  *  q2;  q2  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	99	2	add
768	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  *  q2;  q2  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  *  q2;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    dPrev  =  cN  *  q2;  q2  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	99	2	add
769	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2,  q2  =  cN  /  q2;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q2,  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    dPrev  =  cN  /  q2,  q2  =  cN  /  q2;	  	non-compiled	[CE]  ';'  expected	99	None	add
770	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q1;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    dPrev  =  cN  /  q1;  q2  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	99	2	add
771	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q1;  q2  =  cN  /  q2;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    q2  =  cN  /  q2;  dPrev  =  cN  /  q1;  q2  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        q2    =    cN    /    q2;    dPrev  =  cN  /  q1;  q2  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	99	2	add
772	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(dPrev,  cN  *  DEFAULT_EPSILON);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  cN  *  DEFAULT_EPSILON);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	79	None	replace
773	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  dPrev  =  cN  /  q2;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        p0    =    p0;    dPrev  =  cN  /  q2;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	19	2	add
774	[BUG]  [BUGGY]  dPrev    =    p0;    p0  =  p0;  dPrev  =  cN  /  q2;  p0  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  dPrev  =  cN  /  q2;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        p0    =    p0;    dPrev  =  cN  /  q2;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	19	2	add
775	[BUG]  [BUGGY]  dPrev    =    p0;    p0  =  p0;  dPrev  =  p0;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    p0  =  p0;  dPrev  =  p0;  p0  =  p1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        p0    =    p0;    dPrev  =  p0;  p0  =  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	19	None	add
776	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	10	2	add
777	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	10	2	add
778	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2,;  [CE]  ';'  expected  [FE]              OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2,;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2,;	  dPrev    =    cN    /    q2;    dPrev    =    cN    /    q2,;    	non-compiled	[CE]  ';'  expected	40	None	replace
779	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  hN  /  q1,  q2;  [CE]  ';'  expected  [FE]        OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  hN  /  q1,  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q1;  dPrev  =  hN  /  q1,  q2;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1,    q2;    	non-compiled	[CE]  ';'  expected	135	None	replace
780	[BUG]  [BUGGY]  dPrev  =  qN  /  q2;  q2  =  q2;  [CE]  cannot  find  symbol  qN  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  qN  /  q2;  q2  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  qN  /  q2;  q2  =  q2;	  dPrev    =    q2;    q2    =    q2;    	non-compiled	[CE]  cannot  find  symbol  qN	98	None	replace
781	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  1.0);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  /  1.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  /  1.0);	  n    =    Math.abs(deltaN    /    1.0);    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
782	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q2;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    dPrev  =  cN  /  q2;  q1  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	114	2	add
783	[BUG]  [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q2;  q1  =  cN  /  q1;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q1;    q1  =  cN  /  q1;  dPrev  =  cN  /  q2;  q1  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q1;        q1    =    cN    /    q1;    dPrev  =  cN  /  q2;  q1  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	114	2	add
784	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	37	2	add
785	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	37	2	add
786	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  *  q2;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    dPrev  =  cN  *  q2;  cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	37	2	add
787	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  *  q2;  cPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  *  q2;  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    dPrev  =  cN  *  q2;  cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	37	2	add
788	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,  cPrev  =  cN  /  q2;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,  cPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        cPrev    =    cN    /    q2;    dPrev  =  cN  /  q2,  cPrev  =  cN  /  q2;	  	non-compiled	[CE]  ';'  expected	37	None	add
789	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  p0  =  cN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        dPrev    =    cN;    p0  =  cN;  dPrev  =  cN;	  	compilable	  [FE]  AssertionError  	71	2	add
790	[BUG]  [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  p0  =  cN;  dPrev  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  p0  =  cN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        dPrev    =    cN;    p0  =  cN;  dPrev  =  cN;	  	compilable	  [FE]  AssertionError  	71	2	add
791	[BUG]  [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  p0  =  cN;  p0  =  p0;  p1  =  p2;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    dPrev  =  cN;  p0  =  cN;  p0  =  p0;  p1  =  p2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        dPrev    =    cN;    p0  =  cN;  p0  =  p0;  p1  =  p2;	  	non-compiled	[CE]  cannot  find  symbol  p1	71	None	add
792	[BUG]  [BUGGY]  n  =  Math.max(cN,  deltaN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(cN,  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(cN,  deltaN);	  n    =    Math.min(deltaN,    cN);    	non-compiled	[CE]  possible  loss  of  precision	25	None	replace
793	[BUG]  [BUGGY]  dPrev  =  qN  /  q2;  cPrev  =  q2;  [CE]  cannot  find  symbol  qN  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  qN  /  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  qN  /  q2;  cPrev  =  q2;	  dPrev    =    q2;    cPrev    =    q2;    	non-compiled	[CE]  cannot  find  symbol  qN	47	None	replace
794	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;  cPrev  =  q1;	  dPrev    =    q2;    cPrev    =    q2;    	compilable	  [FE]  OutOfRangeException  	47	11	replace
795	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  q1;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;  cPrev  =  q1;	  dPrev    =    q2;    cPrev    =    q2;    	compilable	  [FE]  OutOfRangeException  	47	11	replace
796	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(epsilon  -  1.0)/  dPrev;	  cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    	compilable	  [FE]  ConvergenceException  	63	12	replace
797	[BUG]  [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  dPrev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(epsilon  -  1.0)/  dPrev;	  cN    =    Math.abs(deltaN    -    1.0)/    dPrev;    	compilable	  [FE]  ConvergenceException  	63	12	replace
798	[BUG]  [BUGGY]  n  =  Math.abs(x  *  epsilon);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(x  *  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(x  *  epsilon);	  n    =    Math.abs(deltaN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
799	[BUG]  [BUGGY]  n  =  Math.abs(cN  *  epsilon);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  *  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  *  epsilon);	  n    =    Math.abs(deltaN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
800	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  *  deltaN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  *  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  *  deltaN);	  n    =    Math.abs(deltaN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
801	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  dPrev  =  cN  /  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        cPrev    =    q2;    dPrev  =  cN  /  q2;  cPrev  =  q2;	  	compilable	  [FE]  AssertionError  	46	2	add
802	[BUG]  [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  dPrev  =  cN  /  q2;  cPrev  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    cPrev  =  q2;  dPrev  =  cN  /  q2;  cPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        cPrev    =    q2;    dPrev  =  cN  /  q2;  cPrev  =  q2;	  	compilable	  [FE]  AssertionError  	46	2	add
803	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  1.0)/  q1;	  n    =    Math.abs(epsilon    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	143	None	replace
804	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  1.0);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(q2  -  1.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(q2  -  1.0);	  n    =    Math.abs(x    -    1.0);    	non-compiled	[CE]  possible  loss  of  precision	129	None	replace
805	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0;  cN  =  cN;	  dPrev    =    cN;    cN    =    cN;    	compilable	  [FE]  OutOfRangeException  	102	11	replace
806	[BUG]  [BUGGY]  dPrev  =  p0;  cN  =  cN;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;  cN  =  cN;	  dPrev    =    cN;    cN    =    cN;    	compilable	  [FE]  OutOfRangeException  	102	11	replace
807	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q1;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q1;  cN  =  cN;	  dPrev    =    cN;    cN    =    cN;    	compilable	  [FE]  OutOfRangeException  	102	11	replace
808	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  cN  =  cN;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  q1;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q1;  cN  =  cN;	  dPrev    =    cN;    cN    =    cN;    	compilable	  [FE]  OutOfRangeException  	102	11	replace
809	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  d2;  [CE]  cannot  find  symbol  d2  [FE]        ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  d2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(cN  -  1.0)/  d2;	  cN    =    Math.abs(cN    -    1.0)/    q2;    timeout    	non-compiled	[CE]  cannot  find  symbol  d2	121	None	replace
810	[BUG]  [BUGGY]  n  =  Math.min(cN,  epsilon  -  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(cN,  epsilon  -  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(cN,  epsilon  -  1);	  n    =    Math.min(cN,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	87	None	replace
811	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(q1  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(q1  -  1.0)/  deltaN;	  n    =    Math.abs(deltaN    -    1.0)/    q1;    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
812	[BUG]  [BUGGY]  dPrev  =  cN  *  q2;  dPrev  =  CN  *  q2;  [CE]  cannot  find  symbol  CN  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q2;  dPrev  =  CN  *  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    *    q2;    dPrev  =  CN  *  q2;	  	non-compiled	[CE]  cannot  find  symbol  CN	106	None	add
813	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  Math.abs(deltaN  -  1.0)/  epsilon;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev;    	compilable	  [FE]  OutOfRangeException  	28	11	replace
814	[BUG]  [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  epsilon;  [FE]  OutOfRangeException  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  Math.abs(deltaN  -  1.0)/  epsilon;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev;    	compilable	  [FE]  OutOfRangeException  	28	11	replace
815	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN  -  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(dPrev,  cN  -  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(dPrev,  cN  -  1);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	80	None	replace
816	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  cN  =  Math.abs(cN  -  1.0)/  q2,  epsilon;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  cN  =  Math.abs(cN  -  1.0)/  q2,  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN    =    Math.abs(cN    -    1.0)/    q2;    cN  =  Math.abs(cN  -  1.0)/  q2,  epsilon;	  timeout    	non-compiled	[CE]  ';'  expected	120	None	add
817	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  *  epsilon;	  dPrev    =    cN    *    q2;    	compilable	  [FE]  OutOfRangeException  	107	11	replace
818	[BUG]  [BUGGY]  dPrev  =  cN  *  epsilon;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  *  epsilon;	  dPrev    =    cN    *    q2;    	compilable	  [FE]  OutOfRangeException  	107	11	replace
819	[BUG]  [BUGGY]  dPrev  =  qN  /  epsilon;  [CE]  cannot  find  symbol  qN  [FE]        AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  qN  /  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  qN  /  epsilon;	  dPrev    =    qN    /    q2;    	non-compiled	[CE]  cannot  find  symbol  qN	119	None	replace
820	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  hPrev  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    hN;    hPrev  =  cN  /  hN;	  	compilable	  [FE]  ConvergenceException  	29	11	add
821	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  hPrev  =  cN  /  hN;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  hPrev  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    hN;    hPrev  =  cN  /  hN;	  	compilable	  [FE]  ConvergenceException  	29	11	add
822	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  p0  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    hN;    p0  =  cN  /  hN;	  	compilable	  [FE]  AssertionError  	29	2	add
823	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  p0  =  cN  /  hN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  p0  =  cN  /  hN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    hN;    p0  =  cN  /  hN;	  	compilable	  [FE]  AssertionError  	29	2	add
824	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  hN;  dPrev  =  cN;	  dPrev    =    cN;    dPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	72	11	replace
825	[BUG]  [BUGGY]  dPrev  =  hN;  dPrev  =  cN;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  dPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  hN;  dPrev  =  cN;	  dPrev    =    cN;    dPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	72	11	replace
826	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  epsilon;	  dPrev    =    cN    /    q0;    	compilable	  [FE]  OutOfRangeException  	118	11	replace
827	[BUG]  [BUGGY]  dPrev  =  cN  /  epsilon;  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  epsilon;	  dPrev    =    cN    /    q0;    	compilable	  [FE]  OutOfRangeException  	118	11	replace
828	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  cN  +  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  cN  +  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  1.0)/  cN  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    cN    +    1;    	non-compiled	[CE]  possible  loss  of  precision	108	None	replace
829	[BUG]  [BUGGY]  dPrev  =  q2  /  cN;  dPrev  =  q2)  /  cN;  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  cN;  dPrev  =  q2)  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    cN;    dPrev  =  q2)  /  cN;	  	non-compiled	[CE]  ';'  expected	123	None	add
830	[BUG]  [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1,  epsilon;  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1,  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    q1;    dPrev  =  q2  /  q1,  epsilon;	  	non-compiled	[CE]  ';'  expected	133	None	add
831	[BUG]  [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1,  cN;  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q2  /  q1;  dPrev  =  q2  /  q1,  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2    /    q1;    dPrev  =  q2  /  q1,  cN;	  	non-compiled	[CE]  ';'  expected	133	None	add
832	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1,  q2;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1,  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q1,  q2;	          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN    =    Math.abs(deltaN    -    1.0)/    q2);    	non-compiled	[CE]  ';'  expected	54	None	replace
833	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  epsilon  -  1);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(dPrev,  epsilon  -  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  epsilon  -  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	132	None	replace
834	[BUG]  [BUGGY]  n  =  Math.abs(x  -  1.0)/  epsilon  +  1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(x  -  1.0)/  epsilon  +  1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(x  -  1.0)/  epsilon  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon    +    1;    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
835	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  dPrev  =  q2  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q1    /    cN;    dPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	57	2	add
836	[BUG]  [BUGGY]  dPrev  =  q1  /  cN;  dPrev  =  q2  /  cN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  q1  /  cN;  dPrev  =  q2  /  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q1    /    cN;    dPrev  =  q2  /  cN;	  	compilable	  [FE]  AssertionError  	57	2	add
837	[BUG]  [BUGGY]  n  =  Math.abs(x  -  deltaN  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(x  -  deltaN  +  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(x  -  deltaN  +  1);	  n    =    Math.abs(deltaN    -    epsilon    +    1);    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
838	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  dPrev  =  cN  /  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        q2;        dPrev    =    q2;    dPrev  =  cN  /  q2;  dPrev  =  q2;	  	compilable	  [FE]  AssertionError  	43	2	add
839	[BUG]  [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  dPrev  =  cN  /  q2;  dPrev  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    q2;    dPrev  =  q2;  dPrev  =  cN  /  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        q2;        dPrev    =    q2;    dPrev  =  cN  /  q2;  dPrev  =  q2;	  	compilable	  [FE]  AssertionError  	43	2	add
840	[BUG]  [BUGGY]  n  =  Math.max(hN,  dPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.max(hN,  dPrev);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(hN,  dPrev);	  n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
841	[BUG]  [BUGGY]  double  n  =  Math.abs(a  -  1.0)/  deltaN;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(a  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(a  -  1.0)/  deltaN;	  double    n    =    Math.abs(deltaN    -    1.0)/    deltaN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	122	None	replace
842	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(q1  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(q1  -  1.0)/  deltaN;	  cN    =    Math.abs(deltaN    -    1.0)/    q1;    	compilable	  [FE]  ConvergenceException  	67	12	replace
843	[BUG]  [BUGGY]  cN  =  Math.abs(q1  -  1.0)/  deltaN;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(q1  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(q1  -  1.0)/  deltaN;	  cN    =    Math.abs(deltaN    -    1.0)/    q1;    	compilable	  [FE]  ConvergenceException  	67	12	replace
844	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  hN;  dPrev  =  p0;	  dPrev    =    p0;    dPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	15	11	replace
845	[BUG]  [BUGGY]  dPrev  =  hN;  dPrev  =  p0;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  hN;  dPrev  =  p0;	  dPrev    =    p0;    dPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	15	11	replace
846	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  dPrev;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	p0  =  dPrev;  p0  =  p0;	  dPrev    =    p0;    p0    =    p0;    	compilable	  [FE]  OutOfRangeException  	20	11	replace
847	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p0;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  dPrev;  p0  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  dPrev;  p0  =  p0;	  dPrev    =    p0;    p0    =    p0;    	compilable	  [FE]  OutOfRangeException  	20	11	replace
848	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p2;  [CE]  cannot  find  symbol  p2  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  p0  =  dPrev;  p0  =  p2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	p0  =  dPrev;  p0  =  p2;	  dPrev    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	20	None	replace
849	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  dPrev  =  cN  /  q2;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        dPrev    =    p0;    dPrev  =  cN  /  q2;  dPrev  =  p0;	  	compilable	  [FE]  AssertionError  	14	2	add
850	[BUG]  [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  dPrev  =  cN  /  q2;  dPrev  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  dPrev  =  cN  /  q2;  dPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        dPrev    =    p0;    dPrev  =  cN  /  q2;  dPrev  =  p0;	  	compilable	  [FE]  AssertionError  	14	2	add
851	[BUG]  [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  dPrev  =  p1;  dPrev  =  p1;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    dPrev  =  p0;  dPrev  =  p1;  dPrev  =  p1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        dPrev    =    p0;    dPrev  =  p1;  dPrev  =  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	14	None	add
852	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q1;  dPrev  =  cN  *  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  *  q1;  dPrev  =  cN  *  q1;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	11	replace
853	[BUG]  [BUGGY]  dPrev  =  cN  *  q1;  dPrev  =  cN  *  q1;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  q1;  dPrev  =  cN  *  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  *  q1;  dPrev  =  cN  *  q1;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	11	replace
854	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	11	replace
855	[BUG]  [BUGGY]  cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;	  dPrev    =    cN    /    q1;    dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	11	replace
856	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.min(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  no  suitable  method  found  for  min(double)  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;  cN  =  Math.min(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q1;    cN  =  Math.min(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	non-compiled	[CE]  no  suitable  method  found  for  min(double)	52	None	add
857	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  x;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  x;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  1.0)/  x;	  n    =    Math.abs(x    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	141	None	replace
858	[BUG]  [BUGGY]  n  =  Math.abs(daN  -  1.0)/  epsilon;  [CE]  cannot  find  symbol  daN  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(daN  -  1.0)/  epsilon;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(daN  -  1.0)/  epsilon;	  n    =    Math.abs(x    -    1.0)/    epsilon;    	non-compiled	[CE]  cannot  find  symbol  daN	141	None	replace
859	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  deltaN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  -  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  -  deltaN);	  n    =    Math.abs(x    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
860	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  deltaN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(q2  -  deltaN);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(q2  -  deltaN);	  n    =    Math.abs(x    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
861	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(epsilon  -  1.0)/  deltaN;	  cN    =    Math.abs(deltaN    -    1.0)/    epsilon;    	compilable	timeout	65	1	replace
862	[BUG]  [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  deltaN;  timeout  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  cN  =  Math.abs(epsilon  -  1.0)/  deltaN;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(epsilon  -  1.0)/  deltaN;	  cN    =    Math.abs(deltaN    -    1.0)/    epsilon;    	compilable	timeout	65	1	replace
863	[BUG]  [BUGGY]  double  n  =  Math.min(deltaN,  epsilon  +  1);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.min(deltaN,  epsilon  +  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.min(deltaN,  epsilon  +  1);	  n    =    Math.min(deltaN,    epsilon    +    1);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	86	None	replace
864	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  *  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    dPrev  =  cN  *  q2;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	35	2	add
865	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  *  q2;  dPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  *  q2;  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    dPrev  =  cN  *  q2;  dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	35	2	add
866	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,  dPrev  =  cN  /  q2;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2,  dPrev  =  cN  /  q2;	  	non-compiled	[CE]  ';'  expected	35	None	add
867	[BUG]  [BUGGY]  dPrev  =  qN  /  q2;  dPrev  =  q2;  [CE]  cannot  find  symbol  qN  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  qN  /  q2;  dPrev  =  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  qN  /  q2;  dPrev  =  q2;	  dPrev    =    q2;    dPrev    =    q2;    	non-compiled	[CE]  cannot  find  symbol  qN	44	None	replace
868	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev  -  1);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.min(cN,  dPrev  -  1);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(cN,  dPrev  -  1);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
869	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2,  dPrev  =  cN  /  q1;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2,  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2,  dPrev  =  cN  /  q1;	  	non-compiled	[CE]  ';'  expected	41	None	add
870	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  p0  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    p0  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	41	2	add
871	[BUG]  [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  p0  =  cN  /  q2;  dPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;  p0  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN        /        q2;        dPrev    =    cN    /    q1;    p0  =  cN  /  q2;  dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	41	2	add
872	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  a;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  a;	  dPrev    =    epsilon;    	compilable	  [FE]  OutOfRangeException  	137	11	replace
873	[BUG]  [BUGGY]  dPrev  =  a;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  a;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  a;	  dPrev    =    epsilon;    	compilable	  [FE]  OutOfRangeException  	137	11	replace
874	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  dPrev  =  cN  /  q2,  q1;  [CE]  ';'  expected  [FE]        OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  /  hN;  dPrev  =  cN  /  q2,  q1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  hN;  dPrev  =  cN  /  q2,  q1;	  dPrev    =    cN    /    q2;    dPrev    =    cN    /    q2,    q1;    	non-compiled	[CE]  ';'  expected	127	None	replace
875	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  dprev;  [CE]  cannot  find  symbol  dprev  [FE]            AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  dprev;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  -  1.0)/  dprev;	  n    =    Math.abs(cN    -    1.0)/    q2;    	non-compiled	[CE]  cannot  find  symbol  dprev	142	None	replace
876	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  hN;  cPrev  =  cN;	  dPrev    =    cN;    cPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	74	11	replace
877	[BUG]  [BUGGY]  dPrev  =  hN;  cPrev  =  cN;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  hN;  cPrev  =  cN;	  dPrev    =    cN;    cPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	74	11	replace
878	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  cN;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0  /  cN;  cPrev  =  p0;	  dPrev    =    p0;    cPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	18	7	replace
879	[BUG]  [BUGGY]  dPrev  =  p0  /  cN;  cPrev  =  p0;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  p0  /  cN;  cPrev  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  cN;  cPrev  =  p0;	  dPrev    =    p0;    cPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	18	7	replace
880	[BUG]  [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  double  dPrev  =  cN;  cPrev  =  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cPrev  =  cN;  double  dPrev  =  cN;  cPrev  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        cPrev    =    cN;    double  dPrev  =  cN;  cPrev  =  cN;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	73	None	add
881	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  hN  /  deltaN;	  dPrev    =    cN    /    deltaN;    	compilable	  [FE]  OutOfRangeException  	34	11	replace
882	[BUG]  [BUGGY]  dPrev  =  hN  /  deltaN;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  hN  /  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  hN  /  deltaN;	  dPrev    =    cN    /    deltaN;    	compilable	  [FE]  OutOfRangeException  	34	11	replace
883	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  *  deltaN;	  dPrev    =    cN    /    deltaN;    	compilable	  [FE]  OutOfRangeException  	34	11	replace
884	[BUG]  [BUGGY]  dPrev  =  cN  *  deltaN;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev  =  cN  *  deltaN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  *  deltaN;	  dPrev    =    cN    /    deltaN;    	compilable	  [FE]  OutOfRangeException  	34	11	replace
885	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cN  =  cN;  dPrev  =  p0;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        cN;        cN    =    cN;    dPrev  =  p0;  cN  =  cN;	  	compilable	  [FE]  AssertionError  	101	2	add
886	[BUG]  [BUGGY]  dPrev    =    cN;    cN  =  cN;  dPrev  =  p0;  cN  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    cN;    cN  =  cN;  dPrev  =  p0;  cN  =  cN;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        cN;        cN    =    cN;    dPrev  =  p0;  cN  =  cN;	  	compilable	  [FE]  AssertionError  	101	2	add
887	[BUG]  [BUGGY]  n  =  Math.abs(x  -  1.0,  epsilon);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(x  -  1.0,  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(x  -  1.0,  epsilon);	  n    =    Math.abs(deltaN    -    1.0,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	116	None	replace
888	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0,  epsilon);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  n  =  Math.abs(cN  -  1.0,  epsilon);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  -  1.0,  epsilon);	  n    =    Math.abs(deltaN    -    1.0,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	116	None	replace
889	[BUG]  [BUGGY]  int  dPrev  =  cN  /  q2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  dPrev  =  cN  /  q2;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  dPrev  =  cN  /  q2;	  dPrev    =    cN;    int    dPrev    =    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	75	None	replace
890	[BUG]  [BUGGY]  int  dPrev  =  cN  -  1;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  dPrev  =  cN  -  1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  dPrev  =  cN  -  1;	  dPrev    =    cN;    int    dPrev    =    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	75	None	replace
891	[BUG]  [BUGGY]  int  dPrev  =  cN  /  epsilon;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                OutOfRangeException      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  int  dPrev  =  cN  /  epsilon;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	int  dPrev  =  cN  /  epsilon;	  dPrev    =    cN;    int    dPrev    =    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	75	None	replace
892	[BUG]  [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]          cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	                cN        =        Math.abs(deltaN        -        1.0)/        q2;        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2,  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	non-compiled	[CE]  ';'  expected	49	None	add
893	[BUG]  [BUGGY]  double  n  =  Math.abs(a  -  1.0);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  double  n  =  Math.abs(a  -  1.0);  [BUGGY]      dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(a  -  1.0);	  double    n    =    Math.abs(deltaN    -    1.0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	128	None	replace
894	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  dPrev  =  cN  /  q2;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev        =        p0;        cN    =    p0;    dPrev  =  cN  /  q2;  cN  =  p0;	  	compilable	  [FE]  AssertionError  	93	6	add
895	[BUG]  [BUGGY]  dPrev    =    p0;    cN  =  p0;  dPrev  =  cN  /  q2;  cN  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  dPrev  =  cN  /  q2;  cN  =  p0;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cN    =    p0;    dPrev  =  cN  /  q2;  cN  =  p0;	  	compilable	  [FE]  AssertionError  	93	6	add
896	[BUG]  [BUGGY]  dPrev    =    p0;    cN  =  p0;  dPrev  =  p1;  cN  =  p1;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }      [BUGGY]  dPrev    =    p0;    cN  =  p0;  dPrev  =  p1;  cN  =  p1;  [BUGGY]      cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev        =        p0;        cN    =    p0;    dPrev  =  p1;  cN  =  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	93	None	add
