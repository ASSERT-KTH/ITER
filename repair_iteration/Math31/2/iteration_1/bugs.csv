bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]    AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	    n  =  Math.abs(deltaN  -  1.0)/  epsilon;		non-compiled	[CE]  possible  loss  of  precision	4	None	add
2	[BUG]  [BUGGY]    n  =  Math.abs(deltaN  -  1.0);  [CE]  possible  loss  of  precision  [FE]      AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]    n  =  Math.abs(deltaN  -  1.0);  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	    n  =  Math.abs(deltaN  -  1.0);		non-compiled	[CE]  possible  loss  of  precision	4	None	add
3	[BUG]  [BUGGY]    n  =  Math.abs(deltaN  -  epsilon);  [CE]  possible  loss  of  precision  [FE]        AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]    n  =  Math.abs(deltaN  -  epsilon);  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	    n  =  Math.abs(deltaN  -  epsilon);		non-compiled	[CE]  possible  loss  of  precision	4	None	add
4	[BUG]  [BUGGY]    n  =  Math.min(deltaN,  epsilon);  [CE]  possible  loss  of  precision  [FE]          AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]    n  =  Math.min(deltaN,  epsilon);  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	    n  =  Math.min(deltaN,  epsilon);		non-compiled	[CE]  possible  loss  of  precision	4	None	add
5	[BUG]  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]            AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  deltaN;  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	    n  =  Math.abs(deltaN  -  1.0)/  deltaN;		non-compiled	[CE]  possible  loss  of  precision	4	None	add
6	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]  dPrev  =  cN  /  q1;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q1;	dPrev  =  q1;  	compilable	  [FE]  OutOfRangeException  	3	11	replace
7	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]    AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]  dPrev  =  cN  /  q1;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q1;	dPrev  =  q1;  	compilable	  [FE]  OutOfRangeException  	3	11	replace
8	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]  dPrev  =  p0;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0;	dPrev  =  q1;  	compilable	  [FE]  OutOfRangeException  	3	11	replace
9	[BUG]  [BUGGY]  dPrev  =  p0;  [FE]  OutOfRangeException  [FE]      AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]  dPrev  =  p0;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0;	dPrev  =  q1;  	compilable	  [FE]  OutOfRangeException  	3	11	replace
10	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]  dPrev  =  cN;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN;	dPrev  =  q1;  	compilable	  [FE]  OutOfRangeException  	3	11	replace
11	[BUG]  [BUGGY]  dPrev  =  cN;  [FE]  OutOfRangeException  [FE]        AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]  dPrev  =  cN;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN;	dPrev  =  q1;  	compilable	  [FE]  OutOfRangeException  	3	11	replace
12	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]  dPrev  =  cN  /  q2;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  q2;	dPrev  =  q1;  	compilable	  [FE]  OutOfRangeException  	3	11	replace
13	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]          AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]  dPrev  =  cN  /  q2;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q2;	dPrev  =  q1;  	compilable	  [FE]  OutOfRangeException  	3	11	replace
14	[BUG]  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  possible  loss  of  precision  [FE]    AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	    n  =  Math.abs(deltaN  -  1.0)/  q2;		non-compiled	[CE]  possible  loss  of  precision	4	None	add
15	[BUG]  [BUGGY]    n  =  Math.min(deltaN,  q2);  [CE]  possible  loss  of  precision  [FE]      AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]    n  =  Math.min(deltaN,  q2);  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	    n  =  Math.min(deltaN,  q2);		non-compiled	[CE]  possible  loss  of  precision	4	None	add
16	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]    cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	    cN  =  Math.abs(deltaN  -  1.0)/  q2;		compilable	  [FE]  ConvergenceException  	4	11	add
17	[BUG]  [BUGGY]    cN  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]        AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]    cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	    cN  =  Math.abs(deltaN  -  1.0)/  q2;		compilable	  [FE]  ConvergenceException  	4	11	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]  dPrev  =  q2;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q2;	dPrev  =  q1;  	compilable	  [FE]  AssertionError  	3	9	replace
19	[BUG]  [BUGGY]  dPrev  =  q2;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]  dPrev  =  q2;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q2;	dPrev  =  q1;  	compilable	  [FE]  AssertionError  	3	9	replace
20	[BUG]  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  cN;  [CE]  possible  loss  of  precision  [FE]    AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  cN;  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	    n  =  Math.abs(deltaN  -  1.0)/  cN;		non-compiled	[CE]  possible  loss  of  precision	4	None	add
21	[BUG]  [BUGGY]    n  =  Math.max(dPrev,  cN);  [CE]  possible  loss  of  precision  [FE]      AssertionError  [CONTEXT]  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  [BUGGY]    n  =  Math.max(dPrev,  cN);  [BUGGY]  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	    n  =  Math.max(dPrev,  cN);		non-compiled	[CE]  possible  loss  of  precision	4	None	add
