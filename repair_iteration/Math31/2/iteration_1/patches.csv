bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(epsilon  -  1.0);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  1.0);	      n    =    Math.abs(deltaN    -    1.0);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
2	[BUG]  [BUGGY]  n  =  Math.abs(fastMath.abs(deltaN  -  1.0));  [CE]  cannot  find  symbol  fastMath  [FE]            AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(fastMath.abs(deltaN  -  1.0));  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(fastMath.abs(deltaN  -  1.0));	      n    =    Math.abs(deltaN    -    1.0);    	non-compiled	[CE]  cannot  find  symbol  fastMath	2	None	replace
3	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(dPrev  -  1.0);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  -  1.0);	      n    =    Math.abs(deltaN    -    1.0);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
4	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  -  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  -  q2;	  dPrev    =    q2;    	compilable	  [FE]  OutOfRangeException  	19	11	replace
5	[BUG]  [BUGGY]  dPrev  =  cN  -  q2;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  -  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  -  q2;	  dPrev    =    q2;    	compilable	  [FE]  OutOfRangeException  	19	11	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	6	2	add
7	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	6	2	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	6	2	add
9	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q1;  cPrev  =  cN  /  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q1;    cPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	6	2	add
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	6	2	add
11	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	6	2	add
12	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1);  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1);  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1);	  	non-compiled	[CE]  ';'  expected	6	None	add
13	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1,;  [CE]  ';'  expected  [FE]            OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1,;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1,;	  	non-compiled	[CE]  ';'  expected	6	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0;  dPrev  =  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0;    dPrev  =  p0;	  	compilable	  [FE]  AssertionError  	8	2	add
15	[BUG]  [BUGGY]  dPrev  =  p0;  dPrev  =  p0;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0;  dPrev  =  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0;    dPrev  =  p0;	  	compilable	  [FE]  AssertionError  	8	2	add
16	[BUG]  [BUGGY]  dPrev  =  p0;  int  dPrev  =  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0;  int  dPrev  =  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0;    int  dPrev  =  p0;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0;  cPrev  =  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0;    cPrev  =  p0;	  	compilable	  [FE]  AssertionError  	8	2	add
18	[BUG]  [BUGGY]  dPrev  =  p0;  cPrev  =  p0;  [FE]  AssertionError  [FE]        OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0;  cPrev  =  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0;    cPrev  =  p0;	  	compilable	  [FE]  AssertionError  	8	2	add
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0;  p0  =  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0;    p0  =  p0;	  	compilable	  [FE]  AssertionError  	8	2	add
20	[BUG]  [BUGGY]  dPrev  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]          OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0;  p0  =  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0;    p0  =  p0;	  	compilable	  [FE]  AssertionError  	8	2	add
21	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  deltaN;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  1.0)/  deltaN;	      n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
22	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  epsilon;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  -  1.0)/  epsilon;	      n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
23	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  DEFAULT_EPSILON;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  DEFAULT_EPSILON;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0)/  DEFAULT_EPSILON;	      n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
24	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  q2);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.min(dPrev,  q2);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(dPrev,  q2);	      n    =    Math.min(deltaN,    q2);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
25	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  cN);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.min(deltaN,  cN);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(deltaN,  cN);	      n    =    Math.min(deltaN,    q2);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
26	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  q2);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.min(epsilon,  q2);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(epsilon,  q2);	      n    =    Math.min(deltaN,    q2);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
27	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0)/  q1;	      n    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
28	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0)/  dPrev;	      n    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  hN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  hN;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  AssertionError  	13	9	replace
30	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  hN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  hN;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  AssertionError  	13	9	replace
31	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0  /  q2;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	13	10	replace
32	[BUG]  [BUGGY]  dPrev  =  p0  /  q2;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q2;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	13	10	replace
33	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  deltaN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  deltaN;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	13	11	replace
34	[BUG]  [BUGGY]  dPrev  =  cN  /  deltaN;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  deltaN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  deltaN;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	13	11	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	12	2	add
36	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	12	2	add
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	12	2	add
38	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q2;  cPrev  =  cN  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q2;    cPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	12	2	add
39	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2);  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2);  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2);	  	non-compiled	[CE]  ';'  expected	12	None	add
40	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,;  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2,;	  	non-compiled	[CE]  ';'  expected	12	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	12	2	add
42	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]            OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	12	2	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q2;  dPrev  =  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q2;    dPrev  =  q2;	  	compilable	  [FE]  AssertionError  	18	2	add
44	[BUG]  [BUGGY]  dPrev  =  q2;  dPrev  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q2;  dPrev  =  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2;    dPrev  =  q2;	  	compilable	  [FE]  AssertionError  	18	2	add
45	[BUG]  [BUGGY]  dPrev  =  q2;  int  dPrev  =  q2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q2;  int  dPrev  =  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2;    int  dPrev  =  q2;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q2;  cPrev  =  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q2;    cPrev  =  q2;	  	compilable	  [FE]  AssertionError  	18	2	add
47	[BUG]  [BUGGY]  dPrev  =  q2;  cPrev  =  q2;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q2;  cPrev  =  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2;    cPrev  =  q2;	  	compilable	  [FE]  AssertionError  	18	2	add
48	[BUG]  [BUGGY]  dPrev  =  q2;  dPrev  =  q2);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q2;  dPrev  =  q2);  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2;    dPrev  =  q2);	  	non-compiled	[CE]  ';'  expected	18	None	add
49	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	16	11	add
50	[BUG]  [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  ConvergenceException  	16	11	add
51	[BUG]  [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  int  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  int  cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	        cN    =    Math.abs(deltaN    -    1.0)/    q2;    int  cN  =  Math.abs(deltaN  -  1.0)/  q2;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	16	None	add
52	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	16	11	add
53	[BUG]  [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q1;	  	compilable	  [FE]  ConvergenceException  	16	11	add
54	[BUG]  [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2);  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  cN  =  Math.abs(deltaN  -  1.0)/  q2);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	        cN    =    Math.abs(deltaN    -    1.0)/    q2;    cN  =  Math.abs(deltaN  -  1.0)/  q2);	  	non-compiled	[CE]  ';'  expected	16	None	add
55	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0  /  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  p0  /  q1;	  dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	10	replace
56	[BUG]  [BUGGY]  dPrev  =  p0  /  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0  /  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p0  /  q1;	  dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	10	replace
57	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q1  /  cN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q1  /  cN;	  dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	7	replace
58	[BUG]  [BUGGY]  dPrev  =  q1  /  cN;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q1  /  cN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q1  /  cN;	  dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	7	replace
59	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(cN  -  1.0)/  deltaN;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  -  1.0)/  deltaN;	      n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
60	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  cN;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  cN;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  -  1.0)/  cN;	      n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
61	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  hN;  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  hN;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0)/  hN;	      n    =    Math.abs(deltaN    -    1.0)/    deltaN;    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
62	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(deltaN  -  1.0)/  dPrev;	      cN    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  ConvergenceException  	17	12	replace
63	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  dPrev;	      cN    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  ConvergenceException  	17	12	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(deltaN  -  1.0)/  epsilon;	      cN    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	17	8	replace
65	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  epsilon;	      cN    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	17	8	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(deltaN  -  1.0)/  q1;	      cN    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	17	7	replace
67	[BUG]  [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [FE]  AssertionError  [FE]        ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  cN  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(deltaN  -  1.0)/  q1;	      cN    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	  [FE]  AssertionError  	17	7	replace
68	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  epsilon);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(dPrev  -  epsilon);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(dPrev  -  epsilon);	      n    =    Math.abs(deltaN    -    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
69	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  deltaN);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(epsilon  -  deltaN);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  deltaN);	      n    =    Math.abs(deltaN    -    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
70	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  /  epsilon);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(deltaN  /  epsilon);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  /  epsilon);	      n    =    Math.abs(deltaN    -    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN;  dPrev  =  cN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN;    dPrev  =  cN;	  	compilable	  [FE]  AssertionError  	10	2	add
72	[BUG]  [BUGGY]  dPrev  =  cN;  dPrev  =  cN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN;  dPrev  =  cN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN;    dPrev  =  cN;	  	compilable	  [FE]  AssertionError  	10	2	add
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN;  cPrev  =  cN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN;    cPrev  =  cN;	  	compilable	  [FE]  AssertionError  	10	2	add
74	[BUG]  [BUGGY]  dPrev  =  cN;  cPrev  =  cN;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN;  cPrev  =  cN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN;    cPrev  =  cN;	  	compilable	  [FE]  AssertionError  	10	2	add
75	[BUG]  [BUGGY]  dPrev  =  cN;  int  dPrev  =  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN;  int  dPrev  =  cN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN;    int  dPrev  =  cN;	  	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
76	[BUG]  [BUGGY]  dPrev  =  cN;  dPrev  =  cN);  [CE]  ';'  expected  [FE]          OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN;  dPrev  =  cN);  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN;    dPrev  =  cN);	  	non-compiled	[CE]  ';'  expected	10	None	add
77	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.max(cN,  dPrev);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(cN,  dPrev);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
78	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.min(cN,  dPrev);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(cN,  dPrev);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
79	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  cN  *  epsilon);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
80	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.min(dPrev,  cN);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(dPrev,  cN);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
81	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  hN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  hN;	  dPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	9	11	replace
82	[BUG]  [BUGGY]  dPrev  =  hN;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  hN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  hN;	  dPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	9	11	replace
83	[BUG]  [BUGGY]  dPrev  =  p1;  [CE]  cannot  find  symbol  p1  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  p1;	  dPrev    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	9	None	replace
84	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  deltaN);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.min(epsilon,  deltaN);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(epsilon,  deltaN);	      n    =    Math.min(deltaN,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
85	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  epsilon);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.min(dPrev,  epsilon);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(dPrev,  epsilon);	      n    =    Math.min(deltaN,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
86	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.min(deltaN,  epsilon  +  1);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(deltaN,  epsilon  +  1);	      n    =    Math.min(deltaN,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
87	[BUG]  [BUGGY]  n  =  Math.min(cN,  epsilon);  [CE]  possible  loss  of  precision  [FE]                    AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.min(cN,  epsilon);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(cN,  epsilon);	      n    =    Math.min(deltaN,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
88	[BUG]  [BUGGY]  dPrev  =  cN  /  q3;  [CE]  cannot  find  symbol  q3  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q3;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q3;	  dPrev    =    cN    /    q1;    	non-compiled	[CE]  cannot  find  symbol  q3	7	None	replace
89	[BUG]  [BUGGY]  dPrev  =  qN;  [CE]  cannot  find  symbol  qN  [FE]    AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  qN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  qN;	  dPrev    =    q2;    	non-compiled	[CE]  cannot  find  symbol  qN	19	None	replace
90	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;	      n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
91	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0;  hPrev  =  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0;    hPrev  =  p0;	  	compilable	  [FE]  ConvergenceException  	8	11	add
92	[BUG]  [BUGGY]  dPrev  =  p0;  hPrev  =  p0;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0;  hPrev  =  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0;    hPrev  =  p0;	  	compilable	  [FE]  ConvergenceException  	8	11	add
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0;  cN  =  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    p0;    cN  =  p0;	  	compilable	  [FE]  AssertionError  	8	6	add
94	[BUG]  [BUGGY]  dPrev  =  p0;  cN  =  p0;  [FE]  AssertionError  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  p0;  cN  =  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    p0;    cN  =  p0;	  	compilable	  [FE]  AssertionError  	8	6	add
95	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  *  epsilon);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(deltaN  *  epsilon);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  *  epsilon);	      n    =    Math.abs(deltaN    -    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
96	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  epsilon  +  1);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(deltaN  -  epsilon  +  1);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  epsilon  +  1);	      n    =    Math.abs(deltaN    -    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
97	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q2;  q2  =  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    q2;    q2  =  q2;	  	compilable	  [FE]  AssertionError  	18	2	add
98	[BUG]  [BUGGY]  dPrev  =  q2;  q2  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q2;  q2  =  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    q2;    q2  =  q2;	  	compilable	  [FE]  AssertionError  	18	2	add
99	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q2;  q2  =  cN  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    q2;    q2  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	12	6	add
100	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  q2  =  cN  /  q2;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q2;  q2  =  cN  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q2;    q2  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	12	6	add
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN;  cN  =  cN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN;    cN  =  cN;	  	compilable	  [FE]  AssertionError  	10	2	add
102	[BUG]  [BUGGY]  dPrev  =  cN;  cN  =  cN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN;  cN  =  cN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN;    cN  =  cN;	  	compilable	  [FE]  AssertionError  	10	2	add
103	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  q2);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.max(dPrev,  q2);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  q2);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
104	[BUG]  [BUGGY]  n  =  Math.max(q1,  cN);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.max(q1,  cN);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(q1,  cN);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
105	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  hN);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.max(dPrev,  hN);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  hN);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
106	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  *  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  *  q2;	  dPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	11	11	replace
107	[BUG]  [BUGGY]  dPrev  =  cN  *  q2;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  *  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  *  q2;	  dPrev    =    cN;    	compilable	  [FE]  OutOfRangeException  	11	11	replace
108	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  cN  +  1;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  cN  +  1;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0)/  cN  +  1;	      n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	        cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  AssertionError  	16	6	add
110	[BUG]  [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]      cN  =  Math.abs(deltaN  -  1.0)/  q2;  q2  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	        cN    =    Math.abs(deltaN    -    1.0)/    q2;    q2  =  Math.abs(deltaN  -  1.0)/  q2;	  	compilable	  [FE]  AssertionError  	16	6	add
111	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  q1);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.min(deltaN,  q1);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(deltaN,  q1);	      n    =    Math.min(deltaN,    q2);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
112	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  hN);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.min(deltaN,  hN);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(deltaN,  hN);	      n    =    Math.min(deltaN,    q2);    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
113	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  q1,  q2);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]              AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.min(deltaN,  q1,  q2);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.min(deltaN,  q1,  q2);	      n    =    Math.min(deltaN,    q2);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	15	None	replace
114	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q1;  q1  =  cN  /  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev    =    cN    /    q1;    q1  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	6	11	add
115	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  q1  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q1;  q1  =  cN  /  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q1;    q1  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	6	11	add
116	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0,  epsilon);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(deltaN  -  1.0,  epsilon);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  -  1.0,  epsilon);	      n    =    Math.abs(deltaN    -    1.0);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	2	None	replace
117	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  /  1.0);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(deltaN  /  1.0);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(deltaN  /  1.0);	      n    =    Math.abs(deltaN    -    1.0);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
118	[BUG]  [BUGGY]  dPrev  =  cN  /  q0;  [CE]  cannot  find  symbol  q0  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  q0;	  dPrev    =    cN    /    q2;    	non-compiled	[CE]  cannot  find  symbol  q0	13	None	replace
119	[BUG]  [BUGGY]  dPrev  =  qN  /  q2;  [CE]  cannot  find  symbol  qN  [FE]    AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  qN  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  qN  /  q2;	  dPrev    =    q2;    	non-compiled	[CE]  cannot  find  symbol  qN	19	None	replace
120	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	cN  =  Math.abs(cN  -  1.0)/  q2;	      cN    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	timeout	17	1	replace
121	[BUG]  [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  timeout  [FE]    ConvergenceException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  cN  =  Math.abs(cN  -  1.0)/  q2;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	cN  =  Math.abs(cN  -  1.0)/  q2;	      cN    =    Math.abs(deltaN    -    1.0)/    q2;    	compilable	timeout	17	1	replace
122	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  deltaN;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  deltaN;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(deltaN  -  1.0)/  deltaN;	      n    =    Math.abs(deltaN    -    1.0)/    deltaN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
123	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q2  /  cN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q2  /  cN;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	13	7	replace
124	[BUG]  [BUGGY]  dPrev  =  q2  /  cN;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q2  /  cN;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q2  /  cN;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	13	7	replace
125	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q1  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q1  /  q2;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	13	11	replace
126	[BUG]  [BUGGY]  dPrev  =  q1  /  q2;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q1  /  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q1  /  q2;	  dPrev    =    cN    /    q2;    	compilable	  [FE]  OutOfRangeException  	13	11	replace
127	[BUG]  [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,  q1;  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q2;  dPrev  =  cN  /  q2,  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q2;    dPrev  =  cN  /  q2,  q1;	  	non-compiled	[CE]  ';'  expected	12	None	add
128	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(deltaN  -  1.0);	      n    =    Math.abs(deltaN    -    1.0);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	2	None	replace
129	[BUG]  [BUGGY]  n  =  Math.abs(x  -  1.0);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(x  -  1.0);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(x  -  1.0);	      n    =    Math.abs(deltaN    -    1.0);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
130	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  cN;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  cN;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  1.0)/  cN;	      n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
131	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  cN;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  cN;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	double  n  =  Math.abs(deltaN  -  1.0)/  cN;	      n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	20	None	replace
132	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  -  1);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.max(dPrev,  cN  -  1);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.max(dPrev,  cN  -  1);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
133	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q2  /  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  q2  /  q1;	  dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	11	replace
134	[BUG]  [BUGGY]  dPrev  =  q2  /  q1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  q2  /  q1;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  q2  /  q1;	  dPrev    =    cN    /    q1;    	compilable	  [FE]  OutOfRangeException  	7	11	replace
135	[BUG]  [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1,  q2;  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  q1;  dPrev  =  cN  /  q1,  q2;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev    =    cN    /    q1;    dPrev  =  cN  /  q1,  q2;	  	non-compiled	[CE]  ';'  expected	6	None	add
136	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  epsilon;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  epsilon;	  dPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	9	11	replace
137	[BUG]  [BUGGY]  dPrev  =  epsilon;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  epsilon;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  epsilon;	  dPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	9	11	replace
138	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	dPrev  =  cN  /  p0;	  dPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	9	9	replace
139	[BUG]  [BUGGY]  dPrev  =  cN  /  p0;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  dPrev  =  cN  /  p0;  [BUGGY]    cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	dPrev  =  cN  /  p0;	  dPrev    =    p0;    	compilable	  [FE]  OutOfRangeException  	9	9	replace
140	[BUG]  [BUGGY]  n  =  Math.abs(x  -  deltaN);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(x  -  deltaN);  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(x  -  deltaN);	      n    =    Math.abs(deltaN    -    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
141	[BUG]  [BUGGY]  n  =  Math.abs(x  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(x  -  1.0)/  epsilon;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(x  -  1.0)/  epsilon;	      n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
142	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  q2;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(cN  -  1.0)/  q2;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(cN  -  1.0)/  q2;	      n    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
143	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  q2;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }    [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  q2;  [BUGGY]    dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	n  =  Math.abs(epsilon  -  1.0)/  q2;	      n    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
