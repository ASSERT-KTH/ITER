bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  epsilon-1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  epsilon-1;	  final    double    small    =    1e-1;    Final    double    small    =    1e-1;    	compilable	  [FE]  AssertionError  	30	2	replace
2	[BUG]  [BUGGY]  final  double  small  =  epsilon-1;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  epsilon-1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  epsilon-1;	  final    double    small    =    1e-1;    Final    double    small    =    1e-1;    	compilable	  [FE]  AssertionError  	30	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  0;	  final    double    small    =    1;    	compilable	  [FE]  AssertionError  	13	2	replace
4	[BUG]  [BUGGY]  final  double  small  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  0;	  final    double    small    =    1;    	compilable	  [FE]  AssertionError  	13	2	replace
5	[BUG]  [BUGGY]  final  double  small  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  getA(x,  epsilon,  maxIterations);	  final    double    small    =    1;    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	13	None	replace
6	[BUG]  [BUGGY]  final  double  small  =  1e-2;  final  double  small  =  1e-2;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e-2;  final  double  small  =  1e-2;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-2;    final  double  small  =  1e-2;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
7	[BUG]  [BUGGY]  final  double  small  =  1e-2;  final  double  large  =  1e-2;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e-2;  final  double  large  =  1e-2;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-2;    final  double  large  =  1e-2;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
8	[BUG]  [BUGGY]  final  double  small  =  1e-2;  Final  double  small  =  1e-2;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e-2;  Final  double  small  =  1e-2;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-2;    Final  double  small  =  1e-2;	  	non-compiled	[CE]  not  a  statement	6	None	add
9	[BUG]  [BUGGY]  final  double  small  =  1e-2;  final  double  simple  =  1e-2;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e-2;  final  double  simple  =  1e-2;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-2;    final  double  simple  =  1e-2;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
10	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  epsilon,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  maxIterations,  epsilon,  DEFAULT_EPSILON);	  final    int    n    =    getA(x,    epsilon,    maxIterations,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	17	None	replace
11	[BUG]  [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(x,  epsilon,  maxIterations,  epsilon);	  final    int    n    =    getA(x,    epsilon,    maxIterations,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	17	None	replace
12	[BUG]  [BUGGY]  int  small  =(int)Math.floor(x);  int  small  =(int)Math.floor(x);  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =(int)Math.floor(x);  int  small  =(int)Math.floor(x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int    small    =(int)Math.floor(x);    int  small  =(int)Math.floor(x);	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	61	None	add
13	[BUG]  [BUGGY]  int  small  =(int)Math.floor(x);  Int  int  small  =(int)Math.floor(x);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =(int)Math.floor(x);  Int  int  small  =(int)Math.floor(x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int    small    =(int)Math.floor(x);    Int  int  small  =(int)Math.floor(x);	  	non-compiled	[CE]  not  a  statement	61	None	add
14	[BUG]  [BUGGY]  int  small  =(int)Math.floor(x);  int  large  =(int)Math.floor(x);  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =(int)Math.floor(x);  int  large  =(int)Math.floor(x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int    small    =(int)Math.floor(x);    int  large  =(int)Math.floor(x);	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	61	None	add
15	[BUG]  [BUGGY]  int  small  =(int)Math.floor(x);  int  big  =(int)Math.floor(x);  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =(int)Math.floor(x);  int  big  =(int)Math.floor(x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int    small    =(int)Math.floor(x);    int  big  =(int)Math.floor(x);	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	61	None	add
16	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  epsilon,  1,  maxIterations);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  epsilon,  1,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor().evaluate(x,  epsilon,  1,  maxIterations);	  int    n    =    getScaleFactor().evaluate(x,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
17	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  epsilon);	  int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	21	None	replace
18	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	21	None	replace
19	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	21	None	replace
20	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  a);  [CE]  cannot  find  symbol  a  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  a);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  a);	  int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  a	21	None	replace
21	[BUG]  [BUGGY]  final  double  simple  =  1e-1;  [CE]  cannot  find  symbol  small  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  simple  =  1e-1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  simple  =  1e-1;	  final    double    small    =    1e-1;    final    double    simple    =    1e-1;    	non-compiled	[CE]  cannot  find  symbol  small	31	None	replace
22	[BUG]  [BUGGY]  final  double  simple  =  epsilon.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  simple  =  epsilon.doubleValue();  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  simple  =  epsilon.doubleValue();	  final    double    small    =    1e-1;    final    double    simple    =    1e-1;    	non-compiled	[CE]  double  cannot  be  dereferenced	31	None	replace
23	[BUG]  [BUGGY]  final  double  simple  =  epsilon-1;  [CE]  cannot  find  symbol  small  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  simple  =  epsilon-1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  simple  =  epsilon-1;	  final    double    small    =    1e-1;    final    double    simple    =    1e-1;    	non-compiled	[CE]  cannot  find  symbol  small	31	None	replace
24	[BUG]  [BUGGY]  final  double  small  =  1e-4;  final  double  small  =  1e-4;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e-4;  final  double  small  =  1e-4;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-4;    final  double  small  =  1e-4;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
25	[BUG]  [BUGGY]  final  double  small  =  1e-4;  final  double  large  =  1e-4;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e-4;  final  double  large  =  1e-4;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-4;    final  double  large  =  1e-4;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
26	[BUG]  [BUGGY]  final  double  small  =  1e-4;  Final  double  small  =  1e-4;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e-4;  Final  double  small  =  1e-4;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-4;    Final  double  small  =  1e-4;	  	non-compiled	[CE]  not  a  statement	8	None	add
27	[BUG]  [BUGGY]  final  double  small  =  1e-4;  final  double  simple  =  1e-4;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e-4;  final  double  simple  =  1e-4;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-4;    final  double  simple  =  1e-4;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0d;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  1.0d;	  final    double    small    =    1.0f;    	compilable	  [FE]  AssertionError  	39	2	replace
29	[BUG]  [BUGGY]  final  double  small  =  1.0d;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0d;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0d;	  final    double    small    =    1.0f;    	compilable	  [FE]  AssertionError  	39	2	replace
30	[BUG]  [BUGGY]  static  final  double  small  =  1.0f;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  static  final  double  small  =  1.0f;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	static  final  double  small  =  1.0f;	  final    double    small    =    1.0f;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
31	[BUG]  [BUGGY]  double  x  =  getA(x,  epsilon,  0,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  x  =  getA(x,  epsilon,  0,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  x  =  getA(x,  epsilon,  0,  maxIterations);	  double    x    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	78	None	replace
32	[BUG]  [BUGGY]  double  x  =  getA(x,  epsilon,  maxIterations)+  1;  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  x  =  getA(x,  epsilon,  maxIterations)+  1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  x  =  getA(x,  epsilon,  maxIterations)+  1;	  double    x    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	78	None	replace
33	[BUG]  [BUGGY]  double  x  =  getA(x,  epsilon,  minIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  x  =  getA(x,  epsilon,  minIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  x  =  getA(x,  epsilon,  minIterations);	  double    x    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	78	None	replace
34	[BUG]  [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  final    int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	15	None	replace
35	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  epsilon);	  final    int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	15	None	replace
36	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  final    int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	15	None	replace
37	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  0);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  0);	  final    int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	15	None	replace
38	[BUG]  [BUGGY]  final  double  n  =  getA(x,  epsilon,  0,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(x,  epsilon,  0,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(x,  epsilon,  0,  maxIterations);	  final    int    n    =    getA(x,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
39	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  0,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  0,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  0,  epsilon,  maxIterations);	  final    int    n    =    getA(x,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
40	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  0,  maxIterations,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  0,  maxIterations,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  0,  maxIterations,  epsilon);	  final    int    n    =    getA(x,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
41	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  0,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  0,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  0,  maxIterations,  DEFAULT_EPSILON);	  final    int    n    =    getA(x,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
42	[BUG]  [BUGGY]  final  double  small  =  1.0  *  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0  *  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0  *  getScaleFactor().evaluate(x,  epsilon,  maxIterations);	  final    double    small    =    1.0    +    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
43	[BUG]  [BUGGY]  final  double  small  =  1.0f  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0f  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0f  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);	  final    double    small    =    1.0    +    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
44	[BUG]  [BUGGY]  static  final  double  small  =  1.0  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  static  final  double  small  =  1.0  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	static  final  double  small  =  1.0  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);	  final    double    small    =    1.0    +    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
45	[BUG]  [BUGGY]  double  n  =  getA0(0,  epsilon);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA0(0,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA0(0,  epsilon);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
46	[BUG]  [BUGGY]  double  n  =  getA0(0,  x),  epsilon);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA0(0,  x),  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA0(0,  x),  epsilon);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  ';'  expected	11	None	replace
47	[BUG]  [BUGGY]  double  n  =  getA0(x,  epsilon);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA0(x,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA0(x,  epsilon);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
48	[BUG]  [BUGGY]  double  n  =  getA(1,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(1,  x),  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(1,  x),  epsilon,  maxIterations);	  double    n    =    getA(0,    x),    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	77	None	replace
49	[BUG]  [BUGGY]  double  n  =  getA(0,  x),  epsilon,  0,  maxIterations);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(0,  x),  epsilon,  0,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(0,  x),  epsilon,  0,  maxIterations);	  double    n    =    getA(0,    x),    epsilon,    maxIterations);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
50	[BUG]  [BUGGY]  double  n  =  getB(0,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getB(0,  x),  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getB(0,  x),  epsilon,  maxIterations);	  double    n    =    getA(0,    x),    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	77	None	replace
51	[BUG]  [BUGGY]  final  double  large  =  1e-1;  [CE]  cannot  find  symbol  small  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  large  =  1e-1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  large  =  1e-1;	  final    double    small    =    1e-1;    final    double    large    =    1e-1;    	non-compiled	[CE]  cannot  find  symbol  small	32	None	replace
52	[BUG]  [BUGGY]  double  n  =  getA(0).evaluate(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(0).evaluate(x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(0).evaluate(x,  epsilon,  maxIterations);	  double    n    =    getA(0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	10	None	replace
53	[BUG]  [BUGGY]  final  double  small  =  1e-9;  final  double  small  =  1e-9;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e-9;  final  double  small  =  1e-9;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-9;    final  double  small  =  1e-9;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	70	None	add
54	[BUG]  [BUGGY]  final  double  small  =  1e-9;  final  double  large  =  1e-9;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e-9;  final  double  large  =  1e-9;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-9;    final  double  large  =  1e-9;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	70	None	add
55	[BUG]  [BUGGY]  final  double  small  =  1e-9;  Final  double  small  =  1e-9;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e-9;  Final  double  small  =  1e-9;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-9;    Final  double  small  =  1e-9;	  	non-compiled	[CE]  not  a  statement	70	None	add
56	[BUG]  [BUGGY]  final  double  small  =  1e-9;  final  double  simple  =  1e-9;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e-9;  final  double  simple  =  1e-9;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-9;    final  double  simple  =  1e-9;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	70	None	add
57	[BUG]  [BUGGY]  final  double  small  =  0.5;  final  double  small  =  0.5;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.5;  final  double  small  =  0.5;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    0.5;    final  double  small  =  0.5;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	40	None	add
58	[BUG]  [BUGGY]  final  double  small  =  0.5;  Final  double  small  =  0.5;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.5;  Final  double  small  =  0.5;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    0.5;    Final  double  small  =  0.5;	  	non-compiled	[CE]  not  a  statement	40	None	add
59	[BUG]  [BUGGY]  final  double  small  =  0.5;  final  double  simple  =  0.5;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.5;  final  double  simple  =  0.5;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    0.5;    final  double  simple  =  0.5;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	40	None	add
60	[BUG]  [BUGGY]  final  double  small  =  0.5;  final  double  small  =  0.01;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.5;  final  double  small  =  0.01;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    0.5;    final  double  small  =  0.01;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	40	None	add
61	[BUG]  [BUGGY]  Double  n  =  getA(x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  n  =  getA(x,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  n  =  getA(x,  epsilon);	  double    n    =    getA(x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	49	None	replace
62	[BUG]  [BUGGY]  Double  n  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  n  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  n  =  getA(x,  epsilon,  maxIterations);	  double    n    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	33	None	replace
63	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(x,  epsilon,  minIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(x,  epsilon,  minIterations);	  double    n    =    getA(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  minIterations	33	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  10.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  10.0;	  final    double    small    =    0.0;    	compilable	  [FE]  AssertionError  	37	7	replace
65	[BUG]  [BUGGY]  final  double  small  =  10.0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  10.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  10.0;	  final    double    small    =    0.0;    	compilable	  [FE]  AssertionError  	37	7	replace
66	[BUG]  [BUGGY]  static  final  double  small  =  0.0;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  static  final  double  small  =  0.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	static  final  double  small  =  0.0;	  final    double    small    =    0.0;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
67	[BUG]  [BUGGY]  final  int  n  =  getA(0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(0);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(0);	  final    long    n    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	81	None	replace
68	[BUG]  [BUGGY]  Double  n  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  small  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  n  =  getA(0,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  n  =  getA(0,  epsilon);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	73	None	replace
69	[BUG]  [BUGGY]  Double  n  =  getA(0,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  n  =  getA(0,  x,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  n  =  getA(0,  x,  epsilon);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	73	None	replace
70	[BUG]  [BUGGY]  Double  n  =  getA(0,  x  +  1);  [CE]  cannot  find  symbol  small  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  n  =  getA(0,  x  +  1);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  n  =  getA(0,  x  +  1);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	73	None	replace
71	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  epsilon,  maximumIterations);  [CE]  cannot  find  symbol  maximumIterations  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  epsilon,  maximumIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor().evaluate(x,  epsilon,  maximumIterations);	  int    n    =    getScaleFactor().evaluate(x,    epsilon,    minIterations);    	non-compiled	[CE]  cannot  find  symbol  maximumIterations	1	None	replace
72	[BUG]  [BUGGY]  final  double  small  =  1;  final  double  small  =  1;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1;  final  double  small  =  1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1;    final  double  small  =  1;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	12	None	add
73	[BUG]  [BUGGY]  final  double  small  =  1;  Final  double  small  =  1;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1;  Final  double  small  =  1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1;    Final  double  small  =  1;	  	non-compiled	[CE]  not  a  statement	12	None	add
74	[BUG]  [BUGGY]  final  double  small  =  1;  final  double  simple  =  1;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1;  final  double  simple  =  1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1;    final  double  simple  =  1;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	12	None	add
75	[BUG]  [BUGGY]  final  double  small  =  1;  final  double  small  =  2;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1;  final  double  small  =  2;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1;    final  double  small  =  2;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	12	None	add
76	[BUG]  [BUGGY]  final  double  n  =  getA(x);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(x);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(x);	  final    double    n    =    getA(0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	4	None	replace
77	[BUG]  [BUGGY]  final  double  n  =  getA(0).evaluate(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(0).evaluate(x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(0).evaluate(x,  epsilon,  maxIterations);	  final    double    n    =    getA(0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	4	None	replace
78	[BUG]  [BUGGY]  final  double  n  =  getA(x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(x,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(x,  epsilon);	  final    double    n    =    getA(0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	4	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  1e0;	  final    double    small    =    1e-9;    	compilable	  [FE]  AssertionError  	71	2	replace
80	[BUG]  [BUGGY]  final  double  small  =  1e0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1e0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1e0;	  final    double    small    =    1e-9;    	compilable	  [FE]  AssertionError  	71	2	replace
81	[BUG]  [BUGGY]  final  double  small  =  epsilon.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  epsilon.doubleValue();  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  epsilon.doubleValue();	  final    double    small    =    1e-1;    final    double    small    =    1e-1;    	non-compiled	[CE]  double  cannot  be  dereferenced	29	None	replace
82	[BUG]  [BUGGY]  int  small  =  epsilon.getScaleFactor().nextIterations();  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  epsilon.getScaleFactor().nextIterations();  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  epsilon.getScaleFactor().nextIterations();	  int    small    =    epsilon.nextIterations();    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
83	[BUG]  [BUGGY]  int  small  =  epsilon.nextScaleIterations();  [CE]  double  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  epsilon.nextScaleIterations();  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  epsilon.nextScaleIterations();	  int    small    =    epsilon.nextIterations();    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
84	[BUG]  [BUGGY]  int  small  =  epsilon.nextIterations()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  epsilon.nextIterations()  +  1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  epsilon.nextIterations()  +  1;	  int    small    =    epsilon.nextIterations();    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
85	[BUG]  [BUGGY]  int  n  =  getB(x,  epsilon,  maxIterations);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getB(x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getB(x,  epsilon,  maxIterations);	  int    n    =    getB(x,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	56	None	replace
86	[BUG]  [BUGGY]  double  n  =  getB(x,  epsilon);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getB(x,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getB(x,  epsilon);	  int    n    =    getB(x,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	56	None	replace
87	[BUG]  [BUGGY]  int  n  =  getB(epsilon,  x);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getB(epsilon,  x);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getB(epsilon,  x);	  int    n    =    getB(x,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	56	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  small  =(double)Math.floor(x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	double  small  =(double)Math.floor(x);	  int    small    =(int)Math.floor(x);    	compilable	  [FE]  AssertionError  	62	2	replace
89	[BUG]  [BUGGY]  double  small  =(double)Math.floor(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  small  =(double)Math.floor(x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  small  =(double)Math.floor(x);	  int    small    =(int)Math.floor(x);    	compilable	  [FE]  AssertionError  	62	2	replace
90	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =(int)Math.floor(epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	int  small  =(int)Math.floor(epsilon);	  int    small    =(int)Math.floor(x);    	compilable	  [FE]  AssertionError  	62	2	replace
91	[BUG]  [BUGGY]  int  small  =(int)Math.floor(epsilon);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =(int)Math.floor(epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =(int)Math.floor(epsilon);	  int    small    =(int)Math.floor(x);    	compilable	  [FE]  AssertionError  	62	2	replace
92	[BUG]  [BUGGY]  int  small  =(int)Math.floor(x,  epsilon);  [CE]  method  floor  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =(int)Math.floor(x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =(int)Math.floor(x,  epsilon);	  int    small    =(int)Math.floor(x);    	non-compiled	[CE]  method  floor  in  class  Math  cannot  be  applied  to  given  types;	62	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  float  small  =(float)Math.floor(x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	float  small  =(float)Math.floor(x);	  int    small    =(int)Math.floor(x);    	compilable	  [FE]  AssertionError  	62	2	replace
94	[BUG]  [BUGGY]  float  small  =(float)Math.floor(x);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  float  small  =(float)Math.floor(x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	float  small  =(float)Math.floor(x);	  int    small    =(int)Math.floor(x);    	compilable	  [FE]  AssertionError  	62	2	replace
95	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations)/  1;  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations)/  1;  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor(x,  epsilon,  maxIterations)/  1;	  int    n    =    getScaleFactor(x,    epsilon,    maxIterations)+    1;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
96	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations)+  2;  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations)+  2;  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor(x,  epsilon,  maxIterations)+  2;	  int    n    =    getScaleFactor(x,    epsilon,    maxIterations)+    1;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
97	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  dPrev  =  getA(x,  epsilon,  maxIterations);	  Double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	20	None	replace
98	[BUG]  [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  minIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(x,  epsilon,  minIterations);	  Double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  minIterations	20	None	replace
99	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);	  final    int    n    =    getA(x,    epsilon,    maxIterations,    defScaleFactor);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	68	None	replace
100	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  defPower);  [CE]  cannot  find  symbol  defPower  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  defPower);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  maxIterations,  defPower);	  final    int    n    =    getA(x,    epsilon,    maxIterations,    defScaleFactor);    	non-compiled	[CE]  cannot  find  symbol  defPower	68	None	replace
101	[BUG]  [BUGGY]  int  n  =  getA().evaluate(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA().evaluate(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA().evaluate(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  int    n    =    getA().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	67	None	replace
102	[BUG]  [BUGGY]  double  n  =  getA().evaluate(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA().evaluate(x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA().evaluate(x,  epsilon,  maxIterations);	  int    n    =    getA().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	67	None	replace
103	[BUG]  [BUGGY]  int  n  =  getA().evaluate(x,  epsilon,  0,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA().evaluate(x,  epsilon,  0,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA().evaluate(x,  epsilon,  0,  maxIterations);	  int    n    =    getA().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	67	None	replace
104	[BUG]  [BUGGY]  int  n  =  getA().evaluate(x,  epsilon,  maxIterations,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA().evaluate(x,  epsilon,  maxIterations,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA().evaluate(x,  epsilon,  maxIterations,  epsilon);	  int    n    =    getA().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	67	None	replace
105	[BUG]  [BUGGY]  double  small  =  epsilon.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  small  =  epsilon.doubleValue();  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  small  =  epsilon.doubleValue();	  int    small    =    epsilon.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	59	None	replace
106	[BUG]  [BUGGY]  int  small  =  x.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  x.doubleValue();  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  x.doubleValue();	  int    small    =    epsilon.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	59	None	replace
107	[BUG]  [BUGGY]  final  double  small  =  1.0  *  getScaleFactor(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0  *  getScaleFactor(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0  *  getScaleFactor(x,  epsilon,  maxIterations);	  final    double    small    =    1.0    +    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
108	[BUG]  [BUGGY]  final  double  small  =  1.0  +  getScaleFactor(x,  epsilon,  maxIterations));  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0  +  getScaleFactor(x,  epsilon,  maxIterations));  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0  +  getScaleFactor(x,  epsilon,  maxIterations));	  final    double    small    =    1.0    +    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	75	None	replace
109	[BUG]  [BUGGY]  final  double  large  =  1e-3;  [CE]  cannot  find  symbol  small  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  large  =  1e-3;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  large  =  1e-3;	  final    double    small    =    1e-3;    final    double    large    =    1e-3;    	non-compiled	[CE]  cannot  find  symbol  small	54	None	replace
110	[BUG]  [BUGGY]  i  =  getA(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  i  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	i  =  getA(x,  epsilon,  maxIterations);	  n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  i	51	None	replace
111	[BUG]  [BUGGY]  Double  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);	  double    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
112	[BUG]  [BUGGY]  double  n  =  getScaleFactor().evaluate(x,  epsilon,  0,  maxIterations);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getScaleFactor().evaluate(x,  epsilon,  0,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getScaleFactor().evaluate(x,  epsilon,  0,  maxIterations);	  double    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
113	[BUG]  [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);	  final    double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	14	None	replace
114	[BUG]  [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations,  0);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(x,  epsilon,  maxIterations,  0);	  final    double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	14	None	replace
115	[BUG]  [BUGGY]  final  double  small  =  1.0f;  final  double  small  =  1.0f;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0f;  final  double  small  =  1.0f;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1.0f;    final  double  small  =  1.0f;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	38	None	add
116	[BUG]  [BUGGY]  final  double  small  =  1.0f;  Final  double  small  =  1.0f;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0f;  Final  double  small  =  1.0f;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1.0f;    Final  double  small  =  1.0f;	  	non-compiled	[CE]  not  a  statement	38	None	add
117	[BUG]  [BUGGY]  final  double  small  =  1.0f;  final  double  large  =  1.0f;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0f;  final  double  large  =  1.0f;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1.0f;    final  double  large  =  1.0f;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	38	None	add
118	[BUG]  [BUGGY]  final  double  small  =  1.0f;  final  double  low  =  1.0f;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0f;  final  double  low  =  1.0f;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1.0f;    final  double  low  =  1.0f;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	38	None	add
119	[BUG]  [BUGGY]  final  int  small  =  1.0;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  small  =  1.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  small  =  1.0;	  final    double    small    =    1.0;    final    double    small    =    0.0;    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
120	[BUG]  [BUGGY]  final  int  small  =  0.0;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  small  =  0.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  small  =  0.0;	  final    double    small    =    1.0;    final    double    small    =    0.0;    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
121	[BUG]  [BUGGY]  Double  dPrev  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  small  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(0,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(0,  epsilon);	  Double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	19	None	replace
122	[BUG]  [BUGGY]  Double  dPrev  =  getA(0,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(0,  x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(0,  x,  epsilon);	  Double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	19	None	replace
123	[BUG]  [BUGGY]  Double  dPrev  =  getA(0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(0);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(0);	  Double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	19	None	replace
124	[BUG]  [BUGGY]  int  small  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  int    small    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	79	None	replace
125	[BUG]  [BUGGY]  double  small  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  small  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  small  =  getA(x,  epsilon,  maxIterations);	  int    small    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	79	None	replace
126	[BUG]  [BUGGY]  float  small  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  float  small  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	float  small  =  getA(x,  epsilon,  maxIterations);	  int    small    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	79	None	replace
127	[BUG]  [BUGGY]  int  small  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  getA(x,  epsilon,  maxIterations,  scaleFactor);	  int    small    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	79	None	replace
128	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  epsilon);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  epsilon);	  int    n    =    getScaleFactor(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
129	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  DEFAULT_EPSILON,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor(x,  epsilon,  DEFAULT_EPSILON,  maxIterations);	  int    n    =    getScaleFactor(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
130	[BUG]  [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  Double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	18	None	replace
131	[BUG]  [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(x,  epsilon,  maxIterations,  scaleFactor);	  Double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	18	None	replace
132	[BUG]  [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  0,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  0,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(x,  epsilon,  0,  maxIterations);	  Double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	18	None	replace
133	[BUG]  [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations,  0);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(x,  epsilon,  maxIterations,  0);	  Double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	18	None	replace
134	[BUG]  [BUGGY]  double  small  =  epsilon.intValue();  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  small  =  epsilon.intValue();  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  small  =  epsilon.intValue();	  int    small    =    epsilon.intValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	80	None	replace
135	[BUG]  [BUGGY]  int  small  =  x.intValue();  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  x.intValue();  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  x.intValue();	  int    small    =    epsilon.intValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	80	None	replace
136	[BUG]  [BUGGY]  Integer  n  =  getScaleFactor().evaluate(x,  epsilon,  0,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Integer  n  =  getScaleFactor().evaluate(x,  epsilon,  0,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Integer  n  =  getScaleFactor().evaluate(x,  epsilon,  0,  maxIterations);	  Integer    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
137	[BUG]  [BUGGY]  Integer  n  =  getScaleFactor().evaluate(x,  epsilon,  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Integer  n  =  getScaleFactor().evaluate(x,  epsilon,  minIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Integer  n  =  getScaleFactor().evaluate(x,  epsilon,  minIterations);	  Integer    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  minIterations	66	None	replace
138	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxPower);  [CE]  cannot  find  symbol  maxPower  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  maxPower);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  maxPower);	  int    n    =    getA(x,    epsilon,    scaleFactor,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  maxPower	24	None	replace
139	[BUG]  [BUGGY]  double  n  =  getA(0,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(0,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(0,  epsilon,  maxIterations);	  double    n    =    getA(0,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	35	None	replace
140	[BUG]  [BUGGY]  double  n  =  getA(1,  epsilon);  [CE]  cannot  find  symbol  small  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(1,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(1,  epsilon);	  double    n    =    getA(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  small	35	None	replace
141	[BUG]  [BUGGY]  int  n  =  getA(0,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(0,  x),  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(0,  x),  epsilon,  maxIterations);	  int    n    =    getA(0,    x).doubleValue();    	non-compiled	[CE]  ';'  expected	82	None	replace
142	[BUG]  [BUGGY]  int  n  =  getA(0,  x),  epsilon.doubleValue();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(0,  x),  epsilon.doubleValue();  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(0,  x),  epsilon.doubleValue();	  int    n    =    getA(0,    x).doubleValue();    	non-compiled	[CE]  ';'  expected	82	None	replace
143	[BUG]  [BUGGY]  int  n  =  getA(0,  x),  epsilon,  maxIterations;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(0,  x),  epsilon,  maxIterations;  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(0,  x),  epsilon,  maxIterations;	  int    n    =    getA(0,    x).doubleValue();    	non-compiled	[CE]  possible  loss  of  precision	82	None	replace
144	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  0,  maxIterations,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  0,  maxIterations,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  0,  maxIterations,  epsilon);	  int    n    =    getA(x,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	23	None	replace
145	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  0,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  0,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  0,  epsilon,  maxIterations);	  int    n    =    getA(x,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	23	None	replace
146	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  0,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  0,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  0,  maxIterations,  DEFAULT_EPSILON);	  int    n    =    getA(x,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	23	None	replace
147	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  0,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(x,  epsilon,  0,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(x,  epsilon,  0,  maxIterations);	  int    n    =    getA(x,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	23	None	replace
148	[BUG]  [BUGGY]  float  n  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  float  n  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	float  n  =  getA(x,  epsilon,  maxIterations);	  float    n    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	65	None	replace
149	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);	  double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	22	None	replace
150	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  0);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(x,  epsilon,  maxIterations,  0);	  double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	22	None	replace
151	[BUG]  [BUGGY]  final  double  simple  =  1e-5;  [CE]  cannot  find  symbol  small  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  simple  =  1e-5;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  simple  =  1e-5;	  final    double    small    =    1e-5;    final    double    simple    =    1e-5;    	non-compiled	[CE]  cannot  find  symbol  small	44	None	replace
152	[BUG]  [BUGGY]  final  double  simple  =  1e-3;  [CE]  cannot  find  symbol  small  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  simple  =  1e-3;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  simple  =  1e-3;	  final    double    small    =    1e-5;    final    double    simple    =    1e-5;    	non-compiled	[CE]  cannot  find  symbol  small	44	None	replace
153	[BUG]  [BUGGY]  final  double  simple  =  1e-6;  [CE]  cannot  find  symbol  small  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  simple  =  1e-6;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  simple  =  1e-6;	  final    double    small    =    1e-5;    final    double    simple    =    1e-5;    	non-compiled	[CE]  cannot  find  symbol  small	44	None	replace
154	[BUG]  [BUGGY]  double  n  =  getA(1,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(1,  x,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(1,  x,  epsilon);	  double    n    =    getA(1,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	74	None	replace
155	[BUG]  [BUGGY]  double  n  =  getA(1,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(1,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(1,  epsilon,  maxIterations);	  double    n    =    getA(1,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	74	None	replace
156	[BUG]  [BUGGY]  double  n  =  getA(0,  x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(0,  x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(0,  x,  epsilon,  maxIterations);	  double    n    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	34	None	replace
157	[BUG]  [BUGGY]  Double  n  =  getA(0,  x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  n  =  getA(0,  x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  n  =  getA(0,  x,  epsilon,  maxIterations);	  double    n    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	34	None	replace
158	[BUG]  [BUGGY]  double  n  =  getA(0,  epsilon,  x);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(0,  epsilon,  x);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(0,  epsilon,  x);	  double    n    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	34	None	replace
159	[BUG]  [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  final    double    small    =    1.0    +    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	57	None	replace
160	[BUG]  [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations,  scaleFactor);	  final    double    small    =    1.0    +    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	57	None	replace
161	[BUG]  [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  0,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  0,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0  +  getA(x,  epsilon,  0,  maxIterations);	  final    double    small    =    1.0    +    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	57	None	replace
162	[BUG]  [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations,  RELATIVE_EPSILON);  [CE]  cannot  find  symbol  RELATIVE_EPSILON  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations,  RELATIVE_EPSILON);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations,  RELATIVE_EPSILON);	  final    double    small    =    1.0    +    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  RELATIVE_EPSILON	57	None	replace
163	[BUG]  [BUGGY]  final  double  small  =  0.0;  final  double  small  =  0.0;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.0;  final  double  small  =  0.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    0.0;    final  double  small  =  0.0;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
164	[BUG]  [BUGGY]  final  double  small  =  0.0;  Final  double  small  =  0.0;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.0;  Final  double  small  =  0.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    0.0;    Final  double  small  =  0.0;	  	non-compiled	[CE]  not  a  statement	36	None	add
165	[BUG]  [BUGGY]  final  double  small  =  0.0;  final  double  simple  =  0.0;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.0;  final  double  simple  =  0.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    0.0;    final  double  simple  =  0.0;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
166	[BUG]  [BUGGY]  final  double  small  =  0.0;  final  double  large  =  0.0;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.0;  final  double  large  =  0.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    0.0;    final  double  large  =  0.0;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	36	None	add
167	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  1,  maxIterations);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  1,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor(x,  epsilon,  1,  maxIterations);	  int    n    =    getScaleFactor(x,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
168	[BUG]  [BUGGY]  int  i  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  i  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  i  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  int    i    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	60	None	replace
169	[BUG]  [BUGGY]  double  i  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  i  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  i  =  getA(x,  epsilon,  maxIterations);	  int    i    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	60	None	replace
170	[BUG]  [BUGGY]  int  i  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  i  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  i  =  getA(x,  epsilon,  maxIterations,  scaleFactor);	  int    i    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	60	None	replace
171	[BUG]  [BUGGY]  int  i  =  getA(x,  epsilon,  scaleFactor,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  i  =  getA(x,  epsilon,  scaleFactor,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  i  =  getA(x,  epsilon,  scaleFactor,  maxIterations);	  int    i    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	60	None	replace
172	[BUG]  [BUGGY]  final  double  n  =  getB(0,  epsilon);  [CE]  cannot  find  symbol  small  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getB(0,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getB(0,  epsilon);	  final    double    n    =    getB(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	69	None	replace
173	[BUG]  [BUGGY]  final  double  n  =  getS(0,  x);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getS(0,  x);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getS(0,  x);	  final    double    n    =    getB(0,    x);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
174	[BUG]  [BUGGY]  final  double  simple  =  1.0;  [CE]  cannot  find  symbol  small  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  simple  =  1.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  simple  =  1.0;	  final    double    small    =    1.0;    final    double    simple    =    1.0;    	non-compiled	[CE]  cannot  find  symbol  small	27	None	replace
175	[BUG]  [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  [CE]  cannot  find  symbol  small  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }	  final    double    small    =    1.0;    final    double    simple    =    1.0;    	non-compiled	[CE]  cannot  find  symbol  small	27	None	replace
176	[BUG]  [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  else  {  getA(x,  epsilon,  maxIterations);  }  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  else  {  getA(x,  epsilon,  maxIterations);  }  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  else  {  getA(x,  epsilon,  maxIterations);  }	  final    double    small    =    1.0;    final    double    simple    =    1.0;    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	27	None	replace
177	[BUG]  [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  else  {  checkPower(x,  epsilon,  maxIterations);  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  else  {  checkPower(x,  epsilon,  maxIterations);  }  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  else  {  checkPower(x,  epsilon,  maxIterations);  }	  final    double    small    =    1.0;    final    double    simple    =    1.0;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
178	[BUG]  [BUGGY]  double  n  =  getA(epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(epsilon,  maxIterations);	  int    n    =    getA(epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	50	None	replace
179	[BUG]  [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  small  =  1.0;  }  else  {  return  evaluate(x,  epsilon,  maxIterations);  }  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  small  =  1.0;  }  else  {  return  evaluate(x,  epsilon,  maxIterations);  }  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  small  =  1.0;  }  else  {  return  evaluate(x,  epsilon,  maxIterations);  }	  final    double    small    =    1.0;    final    double    small    =    1.0;    	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	25	None	replace
180	[BUG]  [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  small  =  1.0;  }  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  small  =  1.0;  }  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  small  =  1.0;  }	  final    double    small    =    1.0;    final    double    small    =    1.0;    	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	25	None	replace
181	[BUG]  [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  small  =  1.0;  }  else  {  checkPower(x,  epsilon,  maxIterations);  }  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  small  =  1.0;  }  else  {  checkPower(x,  epsilon,  maxIterations);  }  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  small  =  1.0;  }  else  {  checkPower(x,  epsilon,  maxIterations);  }	  final    double    small    =    1.0;    final    double    small    =    1.0;    	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	25	None	replace
182	[BUG]  [BUGGY]  final  double  large  =  1.0;  [CE]  cannot  find  symbol  small  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  large  =  1.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  large  =  1.0;	  final    double    small    =    1.0;    final    double    large    =    1.0;    	non-compiled	[CE]  cannot  find  symbol  small	64	None	replace
183	[BUG]  [BUGGY]  int  n  =  1;  [CE]  cannot  find  symbol  small  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  1;	  final    double    small    =    1.0;    final    double    large    =    1.0;    	non-compiled	[CE]  cannot  find  symbol  small	64	None	replace
184	[BUG]  [BUGGY]  final  double  n  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  small  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(0,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(0,  epsilon);	  final    double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	3	None	replace
185	[BUG]  [BUGGY]  final  double  n  =  getScaleFactor(0,  x);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getScaleFactor(0,  x);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getScaleFactor(0,  x);	  final    double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
186	[BUG]  [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  small  =  1.0;  }  else  {  getA(x,  epsilon,  maxIterations);  }  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  small  =  1.0;  }  else  {  getA(x,  epsilon,  maxIterations);  }  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  small  =  1.0;  }  else  {  getA(x,  epsilon,  maxIterations);  }	  final    double    small    =    1.0;    Final    double    small    =    1.0;    	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	26	None	replace
187	[BUG]  [BUGGY]  int  small  =  maxIterations.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  maxIterations.doubleValue();  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  maxIterations.doubleValue();	  int    small    =    epsilon.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	59	None	replace
188	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0e-1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  0e-1;	  final    double    small    =    1e-1;    final    double    small    =    1e-1;    	compilable	  [FE]  AssertionError  	29	2	replace
189	[BUG]  [BUGGY]  final  double  small  =  0e-1;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0e-1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  0e-1;	  final    double    small    =    1e-1;    final    double    small    =    1e-1;    	compilable	  [FE]  AssertionError  	29	2	replace
190	[BUG]  [BUGGY]  final  double  small  =  0.0  +  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.0  +  getA(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  0.0  +  getA(x,  epsilon,  maxIterations);	  final    double    small    =    0.0;    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	37	None	replace
191	[BUG]  [BUGGY]  final  double  small  =  0.0  +  getScaleFactor(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.0  +  getScaleFactor(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  0.0  +  getScaleFactor(x,  epsilon,  maxIterations);	  final    double    small    =    0.0;    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
192	[BUG]  [BUGGY]  final  int  small  =  1.0  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  small  =  1.0  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  small  =  1.0  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);	  final    double    small    =    1.0    +    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
193	[BUG]  [BUGGY]  final  double  small  =  0.0  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.0  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  0.0  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);	  final    double    small    =    1.0    +    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
194	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations)+  3;  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations)+  3;  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor(x,  epsilon,  maxIterations)+  3;	  int    n    =    getScaleFactor(x,    epsilon,    maxIterations)+    1;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
195	[BUG]  [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations,  def);  [CE]  cannot  find  symbol  def  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations,  def);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(x,  epsilon,  maxIterations,  def);	  final    double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  def	14	None	replace
196	[BUG]  [BUGGY]  Double  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	22	None	replace
197	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  def);  [CE]  cannot  find  symbol  def  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  def);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(x,  epsilon,  maxIterations,  def);	  double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  def	22	None	replace
198	[BUG]  [BUGGY]  int  n  =  getA().evaluate(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA().evaluate(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA().evaluate(x,  epsilon,  maxIterations,  scaleFactor);	  int    n    =    getA().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	67	None	replace
199	[BUG]  [BUGGY]  int  n  =  getA().evaluate(x,  epsilon,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA().evaluate(x,  epsilon,  maxIterations,  0);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA().evaluate(x,  epsilon,  maxIterations,  0);	  int    n    =    getA().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	67	None	replace
200	[BUG]  [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations,  def);  [CE]  cannot  find  symbol  def  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations,  def);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations,  def);	  final    double    small    =    1.0    +    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  def	57	None	replace
201	[BUG]  [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  else  {  checkScale(x,  epsilon,  maxIterations);  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  else  {  checkScale(x,  epsilon,  maxIterations);  }  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  else  {  checkScale(x,  epsilon,  maxIterations);  }	  final    double    small    =    1.0;    final    double    simple    =    1.0;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
202	[BUG]  [BUGGY]  int  small  =  epsilon.nextIterations()  +  maxIterations;  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  epsilon.nextIterations()  +  maxIterations;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  epsilon.nextIterations()  +  maxIterations;	  int    small    =    epsilon.nextIterations();    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
203	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  2;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  2;	  final    double    small    =    1;    	compilable	  [FE]  AssertionError  	13	6	replace
204	[BUG]  [BUGGY]  final  double  small  =  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  2;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  2;	  final    double    small    =    1;    	compilable	  [FE]  AssertionError  	13	6	replace
205	[BUG]  [BUGGY]  double  n  =  getA0(0,  x,  epsilon);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA0(0,  x,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA0(0,  x,  epsilon);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
206	[BUG]  [BUGGY]  double  n  =  getA(0,  x),  epsilon,  maxIterations  +  1);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(0,  x),  epsilon,  maxIterations  +  1);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(0,  x),  epsilon,  maxIterations  +  1);	  double    n    =    getA(0,    x),    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	77	None	replace
207	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  small  =  getA(0,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	double  small  =  getA(0,  epsilon);	  double    n    =    getA(0,    epsilon);    	compilable	  [FE]  AssertionError  	35	2	replace
208	[BUG]  [BUGGY]  double  small  =  getA(0,  epsilon);  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  small  =  getA(0,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  small  =  getA(0,  epsilon);	  double    n    =    getA(0,    epsilon);    	compilable	  [FE]  AssertionError  	35	2	replace
209	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON)+  1;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON)+  1;  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON)+  1;	  int    n    =    getScaleFactor(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
210	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon.maxIterations);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(x,  epsilon.maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(x,  epsilon.maxIterations);	  double    n    =    getA(x);    	non-compiled	[CE]  double  cannot  be  dereferenced	49	None	replace
211	[BUG]  [BUGGY]  float  n  =  getA(epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  float  n  =  getA(epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	float  n  =  getA(epsilon,  maxIterations);	  int    n    =    getA(epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	50	None	replace
212	[BUG]  [BUGGY]  double  n  =  getA(x,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(x,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(x,  maxIterations);	  double    n    =    getA(0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	10	None	replace
213	[BUG]  [BUGGY]  Integer  n  =  getA().evaluate(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Integer  n  =  getA().evaluate(x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Integer  n  =  getA().evaluate(x,  epsilon,  maxIterations);	  Integer    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	66	None	replace
214	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.0f;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  0.0f;	  final    double    small    =    1.0f;    	compilable	  [FE]  AssertionError  	39	2	replace
215	[BUG]  [BUGGY]  final  double  small  =  0.0f;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.0f;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  0.0f;	  final    double    small    =    1.0f;    	compilable	  [FE]  AssertionError  	39	2	replace
216	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  a);  [CE]  cannot  find  symbol  a  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  a);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  a);	  final    int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  a	15	None	replace
217	[BUG]  [BUGGY]  int  small  =  getA(x,  epsilon,  0,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  getA(x,  epsilon,  0,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  getA(x,  epsilon,  0,  maxIterations);	  int    small    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	79	None	replace
218	[BUG]  [BUGGY]  final  double  small  =  1;  final  double  small  =  0;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1;  final  double  small  =  0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1;    final  double  small  =  0;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	12	None	add
219	[BUG]  [BUGGY]  Double  dPrev  =  getA(0,  x  +  1);  [CE]  cannot  find  symbol  small  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(0,  x  +  1);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(0,  x  +  1);	  Double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	19	None	replace
220	[BUG]  [BUGGY]  final  int  small  =  1.0  +  getScaleFactor(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  small  =  1.0  +  getScaleFactor(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  small  =  1.0  +  getScaleFactor(x,  epsilon,  maxIterations);	  final    double    small    =    1.0    +    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
221	[BUG]  [BUGGY]  int  small  =(int)Math.floor(x);  int  x  =(int)Math.floor(x);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =(int)Math.floor(x);  int  x  =(int)Math.floor(x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int    small    =(int)Math.floor(x);    int  x  =(int)Math.floor(x);	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	61	None	add
222	[BUG]  [BUGGY]  int  small  =(int)Math.floor(x);  int  local  =(int)Math.floor(x);  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =(int)Math.floor(x);  int  local  =(int)Math.floor(x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int    small    =(int)Math.floor(x);    int  local  =(int)Math.floor(x);	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	61	None	add
223	[BUG]  [BUGGY]  int  i  =  getA(x,  epsilon,  maxIterations,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  i  =  getA(x,  epsilon,  maxIterations,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  i  =  getA(x,  epsilon,  maxIterations,  epsilon);	  int    i    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	60	None	replace
224	[BUG]  [BUGGY]  int  i  =  getA(x,  epsilon,  0,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  i  =  getA(x,  epsilon,  0,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  i  =  getA(x,  epsilon,  0,  maxIterations);	  int    i    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	60	None	replace
225	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  dPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  Double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	18	None	replace
226	[BUG]  [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations,  def);  [CE]  cannot  find  symbol  def  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations,  def);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(x,  epsilon,  maxIterations,  def);	  Double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  def	18	None	replace
227	[BUG]  [BUGGY]  Neighbor  n  =  getA(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Neighbor  n  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Neighbor  n  =  getA(x,  epsilon,  maxIterations);	  n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
228	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  MAX_EPSILON,  maxIterations);  [CE]  cannot  find  symbol  MAX_EPSILON  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  MAX_EPSILON,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  MAX_EPSILON,  maxIterations);	  int    n    =    getA(x,    epsilon,    scaleFactor,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  MAX_EPSILON	24	None	replace
229	[BUG]  [BUGGY]  final  double  small  =  1.0f;  final  double  big  =  1.0f;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0f;  final  double  big  =  1.0f;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1.0f;    final  double  big  =  1.0f;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	38	None	add
230	[BUG]  [BUGGY]  final  double  n  =  getA(0,  x  +  1);  [CE]  cannot  find  symbol  small  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(0,  x  +  1);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(0,  x  +  1);	  final    double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	3	None	replace
231	[BUG]  [BUGGY]  final  double  n  =  getA(x,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(x,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(x,  maxIterations);	  final    double    n    =    getA(0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	4	None	replace
232	[BUG]  [BUGGY]  Double  epsilon  =  getA(x,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  epsilon  =  getA(x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  epsilon  =  getA(x,  epsilon);	  Double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	20	None	replace
233	[BUG]  [BUGGY]  int  small  =  epsilon.intValue()  +  maxIterations;  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  epsilon.intValue()  +  maxIterations;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  epsilon.intValue()  +  maxIterations;	  int    small    =    epsilon.intValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	80	None	replace
234	[BUG]  [BUGGY]  double  x  =  getX(x,  epsilon,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  x  =  getX(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  x  =  getX(x,  epsilon,  maxIterations);	  double    x    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	78	None	replace
235	[BUG]  [BUGGY]  Double  x  =  getA(x,  epsilon,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  x  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  x  =  getA(x,  epsilon,  maxIterations);	  double    x    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	78	None	replace
236	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  0);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  0);	  int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	21	None	replace
237	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  true);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  true);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  true);	  int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	21	None	replace
238	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  0,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  0,  maxIterations,  0);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  0,  maxIterations,  0);	  int    n    =    getA(x,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	23	None	replace
239	[BUG]  [BUGGY]  int  n  =  getA(0,  x),  epsilon).doubleValue();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(0,  x),  epsilon).doubleValue();  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(0,  x),  epsilon).doubleValue();	  int    n    =    getA(0,    x).doubleValue();    	non-compiled	[CE]  ';'  expected	82	None	replace
240	[BUG]  [BUGGY]  final  double  n  =  getB(0,  x,  epsilon);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getB(0,  x,  epsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getB(0,  x,  epsilon);	  final    double    n    =    getB(0,    x);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	69	None	replace
241	[BUG]  [BUGGY]  final  double  n  =  getB(0,  x  +  1);  [CE]  cannot  find  symbol  small  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getB(0,  x  +  1);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getB(0,  x  +  1);	  final    double    n    =    getB(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	69	None	replace
242	[BUG]  [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations),  DEFAULT_EPSILON);  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations),  DEFAULT_EPSILON);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations),  DEFAULT_EPSILON);	  final    double    small    =    1.0    +    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	57	None	replace
243	[BUG]  [BUGGY]  Double  dPrev  =  getA(a,  x,  epsilon);  [CE]  cannot  find  symbol  a  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(a,  x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(a,  x,  epsilon);	  Double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  a	20	None	replace
244	[BUG]  [BUGGY]  static  final  double  small  =  0.5;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  static  final  double  small  =  0.5;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	static  final  double  small  =  0.5;	  final    double    small    =    0.5;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
245	[BUG]  [BUGGY]  double  n  =  getA(x  +  1,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(x  +  1,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(x  +  1,  epsilon,  maxIterations);	  double    n    =    getA(x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	49	None	replace
246	[BUG]  [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  minIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  minIterations  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  minIterations,  DEFAULT_EPSILON);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(x,  epsilon,  minIterations,  DEFAULT_EPSILON);	  Double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  minIterations	18	None	replace
247	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  0,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  0,  DEFAULT_EPSILON);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor(x,  epsilon,  0,  DEFAULT_EPSILON);	  int    n    =    getScaleFactor(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
248	[BUG]  [BUGGY]  static  final  double  small  =  1.0  +  getScaleFactor(x,  epsilon,  maxIterations);  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  static  final  double  small  =  1.0  +  getScaleFactor(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	static  final  double  small  =  1.0  +  getScaleFactor(x,  epsilon,  maxIterations);	  final    double    small    =    1.0    +    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
249	[BUG]  [BUGGY]  final  double  small  =  1.0f  +  getScaleFactor(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0f  +  getScaleFactor(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0f  +  getScaleFactor(x,  epsilon,  maxIterations);	  final    double    small    =    1.0    +    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
250	[BUG]  [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  large  =  1.0;  }  [CE]  cannot  find  symbol  small  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  large  =  1.0;  }  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  large  =  1.0;  }	  final    double    small    =    1.0;    final    double    large    =    1.0;    	non-compiled	[CE]  cannot  find  symbol  small	64	None	replace
251	[BUG]  [BUGGY]  if(x  >  epsilon)  {  final  double  small  =  1.0;  final  double  large  =  1.0;  }  [CE]  cannot  find  symbol  small  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(x  >  epsilon)  {  final  double  small  =  1.0;  final  double  large  =  1.0;  }  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	if(x  >  epsilon)  {  final  double  small  =  1.0;  final  double  large  =  1.0;  }	  final    double    small    =    1.0;    final    double    large    =    1.0;    	non-compiled	[CE]  cannot  find  symbol  small	64	None	replace
252	[BUG]  [BUGGY]  Double  dPrev  =  getA(0,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  dPrev  =  getA(0,  x),  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(0,  x),  epsilon,  maxIterations);	  Double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  ';'  expected	19	None	replace
253	[BUG]  [BUGGY]  Double  n  =  getA(0,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  Double  n  =  getA(0,  x),  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  n  =  getA(0,  x),  epsilon,  maxIterations);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  ';'  expected	73	None	replace
254	[BUG]  [BUGGY]  final  double  x  =  1.0;  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  x  =  1.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  x  =  1.0;	  final    double    small    =    1.0;    final    double    small    =    0.0;    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	28	None	replace
255	[BUG]  [BUGGY]  int  small  =  0.0;  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  0.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  0.0;	  final    double    small    =    0.0;    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
256	[BUG]  [BUGGY]  double  small  =  epsilon.nextIterations();  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  small  =  epsilon.nextIterations();  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  small  =  epsilon.nextIterations();	  int    small    =    epsilon.nextIterations();    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
257	[BUG]  [BUGGY]  int  small  =  epsilon.nextIterations(maxIterations);  [CE]  double  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  small  =  epsilon.nextIterations(maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  epsilon.nextIterations(maxIterations);	  int    small    =    epsilon.nextIterations();    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
258	[BUG]  [BUGGY]  double  n  =  getA(1).evaluate(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(1).evaluate(x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(1).evaluate(x,  epsilon,  maxIterations);	  double    n    =    getA(0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	10	None	replace
259	[BUG]  [BUGGY]  double  n  =  getA(1,  x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getA(1,  x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(1,  x,  epsilon,  maxIterations);	  double    n    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	34	None	replace
260	[BUG]  [BUGGY]  final  double  n  =  getA(1).evaluate(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(1).evaluate(x,  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(1).evaluate(x,  epsilon,  maxIterations);	  final    double    n    =    getA(0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	4	None	replace
261	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  true);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  true);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  true);	  final    int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	15	None	replace
262	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0e-1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  1.0e-1;	  final    double    small    =    1e-1;    final    double    large    =    1e-1;    	compilable	  [FE]  AssertionError  	32	2	replace
263	[BUG]  [BUGGY]  final  double  small  =  1.0e-1;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0e-1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0e-1;	  final    double    small    =    1e-1;    final    double    large    =    1e-1;    	compilable	  [FE]  AssertionError  	32	2	replace
264	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFULT_EPSILON);  [CE]  cannot  find  symbol  DEFULT_EPSILON  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFULT_EPSILON);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFULT_EPSILON);	  final    int    n    =    getA(x,    epsilon,    maxIterations,    defScaleFactor);    	non-compiled	[CE]  cannot  find  symbol  DEFULT_EPSILON	68	None	replace
265	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations)-  1;  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations)-  1;  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor(x,  epsilon,  maxIterations)-  1;	  int    n    =    getScaleFactor(x,    epsilon,    maxIterations)+    1;    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
266	[BUG]  [BUGGY]  final  double  small  =  1.0f;  final  double  simple  =  1.0f;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  1.0f;  final  double  simple  =  1.0f;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1.0f;    final  double  simple  =  1.0f;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	38	None	add
267	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  0,  epsilon.maxIterations);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  0,  epsilon.maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  0,  epsilon.maxIterations);	  int    n    =    getA(x,    epsilon,    0,    maxIterations);    	non-compiled	[CE]  double  cannot  be  dereferenced	23	None	replace
268	[BUG]  [BUGGY]  if(x  >  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  [CE]  cannot  find  symbol  small  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(x  >  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	if(x  >  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }	  final    double    small    =    1.0;    final    double    simple    =    1.0;    	non-compiled	[CE]  cannot  find  symbol  small	27	None	replace
269	[BUG]  [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  else  {  return  evaluate(x,  epsilon,  maxIterations);  }  [CE]  cannot  find  symbol  small  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  else  {  return  evaluate(x,  epsilon,  maxIterations);  }  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	if(x  <  epsilon)  {  final  double  small  =  1.0;  final  double  simple  =  1.0;  }  else  {  return  evaluate(x,  epsilon,  maxIterations);  }	  final    double    small    =    1.0;    final    double    simple    =    1.0;    	non-compiled	[CE]  cannot  find  symbol  small	27	None	replace
270	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  defsilon);  [CE]  cannot  find  symbol  defsilon  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  defsilon);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  maxIterations,  defsilon);	  final    int    n    =    getA(x,    epsilon,    maxIterations,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  defsilon	17	None	replace
271	[BUG]  [BUGGY]  final  double  large  =  1e-5;  [CE]  cannot  find  symbol  small  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  large  =  1e-5;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  large  =  1e-5;	  final    double    small    =    1e-5;    final    double    large    =    1e-5;    	non-compiled	[CE]  cannot  find  symbol  small	45	None	replace
272	[BUG]  [BUGGY]  final  double  small  =  0.0;  static  final  double  small  =  0.0;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.0;  static  final  double  small  =  0.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    0.0;    static  final  double  small  =  0.0;	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
273	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxPower,  maxIterations);  [CE]  cannot  find  symbol  maxPower  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  int  n  =  getA(x,  epsilon,  maxPower,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  maxPower,  maxIterations);	  int    n    =    getA(x,    epsilon,    scaleFactor,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  maxPower	24	None	replace
274	[BUG]  [BUGGY]  double  n  =  getB(0,  x);  [CE]  cannot  find  symbol  small  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  double  n  =  getB(0,  x);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getB(0,  x);	  double    n    =    getA(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  small	35	None	replace
275	[BUG]  [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations,  1);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations,  1);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(x,  epsilon,  maxIterations,  1);	  final    double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	14	None	replace
276	[BUG]  [BUGGY]  final  double  small  =  0.5;  final  double  small  =  0.;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.5;  final  double  small  =  0.;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    0.5;    final  double  small  =  0.;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	40	None	add
277	[BUG]  [BUGGY]  final  double  small  =  0.5;  final  double  small  =  0.0;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.5;  final  double  small  =  0.0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    0.5;    final  double  small  =  0.0;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	40	None	add
278	[BUG]  [BUGGY]  final  double  small  =  0.5;  final  double  small  =  0.25;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  0.5;  final  double  small  =  0.25;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    0.5;    final  double  small  =  0.25;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	40	None	add
279	[BUG]  [BUGGY]  static  final  double  small  =  0;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  static  final  double  small  =  0;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	static  final  double  small  =  0;	  final    double    small    =    1;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
280	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  small  =  1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  int  small  =  1;	  final    double    small    =    1;    	compilable	  [FE]  AssertionError  	13	2	replace
281	[BUG]  [BUGGY]  final  int  small  =  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  int  small  =  1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  small  =  1;	  final    double    small    =    1;    	compilable	  [FE]  AssertionError  	13	2	replace
282	[BUG]  [BUGGY]  final  double  n  =  getA(0,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  n  =  getA(0,  x),  epsilon,  maxIterations);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(0,  x),  epsilon,  maxIterations);	  final    double    n    =    getA(0,    x);    	non-compiled	[CE]  ';'  expected	3	None	replace
283	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  getA(0,  x);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  getA(0,  x);	  final    double    n    =    getA(0,    x);    	compilable	  [FE]  AssertionError  	3	2	replace
284	[BUG]  [BUGGY]  final  double  small  =  getA(0,  x);  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {      [BUGGY]  final  double  small  =  getA(0,  x);  [BUGGY]      final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  getA(0,  x);	  final    double    n    =    getA(0,    x);    	compilable	  [FE]  AssertionError  	3	2	replace
