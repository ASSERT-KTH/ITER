bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  epsilon,  minIterations);  [CE]  cannot  find  symbol  minIterations  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  epsilon,  minIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor().evaluate(x,  epsilon,  minIterations);	      int    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  minIterations	8	None	replace
2	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  epsilon,  0,  maxIterations);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  epsilon,  0,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor().evaluate(x,  epsilon,  0,  maxIterations);	      int    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
3	[BUG]  [BUGGY]  final  double  n  =  getA(0,  x);  [CE]  cannot  find  symbol  small  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  n  =  getA(0,  x);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(0,  x);	      final    int    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	10	None	replace
4	[BUG]  [BUGGY]  final  double  n  =  getA(0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  n  =  getA(0);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(0);	      final    int    n    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	10	None	replace
5	[BUG]  [BUGGY]  final  float  n  =  getA(0,  x);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  float  n  =  getA(0,  x);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  float  n  =  getA(0,  x);	      final    int    n    =    getA(0,    x);    	non-compiled	[CE]  possible  loss  of  precision	10	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-2;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  1e-2;	  final    double    small    =    1e-3;    	compilable	  [FE]  AssertionError  	4	2	replace
7	[BUG]  [BUGGY]  final  double  small  =  1e-2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-2;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1e-2;	  final    double    small    =    1e-3;    	compilable	  [FE]  AssertionError  	4	2	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-4;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  1e-4;	  final    double    small    =    1e-3;    	compilable	  [FE]  AssertionError  	4	2	replace
9	[BUG]  [BUGGY]  final  double  small  =  1e-4;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-4;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1e-4;	  final    double    small    =    1e-3;    	compilable	  [FE]  AssertionError  	4	2	replace
10	[BUG]  [BUGGY]  double  n  =  getA(0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  double  n  =  getA(0);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(0);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	9	None	replace
11	[BUG]  [BUGGY]  double  n  =  getA0(0,  x);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  double  n  =  getA0(0,  x);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA0(0,  x);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  1;	  final    double    small    =    1e-1;    	compilable	  [FE]  AssertionError  	6	2	replace
13	[BUG]  [BUGGY]  final  double  small  =  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1;	  final    double    small    =    1e-1;    	compilable	  [FE]  AssertionError  	6	2	replace
14	[BUG]  [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  n  =  getA(x,  epsilon,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getA(x,  epsilon,  maxIterations);	      final    int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
15	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      final    int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
16	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  0,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  int  n  =  getA(x,  epsilon,  0,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  0,  maxIterations);	      final    int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
17	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  epsilon);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  maxIterations,  epsilon);	      final    int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
18	[BUG]  [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(x,  epsilon,  maxIterations);	      	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	7	None	replace
19	[BUG]  [BUGGY]  Double  dPrev  =  getA(0,  x);  [CE]  cannot  find  symbol  small  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  Double  dPrev  =  getA(0,  x);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(0,  x);	      	non-compiled	[CE]  cannot  find  symbol  small	7	None	replace
20	[BUG]  [BUGGY]  Double  dPrev  =  getA(x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  Double  dPrev  =  getA(x,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  dPrev  =  getA(x,  epsilon);	      	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	7	None	replace
21	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	13	None	replace
22	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(x,  epsilon,  maxIterations);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	13	None	replace
23	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  0,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  n  =  getA(x,  epsilon,  0,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  0,  maxIterations);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	13	None	replace
24	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  scaleFactor,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  n  =  getA(x,  epsilon,  scaleFactor,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(x,  epsilon,  scaleFactor,  maxIterations);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	13	None	replace
25	[BUG]  [BUGGY]  final  double  small  =  1.0;  final  double  small  =  1.0;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1.0;  final  double  small  =  1.0;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1.0;    final  double  small  =  1.0;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
26	[BUG]  [BUGGY]  final  double  small  =  1.0;  Final  double  small  =  1.0;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1.0;  Final  double  small  =  1.0;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1.0;    Final  double  small  =  1.0;	  	non-compiled	[CE]  not  a  statement	17	None	add
27	[BUG]  [BUGGY]  final  double  small  =  1.0;  final  double  simple  =  1.0;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1.0;  final  double  simple  =  1.0;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1.0;    final  double  simple  =  1.0;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
28	[BUG]  [BUGGY]  final  double  small  =  1.0;  final  double  small  =  0.0;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1.0;  final  double  small  =  0.0;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1.0;    final  double  small  =  0.0;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
29	[BUG]  [BUGGY]  final  double  small  =  1e-1;  final  double  small  =  1e-1;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-1;  final  double  small  =  1e-1;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-1;    final  double  small  =  1e-1;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
30	[BUG]  [BUGGY]  final  double  small  =  1e-1;  Final  double  small  =  1e-1;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-1;  Final  double  small  =  1e-1;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-1;    Final  double  small  =  1e-1;	  	non-compiled	[CE]  not  a  statement	5	None	add
31	[BUG]  [BUGGY]  final  double  small  =  1e-1;  final  double  simple  =  1e-1;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-1;  final  double  simple  =  1e-1;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-1;    final  double  simple  =  1e-1;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
32	[BUG]  [BUGGY]  final  double  small  =  1e-1;  final  double  large  =  1e-1;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-1;  final  double  large  =  1e-1;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-1;    final  double  large  =  1e-1;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	5	None	add
33	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  double  n  =  getA(x,  epsilon);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(x,  epsilon);	      double    n    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	12	None	replace
34	[BUG]  [BUGGY]  double  n  =  getA(0,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  double  n  =  getA(0,  x,  epsilon);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(0,  x,  epsilon);	      double    n    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	12	None	replace
35	[BUG]  [BUGGY]  double  n  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  small  [FE]                    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  double  n  =  getA(0,  epsilon);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(0,  epsilon);	      double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	12	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  0.0;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  0.0;	  final    double    small    =    1.0;    	compilable	  [FE]  AssertionError  	18	2	replace
37	[BUG]  [BUGGY]  final  double  small  =  0.0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  0.0;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  0.0;	  final    double    small    =    1.0;    	compilable	  [FE]  AssertionError  	18	2	replace
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1.0f;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  1.0f;	  final    double    small    =    1.0;    	compilable	  [FE]  AssertionError  	18	2	replace
39	[BUG]  [BUGGY]  final  double  small  =  1.0f;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1.0f;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0f;	  final    double    small    =    1.0;    	compilable	  [FE]  AssertionError  	18	2	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  0.5;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  0.5;	  final    double    small    =    1.0;    	compilable	  [FE]  AssertionError  	18	2	replace
41	[BUG]  [BUGGY]  final  double  small  =  0.5;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  0.5;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  0.5;	  final    double    small    =    1.0;    	compilable	  [FE]  AssertionError  	18	2	replace
42	[BUG]  [BUGGY]  final  double  small  =  1e-5;  final  double  small  =  1e-5;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-5;  final  double  small  =  1e-5;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-5;    final  double  small  =  1e-5;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	1	None	add
43	[BUG]  [BUGGY]  final  double  small  =  1e-5;  Final  double  small  =  1e-5;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-5;  Final  double  small  =  1e-5;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-5;    Final  double  small  =  1e-5;	  	non-compiled	[CE]  not  a  statement	1	None	add
44	[BUG]  [BUGGY]  final  double  small  =  1e-5;  final  double  simple  =  1e-5;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-5;  final  double  simple  =  1e-5;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-5;    final  double  simple  =  1e-5;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	1	None	add
45	[BUG]  [BUGGY]  final  double  small  =  1e-5;  final  double  large  =  1e-5;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-5;  final  double  large  =  1e-5;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-5;    final  double  large  =  1e-5;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	1	None	add
46	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      int    n    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
47	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  0,  maxIterations);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  0,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor(x,  epsilon,  0,  maxIterations);	      int    n    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
48	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations)+  1;  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  n  =  getScaleFactor(x,  epsilon,  maxIterations)+  1;  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getScaleFactor(x,  epsilon,  maxIterations)+  1;	      int    n    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
49	[BUG]  [BUGGY]  double  n  =  getA(x);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  double  n  =  getA(x);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(x);	      int    n    =    getA(x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	15	None	replace
50	[BUG]  [BUGGY]  int  n  =  getA(epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  n  =  getA(epsilon,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(epsilon,  maxIterations);	      int    n    =    getA(x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	15	None	replace
51	[BUG]  [BUGGY]  n  =  getA(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  n  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  n  =  getA(x,  epsilon,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	n  =  getA(x,  epsilon,  maxIterations);	      int    n    =    getA(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  n	14	None	replace
52	[BUG]  [BUGGY]  final  double  small  =  1e-3;  final  double  small  =  1e-3;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-3;  final  double  small  =  1e-3;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-3;    final  double  small  =  1e-3;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	3	None	add
53	[BUG]  [BUGGY]  final  double  small  =  1e-3;  Final  double  small  =  1e-3;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-3;  Final  double  small  =  1e-3;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-3;    Final  double  small  =  1e-3;	  	non-compiled	[CE]  not  a  statement	3	None	add
54	[BUG]  [BUGGY]  final  double  small  =  1e-3;  final  double  large  =  1e-3;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-3;  final  double  large  =  1e-3;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-3;    final  double  large  =  1e-3;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	3	None	add
55	[BUG]  [BUGGY]  final  double  small  =  1e-3;  final  double  simple  =  1e-3;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-3;  final  double  simple  =  1e-3;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1e-3;    final  double  simple  =  1e-3;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	3	None	add
56	[BUG]  [BUGGY]  int  n  =  getB(x,  epsilon);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  n  =  getB(x,  epsilon);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getB(x,  epsilon);	      int    n    =    getA(x);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	15	None	replace
57	[BUG]  [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0  +  getA(x,  epsilon,  maxIterations);	  final    double    small    =    1.0;    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	18	None	replace
58	[BUG]  [BUGGY]  final  double  small  =  1.0  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1.0  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0  +  getScaleFactor().evaluate(x,  epsilon,  maxIterations);	  final    double    small    =    1.0;    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
59	[BUG]  [BUGGY]  int  small  =  epsilon.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  small  =  epsilon.doubleValue();  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  epsilon.doubleValue();	      	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
60	[BUG]  [BUGGY]  int  i  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  i  =  getA(x,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  i  =  getA(x,  epsilon,  maxIterations);	      	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	7	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  small  =(int)Math.floor(x);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	int  small  =(int)Math.floor(x);	      	compilable	  [FE]  AssertionError  	7	2	replace
62	[BUG]  [BUGGY]  int  small  =(int)Math.floor(x);  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  small  =(int)Math.floor(x);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =(int)Math.floor(x);	      	compilable	  [FE]  AssertionError  	7	2	replace
63	[BUG]  [BUGGY]  int  small  =  epsilon.nextIterations();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  small  =  epsilon.nextIterations();  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  epsilon.nextIterations();	      	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
64	[BUG]  [BUGGY]  final  double  small  =  1.0;  final  double  large  =  1.0;  [CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1.0;  final  double  large  =  1.0;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final    double    small    =    1.0;    final  double  large  =  1.0;	  	non-compiled	[CE]  variable  small  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
65	[BUG]  [BUGGY]  float  n  =  getA(x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  float  n  =  getA(x,  epsilon);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	float  n  =  getA(x,  epsilon);	      int    n    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	14	None	replace
66	[BUG]  [BUGGY]  Integer  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  Integer  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Integer  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);	      int    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
67	[BUG]  [BUGGY]  int  n  =  getA().evaluate(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  n  =  getA().evaluate(x,  epsilon,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA().evaluate(x,  epsilon,  maxIterations);	      int    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	8	None	replace
68	[BUG]  [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  defScaleFactor);  [CE]  cannot  find  symbol  defScaleFactor  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  int  n  =  getA(x,  epsilon,  maxIterations,  defScaleFactor);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  int  n  =  getA(x,  epsilon,  maxIterations,  defScaleFactor);	      final    int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  defScaleFactor	16	None	replace
69	[BUG]  [BUGGY]  final  double  n  =  getB(0,  x);  [CE]  cannot  find  symbol  small  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  n  =  getB(0,  x);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  n  =  getB(0,  x);	      final    int    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	10	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-9;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	add	final  double  small  =  1e-9;	  final    double    small    =    1e-5;    	compilable	  [FE]  AssertionError  	2	2	replace
71	[BUG]  [BUGGY]  final  double  small  =  1e-9;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1e-9;  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1e-9;	  final    double    small    =    1e-5;    	compilable	  [FE]  AssertionError  	2	2	replace
72	[BUG]  [BUGGY]  float  n  =  getA(0,  x);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  float  n  =  getA(0,  x);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	float  n  =  getA(0,  x);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  possible  loss  of  precision	9	None	replace
73	[BUG]  [BUGGY]  Double  n  =  getA(0,  x);  [CE]  cannot  find  symbol  small  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  Double  n  =  getA(0,  x);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	Double  n  =  getA(0,  x);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	9	None	replace
74	[BUG]  [BUGGY]  double  n  =  getA(1,  x);  [CE]  cannot  find  symbol  small  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  double  n  =  getA(1,  x);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(1,  x);	      double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  small	12	None	replace
75	[BUG]  [BUGGY]  final  double  small  =  1.0  +  getScaleFactor(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  double  small  =  1.0  +  getScaleFactor(x,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  double  small  =  1.0  +  getScaleFactor(x,  epsilon,  maxIterations);	  final    double    small    =    1.0;    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
76	[BUG]  [BUGGY]  double  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  double  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);	      int    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
77	[BUG]  [BUGGY]  double  n  =  getA(0,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  double  n  =  getA(0,  x),  epsilon,  maxIterations);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  n  =  getA(0,  x),  epsilon,  maxIterations);	      double    n    =    getA(0,    x);    	non-compiled	[CE]  ';'  expected	12	None	replace
78	[BUG]  [BUGGY]  double  x  =  getA(x,  epsilon,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  double  x  =  getA(x,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	double  x  =  getA(x,  epsilon,  maxIterations);	      	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	7	None	replace
79	[BUG]  [BUGGY]  int  small  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  small  =  getA(x,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  getA(x,  epsilon,  maxIterations);	      	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	7	None	replace
80	[BUG]  [BUGGY]  int  small  =  epsilon.intValue();  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  small  =  epsilon.intValue();  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  small  =  epsilon.intValue();	      	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
81	[BUG]  [BUGGY]  final  long  n  =  getA(0,  x);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  final  long  n  =  getA(0,  x);  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	final  long  n  =  getA(0,  x);	      final    int    n    =    getA(0,    x);    	non-compiled	[CE]  possible  loss  of  precision	10	None	replace
82	[BUG]  [BUGGY]  int  n  =  getA(0,  x).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {    [BUGGY]  int  n  =  getA(0,  x).doubleValue();  [BUGGY]    final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	124	124	2	replace	int  n  =  getA(0,  x).doubleValue();	      int    n    =    getA(0,    x);    	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
