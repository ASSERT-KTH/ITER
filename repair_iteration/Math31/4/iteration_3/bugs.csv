bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  Math.min(hPrev,  cN  -  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(hPrev,  cN  -  1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(hPrev,  cN  -  1);	  n    =    Math.min(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
2	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev  -  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(cN,  dPrev  -  1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(cN,  dPrev  -  1);	  n    =    Math.min(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
3	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  dPrev  -  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(cPrev,  dPrev  -  1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(cPrev,  dPrev  -  1);	  n    =    Math.min(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
4	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(cN,  dPrev  +  1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(cN,  dPrev  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
5	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  1);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(dPrev,  cN  *  1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(dPrev,  cN  *  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
6	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(cPrev,  dPrev  +  1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(cPrev,  dPrev  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
7	[BUG]  [BUGGY]  n  =  Math.max(hPrev,  cN  +  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(hPrev,  cN  +  1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(hPrev,  cN  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
8	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  -  1.0)/  q1;	  n    =    Math.abs(deltaN    -    1.0)/    q1;    	non-compiled	[CE]  possible  loss  of  precision	57	None	replace
9	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  -  1.0)/  deltaN;	  n    =    Math.abs(deltaN    -    1.0)/    q1;    	non-compiled	[CE]  possible  loss  of  precision	57	None	replace
10	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  dPrev;  p0  =  cN;	  p0    =    cN;    p0    =    cN;    }    p0    =    cN;    	compilable	  [FE]  OutOfRangeException  	13	7	replace
11	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  cN;  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  p0  =  cN;	  p0    =    cN;    p0    =    cN;    }    p0    =    cN;    	compilable	  [FE]  OutOfRangeException  	13	7	replace
12	[BUG]  [BUGGY]  p0  =  cN;  p0  =  dPrev;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]              ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  dPrev;  this.lastScaleFactor  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  dPrev;  this.lastScaleFactor  =  cN;	  p0    =    dPrev;    p0    =    dPrev;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	29	None	replace
13	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]                ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  cN;	  p0    =    dPrev;    p0    =    dPrev;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	29	None	replace
14	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]                  ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  cN;	  p0    =    dPrev;    p0    =    dPrev;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	29	None	replace
15	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  cN;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  cN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  -  1.0)/  cN;	  n    =    Math.abs(dPrev    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
16	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]        OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  scaleFactor;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  scaleFactor;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    scaleFactor;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	68	None	replace
17	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]          OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  scaleFactor;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  scaleFactor;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    scaleFactor;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	68	None	replace
18	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p1;  this.lastScaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  p1  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p0;  p0  =  p1;  this.lastScaleFactor  =  scaleFactor;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p0;  p0  =  p1;  this.lastScaleFactor  =  scaleFactor;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    scaleFactor;    	non-compiled	[CE]  cannot  find  symbol  p1	68	None	replace
19	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]            AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(cN,  dPrev,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(cN,  dPrev,  epsilon);	  n    =    Math.max(cN,    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	4	None	replace
20	[BUG]  [BUGGY]  p0  =  cN;  P0  =  dPrev;  [CE]  cannot  find  symbol  P0  [FE]            ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  P0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  P0  =  dPrev;	  p0    =    dPrev;    P0    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  P0	51	None	replace
21	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cN;  p0  =  dPrev;	  p0    =    dPrev;    P0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	51	11	replace
22	[BUG]  [BUGGY]  p0  =  cN;  p0  =  dPrev;  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  dPrev;	  p0    =    dPrev;    P0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	51	11	replace
23	[BUG]  [BUGGY]  n  =  dPrev;  n  =  dPrev;  [CE]  possible  loss  of  precision  [FE]                ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  dPrev;  n  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  dPrev;  n  =  dPrev;	  p0    =    dPrev;    P0    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
24	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                  ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cPrev;  p0  =  dPrev;	  p0    =    dPrev;    P0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	51	11	replace
25	[BUG]  [BUGGY]  p0  =  cPrev;  p0  =  dPrev;  [FE]  ConvergenceException  [FE]                  ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cPrev;  p0  =  dPrev;	  p0    =    dPrev;    P0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	51	11	replace
26	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  hN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  -  hN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  -  hN);	  n    =    Math.abs(hN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
27	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(p0  -  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(p0  -  dPrev);	  n    =    Math.abs(hN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	70	None	replace
28	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  epsilon);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(cPrev,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(cPrev,  epsilon);	  n    =    Math.max(epsilon,    cN);    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
29	[BUG]  [BUGGY]  n  =  Math.max(cN,  epsilon);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(cN,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(cN,  epsilon);	  n    =    Math.max(epsilon,    cN);    	non-compiled	[CE]  possible  loss  of  precision	47	None	replace
30	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p0;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]            ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p0;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p0;  this.scaleFactor  =  scaleFactor.doubleValue();	  p0    =    dPrev;    p0    =    dPrev;    this.scaleFactor    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	28	None	replace
31	[BUG]  [BUGGY]  p0  =  cN;  p0  =  dPrev;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]              ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  dPrev;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  dPrev;  this.scaleFactor  =  scaleFactor.doubleValue();	  p0    =    dPrev;    p0    =    dPrev;    this.scaleFactor    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	28	None	replace
32	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p0;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]                ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p0;  p0  =  p0;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p0;  p0  =  p0;  this.scaleFactor  =  scaleFactor.doubleValue();	  p0    =    dPrev;    p0    =    dPrev;    this.scaleFactor    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	28	None	replace
33	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                  ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cN;  p0  =  p0;	  p0    =    dPrev;    p0    =    dPrev;    this.scaleFactor    =    scaleFactor.doubleValue();    	compilable	  [FE]  OutOfRangeException  	28	7	replace
34	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p0;  [FE]  OutOfRangeException  [FE]                  ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p0;	  p0    =    dPrev;    p0    =    dPrev;    this.scaleFactor    =    scaleFactor.doubleValue();    	compilable	  [FE]  OutOfRangeException  	28	7	replace
35	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  *  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cN  *  dPrev;	  p0    =    dPrev    *    cN;    	compilable	  [FE]  OutOfRangeException  	67	7	replace
36	[BUG]  [BUGGY]  p0  =  cN  *  dPrev;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  *  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN  *  dPrev;	  p0    =    dPrev    *    cN;    	compilable	  [FE]  OutOfRangeException  	67	7	replace
37	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev  *  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cPrev  *  dPrev;	  p0    =    dPrev    *    cN;    	compilable	  [FE]  OutOfRangeException  	67	7	replace
38	[BUG]  [BUGGY]  p0  =  cPrev  *  dPrev;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev  *  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cPrev  *  dPrev;	  p0    =    dPrev    *    cN;    	compilable	  [FE]  OutOfRangeException  	67	7	replace
39	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  *  cN  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  dPrev  *  cN  +  1;	  p0    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	67	11	replace
40	[BUG]  [BUGGY]  p0  =  dPrev  *  cN  +  1;  [FE]  ConvergenceException  [FE]        OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  *  cN  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev  *  cN  +  1;	  p0    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	67	11	replace
41	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(epsilon  -  1.0)/  dPrev;	  n    =    Math.abs(epsilon    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	63	None	replace
42	[BUG]  [BUGGY]  n  =  Math.max(cN,  hPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(cN,  hPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(cN,  hPrev);	  n    =    Math.max(hPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
43	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  hN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(cPrev,  hN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(cPrev,  hN);	  n    =    Math.max(hPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev;  p0  =  cPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    cPrev;    p0  =  cPrev;	  	compilable	  [FE]  AssertionError  	20	2	add
45	[BUG]  [BUGGY]  p0  =  cPrev;  p0  =  cPrev;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev;  p0  =  cPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cPrev;    p0  =  cPrev;	  	compilable	  [FE]  AssertionError  	20	2	add
46	[BUG]  [BUGGY]  p0  =  cPrev;  p0  =  cPv;  [CE]  cannot  find  symbol  cPv  [FE]      OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev;  p0  =  cPv;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cPrev;    p0  =  cPv;	  	non-compiled	[CE]  cannot  find  symbol  cPv	20	None	add
47	[BUG]  [BUGGY]  p0  =  cPrev;  p0  =  cPrev);  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev;  p0  =  cPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cPrev;    p0  =  cPrev);	  	non-compiled	[CE]  ';'  expected	20	None	add
48	[BUG]  [BUGGY]  p0  =  cPrev;  p0  =  cPrev.;  [CE]  <identifier>  expected  [FE]          OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev;  p0  =  cPrev.;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cPrev;    p0  =  cPrev.;	  	non-compiled	[CE]  <identifier>  expected	20	None	add
49	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  -  cPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  -  cPrev);	  n    =    Math.abs(cPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
50	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(cPrev  *  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cPrev  *  dPrev);	  n    =    Math.abs(cPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
51	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  hPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(dPrev,  hPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(dPrev,  hPrev);	  n    =    Math.min(hPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	34	None	replace
52	[BUG]  [BUGGY]  int  p0  =  cN;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  int  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	int  p0  =  cN;	  p0    =    dPrev;    int    p0    =    dPrev;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
53	[BUG]  [BUGGY]  int  p0  =  dPrev;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  int  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	int  p0  =  dPrev;	  p0    =    dPrev;    int    p0    =    dPrev;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
54	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  deltaN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(cPrev  -  deltaN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cPrev  -  deltaN);	  n    =    Math.abs(deltaN    -    cPrev);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
55	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  cPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(epsilon  -  cPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(epsilon  -  cPrev);	  n    =    Math.abs(deltaN    -    cPrev);    	non-compiled	[CE]  possible  loss  of  precision	23	None	replace
56	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cPrev  -  1.0)/  deltaN;	  n    =    Math.abs(deltaN    -    1.0)/    cPrev;    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
57	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  cPrev;  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  cPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(epsilon  -  1.0)/  cPrev;	  n    =    Math.abs(deltaN    -    1.0)/    cPrev;    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
58	[BUG]  [BUGGY]  n  =  Math.abs(cN  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(cN  *  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cN  *  dPrev);	  n    =    Math.abs(cN    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
59	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  cN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  *  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  *  cN);	  n    =    Math.abs(cN    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
60	[BUG]  [BUGGY]  n  =  cPrev.doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  cPrev.doubleValue()  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  cPrev.doubleValue()  +  1;	  n    =    cPrev.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  cN;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0        =        cN;        p0    =    cN;    p0  =  cN;  p0  =  cN;	  	compilable	  [FE]  AssertionError  	9	2	add
62	[BUG]  [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  cN;  p0  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  cN;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        cN;        p0    =    cN;    p0  =  cN;  p0  =  cN;	  	compilable	  [FE]  AssertionError  	9	2	add
63	[BUG]  [BUGGY]  p0    =    cN;    p0  =  cN;  p1  =  cN;  p0  =  cN;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p1  =  cN;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        cN;        p0    =    cN;    p1  =  cN;  p0  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  p1	9	None	add
64	[BUG]  [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  cN;  p1  =  cN;  [CE]  cannot  find  symbol  p1  [FE]        AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  cN;  p1  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        cN;        p0    =    cN;    p0  =  cN;  p1  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  p1	9	None	add
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  n;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0        =        cN;        p0    =    cN;    p0  =  n;  p0  =  cN;	  	compilable	  [FE]  AssertionError  	9	2	add
66	[BUG]  [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  n;  p0  =  cN;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  n;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        cN;        p0    =    cN;    p0  =  n;  p0  =  cN;	  	compilable	  [FE]  AssertionError  	9	2	add
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  *  cN;  p0  =  dPrev  *  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    dPrev    *    cN;    p0  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	66	2	add
68	[BUG]  [BUGGY]  p0  =  dPrev  *  cN;  p0  =  dPrev  *  cN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  *  cN;  p0  =  dPrev  *  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev    *    cN;    p0  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	66	2	add
69	[BUG]  [BUGGY]  p0  =  dPrev  *  cN;  p0  =  dPrev  *  cN);  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  *  cN;  p0  =  dPrev  *  cN);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev    *    cN;    p0  =  dPrev  *  cN);	  	non-compiled	[CE]  ';'  expected	66	None	add
70	[BUG]  [BUGGY]  p0  =  dPrev  *  cN;  p0  =  dprev  *  cN;  [CE]  cannot  find  symbol  dprev  [FE]        OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  *  cN;  p0  =  dprev  *  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev    *    cN;    p0  =  dprev  *  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	66	None	add
71	[BUG]  [BUGGY]  n  =  dPrev.doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  dPrev.doubleValue()  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  dPrev.doubleValue()  +  1;	  n    =    dPrev.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	43	None	replace
72	[BUG]  [BUGGY]  n  =  Math.min(p0,  cN,  dPrev);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(p0,  cN,  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(p0,  cN,  dPrev);	  n    =    Math.min(dPrev,    cN,    p0);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	45	None	replace
73	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev,  p0);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                      AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(cN,  dPrev,  p0);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(cN,  dPrev,  p0);	  n    =    Math.min(dPrev,    cN,    p0);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	45	None	replace
74	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  p0,  cN);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                        AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(dPrev,  p0,  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(dPrev,  p0,  cN);	  n    =    Math.min(dPrev,    cN,    p0);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	45	None	replace
75	[BUG]  [BUGGY]  n  =  Math.min(hPrev,  cN,  p0);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                          AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(hPrev,  cN,  p0);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(hPrev,  cN,  p0);	  n    =    Math.min(dPrev,    cN,    p0);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	45	None	replace
76	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  q2;	  p0    =    q1;    	compilable	  [FE]  ConvergenceException  	60	11	replace
77	[BUG]  [BUGGY]  p0  =  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  q2;	  p0    =    q1;    	compilable	  [FE]  ConvergenceException  	60	11	replace
78	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  /  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cN  /  1;	  p0    =    cN    -    1;    	compilable	  [FE]  OutOfRangeException  	40	7	replace
79	[BUG]  [BUGGY]  p0  =  cN  /  1;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  /  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN  /  1;	  p0    =    cN    -    1;    	compilable	  [FE]  OutOfRangeException  	40	7	replace
80	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  -  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  dPrev  -  1;	  p0    =    cN    -    1;    	compilable	  [FE]  ConvergenceException  	40	11	replace
81	[BUG]  [BUGGY]  p0  =  dPrev  -  1;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  -  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev  -  1;	  p0    =    cN    -    1;    	compilable	  [FE]  ConvergenceException  	40	11	replace
82	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev  -  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cPrev  -  1;	  p0    =    cN    -    1;    	compilable	  [FE]  ConvergenceException  	40	11	replace
83	[BUG]  [BUGGY]  p0  =  cPrev  -  1;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev  -  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cPrev  -  1;	  p0    =    cN    -    1;    	compilable	  [FE]  ConvergenceException  	40	11	replace
84	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  q2;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cPrev  -  1.0)/  q2;	  n    =    Math.abs(cN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	64	None	replace
85	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cN  -  1.0)/  dPrev;	  n    =    Math.abs(cN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	64	None	replace
86	[BUG]  [BUGGY]  n  =  this.scaleFactor.doubleValue()  +  1;  [CE]  cannot  find  symbol  scaleFactor  [FE]            AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  this.scaleFactor.doubleValue()  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  this.scaleFactor.doubleValue()  +  1;	  n    =    this.scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	65	None	replace
87	[BUG]  [BUGGY]  p0  =  cN;  p0  =  dPrev;  this.lastScaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]        ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  dPrev;  this.lastScaleFactor  =  scaleFactor;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  dPrev;  this.lastScaleFactor  =  scaleFactor;	  p0    =    dPrev;    p0    =    dPrev;    this.lastScaleFactor    =    scaleFactor;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	62	None	replace
88	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]          ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  scaleFactor;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  scaleFactor;	  p0    =    dPrev;    p0    =    dPrev;    this.lastScaleFactor    =    scaleFactor;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	62	None	replace
89	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(cN  -  dPrev  +  1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cN  -  dPrev  +  1);	  n    =    Math.abs(cN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
90	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  b;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]          OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  b;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  b;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    b;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	69	None	replace
91	[BUG]  [BUGGY]  p0  =  p0;  p0  =  cN;  this.lastScaleFactor  =  b;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p0;  p0  =  cN;  this.lastScaleFactor  =  b;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p0;  p0  =  cN;  this.lastScaleFactor  =  b;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    b;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	69	None	replace
92	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  b;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]              OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  b;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  b;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    b;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	69	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q1;  p0  =  q1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    q1;    p0  =  q1;	  	compilable	  [FE]  AssertionError  	59	2	add
94	[BUG]  [BUGGY]  p0  =  q1;  p0  =  q1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q1;  p0  =  q1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    q1;    p0  =  q1;	  	compilable	  [FE]  AssertionError  	59	2	add
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q1;  p0  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    q1;    p0  =  q2;	  	compilable	  [FE]  AssertionError  	59	2	add
96	[BUG]  [BUGGY]  p0  =  q1;  p0  =  q2;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q1;  p0  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    q1;    p0  =  q2;	  	compilable	  [FE]  AssertionError  	59	2	add
97	[BUG]  [BUGGY]  p0  =  q1;  p0  =  q1);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q1;  p0  =  q1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    q1;    p0  =  q1);	  	non-compiled	[CE]  ';'  expected	59	None	add
98	[BUG]  [BUGGY]  p0  =  q1;  p0  =  q1,;  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q1;  p0  =  q1,;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    q1;    p0  =  q1,;	  	non-compiled	[CE]  ';'  expected	59	None	add
99	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]          OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  cN;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	56	None	replace
100	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p1;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  p1  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p0;  p0  =  p1;  this.lastScaleFactor  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p0;  p0  =  p1;  this.lastScaleFactor  =  cN;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	56	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  -  1;  p0  =  cN  -  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    cN    -    1;    p0  =  cN  -  1;	  	compilable	  [FE]  AssertionError  	39	2	add
102	[BUG]  [BUGGY]  p0  =  cN  -  1;  p0  =  cN  -  1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  -  1;  p0  =  cN  -  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    -    1;    p0  =  cN  -  1;	  	compilable	  [FE]  AssertionError  	39	2	add
103	[BUG]  [BUGGY]  p0  =  cN  -  1;  p0  =  cN  -  1;  }  p0  =  cN  -  1;  [CE]  illegal  start  of  type  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  -  1;  p0  =  cN  -  1;  }  p0  =  cN  -  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    -    1;    p0  =  cN  -  1;  }  p0  =  cN  -  1;	  	non-compiled	[CE]  illegal  start  of  type	39	None	add
104	[BUG]  [BUGGY]  p0  =  cN  -  1;  p0  =  cN  -  1;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]        ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  -  1;  p0  =  cN  -  1;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    -    1;    p0  =  cN  -  1;  this.scaleFactor  =  scaleFactor.doubleValue();	  	non-compiled	[CE]  cannot  find  symbol  scaleFactor	39	None	add
105	[BUG]  [BUGGY]  p0  =  cN  -  1;  p0  =  cN  -  1;  this.lastScaleFactor  =  dPrev;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]          ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  -  1;  p0  =  cN  -  1;  this.lastScaleFactor  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    -    1;    p0  =  cN  -  1;  this.lastScaleFactor  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	39	None	add
106	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(dPrev,  cPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(dPrev,  cPrev);	  n    =    Math.max(cPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
107	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(dPrev,  cPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(dPrev,  cPrev);	  n    =    Math.max(cPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
108	[BUG]  [BUGGY]  n  =  Math.min(hPrev,  cPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(hPrev,  cPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(hPrev,  cPrev);	  n    =    Math.max(cPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
109	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  epsilon);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(dPrev,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(dPrev,  epsilon);	  n    =    Math.max(epsilon,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	52	None	replace
110	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  cPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(epsilon,  cPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(epsilon,  cPrev);	  n    =    Math.max(epsilon,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	52	None	replace
111	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  epsilon);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(dPrev,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(dPrev,  epsilon);	  n    =    Math.max(epsilon,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	52	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  +  1;  p0  =  dPrev  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    dPrev    +    1;    p0  =  dPrev  +  1;	  	compilable	  [FE]  AssertionError  	18	2	add
113	[BUG]  [BUGGY]  p0  =  dPrev  +  1;  p0  =  dPrev  +  1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  +  1;  p0  =  dPrev  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev    +    1;    p0  =  dPrev  +  1;	  	compilable	  [FE]  AssertionError  	18	2	add
114	[BUG]  [BUGGY]  p0  =  dPrev  +  1;  int  p0  =  dPrev  +  1;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  +  1;  int  p0  =  dPrev  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev    +    1;    int  p0  =  dPrev  +  1;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	18	None	add
115	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  +  1;  p0  =  cN  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    dPrev    +    1;    p0  =  cN  +  1;	  	compilable	  [FE]  AssertionError  	18	2	add
116	[BUG]  [BUGGY]  p0  =  dPrev  +  1;  p0  =  cN  +  1;  [FE]  AssertionError  [FE]        ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  +  1;  p0  =  cN  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev    +    1;    p0  =  cN  +  1;	  	compilable	  [FE]  AssertionError  	18	2	add
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  +  1;  p0  =  cPrev  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    dPrev    +    1;    p0  =  cPrev  +  1;	  	compilable	  [FE]  AssertionError  	18	2	add
118	[BUG]  [BUGGY]  p0  =  dPrev  +  1;  p0  =  cPrev  +  1;  [FE]  AssertionError  [FE]          ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  +  1;  p0  =  cPrev  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev    +    1;    p0  =  cPrev  +  1;	  	compilable	  [FE]  AssertionError  	18	2	add
119	[BUG]  [BUGGY]  p0  =  cN;  p0  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]          ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  dprev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  dprev;	  p0    =    dPrev;    p0    =    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	50	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  dPrev;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0        =        dPrev;        p0    =    dPrev;    p0  =  dPrev;  p0  =  dPrev;	  	compilable	  [FE]  AssertionError  	25	2	add
121	[BUG]  [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  dPrev;  p0  =  dPrev;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  dPrev;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        dPrev;        p0    =    dPrev;    p0  =  dPrev;  p0  =  dPrev;	  	compilable	  [FE]  AssertionError  	25	2	add
122	[BUG]  [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p1  =  dPrev;  p0  =  dPrev;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p1  =  dPrev;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        dPrev;        p0    =    dPrev;    p1  =  dPrev;  p0  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  p1	25	None	add
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  cN;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0        =        dPrev;        p0    =    dPrev;    p0  =  cN;  p0  =  dPrev;	  	compilable	  [FE]  AssertionError  	25	2	add
124	[BUG]  [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  cN;  p0  =  dPrev;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  cN;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        dPrev;        p0    =    dPrev;    p0  =  cN;  p0  =  dPrev;	  	compilable	  [FE]  AssertionError  	25	2	add
125	[BUG]  [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  P0  =  dPrev;  p0  =  dPrev;  [CE]  cannot  find  symbol  P0  [FE]          AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  P0  =  dPrev;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        dPrev;        p0    =    dPrev;    P0  =  dPrev;  p0  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  P0	25	None	add
126	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  epsilon);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  -  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  -  epsilon);	  n    =    Math.abs(epsilon    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
127	[BUG]  [BUGGY]  n  =  Math.abs(x  -  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(x  -  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(x  -  dPrev);	  n    =    Math.abs(epsilon    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
128	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  cPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(epsilon,  cPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(epsilon,  cPrev);	  n    =    Math.min(epsilon,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	46	None	replace
129	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  dPrev;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  dPrev;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	12	None	replace
130	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  dPrev;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]              OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  dPrev;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	12	None	replace
131	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  hN);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(dPrev,  hN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(dPrev,  hN);	  n    =    Math.min(hN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
132	[BUG]  [BUGGY]  n  =  Math.min(hN,  cPrev);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(hN,  cPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(hN,  cPrev);	  n    =    Math.min(hN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	35	None	replace
133	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  epsilon;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  -  1.0)/  epsilon;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	58	None	replace
134	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  epsilon;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cPrev  -  1.0)/  epsilon;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	58	None	replace
135	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  hPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(dPrev,  hPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(dPrev,  hPrev);	  n    =    Math.max(hPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
136	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  deltaN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  /  deltaN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  /  deltaN);	  n    =    Math.abs(dPrev    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
137	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  deltaN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(cN  -  deltaN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cN  -  deltaN);	  n    =    Math.abs(dPrev    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
138	[BUG]  [BUGGY]  n  =  cN.doubleValue()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  cN.doubleValue()  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  cN.doubleValue()  +  1;	  n    =    cN.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
139	[BUG]  [BUGGY]  n  =  Math.min(cN,  epsilon);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(cN,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(cN,  epsilon);	  n    =    Math.min(epsilon,    cN);    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
140	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  epsilon);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(cPrev,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(cPrev,  epsilon);	  n    =    Math.min(epsilon,    cN);    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
141	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  *  DEFAULT_EPSILON);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  *  DEFAULT_EPSILON);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
142	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  cN,  dPrev);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(epsilon,  cN,  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(epsilon,  cN,  dPrev);	  n    =    Math.min(dPrev,    cN,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	44	None	replace
143	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev,  epsilon);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(cN,  dPrev,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(cN,  dPrev,  epsilon);	  n    =    Math.min(dPrev,    cN,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	44	None	replace
144	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN,  p0,  epsilon);  [CE]  no  suitable  method  found  for  min(double,double,double,double)  [FE]                      AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(dPrev,  cN,  p0,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(dPrev,  cN,  p0,  epsilon);	  n    =    Math.min(dPrev,    cN,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double,double)	44	None	replace
145	[BUG]  [BUGGY]  n  =  Math.min(hPrev,  cN,  epsilon);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                        AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(hPrev,  cN,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(hPrev,  cN,  epsilon);	  n    =    Math.min(dPrev,    cN,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	44	None	replace
146	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  q1;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]        OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  q1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  q1;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    q2;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	55	None	replace
147	[BUG]  [BUGGY]  p0  =  q1;  p0  =  cN;  this.lastScaleFactor  =  q2;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]          OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q1;  p0  =  cN;  this.lastScaleFactor  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  q1;  p0  =  cN;  this.lastScaleFactor  =  q2;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    q2;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	55	None	replace
148	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  q2;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p0;  p0  =  p0;  this.lastScaleFactor  =  q2;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    q2;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	55	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  +  1;  p0  =  cN  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    cN    +    1;    p0  =  cN  +  1;	  	compilable	  [FE]  AssertionError  	37	2	add
150	[BUG]  [BUGGY]  p0  =  cN  +  1;  p0  =  cN  +  1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  +  1;  p0  =  cN  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    +    1;    p0  =  cN  +  1;	  	compilable	  [FE]  AssertionError  	37	2	add
151	[BUG]  [BUGGY]  p0  =  cN  +  1;  p0  =  cN  +  1;  }  p0  =  cN  +  1;  [CE]  illegal  start  of  type  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  +  1;  p0  =  cN  +  1;  }  p0  =  cN  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    +    1;    p0  =  cN  +  1;  }  p0  =  cN  +  1;	  	non-compiled	[CE]  illegal  start  of  type	37	None	add
152	[BUG]  [BUGGY]  p0  =  cN  +  1;  p0  =  cN  +  1;  this.lastScaleFactor  =  dPrev;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]        ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  +  1;  p0  =  cN  +  1;  this.lastScaleFactor  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    +    1;    p0  =  cN  +  1;  this.lastScaleFactor  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	37	None	add
153	[BUG]  [BUGGY]  p0  =  cN  +  1;  int  p0  =  cN  +  1;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  +  1;  int  p0  =  cN  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    +    1;    int  p0  =  cN  +  1;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	37	None	add
154	[BUG]  [BUGGY]  n  =  Math.abs(p0  /  cN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(p0  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(p0  /  cN);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
155	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  /  cPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  /  cPrev);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
156	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  cPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  *  cPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  *  cPrev);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
157	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  cN  *  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(epsilon,  cN  *  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(epsilon,  cN  *  dPrev);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
158	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev  *  epsilon);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(cN,  dPrev  *  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(cN,  dPrev  *  epsilon);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
159	[BUG]  [BUGGY]  n  =  Math.max(hPrev,  cN  *  epsilon);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(hPrev,  cN  *  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(hPrev,  cN  *  epsilon);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
160	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  deltaN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(dPrev,  cN  *  deltaN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(dPrev,  cN  *  deltaN);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
161	[BUG]  [BUGGY]  n  =  Math.min(cN,  hPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(cN,  hPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(cN,  hPrev);	  n    =    Math.min(hPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
162	[BUG]  [BUGGY]  n  =  Math.min(hPrev,  cN,  dPrev);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(hPrev,  cN,  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(hPrev,  cN,  dPrev);	  n    =    Math.min(hPrev,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	7	None	replace
163	[BUG]  [BUGGY]  p0  =  p0;  p0  =  p1;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  p1  [FE]          OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p0;  p0  =  p1;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p0;  p0  =  p1;  this.scaleFactor  =  scaleFactor.doubleValue();	  p0    =    cN;    p0    =    cN;    this.scaleFactor    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  p1	11	None	replace
164	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p2;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  p1  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p1;  p0  =  p2;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p1;  p0  =  p2;  this.scaleFactor  =  scaleFactor.doubleValue();	  p0    =    cN;    p0    =    cN;    this.scaleFactor    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  p1	11	None	replace
165	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  cPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cN;  p0  =  cPrev;	  p0    =    cN;    p0    =    cN;    	compilable	  [FE]  OutOfRangeException  	10	7	replace
166	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cPrev;  [FE]  OutOfRangeException  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  cPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  cPrev;	  p0    =    cN;    p0    =    cN;    	compilable	  [FE]  OutOfRangeException  	10	7	replace
167	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  cN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(p0  -  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(p0  -  cN);	  n    =    Math.abs(dPrev    -    cN);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
168	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  n;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  n;  p0  =  dPrev;	  p0    =    dPrev;    p0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	26	11	replace
169	[BUG]  [BUGGY]  p0  =  n;  p0  =  dPrev;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  n;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  n;  p0  =  dPrev;	  p0    =    dPrev;    p0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	26	11	replace
170	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cPrev  +  1;	  p0    =    cN    +    1;    	compilable	  [FE]  ConvergenceException  	38	11	replace
171	[BUG]  [BUGGY]  p0  =  cPrev  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cPrev  +  1;	  p0    =    cN    +    1;    	compilable	  [FE]  ConvergenceException  	38	11	replace
172	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  +  2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cN  +  2;	  p0    =    cN    +    1;    	compilable	  [FE]  ConvergenceException  	38	11	replace
173	[BUG]  [BUGGY]  p0  =  cN  +  2;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  +  2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN  +  2;	  p0    =    cN    +    1;    	compilable	  [FE]  ConvergenceException  	38	11	replace
174	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  epsilon,  cN);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(dPrev,  epsilon,  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(dPrev,  epsilon,  cN);	  n    =    Math.min(dPrev,    cN,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	44	None	replace
175	[BUG]  [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  q2;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  q2;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	double  n  =  Math.abs(epsilon  -  1.0)/  q2;	  n    =    Math.abs(epsilon    -    1.0)/    q2;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	63	None	replace
176	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]          ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p1;	  p0    =    dPrev;    p0    =    dPrev;    }    p0    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  p1	27	None	replace
177	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  p1  [FE]        OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  scaleFactor;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  scaleFactor;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    scaleFactor;    	non-compiled	[CE]  cannot  find  symbol  p1	68	None	replace
178	[BUG]  [BUGGY]  n  =  Math.min(hN,  cN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(hN,  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(hN,  cN);	  n    =    Math.min(hPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
179	[BUG]  [BUGGY]  p0  =  cN;  int  p0  =  dPrev;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  int  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  int  p0  =  dPrev;	  p0    =    dPrev;    int    p0    =    dPrev;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
180	[BUG]  [BUGGY]  dPrev  =  cN;  int  p0  =  dPrev;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  dPrev  =  cN;  int  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	dPrev  =  cN;  int  p0  =  dPrev;	  p0    =    dPrev;    int    p0    =    dPrev;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
181	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN  +  1);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  /  cN  +  1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  /  cN  +  1);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
182	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  p1  [FE]          OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  cN;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	56	None	replace
183	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p0;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  p0;  this.lastScaleFactor  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  p0  =  p0;  this.lastScaleFactor  =  cN;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	56	None	replace
184	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  cN  -  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(epsilon,  cN  -  1);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(epsilon,  cN  -  1);	  n    =    Math.min(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	54	None	replace
185	[BUG]  [BUGGY]  p0    =    cN;    p0  =  cN;  p1  =  cN;  p1  =  cN;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p1  =  cN;  p1  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        cN;        p0    =    cN;    p1  =  cN;  p1  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  p1	9	None	add
186	[BUG]  [BUGGY]  p0    =    cN;    p0  =  cN;  p1  =  cN;  p2  =  cN;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p1  =  cN;  p2  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        cN;        p0    =    cN;    p1  =  cN;  p2  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  p1	9	None	add
187	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	58	None	replace
188	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  +  2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  dPrev  +  2;	  p0    =    dPrev    +    1;    	compilable	  [FE]  ConvergenceException  	19	11	replace
189	[BUG]  [BUGGY]  p0  =  dPrev  +  2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  +  2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev  +  2;	  p0    =    dPrev    +    1;    	compilable	  [FE]  ConvergenceException  	19	11	replace
190	[BUG]  [BUGGY]  P0  =  cN;  [CE]  cannot  find  symbol  P0  [FE]            ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  P0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	P0  =  cN;	  p0    =    dPrev;    P0    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  P0	51	None	replace
191	[BUG]  [BUGGY]  P0  =  dPrev;  [CE]  cannot  find  symbol  P0  [FE]              ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  P0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	P0  =  dPrev;	  p0    =    dPrev;    P0    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  P0	51	None	replace
192	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(deltaN,  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(deltaN,  dPrev);	  n    =    Math.min(epsilon,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	46	None	replace
193	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(q1  -  1.0)/  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(q1  -  1.0)/  dPrev;	  n    =    Math.abs(dPrev    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
194	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  cPrev;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  cPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  -  1.0)/  cPrev;	  n    =    Math.abs(deltaN    -    1.0)/    cPrev;    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
195	[BUG]  [BUGGY]  p0  =  n;  p0  =  p0;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]            ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  n;  p0  =  p0;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  n;  p0  =  p0;  this.scaleFactor  =  scaleFactor.doubleValue();	  p0    =    dPrev;    p0    =    dPrev;    this.scaleFactor    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	28	None	replace
196	[BUG]  [BUGGY]  n  =  epsilon.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  epsilon.doubleValue();  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  epsilon.doubleValue();	  n    =    cN.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
197	[BUG]  [BUGGY]  n  =  p0.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  p0.doubleValue();  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  p0.doubleValue();	  n    =    cN.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
198	[BUG]  [BUGGY]  p0  =  q1;  int  p0  =  q1;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q1;  int  p0  =  q1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    q1;    int  p0  =  q1;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	59	None	add
199	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  deltaN  +  1;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  deltaN  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(epsilon  -  1.0)/  deltaN  +  1;	  n    =    Math.abs(epsilon    -    1.0)/    deltaN;    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
200	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p0;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  p1  [FE]              ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p1;  p0  =  p0;  this.lastScaleFactor  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p1;  p0  =  p0;  this.lastScaleFactor  =  cN;	  p0    =    dPrev;    p0    =    dPrev;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	29	None	replace
201	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p1;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  p1  [FE]                ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  p1;  this.lastScaleFactor  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  p0  =  p1;  this.lastScaleFactor  =  cN;	  p0    =    dPrev;    p0    =    dPrev;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	29	None	replace
202	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  q2;  [CE]  cannot  find  symbol  p1  [FE]        OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  q2;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    q2;    	non-compiled	[CE]  cannot  find  symbol  p1	55	None	replace
203	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  q2;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]          OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  q2;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    q2;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	55	None	replace
204	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  q2;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  p0  =  cN;  this.lastScaleFactor  =  q2;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    q2;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	55	None	replace
205	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q1;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  q1;  p0  =  cN;	  p0    =    cN;    p0    =    cN;    }    p0    =    cN;    	compilable	  [FE]  OutOfRangeException  	13	7	replace
206	[BUG]  [BUGGY]  p0  =  q1;  p0  =  cN;  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q1;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  q1;  p0  =  cN;	  p0    =    cN;    p0    =    cN;    }    p0    =    cN;    	compilable	  [FE]  OutOfRangeException  	13	7	replace
207	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  b;  [CE]  cannot  find  symbol  p1  [FE]          OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  b;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  b;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    b;    	non-compiled	[CE]  cannot  find  symbol  p1	69	None	replace
208	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  b;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  b;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  b;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    b;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	69	None	replace
209	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
210	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p2;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  p1;  p0  =  p2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  p1;  p0  =  p2;	  p0    =    cN;    p0    =    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	10	None	replace
211	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  epsilon  *  cN);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(dPrev,  epsilon  *  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(dPrev,  epsilon  *  cN);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
212	[BUG]  [BUGGY]  n  =  Math.max(hN,  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(hN,  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(hN,  dPrev);	  n    =    Math.max(hPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
213	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  hN);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(dPrev,  hN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(dPrev,  hN);	  n    =    Math.max(hPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
214	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  dPrev;  [CE]  cannot  find  symbol  p1  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p1;  this.lastScaleFactor  =  dPrev;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  p1	12	None	replace
215	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  dPrev;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]              OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p0;  this.lastScaleFactor  =  dPrev;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	12	None	replace
216	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  +  1;  p0  =  cN  +  2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    cN    +    1;    p0  =  cN  +  2;	  	compilable	  [FE]  AssertionError  	37	2	add
217	[BUG]  [BUGGY]  p0  =  cN  +  1;  p0  =  cN  +  2;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  +  1;  p0  =  cN  +  2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    +    1;    p0  =  cN  +  2;	  	compilable	  [FE]  AssertionError  	37	2	add
218	[BUG]  [BUGGY]  p0  =  cN  +  1;  P0  =  cN  +  1;  [CE]  cannot  find  symbol  P0  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  +  1;  P0  =  cN  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    +    1;    P0  =  cN  +  1;	  	non-compiled	[CE]  cannot  find  symbol  P0	37	None	add
219	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  p1  [FE]          OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p1;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p1;  this.scaleFactor  =  scaleFactor.doubleValue();	  p0    =    cN;    p0    =    cN;    this.scaleFactor    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  p1	11	None	replace
220	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  cN;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  p0  =  cN;  this.scaleFactor  =  scaleFactor.doubleValue();	  p0    =    cN;    p0    =    cN;    this.scaleFactor    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	11	None	replace
221	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1.doubleValue();  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  p1  [FE]              OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p1.doubleValue();  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p1.doubleValue();  this.scaleFactor  =  scaleFactor.doubleValue();	  p0    =    cN;    p0    =    cN;    this.scaleFactor    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  p1	11	None	replace
222	[BUG]  [BUGGY]  p0  =  dPrev  +  1;  p0  =  dprev  +  1;  [CE]  cannot  find  symbol  dprev  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  +  1;  p0  =  dprev  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev    +    1;    p0  =  dprev  +  1;	  	non-compiled	[CE]  cannot  find  symbol  dprev	18	None	add
223	[BUG]  [BUGGY]  p0  =  dPrev  *  cN;  int  p0  =  dPrev  *  cN;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  *  cN;  int  p0  =  dPrev  *  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev    *    cN;    int  p0  =  dPrev  *  cN;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	66	None	add
224	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  deltaN);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(deltaN  -  deltaN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(deltaN  -  deltaN);	  n    =    Math.abs(dPrev    -    deltaN);    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
225	[BUG]  [BUGGY]  p0  =  cPrev;  int  p0  =  cPrev;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev;  int  p0  =  cPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cPrev;    int  p0  =  cPrev;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	20	None	add
226	[BUG]  [BUGGY]  p0  =  cPrev;  P0  =  cPrev;  [CE]  cannot  find  symbol  P0  [FE]      OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cPrev;  P0  =  cPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cPrev;    P0  =  cPrev;	  	non-compiled	[CE]  cannot  find  symbol  P0	20	None	add
227	[BUG]  [BUGGY]  p0  =  cN  -  1;  int  p0  =  cN  -  1;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  -  1;  int  p0  =  cN  -  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    -    1;    int  p0  =  cN  -  1;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	39	None	add
228	[BUG]  [BUGGY]  p0  =  cN  -  1;  (p0  =  cN  -  1;  [CE]  ')'  expected  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  -  1;  (p0  =  cN  -  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    -    1;    (p0  =  cN  -  1;	  	non-compiled	[CE]  ')'  expected	39	None	add
229	[BUG]  [BUGGY]  p0  =  cN  -  1;  P0  =  cN  -  1;  [CE]  cannot  find  symbol  P0  [FE]        ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  -  1;  P0  =  cN  -  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    -    1;    P0  =  cN  -  1;	  	non-compiled	[CE]  cannot  find  symbol  P0	39	None	add
230	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  /  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  dPrev  /  cN;	  p0    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	67	11	replace
231	[BUG]  [BUGGY]  p0  =  dPrev  /  cN;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  /  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev  /  cN;	  p0    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	67	11	replace
232	[BUG]  [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  dPrev;  p0  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  dPrev;  p0  =  dprev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        dPrev;        p0    =    dPrev;    p0  =  dPrev;  p0  =  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	25	None	add
233	[BUG]  [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  dPrev;  p1  =  dPrev;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  dPrev;  p1  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        dPrev;        p0    =    dPrev;    p0  =  dPrev;  p1  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  p1	25	None	add
234	[BUG]  [BUGGY]  n  =  dPrev,  cPrev.doubleValue();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  dPrev,  cPrev.doubleValue();  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  dPrev,  cPrev.doubleValue();	  n    =    cPrev.doubleValue();    	non-compiled	[CE]  ';'  expected	42	None	replace
235	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  q1;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(epsilon  -  1.0)/  q1;	  n    =    Math.abs(deltaN    -    1.0)/    q1;    	non-compiled	[CE]  possible  loss  of  precision	57	None	replace
236	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev,  dPrev);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(cN  -  dPrev,  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cN  -  dPrev,  dPrev);	  n    =    Math.abs(cN    -    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	1	None	replace
237	[BUG]  [BUGGY]  n  =  Math.abs(hPrev  -  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(hPrev  -  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(hPrev  -  dPrev);	  n    =    Math.abs(cN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
238	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  p1  [FE]          OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p1;  lastScaleFactor  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p1;  lastScaleFactor  =  cN;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	56	None	replace
239	[BUG]  [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  epsilon;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  double  n  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	double  n  =  Math.abs(deltaN  -  1.0)/  epsilon;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	58	None	replace
240	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  dPrev;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0        =        cN;        p0    =    cN;    p0  =  dPrev;  p0  =  cN;	  	compilable	  [FE]  AssertionError  	9	2	add
241	[BUG]  [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  dPrev;  p0  =  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  dPrev;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        cN;        p0    =    cN;    p0  =  dPrev;  p0  =  cN;	  	compilable	  [FE]  AssertionError  	9	2	add
242	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  q1;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0        =        cN;        p0    =    cN;    p0  =  q1;  p0  =  cN;	  	compilable	  [FE]  AssertionError  	9	2	add
243	[BUG]  [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  q1;  p0  =  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  q1;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        cN;        p0    =    cN;    p0  =  q1;  p0  =  cN;	  	compilable	  [FE]  AssertionError  	9	2	add
244	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  q2;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0        =        cN;        p0    =    cN;    p0  =  q2;  p0  =  cN;	  	compilable	  [FE]  AssertionError  	9	2	add
245	[BUG]  [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  q2;  p0  =  cN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    cN;    p0  =  cN;  p0  =  q2;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        cN;        p0    =    cN;    p0  =  q2;  p0  =  cN;	  	compilable	  [FE]  AssertionError  	9	2	add
246	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1.doubleValue();  [CE]  cannot  find  symbol  p1  [FE]          OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p1.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p1.doubleValue();	  p0    =    cN;    p0    =    cN;    this.scaleFactor    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  p1	11	None	replace
247	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p2;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  p2  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p2;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p2;  this.scaleFactor  =  scaleFactor.doubleValue();	  p0    =    cN;    p0    =    cN;    this.scaleFactor    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  p2	11	None	replace
248	[BUG]  [BUGGY]  n  =  dPrev,  cN.doubleValue();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  dPrev,  cN.doubleValue();  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  dPrev,  cN.doubleValue();	  n    =    dPrev.doubleValue();    	non-compiled	[CE]  ';'  expected	43	None	replace
249	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  DEFAULT_EPSILON);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(dPrev,  cN  *  DEFAULT_EPSILON);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(dPrev,  cN  *  DEFAULT_EPSILON);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
250	[BUG]  [BUGGY]  n  =  Math.max(a,  cN  *  epsilon);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.max(a,  cN  *  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(a,  cN  *  epsilon);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
251	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  lastScaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  p1  [FE]        OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p1;  lastScaleFactor  =  scaleFactor;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p1;  lastScaleFactor  =  scaleFactor;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    scaleFactor;    	non-compiled	[CE]  cannot  find  symbol  p1	68	None	replace
252	[BUG]  [BUGGY]  n  =  Math.abs(defULT_EPSILON  -  dPrev);  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(defULT_EPSILON  -  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(defULT_EPSILON  -  dPrev);	  n    =    Math.abs(hN    -    dPrev);    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	70	None	replace
253	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN,  epsilon,  DEFAULT_EPSILON);  [CE]  no  suitable  method  found  for  min(double,double,double,double)  [FE]                  AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.min(dPrev,  cN,  epsilon,  DEFAULT_EPSILON);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(dPrev,  cN,  epsilon,  DEFAULT_EPSILON);	  n    =    Math.min(dPrev,    cN,    epsilon);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double,double)	44	None	replace
254	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  *  cN;  p0  =  cN  *  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    dPrev    *    cN;    p0  =  cN  *  cN;	  	compilable	  [FE]  AssertionError  	66	2	add
255	[BUG]  [BUGGY]  p0  =  dPrev  *  cN;  p0  =  cN  *  cN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  *  cN;  p0  =  cN  *  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev    *    cN;    p0  =  cN  *  cN;	  	compilable	  [FE]  AssertionError  	66	2	add
256	[BUG]  [BUGGY]  p0  =  cN;  p0  =  dPrev;  lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]              ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  dPrev;  lastScaleFactor  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  dPrev;  lastScaleFactor  =  cN;	  p0    =    dPrev;    p0    =    dPrev;    this.lastScaleFactor    =    cN;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	29	None	replace
257	[BUG]  [BUGGY]  p0  =  cN  +  1;  (  p0  =  cN  +  1;  [CE]  ')'  expected  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  +  1;  (  p0  =  cN  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    +    1;    (  p0  =  cN  +  1;	  	non-compiled	[CE]  ')'  expected	37	None	add
258	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(q2  -  1.0)/  dPrev;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(q2  -  1.0)/  dPrev;	  n    =    Math.abs(dPrev    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	14	None	replace
259	[BUG]  [BUGGY]  int  p0  =  dPrev  +  1;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  int  p0  =  dPrev  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	int  p0  =  dPrev  +  1;	  p0    =    dPrev;    int    p0    =    dPrev;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
260	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  /  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  dPrev  /  1;	  p0    =    dPrev    +    1;    	compilable	  [FE]  ConvergenceException  	19	11	replace
261	[BUG]  [BUGGY]  p0  =  dPrev  /  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  /  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev  /  1;	  p0    =    dPrev    +    1;    	compilable	  [FE]  ConvergenceException  	19	11	replace
262	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  *  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  dPrev  *  1;	  p0    =    dPrev    +    1;    	compilable	  [FE]  ConvergenceException  	19	11	replace
263	[BUG]  [BUGGY]  p0  =  dPrev  *  1;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  *  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev  *  1;	  p0    =    dPrev    +    1;    	compilable	  [FE]  ConvergenceException  	19	11	replace
264	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN,  epsilon);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]              AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  /  cN,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  /  cN,  epsilon);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	31	None	replace
265	[BUG]  [BUGGY]  n  =  Math.abs(hPrev  /  cN);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(hPrev  /  cN);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(hPrev  /  cN);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  possible  loss  of  precision	31	None	replace
266	[BUG]  [BUGGY]  p0  =  dPrev;  P0  =  cN;  [CE]  cannot  find  symbol  P0  [FE]            ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  P0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  P0  =  cN;	  p0    =    dPrev;    P0    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  P0	51	None	replace
267	[BUG]  [BUGGY]  n  =  dPrev;  P0  =  dPrev;  [CE]  possible  loss  of  precision  [FE]              ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  dPrev;  P0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  dPrev;  P0  =  dPrev;	  p0    =    dPrev;    P0    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
268	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cN,  epsilon);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(dPrev  -  cN,  epsilon);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  -  cN,  epsilon);	  n    =    Math.abs(dPrev    -    cN);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	2	None	replace
269	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  epsilon;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  epsilon;  p0  =  cN;	  p0    =    cN;    p0    =    cN;    }    p0    =    cN;    	compilable	  [FE]  OutOfRangeException  	13	7	replace
270	[BUG]  [BUGGY]  p0  =  epsilon;  p0  =  cN;  [FE]  OutOfRangeException  [FE]              OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  epsilon;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  epsilon;  p0  =  cN;	  p0    =    cN;    p0    =    cN;    }    p0    =    cN;    	compilable	  [FE]  OutOfRangeException  	13	7	replace
271	[BUG]  [BUGGY]  n  =  Math.abs(hPrev  *  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  n  =  Math.abs(hPrev  *  dPrev);  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(hPrev  *  dPrev);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
272	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  +  1;  p0  =  dPrev  +  2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    dPrev    +    1;    p0  =  dPrev  +  2;	  	compilable	  [FE]  AssertionError  	18	2	add
273	[BUG]  [BUGGY]  p0  =  dPrev  +  1;  p0  =  dPrev  +  2;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev  +  1;  p0  =  dPrev  +  2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev    +    1;    p0  =  dPrev  +  2;	  	compilable	  [FE]  AssertionError  	18	2	add
274	[BUG]  [BUGGY]  p0  =  q1;  p0  =  q1,  q2;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  q1;  p0  =  q1,  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    q1;    p0  =  q1,  q2;	  	non-compiled	[CE]  ';'  expected	59	None	add
275	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  -  1;  p0  =  cN  -  2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    cN    -    1;    p0  =  cN  -  2;	  	compilable	  [FE]  AssertionError  	39	2	add
276	[BUG]  [BUGGY]  p0  =  cN  -  1;  p0  =  cN  -  2;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  -  1;  p0  =  cN  -  2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN    -    1;    p0  =  cN  -  2;	  	compilable	  [FE]  AssertionError  	39	2	add
277	[BUG]  [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  deltaN;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  double  n  =  Math.abs(epsilon  -  1.0)/  deltaN;  [BUGGY]      p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	double  n  =  Math.abs(epsilon  -  1.0)/  deltaN;	  n    =    Math.abs(epsilon    -    1.0)/    deltaN;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
278	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  lastScaleFactor  =  dPrev;  [CE]  cannot  find  symbol  p1  [FE]            OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  p1;  lastScaleFactor  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  p1;  lastScaleFactor  =  dPrev;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  p1	12	None	replace
279	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p1;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  p1  [FE]            ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  p1;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  p0  =  p1;  this.scaleFactor  =  scaleFactor.doubleValue();	  p0    =    dPrev;    p0    =    dPrev;    this.scaleFactor    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  p1	28	None	replace
280	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  cN;  lastScaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]        ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  lastScaleFactor  =  scaleFactor;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  p0  =  cN;  lastScaleFactor  =  scaleFactor;	  p0    =    dPrev;    p0    =    dPrev;    this.lastScaleFactor    =    scaleFactor;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	62	None	replace
281	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p1;  this.lastScaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  p1  [FE]          ConvergenceException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  dPrev;  p0  =  p1;  this.lastScaleFactor  =  scaleFactor;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev;  p0  =  p1;  this.lastScaleFactor  =  scaleFactor;	  p0    =    dPrev;    p0    =    dPrev;    this.lastScaleFactor    =    scaleFactor;    	non-compiled	[CE]  cannot  find  symbol  p1	62	None	replace
282	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  lastScaleFactor  =  b;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]          OutOfRangeException      [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN;  p0  =  cN;  lastScaleFactor  =  b;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN;  p0  =  cN;  lastScaleFactor  =  b;	  p0    =    cN;    p0    =    cN;    this.lastScaleFactor    =    b;    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	69	None	replace
283	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  q1;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0        =        dPrev;        p0    =    dPrev;    p0  =  q1;  p0  =  dPrev;	  	compilable	  [FE]  AssertionError  	25	2	add
284	[BUG]  [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  q1;  p0  =  dPrev;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0    =    dPrev;    p0  =  dPrev;  p0  =  q1;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0        =        dPrev;        p0    =    dPrev;    p0  =  q1;  p0  =  dPrev;	  	compilable	  [FE]  AssertionError  	25	2	add
285	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  *  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cN  *  1;	  p0    =    cN    +    1;    	compilable	  [FE]  OutOfRangeException  	38	7	replace
286	[BUG]  [BUGGY]  p0  =  cN  *  1;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;      [BUGGY]  p0  =  cN  *  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN  *  1;	  p0    =    cN    +    1;    	compilable	  [FE]  OutOfRangeException  	38	7	replace
