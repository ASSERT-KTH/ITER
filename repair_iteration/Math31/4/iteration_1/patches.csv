bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(cN  -  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cN  -  dPrev);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
2	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cN);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(dPrev  -  cN);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  -  cN);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
3	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(cPrev  -  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cPrev  -  dPrev);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
4	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.max(cN,  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(cN,  dPrev);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
5	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  dPrev);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.max(cPrev,  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(cPrev,  dPrev);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
6	[BUG]  [BUGGY]  n  =  Math.max(hPrev,  cN);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.max(hPrev,  cN);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(hPrev,  cN);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
7	[BUG]  [BUGGY]  n  =  Math.min(hPrev,  cN);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.min(hPrev,  cN);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(hPrev,  cN);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
8	[BUG]  [BUGGY]  n  =  Math.max(hPrev,  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.max(hPrev,  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(hPrev,  dPrev);	      n    =    Math.max(dPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN;  p0  =  cN;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    cN;    p0  =  cN;	  	compilable	  [FE]  AssertionError  	6	2	add
10	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  [FE]  AssertionError  [FE]    OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN;  p0  =  cN;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN;    p0  =  cN;	  	compilable	  [FE]  AssertionError  	6	2	add
11	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]      OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN;  p0  =  cN;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN;    p0  =  cN;  this.scaleFactor  =  scaleFactor.doubleValue();	  	non-compiled	[CE]  cannot  find  symbol  scaleFactor	6	None	add
12	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  dPrev;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]        OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  dPrev;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN;    p0  =  cN;  this.lastScaleFactor  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	6	None	add
13	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  }  p0  =  cN;  [CE]  illegal  start  of  type  [FE]          OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN;  p0  =  cN;  }  p0  =  cN;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN;    p0  =  cN;  }  p0  =  cN;	  	non-compiled	[CE]  illegal  start  of  type	6	None	add
14	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  q2;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  q2;  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  -  1.0)/  q2;	      n    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
15	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(deltaN  -  1.0)/  dPrev;	      n    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
16	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  deltaN;  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(epsilon  -  1.0)/  deltaN;	      n    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
17	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  cPrev;  [CE]  possible  loss  of  precision  [FE]                  AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  cPrev;  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(deltaN  -  1.0)/  cPrev;	      n    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
18	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev  +  1;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  dPrev  +  1;	  p0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	9	11	replace
19	[BUG]  [BUGGY]  p0  =  dPrev  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev  +  1;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev  +  1;	  p0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	9	11	replace
20	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cPrev;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cPrev;	  p0    =    dPrev;    	compilable	  [FE]  OutOfRangeException  	9	7	replace
21	[BUG]  [BUGGY]  p0  =  cPrev;  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cPrev;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cPrev;	  p0    =    dPrev;    	compilable	  [FE]  OutOfRangeException  	9	7	replace
22	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  deltaN);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(dPrev  -  deltaN);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  -  deltaN);	      n    =    Math.abs(deltaN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
23	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  cPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(deltaN  -  cPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(deltaN  -  cPrev);	      n    =    Math.abs(deltaN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
24	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(epsilon  -  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(epsilon  -  dPrev);	      n    =    Math.abs(deltaN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0    =    dPrev;    p0  =  dPrev;	  	compilable	  [FE]  AssertionError  	8	2	add
26	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev;    p0  =  dPrev;	  	compilable	  [FE]  AssertionError  	8	2	add
27	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  }  p0  =  dPrev;  [CE]  illegal  start  of  type  [FE]      ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  }  p0  =  dPrev;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev;    p0  =  dPrev;  }  p0  =  dPrev;	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
28	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  this.scaleFactor  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]        ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  this.scaleFactor  =  scaleFactor.doubleValue();  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev;    p0  =  dPrev;  this.scaleFactor  =  scaleFactor.doubleValue();	  	non-compiled	[CE]  cannot  find  symbol  scaleFactor	8	None	add
29	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]          ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  this.lastScaleFactor  =  cN;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev;    p0  =  dPrev;  this.lastScaleFactor  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	8	None	add
30	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  dPrev);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(dPrev  *  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  *  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
31	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(dPrev  /  cN);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(dPrev  /  cN);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
32	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(cN  /  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cN  /  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
33	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  /  dPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(cPrev  /  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cPrev  /  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
34	[BUG]  [BUGGY]  n  =  Math.min(hPrev,  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.min(hPrev,  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(hPrev,  dPrev);	      n    =    Math.min(dPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
35	[BUG]  [BUGGY]  n  =  Math.min(hN,  dPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.min(hN,  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(hN,  dPrev);	      n    =    Math.min(dPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
36	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.min(cN,  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(cN,  dPrev);	      n    =    Math.min(dPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
37	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN  +  1;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cN  +  1;	  p0    =    cN;    	compilable	  [FE]  ConvergenceException  	7	11	replace
38	[BUG]  [BUGGY]  p0  =  cN  +  1;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN  +  1;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN  +  1;	  p0    =    cN;    	compilable	  [FE]  ConvergenceException  	7	11	replace
39	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN  -  1;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  cN  -  1;	  p0    =    cN;    	compilable	  [FE]  ConvergenceException  	7	11	replace
40	[BUG]  [BUGGY]  p0  =  cN  -  1;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN  -  1;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  cN  -  1;	  p0    =    cN;    	compilable	  [FE]  ConvergenceException  	7	11	replace
41	[BUG]  [BUGGY]  n  =  cN.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  cN.doubleValue();  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  cN.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	10	None	replace
42	[BUG]  [BUGGY]  n  =  cPrev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  cPrev.doubleValue();  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  cPrev.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	10	None	replace
43	[BUG]  [BUGGY]  n  =  dPrev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  dPrev.doubleValue();  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  dPrev.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	10	None	replace
44	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN,  epsilon);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]              AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.min(dPrev,  cN,  epsilon);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(dPrev,  cN,  epsilon);	      n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	4	None	replace
45	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN,  p0);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]                AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.min(dPrev,  cN,  p0);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(dPrev,  cN,  p0);	      n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	4	None	replace
46	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.min(epsilon,  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(epsilon,  dPrev);	      n    =    Math.min(dPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
47	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  cN);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.max(epsilon,  cN);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(epsilon,  cN);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
48	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  +  1);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.max(dPrev,  cN  +  1);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(dPrev,  cN  +  1);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
49	[BUG]  [BUGGY]  p0  =  dPrev;  int  p0  =  dPrev;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev;  int  p0  =  dPrev;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev;    int  p0  =  dPrev;	  	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
50	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]      ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev;  p0  =  dprev;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev;    p0  =  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	8	None	add
51	[BUG]  [BUGGY]  p0  =  dPrev;  P0  =  dPrev;  [CE]  cannot  find  symbol  P0  [FE]        ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev;  P0  =  dPrev;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev;    P0  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  P0	8	None	add
52	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.max(epsilon,  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(epsilon,  dPrev);	      n    =    Math.max(dPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
53	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  cN);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.min(epsilon,  cN);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(epsilon,  cN);	      n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
54	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN  -  1);  [CE]  possible  loss  of  precision  [FE]                AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.min(dPrev,  cN  -  1);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.min(dPrev,  cN  -  1);	      n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	4	None	replace
55	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  q2;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]    OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  q2;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN;    p0  =  cN;  this.lastScaleFactor  =  q2;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	6	None	add
56	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  cN;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]      OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  cN;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN;    p0  =  cN;  this.lastScaleFactor  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	6	None	add
57	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  q1;  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(deltaN  -  1.0)/  q1;	      n    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
58	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(deltaN  -  1.0)/  epsilon;	      n    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
59	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  q1;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  q1;	  p0    =    cN;    	compilable	  [FE]  ConvergenceException  	7	11	replace
60	[BUG]  [BUGGY]  p0  =  q1;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  q1;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  q1;	  p0    =    cN;    	compilable	  [FE]  ConvergenceException  	7	11	replace
61	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon);  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.max(dPrev,  cN  *  epsilon);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
62	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  this.lastScaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]    ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  this.lastScaleFactor  =  scaleFactor;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    dPrev;    p0  =  dPrev;  this.lastScaleFactor  =  scaleFactor;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	8	None	add
63	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  q2;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  q2;  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(epsilon  -  1.0)/  q2;	      n    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
64	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  q2;  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(cN  -  1.0)/  q2;  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(cN  -  1.0)/  q2;	      n    =    Math.abs(deltaN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
65	[BUG]  [BUGGY]  n  =  this.scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]        AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  this.scaleFactor.doubleValue();  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  this.scaleFactor.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	10	None	replace
66	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev  *  cN;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	p0  =  dPrev  *  cN;	  p0    =    dPrev;    	compilable	  [FE]  OutOfRangeException  	9	7	replace
67	[BUG]  [BUGGY]  p0  =  dPrev  *  cN;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  dPrev  *  cN;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0  =  dPrev  *  cN;	  p0    =    dPrev;    	compilable	  [FE]  OutOfRangeException  	9	7	replace
68	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  scaleFactor;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]    OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  scaleFactor;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN;    p0  =  cN;  this.lastScaleFactor  =  scaleFactor;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	6	None	add
69	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  b;  [CE]  cannot  find  symbol  lastScaleFactor  [FE]      OutOfRangeException    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  p0  =  cN;  p0  =  cN;  this.lastScaleFactor  =  b;  [BUGGY]    hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	p0    =    cN;    p0  =  cN;  this.lastScaleFactor  =  b;	  	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	6	None	add
70	[BUG]  [BUGGY]  n  =  Math.abs(hN  -  dPrev);  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]    throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;    [BUGGY]  n  =  Math.abs(hN  -  dPrev);  [BUGGY]    p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	n  =  Math.abs(hN  -  dPrev);	      n    =    Math.abs(deltaN    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
