bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  dPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	13	None	replace
2	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations,  0);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  dPrev  =  getA(x,  epsilon,  maxIterations,  0);	      double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	13	None	replace
3	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations,  precision);  [CE]  cannot  find  symbol  precision  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations,  precision);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  dPrev  =  getA(x,  epsilon,  maxIterations,  precision);	      double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  precision	13	None	replace
4	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon,  0,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  dPrev  =  getA(x,  epsilon,  0,  maxIterations);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  dPrev  =  getA(x,  epsilon,  0,  maxIterations);	      double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	13	None	replace
5	[BUG]  [BUGGY]  double  n  =  2;  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  n  =  2;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  n  =  2;	  int    n    =    2;    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	5	None	replace
6	[BUG]  [BUGGY]  double  n  =  0;  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  n  =  0;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  n  =  0;	  int    n    =    0;    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	2	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =(int)Math.floor(x);  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	add	int  n  =(int)Math.floor(x);	  int    n    =    0;    	compilable	  [FE]  AssertionError  	2	7	replace
8	[BUG]  [BUGGY]  int  n  =(int)Math.floor(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =(int)Math.floor(x);  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int  n  =(int)Math.floor(x);	  int    n    =    0;    	compilable	  [FE]  AssertionError  	2	7	replace
9	[BUG]  [BUGGY]  double  n  =  1e-50;  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  n  =  1e-50;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  n  =  1e-50;	  double    n    =    1;    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	3	None	replace
10	[BUG]  [BUGGY]  double  n  =  1e;  [CE]  malformed  floating  point  literal  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  n  =  1e;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  n  =  1e;	  double    n    =    1;    	non-compiled	[CE]  malformed  floating  point  literal	3	None	replace
11	[BUG]  [BUGGY]  double  n  =  1e50;  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  n  =  1e50;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  n  =  1e50;	  double    n    =    1;    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	3	None	replace
12	[BUG]  [BUGGY]  final  double  b  =  getB(n,  x);  [CE]  cannot  find  symbol  n  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  final  double  b  =  getB(n,  x);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	final  double  b  =  getB(n,  x);	      double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  n	11	None	replace
13	[BUG]  [BUGGY]  final  double  a  =  getA(x,  n);  final  double  b  =  getB(x);  [CE]  cannot  find  symbol  n  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  final  double  a  =  getA(x,  n);  final  double  b  =  getB(x);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	final  double  a  =  getA(x,  n);  final  double  b  =  getB(x);	      double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  n	11	None	replace
14	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN);  [CE]  cannot  find  symbol  n  [FE]                    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  hN);	      double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  n	11	None	replace
15	[BUG]  [BUGGY]  final  double  a  =  getA(x,  hN);  final  double  b  =  getB(x);  [CE]  cannot  find  symbol  hN  [FE]                      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  final  double  a  =  getA(x,  hN);  final  double  b  =  getB(x);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	final  double  a  =  getA(x,  hN);  final  double  b  =  getB(x);	      double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  hN	11	None	replace
16	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      double    dPrev    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
17	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations  +  1);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations  +  1);	      double    dPrev    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
18	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  precision);  [CE]  cannot  find  symbol  precision  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations,  precision);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations,  precision);	      double    dPrev    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  precision	8	None	replace
19	[BUG]  [BUGGY]  double  a  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      double    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	7	None	replace
20	[BUG]  [BUGGY]  double  a  =  getA(x,  epsilon,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(x,  epsilon,  maxIterations,  0);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(x,  epsilon,  maxIterations,  0);	      double    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	7	None	replace
21	[BUG]  [BUGGY]  double  a  =  getA(x,  epsilon,  maxIterations,  hN);  [CE]  cannot  find  symbol  hN  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(x,  epsilon,  maxIterations,  hN);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(x,  epsilon,  maxIterations,  hN);	      double    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  hN	7	None	replace
22	[BUG]  [BUGGY]  double  a  =  getA(x,  epsilon,  maxIterations,  precision);  [CE]  cannot  find  symbol  precision  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(x,  epsilon,  maxIterations,  precision);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(x,  epsilon,  maxIterations,  precision);	      double    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  precision	7	None	replace
23	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	9	None	replace
24	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  n  =  getA(x,  epsilon,  maxIterations);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	9	None	replace
25	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  0);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  0);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	9	None	replace
26	[BUG]  [BUGGY]  int  n  =  getA(a,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  a  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =  getA(a,  x,  epsilon,  maxIterations);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int  n  =  getA(a,  x,  epsilon,  maxIterations);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  a	9	None	replace
27	[BUG]  [BUGGY]  double  a  =  getS(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getS(x,  epsilon,  maxIterations);  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getS(x,  epsilon,  maxIterations);	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
28	[BUG]  [BUGGY]  double  a  =  getA(x);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(x);  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(x);	      	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	6	None	replace
29	[BUG]  [BUGGY]  int  n  =  2;  int  n  =  2;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =  2;  int  n  =  2;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int    n    =    2;    int  n  =  2;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	4	None	add
30	[BUG]  [BUGGY]  int  n  =  2;  Int  n  =  2;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =  2;  Int  n  =  2;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int    n    =    2;    Int  n  =  2;	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
31	[BUG]  [BUGGY]  int  n  =  2;  int  n  =  3;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =  2;  int  n  =  3;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int    n    =    2;    int  n  =  3;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	4	None	add
32	[BUG]  [BUGGY]  int  n  =  2;  double  n  =  2;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =  2;  double  n  =  2;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int    n    =    2;    double  n  =  2;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	4	None	add
33	[BUG]  [BUGGY]  double  a  =  getA(n,  x,  epsilon);  [CE]  cannot  find  symbol  n  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(n,  x,  epsilon);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(n,  x,  epsilon);	      double    a    =    getA(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  n	10	None	replace
34	[BUG]  [BUGGY]  Double  a  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  Double  a  =  getA(x,  epsilon,  maxIterations);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	Double  a  =  getA(x,  epsilon,  maxIterations);	      double    a    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	10	None	replace
35	[BUG]  [BUGGY]  double  a  =  getA(x,  b,  epsilon);  [CE]  cannot  find  symbol  b  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(x,  b,  epsilon);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(x,  b,  epsilon);	      double    a    =    getA(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  b	10	None	replace
36	[BUG]  [BUGGY]  int  n  =  0;  int  n  =  0;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =  0;  int  n  =  0;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int    n    =    0;    int  n  =  0;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	1	None	add
37	[BUG]  [BUGGY]  int  n  =  0;  Int  n  =  0;  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =  0;  Int  n  =  0;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int    n    =    0;    Int  n  =  0;	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
38	[BUG]  [BUGGY]  int  n  =  0;  double  n  =  0;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =  0;  double  n  =  0;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int    n    =    0;    double  n  =  0;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	1	None	add
39	[BUG]  [BUGGY]  int  n  =  0;  n  =  0;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =  0;  n  =  0;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int    n    =    0;    n  =  0;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	1	None	add
40	[BUG]  [BUGGY]  int  a  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  a  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int  a  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      int    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	12	None	replace
41	[BUG]  [BUGGY]  int  a  =  getA(x,  epsilon,  maxIterations,  hN);  [CE]  cannot  find  symbol  hN  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  a  =  getA(x,  epsilon,  maxIterations,  hN);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int  a  =  getA(x,  epsilon,  maxIterations,  hN);	      int    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  hN	12	None	replace
42	[BUG]  [BUGGY]  int  a  =  getA(x,  epsilon,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  a  =  getA(x,  epsilon,  maxIterations,  0);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int  a  =  getA(x,  epsilon,  maxIterations,  0);	      int    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	12	None	replace
43	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  epsilon);  [CE]  cannot  find  symbol  n  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  epsilon);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  epsilon);	      double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  n	11	None	replace
44	[BUG]  [BUGGY]  float  a  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  float  a  =  getA(x,  epsilon,  maxIterations);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	float  a  =  getA(x,  epsilon,  maxIterations);	      int    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	12	None	replace
45	[BUG]  [BUGGY]  int  a  =  getA(x,  epsilon,  maxIterations,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  a  =  getA(x,  epsilon,  maxIterations,  epsilon);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int  a  =  getA(x,  epsilon,  maxIterations,  epsilon);	      int    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	12	None	replace
46	[BUG]  [BUGGY]  double  a  =  getA(x,  epsilon,  maxIterations,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(x,  epsilon,  maxIterations,  epsilon);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(x,  epsilon,  maxIterations,  epsilon);	      double    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	7	None	replace
47	[BUG]  [BUGGY]  double  a  =  getA(x,  epsilon,  maxIterations,  def);  [CE]  cannot  find  symbol  def  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(x,  epsilon,  maxIterations,  def);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(x,  epsilon,  maxIterations,  def);	      double    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  def	7	None	replace
48	[BUG]  [BUGGY]  double  a  =  getA(n,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  n  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(n,  x,  epsilon,  maxIterations);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(n,  x,  epsilon,  maxIterations);	      double    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  n	7	None	replace
49	[BUG]  [BUGGY]  double  dPrev  =  getD(n,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  n  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  dPrev  =  getD(n,  x,  epsilon,  maxIterations);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  dPrev  =  getD(n,  x,  epsilon,  maxIterations);	      double    dPrev    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  n	8	None	replace
50	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations,  defULT_EPSILON);  [CE]  cannot  find  symbol  defULT_EPSILON  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations,  defULT_EPSILON);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  dPrev  =  getA(x,  epsilon,  maxIterations,  defULT_EPSILON);	      double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  defULT_EPSILON	13	None	replace
51	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations,  def);  [CE]  cannot  find  symbol  def  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations,  def);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  dPrev  =  getA(x,  epsilon,  maxIterations,  def);	      double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  def	13	None	replace
52	[BUG]  [BUGGY]  double  n  =  0.0;  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  n  =  0.0;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  n  =  0.0;	  double    n    =    1;    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	3	None	replace
53	[BUG]  [BUGGY]  double  a  =  getB(x,  epsilon,  maxIterations);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getB(x,  epsilon,  maxIterations);  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getB(x,  epsilon,  maxIterations);	      	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	6	None	replace
54	[BUG]  [BUGGY]  double  a  =  getA(x,  epsilon);  final  double  b  =  getB(n,  x);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(x,  epsilon);  final  double  b  =  getB(n,  x);  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(x,  epsilon);  final  double  b  =  getB(n,  x);	      	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	6	None	replace
55	[BUG]  [BUGGY]  [FE]  MaxCountExceededException  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =(maxIterations  >  0)?  maxIterations  :  0;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	add	int  n  =(maxIterations  >  0)?  maxIterations  :  0;	  int    n    =    0;    	compilable	  [FE]  MaxCountExceededException  	2	14	replace
56	[BUG]  [BUGGY]  int  n  =(maxIterations  >  0)?  maxIterations  :  0;  [FE]  MaxCountExceededException  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =(maxIterations  >  0)?  maxIterations  :  0;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int  n  =(maxIterations  >  0)?  maxIterations  :  0;	  int    n    =    0;    	compilable	  [FE]  MaxCountExceededException  	2	14	replace
57	[BUG]  [BUGGY]  double  a  =  getA(x,  epsilon,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(x,  epsilon,  epsilon,  maxIterations);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(x,  epsilon,  epsilon,  maxIterations);	      double    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	7	None	replace
58	[BUG]  [BUGGY]  double  a  =  getA(x,  epsilon,  0,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  a  =  getA(x,  epsilon,  0,  maxIterations);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  a  =  getA(x,  epsilon,  0,  maxIterations);	      double    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	7	None	replace
59	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CE]  cannot  find  symbol  n  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);	      double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  n	11	None	replace
60	[BUG]  [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [CE]  cannot  find  symbol  n  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  y);	      double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  n	11	None	replace
61	[BUG]  [BUGGY]  final  double  a  =  getA(x,  y);  final  double  b  =  getB(x,  y);  [CE]  cannot  find  symbol  y  [FE]                    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  final  double  a  =  getA(x,  y);  final  double  b  =  getB(x,  y);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	final  double  a  =  getA(x,  y);  final  double  b  =  getB(x,  y);	      double    a    =    getA(n,    x);    final    double    b    =    getB(n,    x);    	non-compiled	[CE]  cannot  find  symbol  y	11	None	replace
62	[BUG]  [BUGGY]  int  n  =(maxIterations  >  0)?  maxPower  :  0;  [CE]  cannot  find  symbol  maxPower  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =(maxIterations  >  0)?  maxPower  :  0;  [BUGGY]    double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int  n  =(maxIterations  >  0)?  maxPower  :  0;	  int    n    =    0;    	non-compiled	[CE]  cannot  find  symbol  maxPower	2	None	replace
63	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  n  =  getA(x,  epsilon,  epsilon,  maxIterations);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int  n  =  getA(x,  epsilon,  epsilon,  maxIterations);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	9	None	replace
64	[BUG]  [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations)+  1;  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  dPrev  =  getD(x,  epsilon,  maxIterations)+  1;  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  dPrev  =  getD(x,  epsilon,  maxIterations)+  1;	      double    dPrev    =    getD(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
65	[BUG]  [BUGGY]  int  a  =  getA(x,  epsilon,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  int  a  =  getA(x,  epsilon,  epsilon,  maxIterations);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	int  a  =  getA(x,  epsilon,  epsilon,  maxIterations);	      int    a    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	12	None	replace
66	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  double  dPrev  =  getA(x,  epsilon,  epsilon,  maxIterations);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	double  dPrev  =  getA(x,  epsilon,  epsilon,  maxIterations);	      double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	13	None	replace
67	[BUG]  [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }    [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	132	132	2	replace	Double  dPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      double    dPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	13	None	replace
