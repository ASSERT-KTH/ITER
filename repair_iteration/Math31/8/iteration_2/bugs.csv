bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  MAX_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  MAX_EPSILON;  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  MAX_EPSILON;	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    MAX_EPSILON,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
2	[BUG]  [BUGGY]  n  =  Math.max(0,  n);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(0,  n);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(0,  n);	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    MAX_EPSILON,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
3	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  hN);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(cPrev,  hN);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cPrev,  hN);	      n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
4	[BUG]  [BUGGY]  n  =  Math.max(cN,  hN);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(cN,  hN);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cN,  hN);	      n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
5	[BUG]  [BUGGY]  n  =  Math.max(hN,  cPrev);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(hN,  cPrev);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(hN,  cPrev);	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    maxIterations,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
6	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  q1);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(epsilon,  q1);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(epsilon,  q1);	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    maxIterations,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
7	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(cN,  dPrev);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cN,  dPrev);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
8	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(cN,  dPrev);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(cN,  dPrev);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
9	[BUG]  [BUGGY]  n  =  Math.min(p0,  cN);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(p0,  cN);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(p0,  cN);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
10	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  deltaN,  x);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  deltaN,  x);  }  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  deltaN,  x);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);  }  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  deltaN,  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  deltaN,  x);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  deltaN,  x);	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  n  =  p0.doubleValue();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  p0.doubleValue();  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  p0.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
15	[BUG]  [BUGGY]  n  =  cN.doubleValue();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  cN.doubleValue();  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  cN.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
16	[BUG]  [BUGGY]  n  =  dPrev.doubleValue();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  dPrev.doubleValue();  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  dPrev.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
17	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  dPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(cPrev  -  dPrev)/  dPrev;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  -  dPrev)/  dPrev;	      n    =    Math.abs(dPrev    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
18	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(dPrev  -  cPrev)/  dPrev;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  -  cPrev)/  dPrev;	      n    =    Math.abs(dPrev    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
19	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cN)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(dPrev  -  cN)/  dPrev;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  -  cN)/  dPrev;	      n    =    Math.abs(dPrev    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
20	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(cN  -  dPrev)/  dPrev;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  -  dPrev)/  dPrev;	      n    =    Math.abs(dPrev    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
21	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  dPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(cPrev  -  dPrev)/  DEFAULT_EPSILON;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  -  dPrev)/  DEFAULT_EPSILON;	      n    =    Math.abs(dPrev    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
22	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(cN  -  dPrev)/  DEFAULT_EPSILON;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  -  dPrev)/  DEFAULT_EPSILON;	      n    =    Math.abs(dPrev    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
23	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cN)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(dPrev  -  cN)/  DEFAULT_EPSILON;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  -  cN)/  DEFAULT_EPSILON;	      n    =    Math.abs(dPrev    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
24	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  dPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(dPrev  *  dPrev)/  DEFAULT_EPSILON;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  *  dPrev)/  DEFAULT_EPSILON;	      n    =    Math.abs(dPrev    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
25	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p0);  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p0);  }  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p0);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
26	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  epsilon);  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  epsilon);  }  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
27	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p1);  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p1);  }  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p1);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
28	[BUG]  [BUGGY]  n  =  Math.min(p0,  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(p0,  dPrev);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(p0,  dPrev);	  n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
29	[BUG]  [BUGGY]  n  =  Math.min(cN,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(cN,  p0);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(cN,  p0);	  n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
30	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(cPrev,  p0);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(cPrev,  p0);	  n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
31	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(cPrev,  p0);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cPrev,  p0);	      n    =    Math.max(dPrev,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
32	[BUG]  [BUGGY]  n  =  Math.max(cN,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(cN,  p0);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cN,  p0);	      n    =    Math.max(dPrev,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
33	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  /  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(cPrev  /  dPrev);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  /  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
34	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(dPrev  *  dPrev);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  *  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
35	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(cN  /  dPrev);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  /  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
36	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(dPrev  /  cN);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  /  cN);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
37	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(cPrev  -  dPrev);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  -  dPrev);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
38	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(cN  -  dPrev);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  -  dPrev);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
39	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cN);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(dPrev  -  cN);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  -  cN);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
40	[BUG]  [BUGGY]  n  =  Math.abs(q1  /  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(q1  /  dPrev);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  /  dPrev);	      n    =    Math.abs(dPrev    /    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
41	[BUG]  [BUGGY]  n  =  Math.max(hN,  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(hN,  dPrev);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(hN,  dPrev);	      n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
42	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(dPrev,  q2);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(dPrev,  q2);	      n    =    Math.max(dPrev,    hN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
43	[BUG]  [BUGGY]  n  =  hN.doubleValue();  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  hN.doubleValue();  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  hN.doubleValue();	      n    =    scaleFactor.doubleValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
44	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfIterations();  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  scaleFactor.getNumberOfIterations();  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfIterations();	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
45	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfScales();  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  scaleFactor.getNumberOfScales();  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfScales();	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
46	[BUG]  [BUGGY]  int  n  =  scaleFactor.getNumberOfIterations();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  int  n  =  scaleFactor.getNumberOfIterations();  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	int  n  =  scaleFactor.getNumberOfIterations();	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
47	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfIterations(x);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  scaleFactor.getNumberOfIterations(x);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfIterations(x);	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
48	[BUG]  [BUGGY]  luate(x,  n);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  luate(x,  n);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	luate(x,  n);	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
49	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  q1);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(deltaN,  q1);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(deltaN,  q1);	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
50	[BUG]  [BUGGY]  n  =  Math.min(q1,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(q1,  q2);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(q1,  q2);	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
51	[BUG]  [BUGGY]  n  =  Math.max(n,  q1,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(n,  q1,  q2);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(n,  q1,  q2);	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
52	[BUG]  [BUGGY]  n  =  Math.max(q1,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(q1,  q2);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(q1,  q2);	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    MAX_EPSILON,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
53	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  q1);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(dPrev,  q1);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(dPrev,  q1);	      n    =    Math.max(dPrev,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
54	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  cN);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(epsilon,  cN);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(epsilon,  cN);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
55	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  hN);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(dPrev,  hN);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(dPrev,  hN);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
56	[BUG]  [BUGGY]  n  =  Math.min(q1,  cN);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(q1,  cN);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(q1,  cN);	  n    =    Math.min(dPrev,    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
57	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(epsilon,  p0);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(epsilon,  p0);	  n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
58	[BUG]  [BUGGY]  n  =  Math.min(q1,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(q1,  p0);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(q1,  p0);	  n    =    Math.min(dPrev,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
59	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  dPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(dPrev  *  dPrev)/  dPrev;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  *  dPrev)/  dPrev;	      n    =    Math.abs(dPrev    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
60	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  q2);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(q1  -  q2);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  -  q2);	      n    =    Math.abs(dPrev    -    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
61	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
62	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  maxIterations);  }  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  maxIterations);  }  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
63	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  }  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  }  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
64	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  y);  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  y);  }  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  y);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
65	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon);  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(dPrev,  cN  *  epsilon);	      n    =    Math.max(dPrev,    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
66	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.min(epsilon,  q2);  [BUGGY]      if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(epsilon,  q2);	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    maxIterations,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
67	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;    [BUGGY]  n  =  Math.abs(dPrev  -  cPrev)/  DEFAULT_EPSILON;  [BUGGY]    }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  -  cPrev)/  DEFAULT_EPSILON;	      n    =    Math.abs(dPrev    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
