projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(dPrev,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,maxIterations,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,MAX_EPSILON,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,deltaN,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(dPrev,cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev/dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=MAX_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(0,n);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cPrev,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cN,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(hN,cPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(epsilon,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cN,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cN,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(p0,cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,deltaN,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,deltaN);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,deltaN,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,deltaN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=p0.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=cN.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=dPrev.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev-dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cN)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev-dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cN)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev*dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,p0);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,epsilon);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,p1);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(p0,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cN,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cPrev,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cPrev,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cN,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev/dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev*dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN/dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev/cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev-dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1/dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(hN,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=hN.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfScales();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191intn=scaleFactor.getNumberOfIterations();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191luate(x,n);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(deltaN,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(q1,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(n,q1,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(q1,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(epsilon,cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(dPrev,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(q1,cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(epsilon,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(q1,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev*dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1-q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,epsilon,maxIterations);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,epsilon,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,y);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,cN*epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(epsilon,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cN,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(p0-cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1-cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<=maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,epsilon,maxIterations);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<=maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,epsilon,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<=maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,epsilon,minIterations);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<=maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,epsilon);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(epsilon,cN*dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cN,dPrev*epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,p0*epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,epsilon*cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(p0,cPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cN,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(p0/dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN*dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,maxIterations);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,scaleFactor);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev/q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=p0.doubleValue()+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cN,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(hN,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cN,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(epsilon,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cPrev,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(epsilon,cPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(p0-cN)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1-cN)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cPrev,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNegativeScale();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getMaxCount();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(p0-cPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev-dPrev)/dN;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cPrev)/2;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(p0-cN)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cN)/2;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfScales()+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfScales(p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfScales(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cN,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,p0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=epsilon){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,deltaN,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,cPrev,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,epsilon);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=epsilon){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,deltaN);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=epsilon){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,maxIterations);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=epsilon){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(epsilon,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(p0,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=cPrev.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(p0-dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(p0,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cPrev,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(epsilon,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,y);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,x+1);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev-dPrev)/2;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev*dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev-p0)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(dPrev,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cPrev,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,cPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(epsilon,cPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(p0/cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1/cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cPrev,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev-p0)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev*dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=cN.doubleValue()+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(p0,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(dPrev,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cPrev,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=hN.doubleValue()+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cPrev,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cN,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(epsilon,n);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cN,hPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(p0-cPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1-cPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev*dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev*cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(p0*dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-dPrev)/2;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-p0)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev*cN)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN*dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(p0*dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(p0,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=epsilon){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,deltaN,maxIterations);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,p0,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,epsilon,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,cPrev,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev*cN)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN*dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev*cPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev/cPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=epsilon){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,deltaN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-p0)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(0,n+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(0,scaleFactor);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(0,cPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(0,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191luate(x,n,scaleFactor);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191luate(x,n,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191luate(x,n,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191luate(n,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations(p0,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations(dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations(p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<=maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,y);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<=maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=0;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=MAX_EPSILON+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,MAX_EPSILON);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191intn=scaleFactor.getNumberOfIterations()+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191intn=scaleFactor.getNumberOfIterations(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191intn=scaleFactor.getNumberOfIterations()-1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191intn=this.scaleFactor.getNumberOfIterations();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev-q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(p0-q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1/q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations()+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations()-1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(deltaN,cPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,q1,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cN,q1,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(epsilon,q1,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cPrev,q1,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191luate(x,n,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191luate(x,epsilon,maxIterations);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=epsilon;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=epsilon.getMaxIterations();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev*hN)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(q1,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(epsilon,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev-dPrev)/q2;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1-q2)+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1-cN)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-dPrev)/q2;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,q1,deltaN,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,q1,deltaN,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,hN,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getScaleFactor();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191intn=scaleFactor.getNumberOfScales();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=dPrev.doubleValue()+1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(deltaN,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(i,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(q1,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(hN,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(deltaN,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev*hN)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1*dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(hN,cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(epsilon,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,hN);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,y+1);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,p0);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,hN);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(n,cPrev,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(n,scaleFactor,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(n,cN,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1-q2)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-q1)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,q1,deltaN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,q1,deltaN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=MAX_EPSILON){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,deltaN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,q1,deltaN);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,q1,deltaN);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,hN,deltaN);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1-q2)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-q1)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-dPrev)/hN;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191luate(x,epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=epsilon.getN();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191luate(x,epsilon,maxPower);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,hN*epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191intn=sizeFactor.getNumberOfIterations();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations(deltaN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations(hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q2-cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(0,n*scaleFactor);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(1,n);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(0.0,n);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,q1,deltaN,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,q1,deltaN,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,hN,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(deltaN,cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(p0,p1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q2-dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1*dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cN,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,cN*epsilon+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1-dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,epsilon,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(i,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q2-q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q2-dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(epsilon,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,p1);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,p1,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev/dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=cN.doubleValue()*DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(epsilon,cN+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=MAX_EPSILON*dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q2/dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,epsilon);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,epsilon);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,q1,epsilon);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,q2,epsilon);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=epsilon-1;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(i,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(q1,deltaN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations(epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q2-cN)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(i,q1,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q2-cN)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1-cPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q2-cPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191y=scaleFactor.next();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(epsilon,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev/dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,epsilon,deltaN);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,epsilon,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,epsilon,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q2-cPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q2/cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev/cN+1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q2-dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1-dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=epsilon.maxPower;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(1.0,n);
