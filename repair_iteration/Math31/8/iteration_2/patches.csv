bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  Math.min(cN,  q1);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(cN,  q1);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(cN,  q1);	  n    =    Math.min(cN,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
2	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  cN);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(p0  -  cN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(p0  -  cN);	  n    =    Math.abs(dPrev    -    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
3	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  cN);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  -  cN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  -  cN);	  n    =    Math.abs(dPrev    -    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
4	[BUG]  [BUGGY]  if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  maxIterations);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  maxIterations);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  maxIterations);  }	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    x);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
5	[BUG]  [BUGGY]  if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  }	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    x);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
6	[BUG]  [BUGGY]  if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  minIterations);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  minIterations);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  minIterations);  }	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    x);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
7	[BUG]  [BUGGY]  if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  epsilon);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  epsilon);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  epsilon);  }	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    x);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
8	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  cN  *  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(epsilon,  cN  *  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(epsilon,  cN  *  dPrev);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
9	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev  *  epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(cN,  dPrev  *  epsilon);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cN,  dPrev  *  epsilon);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
10	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  p0  *  epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(dPrev,  p0  *  epsilon);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(dPrev,  p0  *  epsilon);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
11	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  epsilon  *  cN);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(dPrev,  epsilon  *  cN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(dPrev,  epsilon  *  cN);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
12	[BUG]  [BUGGY]  n  =  Math.min(p0,  cPrev);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(p0,  cPrev);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(p0,  cPrev);	  n    =    Math.min(p0,    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
13	[BUG]  [BUGGY]  n  =  Math.max(cN,  epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(cN,  epsilon);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cN,  epsilon);	  n    =    Math.max(cN,    hN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
14	[BUG]  [BUGGY]  n  =  Math.abs(p0  /  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(p0  /  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(p0  /  dPrev);	  n    =    Math.abs(cN    /    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
15	[BUG]  [BUGGY]  n  =  Math.abs(cN  *  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cN  *  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  *  dPrev);	  n    =    Math.abs(cN    /    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
16	[BUG]  [BUGGY]  n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
17	[BUG]  [BUGGY]  n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
18	[BUG]  [BUGGY]  n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  maxIterations);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  maxIterations);  }	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
19	[BUG]  [BUGGY]  n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  scaleFactor);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  scaleFactor);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  scaleFactor);  }	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
20	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  q1);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  /  q1);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  /  q1);	  n    =    Math.abs(q1    /    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
21	[BUG]  [BUGGY]  n  =  p0.doubleValue()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  p0.doubleValue()  +  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  p0.doubleValue()  +  1;	  n    =    p0.doubleValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
22	[BUG]  [BUGGY]  n  =  Math.min(cN,  epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(cN,  epsilon);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(cN,  epsilon);	  n    =    Math.min(epsilon,    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
23	[BUG]  [BUGGY]  n  =  Math.min(hN,  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(hN,  dPrev);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(hN,  dPrev);	  n    =    Math.min(dPrev,    hN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
24	[BUG]  [BUGGY]  n  =  Math.min(cN,  hN);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(cN,  hN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(cN,  hN);	  n    =    Math.min(dPrev,    hN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
25	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  hN);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(epsilon,  hN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(epsilon,  hN);	  n    =    Math.min(dPrev,    hN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
26	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  hN);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(cPrev,  hN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(cPrev,  hN);	  n    =    Math.min(dPrev,    hN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
27	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  cPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(epsilon,  cPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(epsilon,  cPrev);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
28	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  cN)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(p0  -  cN)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(p0  -  cN)/  DEFAULT_EPSILON;	  n    =    Math.abs(dPrev    -    cN)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
29	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  cN)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  -  cN)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  -  cN)/  DEFAULT_EPSILON;	  n    =    Math.abs(dPrev    -    cN)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
30	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  q1);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(cPrev,  q1);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cPrev,  q1);	  n    =    Math.max(cPrev,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
31	[BUG]  [BUGGY]  n  =  scaleFactor.getNegativeScale();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNegativeScale();  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNegativeScale();	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    p0);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
32	[BUG]  [BUGGY]  n  =  scaleFactor.getMaxCount();  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getMaxCount();  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getMaxCount();	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    p0);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
33	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  cPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(p0  -  cPrev)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(p0  -  cPrev)/  dPrev;	  n    =    Math.abs(dPrev    -    cPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
34	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  dPrev)/  dN;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cPrev  -  dPrev)/  dN;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  -  dPrev)/  dN;	  n    =    Math.abs(dPrev    -    cPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
35	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cPrev)/  2;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  -  cPrev)/  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  -  cPrev)/  2;	  n    =    Math.abs(dPrev    -    cPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
36	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  cN)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(p0  -  cN)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(p0  -  cN)/  dPrev;	  n    =    Math.abs(dPrev    -    cN)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
37	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cN)/  2;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  -  cN)/  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  -  cN)/  2;	  n    =    Math.abs(dPrev    -    cN)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
38	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfScales()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNumberOfScales()  +  1;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfScales()  +  1;	  n    =    scaleFactor.getNumberOfScales();    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
39	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfScales(p0);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNumberOfScales(p0);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfScales(p0);	  n    =    scaleFactor.getNumberOfScales();    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
40	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfScales(x);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNumberOfScales(x);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfScales(x);	  n    =    scaleFactor.getNumberOfScales();    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
41	[BUG]  [BUGGY]  n  =  Math.max(cN,  q1);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(cN,  q1);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cN,  q1);	  n    =    Math.max(dPrev,    q1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
42	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  p0,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  p0,  x);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  p0,  x);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
43	[BUG]  [BUGGY]  n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  deltaN,  maxIterations);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  deltaN,  maxIterations);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  deltaN,  maxIterations);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
44	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  cPrev,  x);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  cPrev,  x);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  cPrev,  x);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
45	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  epsilon);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  epsilon);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  epsilon);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
47	[BUG]  [BUGGY]  n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  maxIterations);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  maxIterations);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
48	[BUG]  [BUGGY]  n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  maxIterations);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  maxIterations);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  maxIterations);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
49	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  q1);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(epsilon,  q1);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(epsilon,  q1);	  n    =    Math.max(q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
50	[BUG]  [BUGGY]  n  =  Math.max(p0,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(p0,  p0);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(p0,  p0);	  n    =    Math.max(q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
51	[BUG]  [BUGGY]  n  =  cPrev.doubleValue();  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  cPrev.doubleValue();  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  cPrev.doubleValue();	  n    =    dPrev.doubleValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
52	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cPrev);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  -  cPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  -  cPrev);	  n    =    Math.abs(cPrev    -    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
53	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(p0  -  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(p0  -  dPrev);	  n    =    Math.abs(cPrev    -    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
54	[BUG]  [BUGGY]  n  =  Math.min(p0,  epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(p0,  epsilon);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(p0,  epsilon);	  n    =    Math.min(epsilon,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
55	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(cPrev,  dPrev);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(cPrev,  dPrev);	  n    =    Math.min(p0,    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
56	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(epsilon,  dPrev);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(epsilon,  dPrev);	  n    =    Math.min(p0,    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
57	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  y);  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  y);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  y);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    epsilon);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
58	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x  +  1);  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x  +  1);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x  +  1);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    epsilon);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
59	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  dPrev)/  2;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cPrev  -  dPrev)/  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  -  dPrev)/  2;	  n    =    Math.abs(cPrev    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
60	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  *  dPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cPrev  *  dPrev)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  *  dPrev)/  DEFAULT_EPSILON;	  n    =    Math.abs(cPrev    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
61	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  p0)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cPrev  -  p0)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  -  p0)/  DEFAULT_EPSILON;	  n    =    Math.abs(cPrev    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
62	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  q1);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(dPrev,  q1);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(dPrev,  q1);	  n    =    Math.min(epsilon,    q1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
63	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  q1);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(cPrev,  q1);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(cPrev,  q1);	  n    =    Math.min(epsilon,    q1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
64	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cPrev);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(dPrev,  cPrev);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(dPrev,  cPrev);	  n    =    Math.max(hN,    cPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
65	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  cPrev);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(epsilon,  cPrev);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(epsilon,  cPrev);	  n    =    Math.max(hN,    cPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
66	[BUG]  [BUGGY]  n  =  Math.abs(p0  /  cN);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(p0  /  cN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(p0  /  cN);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
67	[BUG]  [BUGGY]  n  =  Math.abs(q1  /  cN);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  /  cN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  /  cN);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
68	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(cPrev,  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cPrev,  dPrev);	  n    =    Math.max(cPrev,    hN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
69	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  p0)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cPrev  -  p0)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  -  p0)/  dPrev;	  n    =    Math.abs(cPrev    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
70	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  *  dPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cPrev  *  dPrev)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  *  dPrev)/  dPrev;	  n    =    Math.abs(cPrev    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
71	[BUG]  [BUGGY]  n  =  cN.doubleValue()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  cN.doubleValue()  +  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  cN.doubleValue()  +  1;	  n    =    cN.doubleValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
72	[BUG]  [BUGGY]  n  =  Math.min(p0,  q1);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(p0,  q1);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(p0,  q1);	  n    =    Math.min(q1,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
73	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(dPrev,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(dPrev,  q2);	  n    =    Math.min(epsilon,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
74	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(cPrev,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(cPrev,  q2);	  n    =    Math.min(epsilon,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
75	[BUG]  [BUGGY]  n  =  hN.doubleValue()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  hN.doubleValue()  +  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  hN.doubleValue()  +  1;	  n    =    hN.doubleValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
76	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(cPrev,  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cPrev,  q2);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
77	[BUG]  [BUGGY]  n  =  Math.max(cN,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(cN,  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cN,  q2);	  n    =    Math.max(dPrev,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
78	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(dPrev,  epsilon);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(dPrev,  epsilon);	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    maxIterations);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
79	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  n);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(epsilon,  n);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(epsilon,  n);	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    maxIterations);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
80	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  p0);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cN  -  p0);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  -  p0);	  n    =    Math.abs(cN    -    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
81	[BUG]  [BUGGY]  n  =  Math.max(cN,  hPrev);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(cN,  hPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cN,  hPrev);	  n    =    Math.max(cN,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
82	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  cPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(p0  -  cPrev)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(p0  -  cPrev)/  DEFAULT_EPSILON;	  n    =    Math.abs(dPrev    -    cPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
83	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  cPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  -  cPrev)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  -  cPrev)/  DEFAULT_EPSILON;	  n    =    Math.abs(dPrev    -    cPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
84	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  *  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cPrev  *  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  *  dPrev);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
85	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  cN);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  *  cN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  *  cN);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
86	[BUG]  [BUGGY]  n  =  Math.abs(p0  *  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(p0  *  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(p0  *  dPrev);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
87	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev)/  2;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cN  -  dPrev)/  2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  -  dPrev)/  2;	  n    =    Math.abs(cN    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
88	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  p0)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cN  -  p0)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  -  p0)/  DEFAULT_EPSILON;	  n    =    Math.abs(cN    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
89	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  cN)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  *  cN)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  *  cN)/  DEFAULT_EPSILON;	  n    =    Math.abs(dPrev    *    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
90	[BUG]  [BUGGY]  n  =  Math.abs(cN  *  dPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cN  *  dPrev)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  *  dPrev)/  DEFAULT_EPSILON;	  n    =    Math.abs(dPrev    *    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
91	[BUG]  [BUGGY]  n  =  Math.abs(p0  *  dPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(p0  *  dPrev)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(p0  *  dPrev)/  DEFAULT_EPSILON;	  n    =    Math.abs(dPrev    *    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
92	[BUG]  [BUGGY]  n  =  Math.min(p0,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(p0,  p0);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(p0,  p0);	  n    =    Math.min(q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
93	[BUG]  [BUGGY]  n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  deltaN,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  deltaN,  maxIterations);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  deltaN,  maxIterations);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
94	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  p0,  x);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  p0,  x);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  p0,  x);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
95	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
96	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  cPrev,  x);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  cPrev,  x);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  cPrev,  x);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
97	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  cN)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  *  cN)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  *  cN)/  dPrev;	  n    =    Math.abs(dPrev    *    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
98	[BUG]  [BUGGY]  n  =  Math.abs(cN  *  dPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cN  *  dPrev)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  *  dPrev)/  dPrev;	  n    =    Math.abs(dPrev    *    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
99	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  cPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  *  cPrev)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  *  cPrev)/  dPrev;	  n    =    Math.abs(dPrev    *    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
100	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cPrev);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  /  cPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  /  cPrev);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
101	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  epsilon);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  epsilon);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
102	[BUG]  [BUGGY]  n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  epsilon)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
103	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  p0)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cN  -  p0)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  -  p0)/  dPrev;	  n    =    Math.abs(cN    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
104	[BUG]  [BUGGY]  n  =  Math.max(0,  n  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(0,  n  +  1);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(0,  n  +  1);	  n    =    Math.max(0,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
105	[BUG]  [BUGGY]  n  =  Math.max(0,  scaleFactor);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(0,  scaleFactor);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(0,  scaleFactor);	  n    =    Math.max(0,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
106	[BUG]  [BUGGY]  n  =  Math.max(0,  cPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(0,  cPrev);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(0,  cPrev);	  n    =    Math.max(0,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
107	[BUG]  [BUGGY]  n  =  Math.max(0,  hN);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(0,  hN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(0,  hN);	  n    =    Math.max(0,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
108	[BUG]  [BUGGY]  luate(x,  n,  scaleFactor);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  luate(x,  n,  scaleFactor);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	luate(x,  n,  scaleFactor);	  luate(x,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
109	[BUG]  [BUGGY]  luate(x,  n,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  luate(x,  n,  p0);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	luate(x,  n,  p0);	  luate(x,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
110	[BUG]  [BUGGY]  luate(x,  n,  epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  luate(x,  n,  epsilon);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	luate(x,  n,  epsilon);	  luate(x,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
111	[BUG]  [BUGGY]  luate(n,  x);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  luate(n,  x);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	luate(n,  x);	  luate(x,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
112	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfIterations(x,  epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNumberOfIterations(x,  epsilon);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfIterations(x,  epsilon);	  n    =    scaleFactor.getNumberOfIterations(x);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
113	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfIterations(p0,  x);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNumberOfIterations(p0,  x);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfIterations(p0,  x);	  n    =    scaleFactor.getNumberOfIterations(x);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
114	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfIterations(dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNumberOfIterations(dPrev);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfIterations(dPrev);	  n    =    scaleFactor.getNumberOfIterations(x);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
115	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfIterations(p0);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNumberOfIterations(p0);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfIterations(p0);	  n    =    scaleFactor.getNumberOfIterations(x);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
116	[BUG]  [BUGGY]  if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  y);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  y);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  y);  }	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    y);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
117	[BUG]  [BUGGY]  if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  =  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  x);  }	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    y);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
118	[BUG]  [BUGGY]  n  =  0;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  0;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  0;	  n    =    MAX_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
119	[BUG]  [BUGGY]  n  =  MAX_EPSILON  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  MAX_EPSILON  +  1;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  MAX_EPSILON  +  1;	  n    =    MAX_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
120	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  MAX_EPSILON);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(dPrev,  MAX_EPSILON);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(dPrev,  MAX_EPSILON);	  n    =    MAX_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
121	[BUG]  [BUGGY]  n  =  1;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  1;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  1;	  n    =    MAX_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
122	[BUG]  [BUGGY]  int  n  =  scaleFactor.getNumberOfIterations()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  int  n  =  scaleFactor.getNumberOfIterations()  +  1;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	int  n  =  scaleFactor.getNumberOfIterations()  +  1;	  int    n    =    scaleFactor.getNumberOfIterations();    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
123	[BUG]  [BUGGY]  int  n  =  scaleFactor.getNumberOfIterations(x);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  int  n  =  scaleFactor.getNumberOfIterations(x);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	int  n  =  scaleFactor.getNumberOfIterations(x);	  int    n    =    scaleFactor.getNumberOfIterations();    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
124	[BUG]  [BUGGY]  int  n  =  scaleFactor.getNumberOfIterations()  -  1;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  int  n  =  scaleFactor.getNumberOfIterations()  -  1;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	int  n  =  scaleFactor.getNumberOfIterations()  -  1;	  int    n    =    scaleFactor.getNumberOfIterations();    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
125	[BUG]  [BUGGY]  int  n  =  this.scaleFactor.getNumberOfIterations();  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  int  n  =  this.scaleFactor.getNumberOfIterations();  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	int  n  =  this.scaleFactor.getNumberOfIterations();	  int    n    =    scaleFactor.getNumberOfIterations();    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
126	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  q2);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cPrev  -  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  -  q2);	  n    =    Math.abs(q1    -    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
127	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(p0  -  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(p0  -  q2);	  n    =    Math.abs(q1    -    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
128	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  -  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  -  q2);	  n    =    Math.abs(q1    -    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
129	[BUG]  [BUGGY]  n  =  Math.abs(q1  /  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  /  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  /  q2);	  n    =    Math.abs(q1    -    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
130	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfIterations()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNumberOfIterations()  +  1;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfIterations()  +  1;	  n    =    scaleFactor.getNumberOfIterations();    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
131	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfIterations()  -  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNumberOfIterations()  -  1;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfIterations()  -  1;	  n    =    scaleFactor.getNumberOfIterations();    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
132	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  cPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(deltaN,  cPrev);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(deltaN,  cPrev);	  n    =    Math.min(deltaN,    q1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
133	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  q1,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(dPrev,  q1,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(dPrev,  q1,  q2);	  n    =    Math.max(n,    q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
134	[BUG]  [BUGGY]  n  =  Math.max(cN,  q1,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(cN,  q1,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cN,  q1,  q2);	  n    =    Math.max(n,    q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
135	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  q1,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(epsilon,  q1,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(epsilon,  q1,  q2);	  n    =    Math.max(n,    q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
136	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  q1,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(cPrev,  q1,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(cPrev,  q1,  q2);	  n    =    Math.max(n,    q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
137	[BUG]  [BUGGY]  luate(x,  n,  hN);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  luate(x,  n,  hN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	luate(x,  n,  hN);	  luate(x,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
138	[BUG]  [BUGGY]  luate(x,  epsilon,  maxIterations);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  luate(x,  epsilon,  maxIterations);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	luate(x,  epsilon,  maxIterations);	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    maxIterations);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
139	[BUG]  [BUGGY]  n  =  epsilon;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  epsilon;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  epsilon;	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    maxIterations);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
140	[BUG]  [BUGGY]  n  =  epsilon.getMaxIterations();  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  epsilon.getMaxIterations();  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  epsilon.getMaxIterations();	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    maxIterations);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
141	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  hN)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  *  hN)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  *  hN)/  dPrev;	  n    =    Math.abs(dPrev    *    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
142	[BUG]  [BUGGY]  n  =  Math.min(q1,  epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(q1,  epsilon);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(q1,  epsilon);	  n    =    Math.min(epsilon,    q1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
143	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(epsilon,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(epsilon,  q2);	  n    =    Math.max(q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
144	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  dPrev)/  q2;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cPrev  -  dPrev)/  q2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cPrev  -  dPrev)/  q2;	  n    =    Math.abs(dPrev    -    cPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
145	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  q2)+1;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  -  q2)+1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  -  q2)+1;	  n    =    Math.abs(q1    -    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
146	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  cN)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  -  cN)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  -  cN)/  dPrev;	  n    =    Math.abs(dPrev    -    cN)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
147	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev)/  q2;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cN  -  dPrev)/  q2;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  -  dPrev)/  q2;	  n    =    Math.abs(dPrev    -    cN)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
148	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN,  x);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN,  x);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
149	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN,  x);  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN,  x);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN,  x);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    	non-compiled	[CE]  >  expected	12	None	replace
150	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  hN,  x);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  hN,  x);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  hN,  x);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
151	[BUG]  [BUGGY]  n  =  scaleFactor.getScaleFactor();  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getScaleFactor();  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getScaleFactor();	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
152	[BUG]  [BUGGY]  int  n  =  scaleFactor.getNumberOfScales();  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  int  n  =  scaleFactor.getNumberOfScales();  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	int  n  =  scaleFactor.getNumberOfScales();	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
153	[BUG]  [BUGGY]  n  =  dPrev.doubleValue()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  dPrev.doubleValue()  +  1;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  dPrev.doubleValue()  +  1;	  n    =    dPrev.doubleValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
154	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(deltaN,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(deltaN,  q2);	  n    =    Math.min(q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
155	[BUG]  [BUGGY]  n  =  Math.min(i,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(i,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(i,  q2);	  n    =    Math.min(q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
156	[BUG]  [BUGGY]  n  =  Math.max(q1,  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(q1,  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(q1,  dPrev);	  n    =    Math.max(dPrev,    q1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
157	[BUG]  [BUGGY]  n  =  Math.min(hN,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(hN,  p0);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(hN,  p0);	  n    =    Math.min(q1,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
158	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(deltaN,  p0);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(deltaN,  p0);	  n    =    Math.min(deltaN,    q1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
159	[BUG]  [BUGGY]  n  =  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  DEFAULT_EPSILON;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  DEFAULT_EPSILON;	  n    =    MAX_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
160	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  hN)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  *  hN)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  *  hN)/  DEFAULT_EPSILON;	  n    =    Math.abs(dPrev    *    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
161	[BUG]  [BUGGY]  n  =  Math.abs(q1  *  dPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  *  dPrev)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  *  dPrev)/  DEFAULT_EPSILON;	  n    =    Math.abs(dPrev    *    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
162	[BUG]  [BUGGY]  n  =  Math.max(hN,  cN);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(hN,  cN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(hN,  cN);	  n    =    Math.max(cN,    hN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
163	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  hN);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(epsilon,  hN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(epsilon,  hN);	  n    =    Math.max(cN,    hN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
164	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  hN);  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  hN);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  hN);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    p1);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
165	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  y  +  1);  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  y  +  1);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  y  +  1);  }	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    y);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
166	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p0);  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p0);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p0);  }	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    y);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
167	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  hN);  }  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  hN);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  hN);  }	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    y);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
168	[BUG]  [BUGGY]  n  =  Math.max(n,  cPrev,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(n,  cPrev,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(n,  cPrev,  q2);	  n    =    Math.max(n,    q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
169	[BUG]  [BUGGY]  n  =  Math.max(n,  scaleFactor,  q1);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(n,  scaleFactor,  q1);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(n,  scaleFactor,  q1);	  n    =    Math.max(n,    q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
170	[BUG]  [BUGGY]  n  =  Math.max(n,  cN,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(n,  cN,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(n,  cN,  q2);	  n    =    Math.max(n,    q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
171	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  q2)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  -  q2)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  -  q2)/  DEFAULT_EPSILON;	  n    =    Math.abs(cN    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
172	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  q1)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cN  -  q1)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  -  q1)/  DEFAULT_EPSILON;	  n    =    Math.abs(cN    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
173	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
174	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN);  [CE]  >  expected  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    	non-compiled	[CE]  >  expected	13	None	replace
175	[BUG]  [BUGGY]  n  <  =  MAX_EPSILON)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  MAX_EPSILON)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  MAX_EPSILON)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  deltaN);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
176	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
177	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN);  }  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    }    	non-compiled	[CE]  >  expected	11	None	replace
178	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  hN,  deltaN);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  hN,  deltaN);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  hN,  deltaN);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
179	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  q2)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  -  q2)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  -  q2)/  dPrev;	  n    =    Math.abs(cN    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
180	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  q1)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cN  -  q1)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  -  q1)/  dPrev;	  n    =    Math.abs(cN    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
181	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  dPrev)/  hN;  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cN  -  dPrev)/  hN;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  -  dPrev)/  hN;	  n    =    Math.abs(cN    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
182	[BUG]  [BUGGY]  luate(x,  epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  luate(x,  epsilon);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	luate(x,  epsilon);	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	replace
183	[BUG]  [BUGGY]  n  =  epsilon.getN();  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  epsilon.getN();  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  epsilon.getN();	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	replace
184	[BUG]  [BUGGY]  luate(x,  epsilon,  maxPower);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  luate(x,  epsilon,  maxPower);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	luate(x,  epsilon,  maxPower);	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	replace
185	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  hN  *  epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(dPrev,  hN  *  epsilon);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(dPrev,  hN  *  epsilon);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
186	[BUG]  [BUGGY]  int  n  =  sizeFactor.getNumberOfIterations();  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  int  n  =  sizeFactor.getNumberOfIterations();  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	int  n  =  sizeFactor.getNumberOfIterations();	  int    n    =    scaleFactor.getNumberOfIterations();    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
187	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfIterations(deltaN);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNumberOfIterations(deltaN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfIterations(deltaN);	  n    =    scaleFactor.getNumberOfIterations(x);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
188	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfIterations(hN);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNumberOfIterations(hN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfIterations(hN);	  n    =    scaleFactor.getNumberOfIterations(x);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
189	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  cN);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q2  -  cN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q2  -  cN);	  n    =    Math.abs(dPrev    -    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
190	[BUG]  [BUGGY]  n  =  Math.max(0,  n  *  scaleFactor);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(0,  n  *  scaleFactor);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(0,  n  *  scaleFactor);	  n    =    Math.max(0,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
191	[BUG]  [BUGGY]  n  =  Math.max(1,  n);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(1,  n);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(1,  n);	  n    =    Math.max(0,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
192	[BUG]  [BUGGY]  n  =  Math.max(0.0,  n);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(0.0,  n);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(0.0,  n);	  n    =    Math.max(0,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
193	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN,  x);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN,  x);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN,  x);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
194	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN,  x);  }  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN,  x);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  deltaN,  x);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  >  expected	10	None	replace
195	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  hN,  x);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  hN,  x);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  hN,  x);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
196	[BUG]  [BUGGY]  n  =  Math.min(deltaN,  cN);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(deltaN,  cN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(deltaN,  cN);	  n    =    Math.min(epsilon,    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
197	[BUG]  [BUGGY]  n  =  Math.min(p0,  p1);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(p0,  p1);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(p0,  p1);	  n    =    Math.min(p0,    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
198	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q2  -  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q2  -  dPrev);	  n    =    Math.abs(cN    -    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
199	[BUG]  [BUGGY]  n  =  Math.abs(q1  *  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  *  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  *  dPrev);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
200	[BUG]  [BUGGY]  n  =  Math.min(cN,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(cN,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(cN,  q2);	  n    =    Math.min(cN,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
201	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(dPrev,  cN  *  epsilon  +  1);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(dPrev,  cN  *  epsilon  +  1);	  n    =    Math.max(dPrev,    cN    *    epsilon);    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
202	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  -  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  -  dPrev);	  n    =    Math.abs(cN    -    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	replace
203	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  }  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    }    	non-compiled	[CE]  >  expected	10	None	replace
204	[BUG]  [BUGGY]  n  =  Math.min(i,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(i,  p0);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(i,  p0);	  n    =    Math.min(q1,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
205	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  q2);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(cN  -  q2);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(cN  -  q2);	  n    =    Math.abs(q1    -    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
206	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  q1);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q2  -  q1);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q2  -  q1);	  n    =    Math.abs(q1    -    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
207	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  dPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q2  -  dPrev)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q2  -  dPrev)/  DEFAULT_EPSILON;	  n    =    Math.abs(cN    -    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
208	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  p0);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(epsilon,  p0);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(epsilon,  p0);	  n    =    Math.max(cPrev,    p0);    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
209	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p1);  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p1);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p1);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    p1);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
210	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p1,  x);  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p1,  x);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  p1,  x);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    p1);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
211	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  dPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  /  dPrev)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  /  dPrev)/  dPrev;	  n    =    Math.abs(dPrev    *    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
212	[BUG]  [BUGGY]  n  =  cN.doubleValue()  *  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  cN.doubleValue()  *  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  cN.doubleValue()  *  DEFAULT_EPSILON;	  n    =    cN.doubleValue();    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
213	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  cN  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(epsilon,  cN  +  1);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(epsilon,  cN  +  1);	  n    =    Math.min(epsilon,    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
214	[BUG]  [BUGGY]  n  =  MAX_EPSILON  *  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  MAX_EPSILON  *  dPrev;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  MAX_EPSILON  *  dPrev;	  n    =    MAX_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
215	[BUG]  [BUGGY]  n  =  Math.abs(q2  /  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q2  /  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q2  /  dPrev);	  n    =    Math.abs(cN    /    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
216	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  epsilon);  }  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  epsilon);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  scaleFactor,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    epsilon);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
217	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  epsilon);  }  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  epsilon);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  x,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    epsilon);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
218	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  epsilon);  }  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  epsilon);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q1,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    epsilon);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
219	[BUG]  [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q2,  epsilon);  }  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q2,  epsilon);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	if(n  <  maxPower)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  q2,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    epsilon);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
220	[BUG]  [BUGGY]  n  =  epsilon  -  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  epsilon  -  1;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  epsilon  -  1;	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    maxIterations);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
221	[BUG]  [BUGGY]  n  =  Math.min(i,  q1);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(i,  q1);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(i,  q1);	  n    =    Math.min(deltaN,    q1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
222	[BUG]  [BUGGY]  n  =  Math.min(q1,  deltaN);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(q1,  deltaN);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(q1,  deltaN);	  n    =    Math.min(deltaN,    q1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
223	[BUG]  [BUGGY]  n  =  scaleFactor.getNumberOfIterations(epsilon);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  scaleFactor.getNumberOfIterations(epsilon);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  scaleFactor.getNumberOfIterations(epsilon);	  n    =    scaleFactor.getNumberOfIterations(x);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
224	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  cN)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q2  -  cN)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q2  -  cN)/  dPrev;	  n    =    Math.abs(dPrev    -    cN)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
225	[BUG]  [BUGGY]  n  =  Math.min(i,  q1,  q2);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.min(i,  q1,  q2);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.min(i,  q1,  q2);	  n    =    Math.max(n,    q1,    q2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
226	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  cN)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q2  -  cN)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q2  -  cN)/  DEFAULT_EPSILON;	  n    =    Math.abs(dPrev    -    cN)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
227	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  cPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  -  cPrev)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  -  cPrev)/  dPrev;	  n    =    Math.abs(dPrev    -    cPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
228	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  cPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q2  -  cPrev)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q2  -  cPrev)/  dPrev;	  n    =    Math.abs(dPrev    -    cPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
229	[BUG]  [BUGGY]  y  =  scaleFactor.next();  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  y  =  scaleFactor.next();  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	y  =  scaleFactor.next();	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    scaleFactor,    y);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
230	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  dPrev);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(epsilon,  dPrev);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(epsilon,  dPrev);	  n    =    Math.max(hN,    dPrev);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
231	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  dPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  /  dPrev)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  /  dPrev)/  DEFAULT_EPSILON;	  n    =    Math.abs(dPrev    *    dPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
232	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  deltaN);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  deltaN);  }  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  deltaN);  }	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    x,    deltaN);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
233	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  =  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
234	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  <  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  epsilon,  x);	  n    <    =    maxIterations)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    deltaN,    x);    	non-compiled	[CE]  >  expected	12	None	replace
235	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  cPrev)/  DEFAULT_EPSILON;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q2  -  cPrev)/  DEFAULT_EPSILON;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q2  -  cPrev)/  DEFAULT_EPSILON;	  n    =    Math.abs(dPrev    -    cPrev)/    DEFAULT_EPSILON;    	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	replace
236	[BUG]  [BUGGY]  n  =  Math.abs(q2  /  cN);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q2  /  cN);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q2  /  cN);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
237	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(dPrev  /  cN  +  1);  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(dPrev  /  cN  +  1);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
238	[BUG]  [BUGGY]  n  =  Math.abs(q2  -  dPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q2  -  dPrev)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q2  -  dPrev)/  dPrev;	  n    =    Math.abs(cPrev    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
239	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  dPrev)/  dPrev;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.abs(q1  -  dPrev)/  dPrev;  [BUGGY]      }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.abs(q1  -  dPrev)/  dPrev;	  n    =    Math.abs(cN    -    dPrev)/    dPrev;    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
240	[BUG]  [BUGGY]  n  =  epsilon.maxPower;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  epsilon.maxPower;  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  epsilon.maxPower;	  if(n    <    maxPower)    {    throw    new    MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,    epsilon,    x);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	replace
241	[BUG]  [BUGGY]  n  =  Math.max(1.0,  n);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;      [BUGGY]  n  =  Math.max(1.0,  n);  [BUGGY]        if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	n  =  Math.max(1.0,  n);	  n    =    Math.max(0,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
