projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(dPrev,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,maxIterations,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,MAX_EPSILON,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,deltaN,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(dPrev,cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev/dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=MAX_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(0,n);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cPrev,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cN,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(hN,cPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(epsilon,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cN,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cN,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(p0,cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,deltaN,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,deltaN);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,deltaN,x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n<=maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,x,deltaN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=p0.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=cN.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=dPrev.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev-dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cN)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev-dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cN)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev*dPrev)/DEFAULT_EPSILON;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,p0);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,epsilon);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxIterations){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,p1);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(p0,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cN,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(cPrev,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cPrev,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(cN,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev/dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev*dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN/dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev/cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cPrev-dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(cN-dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1/dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(hN,dPrev);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=hN.doubleValue();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfScales();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191intn=scaleFactor.getNumberOfIterations();
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=scaleFactor.getNumberOfIterations(x);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191luate(x,n);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(deltaN,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(q1,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(n,q1,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(q1,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,q1);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(epsilon,cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(dPrev,hN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(q1,cN);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(epsilon,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(q1,p0);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev*dPrev)/dPrev;
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(q1-q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,epsilon,maxIterations);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,epsilon,x);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191if(n<maxPower){thrownewMaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,scaleFactor,y);}
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.max(dPrev,cN*epsilon);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.min(epsilon,q2);
projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java191n=Math.abs(dPrev-cPrev)/DEFAULT_EPSILON;
