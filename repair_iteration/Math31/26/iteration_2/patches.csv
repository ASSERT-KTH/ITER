bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  q1  *  cN  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q1  *  cN  /  cPrev;	  final    double    deltaN    =    cN    *    q1    /    cPrev;    timeout    	compilable	timeout	10	1	replace
2	[BUG]  [BUGGY]  final  double  deltaN  =  q1  *  cN  /  cPrev;  timeout  [FE]              AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  q1  *  cN  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q1  *  cN  /  cPrev;	  final    double    deltaN    =    cN    *    q1    /    cPrev;    timeout    	compilable	timeout	10	1	replace
3	[BUG]  [BUGGY]  timeout  [FE]            AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  dPrev  *  q2  /  cN;	  final    double    deltaN    =    q2    *    dPrev    /    cN;    timeout    	compilable	timeout	139	1	replace
4	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cN;  timeout  [FE]            AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  dPrev  *  q2  /  cN;	  final    double    deltaN    =    q2    *    dPrev    /    cN;    timeout    	compilable	timeout	139	1	replace
5	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  q2);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  q2);  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  dPrev  /  q2);	  final    double    deltaN    =    q2    *    dPrev    /    cN;    timeout    	non-compiled	[CE]  ';'  expected	139	None	replace
6	[BUG]  [BUGGY]  final  double  q1  =  q1  /  cPrev  /  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  q1  =  q1  /  cPrev  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  q1  =  q1  /  cPrev  /  cN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    final    double    q1    =    q1    /    cPrev    /    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	30	None	replace
7	[BUG]  [BUGGY]  final  double  q1  =  cN  /  cPrev  /  q1;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  q1  =  cN  /  cPrev  /  q1;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  q1  =  cN  /  cPrev  /  q1;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    final    double    q1    =    q1    /    cPrev    /    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	30	None	replace
8	[BUG]  [BUGGY]  final  double  q1  =  q2  /  cPrev  /  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                          AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  q1  =  q2  /  cPrev  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  q1  =  q2  /  cPrev  /  cN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    final    double    q1    =    q1    /    cPrev    /    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	30	None	replace
9	[BUG]  [BUGGY]  final  double  q1  =  cN  /  cPrev  /  deltaN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                            AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  q1  =  cN  /  cPrev  /  deltaN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  q1  =  cN  /  cPrev  /  deltaN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    final    double    q1    =    q1    /    cPrev    /    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	30	None	replace
10	[BUG]  [BUGGY]  double  cN  =  q2  /  scaleFactor  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  double  cN  =  q2  /  scaleFactor  /  cPrev;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  q2  /  scaleFactor  /  cPrev;	  double    cN    =    scaleFactor    /    q2    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	95	None	replace
11	[BUG]  [BUGGY]  double  cN  =  scaleFactor  /  q1  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  double  cN  =  scaleFactor  /  q1  /  cPrev;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  scaleFactor  /  q1  /  cPrev;	  double    cN    =    scaleFactor    /    q2    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	95	None	replace
12	[BUG]  [BUGGY]  double  cN  =  b  /  q1  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  double  cN  =  b  /  q1  /  cPrev;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  b  /  q1  /  cPrev;	  double    cN    =    cN    /    q1    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	94	None	replace
13	[BUG]  [BUGGY]  double  cN  =  dPrev  /  q1  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  double  cN  =  dPrev  /  q1  /  cPrev;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  dPrev  /  q1  /  cPrev;	  double    cN    =    cN    /    q1    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	94	None	replace
14	[BUG]  [BUGGY]  double  cN  =  q1  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  double  cN  =  q1  /  cPrev;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  q1  /  cPrev;	  double    cN    =    cN    /    q1    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	94	None	replace
15	[BUG]  [BUGGY]  double  cN  =  q2  /  dPrev  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  double  cN  =  q2  /  dPrev  /  cPrev;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  q2  /  dPrev  /  cPrev;	  double    cN    =    cN    /    dPrev    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	174	None	replace
16	[BUG]  [BUGGY]  double  cN  =  cN  /  dPrev  /  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  double  cN  =  cN  /  dPrev  /  dPrev;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  cN  /  dPrev  /  dPrev;	  double    cN    =    cN    /    dPrev    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	174	None	replace
17	[BUG]  [BUGGY]  double  cN  =  cN  /  dPrev  /  q2;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  double  cN  =  cN  /  dPrev  /  q2;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  cN  /  dPrev  /  q2;	  double    cN    =    cN    /    dPrev    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	174	None	replace
18	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  final  double  deltaN  =  cN  *  q1  /  cPrev;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  final  double  deltaN  =  cN  *  q1  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q1    /    cPrev;    final  double  deltaN  =  cN  *  q1  /  cPrev;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
19	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  final  double  cN  =  cN  *  q1  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  final  double  cN  =  cN  *  q1  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q1    /    cPrev;    final  double  cN  =  cN  *  q1  /  cPrev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
20	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  final  double  q1  =  cN  *  q1  /  cPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  final  double  q1  =  cN  *  q1  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q1    /    cPrev;    final  double  q1  =  cN  *  q1  /  cPrev;	  timeout    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
21	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  final  double  qN  =  cN  *  q1  /  cPrev;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  final  double  qN  =  cN  *  q1  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q1    /    cPrev;    final  double  qN  =  cN  *  q1  /  cPrev;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
22	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  final  double  hN  =  cN  *  q1  /  cPrev;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  final  double  hN  =  cN  *  q1  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q1    /    cPrev;    final  double  hN  =  cN  *  q1  /  cPrev;	  timeout    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
23	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2);  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  cPrev  /  q2);	  final    double    deltaN    =    cN    *    cPrev    /    q2;    final    double    deltaN    =    cN    *    cPrev    /    q2;    	non-compiled	[CE]  ';'  expected	71	None	replace
24	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2,  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2,  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  cPrev  /  q2,  cN;	  final    double    deltaN    =    cN    *    cPrev    /    q2;    final    double    deltaN    =    cN    *    cPrev    /    q2;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	71	None	replace
25	[BUG]  [BUGGY]  final  double  cN  =  cN  /  q2  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  cN  =  cN  /  q2  /  cPrev;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  cN  =  cN  /  q2  /  cPrev;	          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	122	None	replace
26	[BUG]  [BUGGY]  if(cN  ==  0)  {  cN  =  0;  q1  =  0;  qN  =  0;  }  [CE]  cannot  find  symbol  qN  [FE]      AssertionError    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  if(cN  ==  0)  {  cN  =  0;  q1  =  0;  qN  =  0;  }  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	if(cN  ==  0)  {  cN  =  0;  q1  =  0;  qN  =  0;  }	          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  qN	122	None	replace
27	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  final  double  deltaN  =  cN  *  q2  /  q1;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  final  double  deltaN  =  cN  *  q2  /  q1;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    q1;    final  double  deltaN  =  cN  *  q2  /  q1;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	156	None	add
28	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  final  double  cN  =  cN  *  q2  /  q1;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  final  double  cN  =  cN  *  q2  /  q1;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    q1;    final  double  cN  =  cN  *  q2  /  q1;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	156	None	add
29	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  final  double  qN  =  cN  *  q2  /  q1;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  final  double  qN  =  cN  *  q2  /  q1;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    q1;    final  double  qN  =  cN  *  q2  /  q1;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	156	None	add
30	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  final  double  deltaN  =  cN  *  q2  /  q1);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  final  double  deltaN  =  cN  *  q2  /  q1);  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    q1;    final  double  deltaN  =  cN  *  q2  /  q1);	  timeout    	non-compiled	[CE]  ';'  expected	156	None	add
31	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  final  double  q2  =  cN  *  q2  /  q1;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  final  double  q2  =  cN  *  q2  /  q1;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    q1;    final  double  q2  =  cN  *  q2  /  q1;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	156	None	add
32	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  dPrev  /  cN  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  dPrev  /  cN  /  cPrev;	  final    double    deltaN    =    cN    /    dPrev    /    cPrev;    	compilable	timeout	168	1	replace
33	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  /  cN  /  cPrev;  timeout  [FE]    ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  dPrev  /  cN  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  dPrev  /  cN  /  cPrev;	  final    double    deltaN    =    cN    /    dPrev    /    cPrev;    	compilable	timeout	168	1	replace
34	[BUG]  [BUGGY]  final  double  hN  =  q2  /  cN  /  cPrev;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  hN  =  q2  /  cN  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  hN  =  q2  /  cN  /  cPrev;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    final    double    hN    =    q2    /    cN    /    cPrev;    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	52	None	replace
35	[BUG]  [BUGGY]  final  double  hN  =  cN  /  q2;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  hN  =  cN  /  q2;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  hN  =  cN  /  q2;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    final    double    hN    =    q2    /    cN    /    cPrev;    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	52	None	replace
36	[BUG]  [BUGGY]  final  double  hN  =  cN  /  q2  /  cPrev;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                          AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  hN  =  cN  /  q2  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  hN  =  cN  /  q2  /  cPrev;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    final    double    hN    =    q2    /    cN    /    cPrev;    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	52	None	replace
37	[BUG]  [BUGGY]  final  double  hN  =  cN  /  cPrev;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                            AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  hN  =  cN  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  hN  =  cN  /  cPrev;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    final    double    hN    =    q2    /    cN    /    cPrev;    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	52	None	replace
38	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q2);  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  q2);	  final    double    deltaN    =    cN    /    q2);    	non-compiled	[CE]  ';'  expected	43	None	replace
39	[BUG]  [BUGGY]  final  double  deltaN  =  q1  /  cN);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  q1  /  cN);  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q1  /  cN);	  final    double    deltaN    =    cN    /    q2);    	non-compiled	[CE]  ';'  expected	43	None	replace
40	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  dPrev  /  q2);  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  dPrev  /  q2);	  final    double    deltaN    =    cN    /    q2);    	non-compiled	[CE]  ';'  expected	43	None	replace
41	[BUG]  [BUGGY]  final  double  cN  =  q2  /  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  cN  =  q2  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  cN  =  q2  /  cN;	  final    double    deltaN    =    q2    /    cN;    final    double    cN    =    q2    /    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	90	None	replace
42	[BUG]  [BUGGY]  final  double  cN  =  q2  /  deltaN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  cN  =  q2  /  deltaN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  cN  =  q2  /  deltaN;	  final    double    deltaN    =    q2    /    cN;    final    double    cN    =    q2    /    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	90	None	replace
43	[BUG]  [BUGGY]  final  double  cN  =  q1  /  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  cN  =  q1  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  cN  =  q1  /  cN;	  final    double    deltaN    =    q2    /    cN;    final    double    cN    =    q2    /    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	90	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cPrev  *  q1  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cPrev  *  q1  /  cN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    final    double    deltaN    =    q1    *    cPrev    /    cN;    	compilable	  [FE]  AssertionError  	159	5	replace
45	[BUG]  [BUGGY]  final  double  deltaN  =  cPrev  *  q1  /  cN;  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cPrev  *  q1  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cPrev  *  q1  /  cN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    final    double    deltaN    =    q1    *    cPrev    /    cN;    	compilable	  [FE]  AssertionError  	159	5	replace
46	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	                if(cN        ==        0)        {        cN        =        0;        q2        =        0;        hN        =        0;        }        if(cN    >=    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	80	14	add
47	[BUG]  [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	                if(cN        ==        0)        {        cN        =        0;        q2        =        0;        hN        =        0;        }        if(cN    >=    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	80	14	add
48	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	                if(cN        ==        0)        {        cN        =        0;        q2        =        0;        hN        =        0;        }        if(cN    >=    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	80	14	add
49	[BUG]  [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	                if(cN        ==        0)        {        cN        =        0;        q2        =        0;        hN        =        0;        }        if(cN    >=    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	80	14	add
50	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	                if(cN        ==        0)        {        cN        =        0;        q2        =        0;        hN        =        0;        }        if(cN    >=    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	80	14	add
51	[BUG]  [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	                if(cN        ==        0)        {        cN        =        0;        q2        =        0;        hN        =        0;        }        if(cN    >=    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	80	14	add
52	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	                if(cN        ==        0)        {        cN        =        0;        q2        =        0;        hN        =        0;        }        if(cN    >=    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	80	14	add
53	[BUG]  [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	                if(cN        ==        0)        {        cN        =        0;        q2        =        0;        hN        =        0;        }        if(cN    >=    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	80	14	add
54	[BUG]  [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  [CE]  reached  end  of  file  while  parsing  [FE]            ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	                if(cN        ==        0)        {        cN        =        0;        q2        =        0;        hN        =        0;        }        if(cN    >=    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	add
55	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  hPrev)+  p0  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  double  q2  =(a  /  scaleFactor  *  hPrev)+  p0  /  lastScaleFactor;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  hPrev)+  p0  /  lastScaleFactor;	  double    q2    =(a    /    scaleFactor    *    hPrev)+    dPrev    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	115	None	replace
56	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q3)+  dPrev  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  double  q2  =(a  /  scaleFactor  *  q3)+  dPrev  /  lastScaleFactor;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q3)+  dPrev  /  lastScaleFactor;	  double    q2    =(a    /    scaleFactor    *    hPrev)+    dPrev    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	115	None	replace
57	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    dPrev    /    cPrev;    final  double  deltaN  =  cN  *  dPrev  /  cPrev;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
58	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  final  double  cN  =  cN  *  dPrev  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  final  double  cN  =  cN  *  dPrev  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    dPrev    /    cPrev;    final  double  cN  =  cN  *  dPrev  /  cPrev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
59	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  final  double  dPrev  =  cN  *  dPrev  /  cPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  final  double  dPrev  =  cN  *  dPrev  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    dPrev    /    cPrev;    final  double  dPrev  =  cN  *  dPrev  /  cPrev;	  timeout    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
60	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  final  double  hN  =  cN  *  dPrev  /  cPrev;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  final  double  hN  =  cN  *  dPrev  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    dPrev    /    cPrev;    final  double  hN  =  cN  *  dPrev  /  cPrev;	  timeout    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	7	None	add
61	[BUG]  [BUGGY]  final  double  dPrev  =  dPrev  *  q2  /  cPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  dPrev  =  dPrev  *  q2  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  dPrev  =  dPrev  *  q2  /  cPrev;	  final    double    deltaN    =    dPrev    *    q2    /    cPrev;    final    double    dPrev    =    dPrev    *    q2    /    cPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	101	None	replace
62	[BUG]  [BUGGY]  final  double  dPrev  =  cN  *  q2  /  cPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  dPrev  =  cN  *  q2  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  dPrev  =  cN  *  q2  /  cPrev;	  final    double    deltaN    =    dPrev    *    q2    /    cPrev;    final    double    dPrev    =    dPrev    *    q2    /    cPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	101	None	replace
63	[BUG]  [BUGGY]  final  double  dPrev  =  q2  *  q2  /  cPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  dPrev  =  q2  *  q2  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  dPrev  =  q2  *  q2  /  cPrev;	  final    double    deltaN    =    dPrev    *    q2    /    cPrev;    final    double    dPrev    =    dPrev    *    q2    /    cPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	101	None	replace
64	[BUG]  [BUGGY]  final  double  dPrev  =  b  *  q2  /  cPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  dPrev  =  b  *  q2  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  dPrev  =  b  *  q2  /  cPrev;	  final    double    deltaN    =    dPrev    *    q2    /    cPrev;    final    double    dPrev    =    dPrev    *    q2    /    cPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	101	None	replace
65	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  /  q1;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  /  q1;	  final    double    deltaN    =    q1    /    cN;    timeout    	compilable	timeout	47	1	replace
66	[BUG]  [BUGGY]  final  double  deltaN  =  cN  /  q1;  timeout  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  /  q1;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  /  q1;	  final    double    deltaN    =    q1    /    cN;    timeout    	compilable	timeout	47	1	replace
67	[BUG]  [BUGGY]  timeout  [FE]                      AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  q1  *  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q1  *  cN;	  final    double    deltaN    =    q1    /    cN;    timeout    	compilable	timeout	47	1	replace
68	[BUG]  [BUGGY]  final  double  deltaN  =  q1  *  cN;  timeout  [FE]                      AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  q1  *  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q1  *  cN;	  final    double    deltaN    =    q1    /    cN;    timeout    	compilable	timeout	47	1	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  p0  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  p0  /  cN;	  final    double    deltaN    =    q1    /    cN;    timeout    	compilable	  [FE]  AssertionError  	47	10	replace
70	[BUG]  [BUGGY]  final  double  deltaN  =  p0  /  cN;  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  p0  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  p0  /  cN;	  final    double    deltaN    =    q1    /    cN;    timeout    	compilable	  [FE]  AssertionError  	47	10	replace
71	[BUG]  [BUGGY]  if(cN!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [CE]  cannot  find  symbol  deltaN  [FE]    ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  if(cN!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	if(cN!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }	          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN!=    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  deltaN	37	None	replace
72	[BUG]  [BUGGY]  if(cN!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  }  [CE]  cannot  find  symbol  deltaN  [FE]      ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  if(cN!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  }  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	if(cN!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  }	          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN!=    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  deltaN	37	None	replace
73	[BUG]  [BUGGY]  if(cN  ==  0)  {  cN  =  0;  q1  =  0;  hN  =  0;  }  [CE]  cannot  find  symbol  deltaN  [FE]    AssertionError    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  if(cN  ==  0)  {  cN  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	if(cN  ==  0)  {  cN  =  0;  q1  =  0;  hN  =  0;  }	          if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  deltaN	77	None	replace
74	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  final  double  deltaN  =  cN  *  q2  /  dPrev;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  final  double  deltaN  =  cN  *  q2  /  dPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    dPrev;    final  double  deltaN  =  cN  *  q2  /  dPrev;	  	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
75	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  final  double  cN  =  cN  *  q2  /  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  final  double  cN  =  cN  *  q2  /  dPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    dPrev;    final  double  cN  =  cN  *  q2  /  dPrev;	  	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
76	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  final  double  q2  =  cN  *  q2  /  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  final  double  q2  =  cN  *  q2  /  dPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    dPrev;    final  double  q2  =  cN  *  q2  /  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
77	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  final  double  q2N  =  cN  *  q2  /  dPrev;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  final  double  q2N  =  cN  *  q2  /  dPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    dPrev;    final  double  q2N  =  cN  *  q2  /  dPrev;	  	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
78	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  final  double  hN  =  cN  *  q2  /  dPrev;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  final  double  hN  =  cN  *  q2  /  dPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    dPrev;    final  double  hN  =  cN  *  q2  /  dPrev;	  	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
79	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  q2  /  cPrev  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q2  /  cPrev  /  cN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    final    double    deltaN    =    q2    /    cPrev    /    cN;    	compilable	timeout	158	1	replace
80	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cPrev  /  cN;  timeout  [FE]                  AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  q2  /  cPrev  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q2  /  cPrev  /  cN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    final    double    deltaN    =    q2    /    cPrev    /    cN;    	compilable	timeout	158	1	replace
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  /  q1  /  cPrev  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  /  q1  /  cPrev  /  cN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    final    double    deltaN    =    q2    /    cPrev    /    cN;    	compilable	  [FE]  AssertionError  	158	6	replace
82	[BUG]  [BUGGY]  final  double  deltaN  =  cN  /  q1  /  cPrev  /  cN;  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  /  q1  /  cPrev  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  /  q1  /  cPrev  /  cN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    final    double    deltaN    =    q2    /    cPrev    /    cN;    	compilable	  [FE]  AssertionError  	158	6	replace
83	[BUG]  [BUGGY]  Double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  Double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  lastScaleFactor;  [BUGGY]      final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	Double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  lastScaleFactor;	  double    q2    =(a    /    scaleFactor    *    q1)+    p0    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	20	None	replace
84	[BUG]  [BUGGY]  final  double  q2  =  q2  /  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  q2  =  q2  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  q2  =  q2  /  cN;	  final    double    deltaN    =    q2    /    cN;    final    double    q2    =    q2    /    cN;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	93	None	replace
85	[BUG]  [BUGGY]  final  double  q2  =  cN  /  q2;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  q2  =  cN  /  q2;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  q2  =  cN  /  q2;	  final    double    deltaN    =    q2    /    cN;    final    double    q2    =    q2    /    cN;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	93	None	replace
86	[BUG]  [BUGGY]  final  double  q2  =  q1  /  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                          AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  q2  =  q1  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  q2  =  q1  /  cN;	  final    double    deltaN    =    q2    /    cN;    final    double    q2    =    q2    /    cN;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	93	None	replace
87	[BUG]  [BUGGY]  final  double  q2  =  cN  /  q2.doubleValue();  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                            AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  q2  =  cN  /  q2.doubleValue();  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  q2  =  cN  /  q2.doubleValue();	  final    double    deltaN    =    q2    /    cN;    final    double    q2    =    q2    /    cN;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	93	None	replace
88	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q1,  cN);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q1,  cN);  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  cPrev  /  q1,  cN);	  final    double    deltaN    =    cN    *    cPrev    /    q2;    final    double    deltaN    =    cN    *    cPrev    /    q1;    	non-compiled	[CE]  ';'  expected	74	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  *  q1  /  cN;	  final    double    deltaN    =    cN    /    q1    /    cN;    	compilable	  [FE]  AssertionError  	114	6	replace
90	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  q1  /  cN;	  final    double    deltaN    =    cN    /    q1    /    cN;    	compilable	  [FE]  AssertionError  	114	6	replace
91	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  /  dPrev  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  /  dPrev  /  cN;	  final    double    deltaN    =    cN    /    q1    /    cN;    	compilable	  [FE]  ConvergenceException  	114	14	replace
92	[BUG]  [BUGGY]  final  double  deltaN  =  cN  /  dPrev  /  cN;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  /  dPrev  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  /  dPrev  /  cN;	  final    double    deltaN    =    cN    /    q1    /    cN;    	compilable	  [FE]  ConvergenceException  	114	14	replace
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  /  q2  /  cN;	  final    double    deltaN    =    cN    /    q1    /    cN;    	compilable	  [FE]  AssertionError  	114	6	replace
94	[BUG]  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  /  q2  /  cN;	  final    double    deltaN    =    cN    /    q1    /    cN;    	compilable	  [FE]  AssertionError  	114	6	replace
95	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          AssertionError    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  q1  /  cN  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q1  /  cN  /  cN;	  final    double    deltaN    =    cN    /    q1    /    cN;    	compilable	  [FE]  ConvergenceException  	114	12	replace
96	[BUG]  [BUGGY]  final  double  deltaN  =  q1  /  cN  /  cN;  [FE]  ConvergenceException  [FE]          AssertionError    [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  q1  /  cN  /  cN;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q1  /  cN  /  cN;	  final    double    deltaN    =    cN    /    q1    /    cN;    	compilable	  [FE]  ConvergenceException  	114	12	replace
97	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  p0  /  cN  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  p0  /  cN  /  cPrev;	  final    double    deltaN    =    q1    /    cN    /    cPrev;    timeout    	compilable	timeout	147	1	replace
98	[BUG]  [BUGGY]  final  double  deltaN  =  p0  /  cN  /  cPrev;  timeout  [FE]                AssertionError      [CONTEXT]      }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }      [BUGGY]  final  double  deltaN  =  p0  /  cN  /  cPrev;  [BUGGY]      hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  p0  /  cN  /  cPrev;	  final    double    deltaN    =    q1    /    cN    /    cPrev;    timeout    	compilable	timeout	147	1	replace
