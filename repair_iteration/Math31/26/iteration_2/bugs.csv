bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  b  /  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  b  /  cN  /  cPrev;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    timeout    	compilable	timeout	9	1	replace
2	[BUG]  [BUGGY]  final  double  deltaN  =  b  /  cN  /  cPrev;  timeout  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  b  /  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  b  /  cN  /  cPrev;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    timeout    	compilable	timeout	9	1	replace
3	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  *  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q2  *  cN  /  cPrev;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    timeout    	compilable	timeout	9	1	replace
4	[BUG]  [BUGGY]  final  double  deltaN  =  q2  *  cN  /  cPrev;  timeout  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  *  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q2  *  cN  /  cPrev;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    timeout    	compilable	timeout	9	1	replace
5	[BUG]  [BUGGY]  cN  =  0;  q2  =  0;  hN  =  0;  [CE]  cannot  find  symbol  deltaN  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  cN  =  0;  q2  =  0;  hN  =  0;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	cN  =  0;  q2  =  0;  hN  =  0;	      if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  deltaN	23	None	replace
6	[BUG]  [BUGGY]  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  }  [CE]  cannot  find  symbol  deltaN  [FE]      AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	if(cN  ==  0)  {  cN  =  0;  q2  =  0;  }	      if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  deltaN	23	None	replace
7	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  *  dPrev  /  cPrev;	  final    double    deltaN    =    cN    *    q2    /    cPrev;    timeout    	compilable	timeout	7	1	replace
8	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  timeout  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  dPrev  /  cPrev;	  final    double    deltaN    =    cN    *    q2    /    cPrev;    timeout    	compilable	timeout	7	1	replace
9	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  *  q1  /  cPrev;	  final    double    deltaN    =    cN    *    q2    /    cPrev;    timeout    	compilable	timeout	7	1	replace
10	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  timeout  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q1  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  q1  /  cPrev;	  final    double    deltaN    =    cN    *    q2    /    cPrev;    timeout    	compilable	timeout	7	1	replace
11	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  hN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  *  hN  /  cPrev;	  final    double    deltaN    =    cN    *    q2    /    cPrev;    timeout    	compilable	timeout	7	1	replace
12	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  hN  /  cPrev;  timeout  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  hN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  hN  /  cPrev;	  final    double    deltaN    =    cN    *    q2    /    cPrev;    timeout    	compilable	timeout	7	1	replace
13	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  q2  /  dPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  /  q2  /  dPrev;	  final    double    deltaN    =    dPrev    /    q2    /    cPrev;    timeout    	compilable	  [FE]  ConvergenceException  	11	14	replace
14	[BUG]  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  dPrev;  [FE]  ConvergenceException  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  q2  /  dPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  /  q2  /  dPrev;	  final    double    deltaN    =    dPrev    /    q2    /    cPrev;    timeout    	compilable	  [FE]  ConvergenceException  	11	14	replace
15	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  dPrev  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  /  dPrev  /  q2;	  final    double    deltaN    =    dPrev    /    q2    /    cPrev;    timeout    	compilable	  [FE]  ConvergenceException  	11	14	replace
16	[BUG]  [BUGGY]  final  double  deltaN  =  cN  /  dPrev  /  q2;  [FE]  ConvergenceException  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  dPrev  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  /  dPrev  /  q2;	  final    double    deltaN    =    dPrev    /    q2    /    cPrev;    timeout    	compilable	  [FE]  ConvergenceException  	11	14	replace
17	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  *  q2  /  dPrev;	  final    double    deltaN    =    dPrev    /    q2    /    cPrev;    timeout    	compilable	  [FE]  ConvergenceException  	11	14	replace
18	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  [FE]  ConvergenceException  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q2  /  dPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  q2  /  dPrev;	  final    double    deltaN    =    dPrev    /    q2    /    cPrev;    timeout    	compilable	  [FE]  ConvergenceException  	11	14	replace
19	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  hPrev)+  cN  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  hPrev)+  cN  /  lastScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  hPrev)+  cN  /  lastScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    cN    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	14	None	replace
20	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p0  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p0  /  lastScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  p0  /  lastScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    cN    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	14	None	replace
21	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  dPrev;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  dPrev;	      double    q2    =(a    /    scaleFactor    *    q2)+    q1;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
22	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  cN;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  cN;	      double    q2    =(a    /    scaleFactor    *    q2)+    q1;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
23	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p0;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  p0;	      double    q2    =(a    /    scaleFactor    *    q2)+    q1;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
24	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q2)+  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q2)+  dPrev;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q2)+  dPrev;	      double    q2    =(a    /    scaleFactor    *    q2)+    q1;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
25	[BUG]  [BUGGY]  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  [CE]  cannot  find  symbol  deltaN  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;	      if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  deltaN	25	None	replace
26	[BUG]  [BUGGY]  cN  =  0;  q2  =  0;  q1  =  0;  [CE]  cannot  find  symbol  deltaN  [FE]      AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  cN  =  0;  q2  =  0;  q1  =  0;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	cN  =  0;  q2  =  0;  q1  =  0;	      if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  deltaN	25	None	replace
27	[BUG]  [BUGGY]  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  }  [CE]  cannot  find  symbol  deltaN  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  }	      if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  deltaN	25	None	replace
28	[BUG]  [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  final  double  deltaN  =  q1  /  cPrev  /  cN;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  final  double  deltaN  =  q1  /  cPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q1    /    cPrev    /    cN;    final  double  deltaN  =  q1  /  cPrev  /  cN;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	12	None	add
29	[BUG]  [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  final  double  cN  =  q1  /  cPrev  /  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  final  double  cN  =  q1  /  cPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q1    /    cPrev    /    cN;    final  double  cN  =  q1  /  cPrev  /  cN;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	12	None	add
30	[BUG]  [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  final  double  q1  =  q1  /  cPrev  /  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  final  double  q1  =  q1  /  cPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q1    /    cPrev    /    cN;    final  double  q1  =  q1  /  cPrev  /  cN;	  timeout    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	12	None	add
31	[BUG]  [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  final  double  hN  =  q1  /  cPrev  /  cN;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  final  double  hN  =  q1  /  cPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q1    /    cPrev    /    cN;    final  double  hN  =  q1  /  cPrev  /  cN;	  timeout    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	12	None	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }	  	compilable	  [FE]  AssertionError  	24	2	add
33	[BUG]  [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }	  	compilable	  [FE]  AssertionError  	24	2	add
34	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	24	14	add
35	[BUG]  [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	24	14	add
36	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	24	14	add
37	[BUG]  [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	24	14	add
38	[BUG]  [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  If(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  If(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    If(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }	  	non-compiled	[CE]  ';'  expected	24	None	add
39	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q2)+  p0  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q2)+  p0  /  lastScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q2)+  p0  /  lastScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q2)+    dPrev    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	2	None	replace
40	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q2)+  dPrev  /  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q2)+  dPrev  /  cN;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q2)+  dPrev  /  cN;	      double    q2    =(a    /    scaleFactor    *    q2)+    dPrev    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	2	None	replace
41	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  /  q2;	  final    double    deltaN    =    q2    /    cN;    timeout    	compilable	timeout	20	1	replace
42	[BUG]  [BUGGY]  final  double  deltaN  =  cN  /  q2;  timeout  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  /  q2;	  final    double    deltaN    =    q2    /    cN;    timeout    	compilable	timeout	20	1	replace
43	[BUG]  [BUGGY]  final  double  deltaN  =  cN  /  q2);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  q2);  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  /  q2);	  final    double    deltaN    =    q2    /    cN;    timeout    	non-compiled	[CE]  ';'  expected	20	None	replace
44	[BUG]  [BUGGY]  timeout  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  *  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q2  *  cN;	  final    double    deltaN    =    q2    /    cN;    timeout    	compilable	timeout	20	1	replace
45	[BUG]  [BUGGY]  final  double  deltaN  =  q2  *  cN;  timeout  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  *  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q2  *  cN;	  final    double    deltaN    =    q2    /    cN;    timeout    	compilable	timeout	20	1	replace
46	[BUG]  [BUGGY]  timeout  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q1  /  cN;	  final    double    deltaN    =    q2    /    cN;    timeout    	compilable	timeout	20	1	replace
47	[BUG]  [BUGGY]  final  double  deltaN  =  q1  /  cN;  timeout  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q1  /  cN;	  final    double    deltaN    =    q2    /    cN;    timeout    	compilable	timeout	20	1	replace
48	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  deltaN  =  q2  /  cN  /  cPrev;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  deltaN  =  q2  /  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q2    /    cN    /    cPrev;    final  double  deltaN  =  q2  /  cN  /  cPrev;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
49	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  cN  =  q2  /  cN  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  cN  =  q2  /  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q2    /    cN    /    cPrev;    final  double  cN  =  q2  /  cN  /  cPrev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
50	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  q2  /  cN  /  cPrev;  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  q2  /  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q2    /    cN    /    cPrev;    final  double  q2  /  cN  /  cPrev;	  timeout    	non-compiled	[CE]  ';'  expected	8	None	add
51	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  q2  =  q2  /  cN  /  cPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  q2  =  q2  /  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q2    /    cN    /    cPrev;    final  double  q2  =  q2  /  cN  /  cPrev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
52	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  hN  =  q2  /  cN  /  cPrev;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  hN  =  q2  /  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q2    /    cN    /    cPrev;    final  double  hN  =  q2  /  cN  /  cPrev;	  timeout    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
53	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    dPrev    /    q2    /    cPrev;    final  double  deltaN  =  dPrev  /  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
54	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  final  double  dPrev  =  dPrev  /  q2  /  cPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  final  double  dPrev  =  dPrev  /  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    dPrev    /    q2    /    cPrev;    final  double  dPrev  =  dPrev  /  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
55	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  final  double  q2  =  dPrev  /  q2  /  cPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  final  double  q2  =  dPrev  /  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    dPrev    /    q2    /    cPrev;    final  double  q2  =  dPrev  /  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
56	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  final  double  cN  =  dPrev  /  q2  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  final  double  cN  =  dPrev  /  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    dPrev    /    q2    /    cPrev;    final  double  cN  =  dPrev  /  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
57	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  final  double  hN  =  dPrev  /  q2  /  cPrev;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  final  double  hN  =  dPrev  /  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    dPrev    /    q2    /    cPrev;    final  double  hN  =  dPrev  /  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
58	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p0  /  this.scaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p0  /  this.scaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  p0  /  this.scaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    dPrev    /    this.scaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
59	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  cN  /  this.scaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  cN  /  this.scaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  cN  /  this.scaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    dPrev    /    this.scaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
60	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)/  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)/  lastScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)/  lastScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)/    dPrev;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	21	None	replace
61	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)/  DEFAULT_EPSILON;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)/  DEFAULT_EPSILON;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)/  DEFAULT_EPSILON;	      double    q2    =(a    /    scaleFactor    *    q1)/    dPrev;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	21	None	replace
62	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)/  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)/  cN;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)/  cN;	      double    q2    =(a    /    scaleFactor    *    q1)/    dPrev;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	21	None	replace
63	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  *  dPrev  /  q2;	  final    double    deltaN    =    cN    *    cPrev    /    q2;    timeout    	compilable	timeout	18	1	replace
64	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  q2;  timeout  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  dPrev  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  dPrev  /  q2;	  final    double    deltaN    =    cN    *    cPrev    /    q2;    timeout    	compilable	timeout	18	1	replace
65	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q1  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  *  q1  /  q2;	  final    double    deltaN    =    cN    *    cPrev    /    q2;    timeout    	compilable	timeout	18	1	replace
66	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q1  /  q2;  timeout  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q1  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  q1  /  q2;	  final    double    deltaN    =    cN    *    cPrev    /    q2;    timeout    	compilable	timeout	18	1	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  *  cPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q2  *  cPrev  /  cN;	  final    double    deltaN    =    cN    *    cPrev    /    q2;    timeout    	compilable	  [FE]  AssertionError  	18	1	replace
68	[BUG]  [BUGGY]  final  double  deltaN  =  q2  *  cPrev  /  cN;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  *  cPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q2  *  cPrev  /  cN;	  final    double    deltaN    =    cN    *    cPrev    /    q2;    timeout    	compilable	  [FE]  AssertionError  	18	1	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  *  cPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q1  *  cPrev  /  cN;	  final    double    deltaN    =    cN    *    cPrev    /    q2;    timeout    	compilable	  [FE]  AssertionError  	18	5	replace
70	[BUG]  [BUGGY]  final  double  deltaN  =  q1  *  cPrev  /  cN;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  *  cPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q1  *  cPrev  /  cN;	  final    double    deltaN    =    cN    *    cPrev    /    q2;    timeout    	compilable	  [FE]  AssertionError  	18	5	replace
71	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  final  double  deltaN  =  cN  *  cPrev  /  q2;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  final  double  deltaN  =  cN  *  cPrev  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    cPrev    /    q2;    final  double  deltaN  =  cN  *  cPrev  /  q2;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
72	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  final  double  cN  =  cN  *  cPrev  /  q2;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  final  double  cN  =  cN  *  cPrev  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    cPrev    /    q2;    final  double  cN  =  cN  *  cPrev  /  q2;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
73	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  final  double  qN  =  cN  *  cPrev  /  q2;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  final  double  qN  =  cN  *  cPrev  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    cPrev    /    q2;    final  double  qN  =  cN  *  cPrev  /  q2;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
74	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  final  double  deltaN  =  cN  *  cPrev  /  q1;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  final  double  deltaN  =  cN  *  cPrev  /  q1;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    cPrev    /    q2;    final  double  deltaN  =  cN  *  cPrev  /  q1;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
75	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  final  double  deltaN  =  cN  *  cPrev  /  q2);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  final  double  deltaN  =  cN  *  cPrev  /  q2);  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    cPrev    /    q2;    final  double  deltaN  =  cN  *  cPrev  /  q2);	  timeout    	non-compiled	[CE]  ';'  expected	17	None	add
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  AssertionError  	22	2	add
77	[BUG]  [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  AssertionError  	22	2	add
78	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	22	14	add
79	[BUG]  [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	22	14	add
80	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	22	14	add
81	[BUG]  [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  >=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  ConvergenceException  	22	14	add
82	[BUG]  [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  If(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  If(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    If(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	non-compiled	[CE]  ';'  expected	22	None	add
83	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  hPrev)+  q1  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  hPrev)+  q1  /  lastScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  hPrev)+  q1  /  lastScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    q1    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	15	None	replace
84	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  final  double  deltaN  =  cN  *  q2  /  cPrev;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  final  double  deltaN  =  cN  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    cPrev;    final  double  deltaN  =  cN  *  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
85	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  final  double  cN  =  cN  *  q2  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  final  double  cN  =  cN  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    cPrev;    final  double  cN  =  cN  *  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
86	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  final  double  q2  =  cN  *  q2  /  cPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  final  double  q2  =  cN  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    cPrev;    final  double  q2  =  cN  *  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
87	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  final  double  q2N  =  cN  *  q2  /  cPrev;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  final  double  q2N  =  cN  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    cPrev;    final  double  q2N  =  cN  *  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
88	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  final  double  hN  =  cN  *  q2  /  cPrev;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  final  double  hN  =  cN  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    cPrev;    final  double  hN  =  cN  *  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
89	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN;  final  double  deltaN  =  q2  /  cN;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN;  final  double  deltaN  =  q2  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q2    /    cN;    final  double  deltaN  =  q2  /  cN;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	19	None	add
90	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN;  final  double  cN  =  q2  /  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN;  final  double  cN  =  q2  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q2    /    cN;    final  double  cN  =  q2  /  cN;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	19	None	add
91	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN;  final  double  q2  /  cN;  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN;  final  double  q2  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q2    /    cN;    final  double  q2  /  cN;	  timeout    	non-compiled	[CE]  ';'  expected	19	None	add
92	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN;  final  double  hN  =  q2  /  cN;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN;  final  double  hN  =  q2  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q2    /    cN;    final  double  hN  =  q2  /  cN;	  timeout    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	19	None	add
93	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN;  final  double  q2  =  q2  /  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN;  final  double  q2  =  q2  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q2    /    cN;    final  double  q2  =  q2  /  cN;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	19	None	add
94	[BUG]  [BUGGY]  double  cN  =  cN  /  q1  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  cN  =  cN  /  q1  /  cPrev;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  cN  /  q1  /  cPrev;	      double    cN    =    cN    /    q2    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
95	[BUG]  [BUGGY]  double  cN  =  scaleFactor  /  q2  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  cN  =  scaleFactor  /  q2  /  cPrev;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  scaleFactor  /  q2  /  cPrev;	      double    cN    =    cN    /    q2    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
96	[BUG]  [BUGGY]  double  cN  =  b  /  q2  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  cN  =  b  /  q2  /  cPrev;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  b  /  q2  /  cPrev;	      double    cN    =    cN    /    q2    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
97	[BUG]  [BUGGY]  double  cN  =  dPrev  /  q2  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  cN  =  dPrev  /  q2  /  cPrev;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  dPrev  /  q2  /  cPrev;	      double    cN    =    cN    /    q2    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
98	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p0  /  nextScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p0  /  nextScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  p0  /  nextScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    dPrev    /    nextScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
99	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  hPrev)+  dPrev  /  nextScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  hPrev)+  dPrev  /  nextScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  hPrev)+  dPrev  /  nextScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    dPrev    /    nextScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
100	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    dPrev    *    q2    /    cPrev;    final  double  deltaN  =  dPrev  *  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	26	None	add
101	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  final  double  dPrev  =  dPrev  *  q2  /  cPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  final  double  dPrev  =  dPrev  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    dPrev    *    q2    /    cPrev;    final  double  dPrev  =  dPrev  *  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	26	None	add
102	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  final  double  q2  =  dPrev  *  q2  /  cPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  final  double  q2  =  dPrev  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    dPrev    *    q2    /    cPrev;    final  double  q2  =  dPrev  *  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	26	None	add
103	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  final  double  cN  =  dPrev  *  q2  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  final  double  cN  =  dPrev  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    dPrev    *    q2    /    cPrev;    final  double  cN  =  dPrev  *  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	26	None	add
104	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  final  double  hN  =  dPrev  *  q2  /  cPrev;  [CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  final  double  hN  =  dPrev  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    dPrev    *    q2    /    cPrev;    final  double  hN  =  dPrev  *  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  hN  is  already  defined  in  method  evaluate(double,double,int)	26	None	add
105	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  *  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  dPrev  *  cN  /  cPrev;	  final    double    deltaN    =    dPrev    *    q2    /    cPrev;    timeout    	compilable	timeout	27	1	replace
106	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  *  cN  /  cPrev;  timeout  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  *  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  dPrev  *  cN  /  cPrev;	  final    double    deltaN    =    dPrev    *    q2    /    cPrev;    timeout    	compilable	timeout	27	1	replace
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  q1  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  /  q1  /  cPrev;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    timeout    	compilable	  [FE]  AssertionError  	13	5	replace
108	[BUG]  [BUGGY]  final  double  deltaN  =  cN  /  q1  /  cPrev;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  q1  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  /  q1  /  cPrev;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    timeout    	compilable	  [FE]  AssertionError  	13	5	replace
109	[BUG]  [BUGGY]  timeout  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q1;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  *  cPrev  /  q1;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    timeout    	compilable	timeout	13	1	replace
110	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q1;  timeout  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q1;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  cPrev  /  q1;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    timeout    	compilable	timeout	13	1	replace
111	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  b  /  cPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  b  /  cPrev  /  cN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    timeout    	compilable	timeout	13	1	replace
112	[BUG]  [BUGGY]  final  double  deltaN  =  b  /  cPrev  /  cN;  timeout  [FE]                  AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  b  /  cPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  b  /  cPrev  /  cN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    timeout    	compilable	timeout	13	1	replace
113	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  q1  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  /  q1  /  cN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    timeout    	compilable	  [FE]  AssertionError  	13	6	replace
114	[BUG]  [BUGGY]  final  double  deltaN  =  cN  /  q1  /  cN;  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  q1  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  /  q1  /  cN;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    timeout    	compilable	  [FE]  AssertionError  	13	6	replace
115	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  hPrev)+  dPrev  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  hPrev)+  dPrev  /  lastScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  hPrev)+  dPrev  /  lastScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    dPrev    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	1	None	replace
116	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  cN;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  cN;	      double    q2    =(a    /    scaleFactor    *    q1)+    dPrev    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	1	None	replace
117	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  q1;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  q1;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  q1;	      double    q2    =(a    /    scaleFactor    *    q2)+    q1;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
118	[BUG]  [BUGGY]  if(cN  ==  0)  {  cN  =  0;  q1  =  0;  q2  =  0;  hN  =  0;  }  [CE]  cannot  find  symbol  deltaN  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  if(cN  ==  0)  {  cN  =  0;  q1  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	if(cN  ==  0)  {  cN  =  0;  q1  =  0;  q2  =  0;  hN  =  0;  }	      if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  deltaN	25	None	replace
119	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p1  /  this.scaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p1  /  this.scaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  p1  /  this.scaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    dPrev    /    this.scaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
120	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p1  /  nextScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p1  /  nextScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  p1  /  nextScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    dPrev    /    nextScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  AssertionError  	24	2	add
122	[BUG]  [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	  	compilable	  [FE]  AssertionError  	24	2	add
123	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  dPrev  /  cN;	  final    double    deltaN    =    q2    /    cN;    timeout    	compilable	timeout	20	1	replace
124	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  /  cN;  timeout  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  dPrev  /  cN;	  final    double    deltaN    =    q2    /    cN;    timeout    	compilable	timeout	20	1	replace
125	[BUG]  [BUGGY]  if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [CE]  cannot  find  symbol  deltaN  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	if(cN!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	      if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  deltaN	23	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q1  =  0;  hN  =  0;  }	  	compilable	  [FE]  AssertionError  	22	2	add
127	[BUG]  [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q1  =  0;  hN  =  0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  if(cN  ==  0)  {  cN  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    if(cN  ==  0)  {  cN  =  0;  q1  =  0;  hN  =  0;  }	  	compilable	  [FE]  AssertionError  	22	2	add
128	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  hN)+  dPrev  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  hN)+  dPrev  /  lastScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  hN)+  dPrev  /  lastScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    dPrev    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	1	None	replace
129	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p1  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  p1  /  lastScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  p1  /  lastScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    dPrev    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	1	None	replace
130	[BUG]  [BUGGY]  double  cN  =  p0  /  q2  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  cN  =  p0  /  q2  /  cPrev;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  p0  /  q2  /  cPrev;	      double    cN    =    cN    /    q2    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
131	[BUG]  [BUGGY]  double  cN  =  a  /  q2  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  cN  =  a  /  q2  /  cPrev;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  a  /  q2  /  cPrev;	      double    cN    =    cN    /    q2    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
132	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  hN)+  q1  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  hN)+  q1  /  lastScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  hN)+  q1  /  lastScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    q1    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	15	None	replace
133	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  final  double  deltaN  =  cN  *  cPrev  /  q2,  q2;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  final  double  deltaN  =  cN  *  cPrev  /  q2,  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    cPrev    /    q2;    final  double  deltaN  =  cN  *  cPrev  /  q2,  q2;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	17	None	add
134	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  dPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q2  /  dPrev;	  final    double    deltaN    =    dPrev    /    q2    /    cPrev;    timeout    	compilable	  [FE]  ConvergenceException  	11	14	replace
135	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  dPrev;  [FE]  ConvergenceException  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  dPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q2  /  dPrev;	  final    double    deltaN    =    dPrev    /    q2    /    cPrev;    timeout    	compilable	  [FE]  ConvergenceException  	11	14	replace
136	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  *  cPrev  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  dPrev  *  cPrev  /  q2;	  final    double    deltaN    =    dPrev    /    q2    /    cPrev;    timeout    	compilable	  [FE]  AssertionError  	11	10	replace
137	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  *  cPrev  /  q2;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  *  cPrev  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  dPrev  *  cPrev  /  q2;	  final    double    deltaN    =    dPrev    /    q2    /    cPrev;    timeout    	compilable	  [FE]  AssertionError  	11	10	replace
138	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  *  dPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q2  *  dPrev  /  cN;	  final    double    deltaN    =    dPrev    *    q2    /    cPrev;    timeout    	compilable	timeout	27	1	replace
139	[BUG]  [BUGGY]  final  double  deltaN  =  q2  *  dPrev  /  cN;  timeout  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  *  dPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q2  *  dPrev  /  cN;	  final    double    deltaN    =    dPrev    *    q2    /    cPrev;    timeout    	compilable	timeout	27	1	replace
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q1  *  q2  /  cPrev;	  final    double    deltaN    =    dPrev    *    q2    /    cPrev;    timeout    	compilable	  [FE]  AssertionError  	27	6	replace
141	[BUG]  [BUGGY]  final  double  deltaN  =  q1  *  q2  /  cPrev;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q1  *  q2  /  cPrev;	  final    double    deltaN    =    dPrev    *    q2    /    cPrev;    timeout    	compilable	  [FE]  AssertionError  	27	6	replace
142	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q2)/  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q2)/  lastScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q2)/  lastScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)/    dPrev;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	21	None	replace
143	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  hN)/  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  hN)/  dPrev;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  hN)/  dPrev;	      double    q2    =(a    /    scaleFactor    *    q1)/    dPrev;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	21	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN  *  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q2  /  cN  *  cPrev;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    timeout    	compilable	  [FE]  AssertionError  	9	2	replace
145	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN  *  cPrev;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN  *  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q2  /  cN  *  cPrev;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    timeout    	compilable	  [FE]  AssertionError  	9	2	replace
146	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  /  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q1  /  cN  /  cPrev;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    timeout    	compilable	timeout	9	1	replace
147	[BUG]  [BUGGY]  final  double  deltaN  =  q1  /  cN  /  cPrev;  timeout  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  /  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q1  /  cN  /  cPrev;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    timeout    	compilable	timeout	9	1	replace
148	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  n  =  q2  /  cN  /  cPrev;  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  n  =  q2  /  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q2    /    cN    /    cPrev;    final  double  n  =  q2  /  cN  /  cPrev;	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
149	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  final  double  qN  =  cN  *  q2  /  cPrev;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  final  double  qN  =  cN  *  q2  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    cN    *    q2    /    cPrev;    final  double  qN  =  cN  *  q2  /  cPrev;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
150	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q2)+  p1  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q2)+  p1  /  lastScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q2)+  p1  /  lastScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q2)+    dPrev    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	2	None	replace
151	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  final  double  deltaN  =  dPrev  *  q2)  /  cPrev;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  final  double  deltaN  =  dPrev  *  q2)  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    dPrev    *    q2    /    cPrev;    final  double  deltaN  =  dPrev  *  q2)  /  cPrev;	  timeout    	non-compiled	[CE]  ';'  expected	26	None	add
152	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  final  double  deltaN  =  dPrev  /  q2)  /  cPrev;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  final  double  deltaN  =  dPrev  /  q2)  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    dPrev    /    q2    /    cPrev;    final  double  deltaN  =  dPrev  /  q2)  /  cPrev;	  timeout    	non-compiled	[CE]  ';'  expected	10	None	add
153	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  hN)+  cN  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  hN)+  cN  /  lastScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  hN)+  cN  /  lastScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    cN    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	14	None	replace
154	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  cPrev  /  q1;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  /  cPrev  /  q1;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    timeout    	compilable	  [FE]  AssertionError  	13	5	replace
155	[BUG]  [BUGGY]  final  double  deltaN  =  cN  /  cPrev  /  q1;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  cPrev  /  q1;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  /  cPrev  /  q1;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    timeout    	compilable	  [FE]  AssertionError  	13	5	replace
156	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  *  q2  /  q1;	  final    double    deltaN    =    cN    *    q2    /    cPrev;    timeout    	compilable	timeout	7	1	replace
157	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  timeout  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  *  q2  /  q1;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  q2  /  q1;	  final    double    deltaN    =    cN    *    q2    /    cPrev;    timeout    	compilable	timeout	7	1	replace
158	[BUG]  [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  final  double  deltaN  =  q2  /  cPrev  /  cN;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  final  double  deltaN  =  q2  /  cPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q1    /    cPrev    /    cN;    final  double  deltaN  =  q2  /  cPrev  /  cN;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	12	None	add
159	[BUG]  [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  final  double  deltaN  =  q1  *  cPrev  /  cN;  [CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  final  double  deltaN  =  q1  *  cPrev  /  cN;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q1    /    cPrev    /    cN;    final  double  deltaN  =  q1  *  cPrev  /  cN;	  timeout    	non-compiled	[CE]  variable  deltaN  is  already  defined  in  method  evaluate(double,double,int)	12	None	add
160	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  deltaN  =  q2)  /  cN  /  cPrev;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  final  double  deltaN  =  q2)  /  cN  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final    double    deltaN    =    q2    /    cN    /    cPrev;    final  double  deltaN  =  q2)  /  cN  /  cPrev;	  timeout    	non-compiled	[CE]  ';'  expected	8	None	add
161	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  b;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  b;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  b;	      double    q2    =(a    /    scaleFactor    *    q1)+    dPrev    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	1	None	replace
162	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  hN)+  dPrev  /  nextScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  hN)+  dPrev  /  nextScaleFactor;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  hN)+  dPrev  /  nextScaleFactor;	      double    q2    =(a    /    scaleFactor    *    q1)+    dPrev    /    nextScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
163	[BUG]  [BUGGY]  double  q2  =(a  /  scaleFactor  *  q2)+  dPrev  /  b;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  q2  =(a  /  scaleFactor  *  q2)+  dPrev  /  b;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  q2  =(a  /  scaleFactor  *  q2)+  dPrev  /  b;	      double    q2    =(a    /    scaleFactor    *    q2)+    dPrev    /    lastScaleFactor;    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	2	None	replace
164	[BUG]  [BUGGY]  if(q2!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [CE]  cannot  find  symbol  deltaN  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  if(q2!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	if(q2!=  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }	      if(cN    ==    0)    {    cN    =    0;    q2    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  deltaN	23	None	replace
165	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  *  cPrev  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q1  *  cPrev  /  q2;	  final    double    deltaN    =    cN    *    cPrev    /    q2;    timeout    	compilable	  [FE]  AssertionError  	18	6	replace
166	[BUG]  [BUGGY]  final  double  deltaN  =  q1  *  cPrev  /  q2;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  q1  *  cPrev  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q1  *  cPrev  /  q2;	  final    double    deltaN    =    cN    *    cPrev    /    q2;    timeout    	compilable	  [FE]  AssertionError  	18	6	replace
167	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  dPrev  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  /  dPrev  /  cPrev;	  final    double    deltaN    =    dPrev    /    q2    /    cPrev;    timeout    	compilable	  [FE]  ConvergenceException  	11	14	replace
168	[BUG]  [BUGGY]  final  double  deltaN  =  cN  /  dPrev  /  cPrev;  [FE]  ConvergenceException  [FE]            AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  cN  /  dPrev  /  cPrev;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  /  dPrev  /  cPrev;	  final    double    deltaN    =    dPrev    /    q2    /    cPrev;    timeout    	compilable	  [FE]  ConvergenceException  	11	14	replace
169	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN  ==  0)  {  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN  ==  0)  {  q2  =  0;  q1  =  0;  hN  =  0;  }	  	compilable	  [FE]  AssertionError  	24	2	add
170	[BUG]  [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN  ==  0)  {  q2  =  0;  q1  =  0;  hN  =  0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]      if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  if(cN  ==  0)  {  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	        if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    if(cN  ==  0)  {  q2  =  0;  q1  =  0;  hN  =  0;  }	  	compilable	  [FE]  AssertionError  	24	2	add
171	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  /  cN  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  dPrev  /  cN  /  q2;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    timeout    	compilable	  [FE]  ConvergenceException  	9	12	replace
172	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  /  cN  /  q2;  [FE]  ConvergenceException  [FE]          AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  /  cN  /  q2;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  dPrev  /  cN  /  q2;	  final    double    deltaN    =    q2    /    cN    /    cPrev;    timeout    	compilable	  [FE]  ConvergenceException  	9	12	replace
173	[BUG]  [BUGGY]  if(q2!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [CE]  cannot  find  symbol  deltaN  [FE]    AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  if(q2!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	if(q2!=  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }	      if(cN    ==    0)    {    cN    =    0;    q2    =    0;    q1    =    0;    hN    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  deltaN	25	None	replace
174	[BUG]  [BUGGY]  double  cN  =  cN  /  dPrev  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  cN  =  cN  /  dPrev  /  cPrev;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  cN  /  dPrev  /  cPrev;	      double    cN    =    cN    /    q2    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
175	[BUG]  [BUGGY]  double  cN  =  cN  *  q2  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  double  cN  =  cN  *  q2  /  cPrev;  [BUGGY]    final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	double  cN  =  cN  *  q2  /  cPrev;	      double    cN    =    cN    /    q2    /    cPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
176	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  /  cN  /  q1;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  dPrev  /  cN  /  q1;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	13	12	replace
177	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  /  cN  /  q1;  [FE]  ConvergenceException  [FE]              AssertionError    [CONTEXT]    }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }    [BUGGY]  final  double  deltaN  =  dPrev  /  cN  /  q1;  [BUGGY]    hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  dPrev  /  cN  /  q1;	  final    double    deltaN    =    q1    /    cPrev    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	13	12	replace
