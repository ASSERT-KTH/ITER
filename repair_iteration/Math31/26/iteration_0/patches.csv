bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  lastScaleFactor;  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	    double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  lastScaleFactor;		non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
2	[BUG]  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q2)+  dPrev  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q2)+  dPrev  /  lastScaleFactor;  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	    double  q2  =(a  /  scaleFactor  *  q2)+  dPrev  /  lastScaleFactor;		non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
3	[BUG]  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  nextScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  nextScaleFactor;  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	    double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  nextScaleFactor;		non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
4	[BUG]  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  this.scaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  this.scaleFactor;  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	    double  q2  =(a  /  scaleFactor  *  q1)+  dPrev  /  this.scaleFactor;		non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
5	[BUG]  [BUGGY]    double  cN  =  cN  /  q2  /  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    double  cN  =  cN  /  q2  /  cPrev;  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	    double  cN  =  cN  /  q2  /  cPrev;		non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
6	[BUG]  [BUGGY]  timeout  [FE]    AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  *  q2  /  cPrev;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
7	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  timeout  [FE]    AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  cN  *  q2  /  cPrev;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  q2  /  cPrev;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
8	[BUG]  [BUGGY]  timeout  [FE]      AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q2  /  cN  /  cPrev;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
9	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  timeout  [FE]      AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  q2  /  cN  /  cPrev;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q2  /  cN  /  cPrev;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
10	[BUG]  [BUGGY]  timeout  [FE]        AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  dPrev  /  q2  /  cPrev;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
11	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  timeout  [FE]        AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  dPrev  /  q2  /  cPrev;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  dPrev  /  q2  /  cPrev;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
12	[BUG]  [BUGGY]  timeout  [FE]          AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q1  /  cPrev  /  cN;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
13	[BUG]  [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  timeout  [FE]          AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  q1  /  cPrev  /  cN;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q1  /  cPrev  /  cN;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
14	[BUG]  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q1)+  cN  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q1)+  cN  /  lastScaleFactor;  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	    double  q2  =(a  /  scaleFactor  *  q1)+  cN  /  lastScaleFactor;		non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
15	[BUG]  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q1)+  q1  /  lastScaleFactor;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q1)+  q1  /  lastScaleFactor;  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	    double  q2  =(a  /  scaleFactor  *  q1)+  q1  /  lastScaleFactor;		non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
16	[BUG]  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q2)+  q1;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q2)+  q1;  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	    double  q2  =(a  /  scaleFactor  *  q2)+  q1;		non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
17	[BUG]  [BUGGY]  timeout  [FE]    AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  cN  *  cPrev  /  q2;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
18	[BUG]  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  timeout  [FE]    AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  cN  *  cPrev  /  q2;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  cN  *  cPrev  /  q2;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
19	[BUG]  [BUGGY]  timeout  [FE]      AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  q2  /  cN;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  q2  /  cN;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
20	[BUG]  [BUGGY]  final  double  deltaN  =  q2  /  cN;  timeout  [FE]      AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  q2  /  cN;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  q2  /  cN;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
21	[BUG]  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q1)/  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    double  q2  =(a  /  scaleFactor  *  q1)/  dPrev;  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	    double  q2  =(a  /  scaleFactor  *  q1)/  dPrev;		non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }		compilable	  [FE]  AssertionError  	52	2	add
23	[BUG]  [BUGGY]    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  hN  =  0;  }		compilable	  [FE]  AssertionError  	52	2	add
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }		compilable	  [FE]  AssertionError  	52	2	add
25	[BUG]  [BUGGY]    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }  [BUGGY]  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	    if(cN  ==  0)  {  cN  =  0;  q2  =  0;  q1  =  0;  hN  =  0;  }		compilable	  [FE]  AssertionError  	52	2	add
26	[BUG]  [BUGGY]  timeout  [FE]    AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	add	final  double  deltaN  =  dPrev  *  q2  /  cPrev;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
27	[BUG]  [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  timeout  [FE]    AssertionError  [CONTEXT]  }  else  if  (b  !=  0)  {  cN  =  (a  /  scaleFactor  *  hPrev)  +  p0  /  lastScaleFactor;  q2  =  (a  /  scaleFactor  *  q1)  +  dPrev  /  lastScaleFactor;  }  if  (!(Double.isInfinite(cN)  ||  Double.isInfinite(q2)))  {  break;  }  }  }  [BUGGY]  final  double  deltaN  =  dPrev  *  q2  /  cPrev;  [BUGGY]  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	169	169	2	replace	final  double  deltaN  =  dPrev  *  q2  /  cPrev;	final  double  deltaN  =  cN  /  q2  /  cPrev;  	compilable	timeout	51	1	replace
