bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	    double  q2  =  a  *  q1  +  b  *  dPrev;		non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
2	[BUG]  [BUGGY]    double  cN  =  a  *  cN  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]    double  cN  =  a  *  cN  +  b  *  dPrev;  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	    double  cN  =  a  *  cN  +  b  *  dPrev;		non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
3	[BUG]  [BUGGY]    double  cN  =  a  *  hPrev  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]    double  cN  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	    double  cN  =  a  *  hPrev  +  b  *  dPrev;		non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
4	[BUG]  [BUGGY]    double  dPrev  =  a  *  cN  +  b  *  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]    double  dPrev  =  a  *  cN  +  b  *  dPrev;  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	    double  dPrev  =  a  *  cN  +  b  *  dPrev;		non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
5	[BUG]  [BUGGY]    double  q2  =  a  *  q1  +  b  *  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  cN;  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	    double  q2  =  a  *  q1  +  b  *  cN;		non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
6	[BUG]  [BUGGY]  timeout  [FE]    AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  [BUGGY]  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hN  +  b  *  dPrev;	double  q2  =  a  *  q1  +  b  *  dPrev;  	compilable	timeout	47	1	replace
7	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  timeout  [FE]    AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  [BUGGY]  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hN  +  b  *  dPrev;	double  q2  =  a  *  q1  +  b  *  dPrev;  	compilable	timeout	47	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  [BUGGY]  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  cN  +  b  *  dPrev;	double  q2  =  a  *  q1  +  b  *  dPrev;  	compilable	  [FE]  AssertionError  	47	6	replace
9	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  [BUGGY]  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  b  *  dPrev;	double  q2  =  a  *  q1  +  b  *  dPrev;  	compilable	  [FE]  AssertionError  	47	6	replace
10	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  [BUGGY]  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  q1  +  cN  *  dPrev;	double  q2  =  a  *  q1  +  b  *  dPrev;  	compilable	  [FE]  OutOfRangeException  	47	12	replace
11	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  [FE]  OutOfRangeException  [FE]        AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  [BUGGY]  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q1  +  cN  *  dPrev;	double  q2  =  a  *  q1  +  b  *  dPrev;  	compilable	  [FE]  OutOfRangeException  	47	12	replace
12	[BUG]  [BUGGY]    double  dPrev  =  a  *  dPrev  +  b  *  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]    double  dPrev  =  a  *  dPrev  +  b  *  dPrev;  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	    double  dPrev  =  a  *  dPrev  +  b  *  dPrev;		non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]    double  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	    double  q0  =  a  *  q1  +  b  *  dPrev;		compilable	  [FE]  AssertionError  	48	2	add
14	[BUG]  [BUGGY]    double  q0  =  a  *  q1  +  b  *  dPrev;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]    double  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	    double  q0  =  a  *  q1  +  b  *  dPrev;		compilable	  [FE]  AssertionError  	48	2	add
15	[BUG]  [BUGGY]    double  q1  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]    double  q1  =  a  *  q1  +  b  *  dPrev;  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	    double  q1  =  a  *  q1  +  b  *  dPrev;		non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
16	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  q0;  [CE]  cannot  find  symbol  q0  [FE]    AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]  double  q2  =  a  *  q1  +  b  *  q0;  [BUGGY]  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q1  +  b  *  q0;	double  q2  =  a  *  q1  +  b  *  dPrev;  	non-compiled	[CE]  cannot  find  symbol  q0	47	None	replace
17	[BUG]  [BUGGY]    double  dPrev  =  a  *  dPrev  +  b  *  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]    double  dPrev  =  a  *  dPrev  +  b  *  cN;  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	    double  dPrev  =  a  *  dPrev  +  b  *  cN;		non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
18	[BUG]  [BUGGY]    double  dPrev  =  a  *  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]    double  dPrev  =  a  *  dPrev;  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	    double  dPrev  =  a  *  dPrev;		non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
19	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hPrev  +  b  *  dPrev;	double  q2  =  a  *  q1  +  b  *  dPrev;  	compilable	  [FE]  ConvergenceException  	47	9	replace
20	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  [FE]  ConvergenceException  [FE]    AssertionError  [CONTEXT]  double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  b  *  dPrev;	double  q2  =  a  *  q1  +  b  *  dPrev;  	compilable	  [FE]  ConvergenceException  	47	9	replace
