bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  double  q2  =  a  *  hN  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  double  q2  =  a  *  hN  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    dPrev;    double  q2  =  a  *  hN  +  b  *  dPrev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
2	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  Double  q2  =  a  *  hN  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  Double  q2  =  a  *  hN  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    dPrev;    Double  q2  =  a  *  hN  +  b  *  dPrev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
3	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  double  q2  =  a  *  hN  +  b  *  dprev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  double  q2  =  a  *  hN  +  b  *  dprev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    dPrev;    double  q2  =  a  *  hN  +  b  *  dprev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
4	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hN  +  b  *  q1;	  double    q2    =    a    *    hN    +    b    *    dPrev;    timeout    	compilable	timeout	7	1	replace
5	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  timeout  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hN  +  b  *  q1;	  double    q2    =    a    *    hN    +    b    *    dPrev;    timeout    	compilable	timeout	7	1	replace
6	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hN  +  b  *  cN;	  double    q2    =    a    *    hN    +    b    *    dPrev;    timeout    	compilable	timeout	7	1	replace
7	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  timeout  [FE]          AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hN  +  b  *  cN;	  double    q2    =    a    *    hN    +    b    *    dPrev;    timeout    	compilable	timeout	7	1	replace
8	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  q0;  [CE]  cannot  find  symbol  q0  [FE]            AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hN  +  b  *  q0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hN  +  b  *  q0;	  double    q2    =    a    *    hN    +    b    *    dPrev;    timeout    	non-compiled	[CE]  cannot  find  symbol  q0	7	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  q1  +  b  *  hN;	      double    q2    =    a    *    q1    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	1	6	replace
10	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q1  +  b  *  hN;	      double    q2    =    a    *    q1    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	1	6	replace
11	[BUG]  [BUGGY]  double  q0  =  a  *  q1  +  b  *  cN;  [CE]  cannot  find  symbol  q2  [FE]    AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q0  =  a  *  q1  +  b  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  q1  +  b  *  cN;	      double    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	14	None	replace
12	[BUG]  [BUGGY]  double  q0  =  a  *  cN  +  b  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]      AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q0  =  a  *  cN  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  cN  +  b  *  dPrev;	      double    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	14	None	replace
13	[BUG]  [BUGGY]  double  q0  =  a  *  q1  +  cN  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q0  =  a  *  q1  +  cN  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  q1  +  cN  *  dPrev;	      double    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	14	None	replace
14	[BUG]  [BUGGY]  double  q0  =  a  *  hN  +  b  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]          AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q0  =  a  *  hN  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  hN  +  b  *  dPrev;	      double    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	14	None	replace
15	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  cN  =  a  *  hN  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  hN  +  b  *  dPrev;	      double    cN    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
16	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  cN  =  a  *  p0  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  p0  +  b  *  dPrev;	      double    cN    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
17	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  cN  =  a  *  q1  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  q1  +  b  *  dPrev;	      double    cN    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
18	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  p0;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  hPrev  +  b  *  p0;	      double    cN    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
19	[BUG]  [BUGGY]      double  q0  =  a  *  q1  +  b  *  dPrev;  double  q0  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  q0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]      double  q0  =  a  *  q1  +  b  *  dPrev;  double  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	        double    q0    =    a    *    q1    +    b    *    dPrev;    double  q0  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  q0  is  already  defined  in  method  evaluate(double,double,int)	13	None	add
20	[BUG]  [BUGGY]      double  q0  =  a  *  q1  +  b  *  dPrev;  Double  q0  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  q0  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]      double  q0  =  a  *  q1  +  b  *  dPrev;  Double  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	        double    q0    =    a    *    q1    +    b    *    dPrev;    Double  q0  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  q0  is  already  defined  in  method  evaluate(double,double,int)	13	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]      double  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	        double    q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;	  	compilable	  [FE]  AssertionError  	13	2	add
22	[BUG]  [BUGGY]      double  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]      double  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	        double    q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;	  	compilable	  [FE]  AssertionError  	13	2	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  cN  +  b  *  q1;	      double    q2    =    a    *    q1    +    b    *    cN;    	compilable	  [FE]  AssertionError  	5	10	replace
24	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  b  *  q1;	      double    q2    =    a    *    q1    +    b    *    cN;    	compilable	  [FE]  AssertionError  	5	10	replace
25	[BUG]  [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  p0;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cN  +  b  *  p0;	      double    dPrev    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
26	[BUG]  [BUGGY]  double  dPrev  =  a  *  cPrev  +  b  *  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  cPrev  +  b  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cPrev  +  b  *  cN;	      double    dPrev    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
27	[BUG]  [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cN  +  b  *  cN;	      double    dPrev    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
28	[BUG]  [BUGGY]  double  dPrev  =  a  *  hN  +  b  *  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  hN  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hN  +  b  *  dPrev;	      double    dPrev    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
29	[BUG]  [BUGGY]  double  dPrev  =  a  *  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cN;	      double    dPrev    =    a    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
30	[BUG]  [BUGGY]  double  dPrev  =  cN  *  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  cN  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  cN  *  dPrev;	      double    dPrev    =    a    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
31	[BUG]  [BUGGY]  double  dPrev  =  b  *  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  b  *  dPrev;	      double    dPrev    =    a    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
32	[BUG]  [BUGGY]  double  dPrev  =  p0  *  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  p0  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  p0  *  cN;	      double    dPrev    =    a    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
33	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  double  q2  =  a  *  hPrev  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  double  q2  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    dPrev;    double  q2  =  a  *  hPrev  +  b  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	19	None	add
34	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  Double  q2  =  a  *  hPrev  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]      ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  Double  q2  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    dPrev;    Double  q2  =  a  *  hPrev  +  b  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	19	None	add
35	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  double  q2  =  A  *  hPrev  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  double  q2  =  A  *  hPrev  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    dPrev;    double  q2  =  A  *  hPrev  +  b  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	19	None	add
36	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  double  q2)  =  a  *  hPrev  +  b  *  dPrev;  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  double  q2)  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    dPrev;    double  q2)  =  a  *  hPrev  +  b  *  dPrev;	  	non-compiled	[CE]  ';'  expected	19	None	add
37	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  double  q2  =  a  *  q1  +  cN  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    OutOfRangeException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  double  q2  =  a  *  q1  +  cN  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    dPrev;    double  q2  =  a  *  q1  +  cN  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
38	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  Double  q2  =  a  *  q1  +  cN  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]      OutOfRangeException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  Double  q2  =  a  *  q1  +  cN  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    dPrev;    Double  q2  =  a  *  q1  +  cN  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
39	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  double  q2  =  A  *  q1  +  cN  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  double  q2  =  A  *  q1  +  cN  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    dPrev;    double  q2  =  A  *  q1  +  cN  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
40	[BUG]  [BUGGY]  double  dPrev  =  a  *  cn  +  b  *  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  cn  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cn  +  b  *  dPrev;	      double    dPrev    =    a    *    dPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	12	None	replace
41	[BUG]  [BUGGY]  double  dPrev  =  a  *  b  +  b  *  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  b  +  b  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  b  +  b  *  cN;	      double    dPrev    =    a    *    dPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	12	None	replace
42	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  q0;  [CE]  cannot  find  symbol  q0  [FE]    AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  cN  +  b  *  q0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  b  *  q0;	  double    q2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q0	9	None	replace
43	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  double  q2  =  a  *  cN  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  double  q2  =  a  *  cN  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cN    +    b    *    dPrev;    double  q2  =  a  *  cN  +  b  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
44	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  Double  q2  =  a  *  cN  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  Double  q2  =  a  *  cN  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cN    +    b    *    dPrev;    Double  q2  =  a  *  cN  +  b  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
45	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  double  q2  =  a  *  cN  +  b  *  dprev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  double  q2  =  a  *  cN  +  b  *  dprev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cN    +    b    *    dPrev;    double  q2  =  a  *  cN  +  b  *  dprev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	8	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hPrev  +  b  *  cN;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	20	10	replace
47	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  b  *  cN;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	20	10	replace
48	[BUG]  [BUGGY]  timeout  [FE]      ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  cPrev  +  b  *  dPrev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    	compilable	timeout	20	1	replace
49	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  timeout  [FE]      ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cPrev  +  b  *  dPrev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    	compilable	timeout	20	1	replace
50	[BUG]  [BUGGY]  timeout  [FE]    OutOfRangeException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  q1  +  cN  *  p0;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    	compilable	timeout	11	1	replace
51	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  timeout  [FE]    OutOfRangeException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q1  +  cN  *  p0;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    	compilable	timeout	11	1	replace
52	[BUG]  [BUGGY]  timeout  [FE]      OutOfRangeException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hN  +  cN  *  dPrev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    	compilable	timeout	11	1	replace
53	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  timeout  [FE]      OutOfRangeException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hN  +  cN  *  dPrev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    	compilable	timeout	11	1	replace
54	[BUG]  [BUGGY]  timeout  [FE]        OutOfRangeException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  q1  +  cN  *  hN;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    	compilable	timeout	11	1	replace
55	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  timeout  [FE]        OutOfRangeException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q1  +  cN  *  hN;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    	compilable	timeout	11	1	replace
56	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  cPrev  +  b  *  dPrev;	      double    cN    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	2	None	replace
57	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  cN  =  a  *  b  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  b  +  b  *  dPrev;	      double    cN    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	2	None	replace
58	[BUG]  [BUGGY]  double  dPrev  =  a  *  hPrev  +  b  *  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  hPrev  +  b  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hPrev  +  b  *  cN;	      double    dPrev    =    a    *    dPrev    +    b    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
59	[BUG]  [BUGGY]  double  dPrev  =  a  *  hN  +  b  *  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  hN  +  b  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hN  +  b  *  cN;	      double    dPrev    =    a    *    dPrev    +    b    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
60	[BUG]  [BUGGY]  double  q1  =  a  *  q1  +  b  *  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q1  =  a  *  q1  +  b  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  q1  +  b  *  cN;	      double    q1    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	15	None	replace
61	[BUG]  [BUGGY]  double  q1  =  a  *  cN  +  b  *  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q1  =  a  *  cN  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  cN  +  b  *  dPrev;	      double    q1    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	15	None	replace
62	[BUG]  [BUGGY]  double  q1  =  a  *  hN  +  b  *  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q1  =  a  *  hN  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  hN  +  b  *  dPrev;	      double    q1    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	15	None	replace
63	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  qN;  [CE]  cannot  find  symbol  qN  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  qN;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q1  +  b  *  qN;	  double    q2    =    a    *    q1    +    b    *    q0;    	non-compiled	[CE]  cannot  find  symbol  qN	16	None	replace
64	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  double  q2)  =  a  *  hN  +  b  *  dPrev;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hN  +  b  *  dPrev;  double  q2)  =  a  *  hN  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    dPrev;    double  q2)  =  a  *  hN  +  b  *  dPrev;	  timeout    	non-compiled	[CE]  ';'  expected	6	None	add
65	[BUG]  [BUGGY]  double  q0  =  a  *  q1  +  b  *  hN;  [CE]  cannot  find  symbol  q2  [FE]    AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q0  =  a  *  q1  +  b  *  hN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  q1  +  b  *  hN;	      double    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	14	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  q1  +  b  *  p0;	      double    q2    =    a    *    q1    +    b    *    cN;    	compilable	  [FE]  AssertionError  	5	6	replace
67	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q1  +  b  *  p0;	      double    q2    =    a    *    q1    +    b    *    cN;    	compilable	  [FE]  AssertionError  	5	6	replace
68	[BUG]  [BUGGY]      double  q0  =  a  *  q1  +  b  *  dPrev;  double  q0  =  a  *  q1  +  b  *  dprev;  [CE]  variable  q0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]      double  q0  =  a  *  q1  +  b  *  dPrev;  double  q0  =  a  *  q1  +  b  *  dprev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	        double    q0    =    a    *    q1    +    b    *    dPrev;    double  q0  =  a  *  q1  +  b  *  dprev;	  	non-compiled	[CE]  variable  q0  is  already  defined  in  method  evaluate(double,double,int)	13	None	add
69	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  double  q2)  =  a  *  q1  +  cN  *  dPrev;  [CE]  ';'  expected  [FE]    OutOfRangeException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  double  q2)  =  a  *  q1  +  cN  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    dPrev;    double  q2)  =  a  *  q1  +  cN  *  dPrev;	  	non-compiled	[CE]  ';'  expected	10	None	add
70	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  q0;  [CE]  cannot  find  symbol  q0  [FE]    OutOfRangeException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  cN  *  q0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q1  +  cN  *  q0;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q0	11	None	replace
71	[BUG]  [BUGGY]  double  q1  =  a  *  q1  +  b  *  hN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q1  =  a  *  q1  +  b  *  hN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  q1  +  b  *  hN;	      double    q1    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	15	None	replace
72	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q0;  [CE]  cannot  find  symbol  q0  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q0;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  b  *  q0;	  double    q2    =    a    *    hN    +    b    *    dPrev;    timeout    	non-compiled	[CE]  cannot  find  symbol  q0	7	None	replace
73	[BUG]  [BUGGY]  double  dPrev  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  q1  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  q1  +  b  *  dPrev;	      double    dPrev    =    a    *    dPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	12	None	replace
74	[BUG]  [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  d0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  d0;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cN  +  b  *  d0;	      double    dPrev    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
75	[BUG]  [BUGGY]  double  cN  =  a  *  cN  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  cN  =  a  *  cN  +  b  *  p0;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  cN  +  b  *  p0;	      double    dPrev    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hPrev  +  b  *  q1;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	20	6	replace
77	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  b  *  q1;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	20	6	replace
78	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  double  q2)  =  a  *  cN  +  b  *  dPrev;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  cN  +  b  *  dPrev;  double  q2)  =  a  *  cN  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cN    +    b    *    dPrev;    double  q2)  =  a  *  cN  +  b  *  dPrev;	  	non-compiled	[CE]  ';'  expected	8	None	add
79	[BUG]  [BUGGY]  double  q2  =  a  *  q2  +  b  *  dPrev;  [CE]  variable  q2  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q2  +  b  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q2  +  b  *  dPrev;	  double    q2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  q2  might  not  have  been  initialized	9	None	replace
80	[BUG]  [BUGGY]  double  cPrev  =  a  *  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  cPrev  =  a  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  cN;	      double    dPrev    =    a    *    dPrev;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
81	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  cPrev  +  b  *  cN;	      double    dPrev    =    a    *    dPrev    +    b    *    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
82	[BUG]  [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  cPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  cPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cN  +  b  *  cPrev;	      double    dPrev    =    a    *    dPrev    +    b    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
83	[BUG]  [BUGGY]  double  dPrev  =  a  *  hPrev  +  b  *  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  dPrev  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hPrev  +  b  *  dPrev;	      double    dPrev    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	4	None	replace
84	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  c0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  c0;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  hPrev  +  b  *  c0;	      double    cN    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
85	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  hPrev  +  b  *  cN;	      double    cN    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	3	None	replace
86	[BUG]  [BUGGY]  double  q1  =  a  *  q1  +  cN  *  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q1  =  a  *  q1  +  cN  *  dPrev;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  q1  +  cN  *  dPrev;	      double    q1    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	15	None	replace
87	[BUG]  [BUGGY]  Double  dPrev  =  a  *  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  Double  dPrev  =  a  *  cN;  [BUGGY]    double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  dPrev  =  a  *  cN;	      double    dPrev    =    a    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
88	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  double  q2  =  a  *  hPrev  +  b  *  dprev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dPrev;  double  q2  =  a  *  hPrev  +  b  *  dprev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    dPrev;    double  q2  =  a  *  hPrev  +  b  *  dprev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	19	None	add
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hPrev  +  cN  *  dPrev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	20	10	replace
90	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  cN  *  dPrev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	20	10	replace
91	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  double  q2  =  a  *  q1  +  cN  *  dprev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    OutOfRangeException    [CONTEXT]    double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;    [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dPrev;  double  q2  =  a  *  q1  +  cN  *  dprev;  [BUGGY]    if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    dPrev;    double  q2  =  a  *  q1  +  cN  *  dprev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	10	None	add
