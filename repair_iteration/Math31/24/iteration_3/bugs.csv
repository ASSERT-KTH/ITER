bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  cN  +  b  *  p0;	  double    q2    =    a    *    cN    +    b    *    q1;    	compilable	  [FE]  AssertionError  	24	10	replace
2	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  b  *  p0;	  double    q2    =    a    *    cN    +    b    *    q1;    	compilable	  [FE]  AssertionError  	24	10	replace
3	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  double  q2  =  a  *  cN  +  b  *  q1;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  double  q2  =  a  *  cN  +  b  *  q1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cN    +    b    *    q1;    double  q2  =  a  *  cN  +  b  *  q1;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	23	None	add
4	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  Double  q2  =  a  *  cN  +  b  *  q1;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  Double  q2  =  a  *  cN  +  b  *  q1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cN    +    b    *    q1;    Double  q2  =  a  *  cN  +  b  *  q1;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	23	None	add
5	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  double  q2  =  a  *  cN  +  b  *  q1);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  double  q2  =  a  *  cN  +  b  *  q1);  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cN    +    b    *    q1;    double  q2  =  a  *  cN  +  b  *  q1);	  	non-compiled	[CE]  ';'  expected	23	None	add
6	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  double  q2  =  a  *  cN  +  b  *  q0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1;  double  q2  =  a  *  cN  +  b  *  q0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cN    +    b    *    q1;    double  q2  =  a  *  cN  +  b  *  q0;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	23	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  hPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  cN  +  b  *  hPrev;	  double    q2    =    a    *    hPrev    +    b    *    cN;    	compilable	  [FE]  AssertionError  	47	10	replace
8	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  hPrev;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  hPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  b  *  hPrev;	  double    q2    =    a    *    hPrev    +    b    *    cN;    	compilable	  [FE]  AssertionError  	47	10	replace
9	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN  +  1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hPrev  +  b  *  cN  +  1;	  double    q2    =    a    *    hPrev    +    b    *    cN;    	compilable	timeout	47	1	replace
10	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN  +  1;  timeout  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN  +  1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  b  *  cN  +  1;	  double    q2    =    a    *    hPrev    +    b    *    cN;    	compilable	timeout	47	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hPrev  +  b  *  p0;	  double    q2    =    a    *    hPrev    +    b    *    cN;    	compilable	  [FE]  AssertionError  	47	6	replace
12	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  p0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  b  *  p0;	  double    q2    =    a    *    hPrev    +    b    *    cN;    	compilable	  [FE]  AssertionError  	47	6	replace
13	[BUG]  [BUGGY]  double  dPrev  =  a  *  hN  +  b  *  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  hN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hN  +  b  *  p0;	  double    dPrev    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	28	None	replace
14	[BUG]  [BUGGY]  double  dPrev  =  a  *  cPrev  +  b  *  hN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                          AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  cPrev  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cPrev  +  b  *  hN;	  double    dPrev    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	28	None	replace
15	[BUG]  [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  b;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cN  +  b  *  b;	  double    dPrev    =    a    *    b    +    b    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	41	None	replace
16	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  b  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  b  +  b  *  cN;	  double    dPrev    =    a    *    b    +    b    *    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	41	None	replace
17	[BUG]  [BUGGY]  double  cPrev  =  a  *  cPrev  +  b  *  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  cPrev  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  cPrev  +  b  *  cN;	  double    dPrev    =    a    *    cN    +    b    *    cPrev;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	82	None	replace
18	[BUG]  [BUGGY]  double  cPrev  =  a  *  cN  +  b  *  cPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  cN  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  cN  +  b  *  cPrev;	  double    dPrev    =    a    *    cN    +    b    *    cPrev;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	82	None	replace
19	[BUG]  [BUGGY]  double  cN  =  a  *  cN  +  b  *  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  cN  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  cN  +  b  *  cN;	  double    dPrev    =    a    *    cN    +    b    *    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	27	None	replace
20	[BUG]  [BUGGY]  double  cPrev  =  a  *  cN  +  b  *  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  cN  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  cN  +  b  *  cN;	  double    dPrev    =    a    *    cN    +    b    *    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	27	None	replace
21	[BUG]  [BUGGY]  double  cN  =  a  *  p1  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  p1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  p1  +  b  *  dPrev;	  double    cN    =    a    *    p0    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
22	[BUG]  [BUGGY]  double  q1  =  a  *  cN  +  b  *  hN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  cN  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  cN  +  b  *  hN;	  double    q1    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	71	None	replace
23	[BUG]  [BUGGY]  double  q1  =  a  *  hPrev  +  b  *  hN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  hPrev  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  hPrev  +  b  *  hN;	  double    q1    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	71	None	replace
24	[BUG]  [BUGGY]  double  q0  =  a  *  q1  +  b  *  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  q1  +  b  *  dprev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  q1  +  b  *  dprev;	          double    q0    =    a    *    q1    +    b    *    dPrev;    double    q0    =    a    *    q1    +    b    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	68	None	replace
25	[BUG]  [BUGGY]  q0  =  a  *  q1  +  b  *  dprev;  [CE]  cannot  find  symbol  q0  [FE]          AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q0  =  a  *  q1  +  b  *  dprev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q0  =  a  *  q1  +  b  *  dprev;	          double    q0    =    a    *    q1    +    b    *    dPrev;    double    q0    =    a    *    q1    +    b    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  q0	68	None	replace
26	[BUG]  [BUGGY]  q0  =  a  *  q1  +  b  *  dPrev;  [CE]  cannot  find  symbol  q0  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q0  =  a  *  q1  +  b  *  dPrev;	          double    q0    =    a    *    q1    +    b    *    dPrev;    double    q0    =    a    *    q1    +    b    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  q0	68	None	replace
27	[BUG]  [BUGGY]  double  q1  =  a  *  cN  +  b  *  q0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  cN  +  b  *  q0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  cN  +  b  *  q0;	  double    q1    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	61	None	replace
28	[BUG]  [BUGGY]  double  q1  =  a  *  cN  +  b  *  p0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  cN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  cN  +  b  *  p0;	  double    q1    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	61	None	replace
29	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  double  q2  =  a  *  q1  +  cN  *  p0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  double  q2  =  a  *  q1  +  cN  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    p0;    double  q2  =  a  *  q1  +  cN  *  p0;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	50	None	add
30	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  Double  q2  =  a  *  q1  +  cN  *  p0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  Double  q2  =  a  *  q1  +  cN  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    p0;    Double  q2  =  a  *  q1  +  cN  *  p0;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	50	None	add
31	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  double  q2)  =  a  *  q1  +  cN  *  p0;  [CE]  ';'  expected  [FE]            OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  double  q2)  =  a  *  q1  +  cN  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    p0;    double  q2)  =  a  *  q1  +  cN  *  p0;	  timeout    	non-compiled	[CE]  ';'  expected	50	None	add
32	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  double  q2  =  a  *  q1  +  cN  *  hN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  double  q2  =  a  *  q1  +  cN  *  hN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    hN;    double  q2  =  a  *  q1  +  cN  *  hN;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	54	None	add
33	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  Double  q2  =  a  *  q1  +  cN  *  hN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]              OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  Double  q2  =  a  *  q1  +  cN  *  hN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    hN;    Double  q2  =  a  *  q1  +  cN  *  hN;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	54	None	add
34	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  double  q2  =  a  *  q1  +  cN  *  hN);  [CE]  ';'  expected  [FE]                OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  double  q2  =  a  *  q1  +  cN  *  hN);  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    hN;    double  q2  =  a  *  q1  +  cN  *  hN);	  timeout    	non-compiled	[CE]  ';'  expected	54	None	add
35	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  double  q2)  =  a  *  q1  +  cN  *  hN;  [CE]  ';'  expected  [FE]                  OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  double  q2)  =  a  *  q1  +  cN  *  hN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    hN;    double  q2)  =  a  *  q1  +  cN  *  hN;	  timeout    	non-compiled	[CE]  ';'  expected	54	None	add
36	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q2  =  a  *  q1  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	Double  q2  =  a  *  q1  +  cN  *  dPrev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    Double    q2    =    a    *    q1    +    cN    *    dPrev;    	compilable	  [FE]  OutOfRangeException  	38	12	replace
37	[BUG]  [BUGGY]  Double  q2  =  a  *  q1  +  cN  *  dPrev;  [FE]  OutOfRangeException  [FE]          OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q2  =  a  *  q1  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  q2  =  a  *  q1  +  cN  *  dPrev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    Double    q2    =    a    *    q1    +    cN    *    dPrev;    	compilable	  [FE]  OutOfRangeException  	38	12	replace
38	[BUG]  [BUGGY]  q2  =  a  *  q1  +  cN  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]            OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q2  =  a  *  q1  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q2  =  a  *  q1  +  cN  *  dPrev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    Double    q2    =    a    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	38	None	replace
39	[BUG]  [BUGGY]  double  q0  =  a  *  hN  +  b  *  cN;  [CE]  cannot  find  symbol  q2  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  hN  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  hN  +  b  *  cN;	  double    q0    =    a    *    q1    +    b    *    cN;    	non-compiled	[CE]  cannot  find  symbol  q2	11	None	replace
40	[BUG]  [BUGGY]  double  q0  =  a  *  cN  +  b  *  q1;  [CE]  cannot  find  symbol  q2  [FE]          AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  cN  +  b  *  q1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  cN  +  b  *  q1;	  double    q0    =    a    *    q1    +    b    *    cN;    	non-compiled	[CE]  cannot  find  symbol  q2	11	None	replace
41	[BUG]  [BUGGY]  q0  =  a  *  q1  +  b  *  cN;  [CE]  cannot  find  symbol  q0  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q0  =  a  *  q1  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q0  =  a  *  q1  +  b  *  cN;	          double    q0    =    a    *    q1    +    b    *    dPrev;    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q0	22	None	replace
42	[BUG]  [BUGGY]  q0  =  a  *  q1  +  b  *  cPrev;  [CE]  cannot  find  symbol  q0  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q0  =  a  *  q1  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q0  =  a  *  q1  +  b  *  cPrev;	          double    q0    =    a    *    q1    +    b    *    dPrev;    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q0	22	None	replace
43	[BUG]  [BUGGY]  q1  =  a  *  q1  +  b  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]        AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q1  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q1  =  a  *  q1  +  b  *  dPrev;	          double    q0    =    a    *    q1    +    b    *    dPrev;    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	22	None	replace
44	[BUG]  [BUGGY]  double  q0  =  a  *  cN  +  b  *  p0;  [CE]  cannot  find  symbol  q2  [FE]          AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  cN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  cN  +  b  *  p0;	  double    q0    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	12	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hPrev  +  cN  *  p0;	  double    q2    =    a    *    hPrev    +    cN    *    dPrev;    	compilable	  [FE]  AssertionError  	90	10	replace
46	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  cN  *  p0;	  double    q2    =    a    *    hPrev    +    cN    *    dPrev;    	compilable	  [FE]  AssertionError  	90	10	replace
47	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hPrev  +  cN  *  q1;	  double    q2    =    a    *    hPrev    +    cN    *    dPrev;    	compilable	timeout	90	1	replace
48	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  q1;  timeout  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  cN  *  q1;	  double    q2    =    a    *    hPrev    +    cN    *    dPrev;    	compilable	timeout	90	1	replace
49	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q1  +  cN  *  dprev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2    =    a    *    q1    +    cN    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	91	None	replace
50	[BUG]  [BUGGY]  q2  =  a  *  q1  +  cN  *  dprev;  [CE]  cannot  find  symbol  q2  [FE]          OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q2  =  a  *  q1  +  cN  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q2  =  a  *  q1  +  cN  *  dprev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2    =    a    *    q1    +    cN    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  q2	91	None	replace
51	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  cN  *  dprev;  [CE]  cannot  find  symbol  dprev  [FE]            OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  cN  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  cN  *  dprev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2    =    a    *    q1    +    cN    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	91	None	replace
52	[BUG]  [BUGGY]  double  q1  =  a  *  hN  +  cN  *  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  hN  +  cN  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  hN  +  cN  *  dPrev;	  double    q1    =    a    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	86	None	replace
53	[BUG]  [BUGGY]  double  q1  =  a  *  q1  +  cN  *  p0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  q1  +  cN  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  q1  +  cN  *  p0;	  double    q1    =    a    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	86	None	replace
54	[BUG]  [BUGGY]  double  dPrev  =  cN  *  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  cN  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  cN  *  p0;	  double    dPrev    =    p0    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	32	None	replace
55	[BUG]  [BUGGY]  double  cN  =  p0  *  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  p0  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  p0  *  cN;	  double    dPrev    =    p0    *    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	32	None	replace
56	[BUG]  [BUGGY]  double  cPrev  =  p0  *  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  p0  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  p0  *  cN;	  double    dPrev    =    p0    *    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	32	None	replace
57	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hN  +  b  *  p0;	  double    q2    =    a    *    q1    +    b    *    p0;    	compilable	timeout	67	1	replace
58	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  p0;  timeout  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hN  +  b  *  p0;	  double    q2    =    a    *    q1    +    b    *    p0;    	compilable	timeout	67	1	replace
59	[BUG]  [BUGGY]  q2  =  a  *  cN  +  b  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q2  =  a  *  cN  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q2  =  a  *  cN  +  b  *  dPrev;	  double    q2    =    a    *    cN    +    b    *    dPrev;    double    q2    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	43	None	replace
60	[BUG]  [BUGGY]  double  q0  =  a  *  q1  +  cN  *  hN;  [CE]  cannot  find  symbol  q2  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  q1  +  cN  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  q1  +  cN  *  hN;	  double    q0    =    a    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	13	None	replace
61	[BUG]  [BUGGY]  double  q0  =  a  *  hN  +  cN  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  hN  +  cN  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  hN  +  cN  *  dPrev;	  double    q0    =    a    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	13	None	replace
62	[BUG]  [BUGGY]  double  q0  =  a  *  q1  +  cN  *  p0;  [CE]  cannot  find  symbol  q2  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  q1  +  cN  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  q1  +  cN  *  p0;	  double    q0    =    a    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	13	None	replace
63	[BUG]  [BUGGY]  timeout  [FE]          OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  cN  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hN  +  cN  *  p0;	  double    q2    =    a    *    hN    +    cN    *    dPrev;    timeout    	compilable	timeout	53	1	replace
64	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  cN  *  p0;  timeout  [FE]          OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  cN  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hN  +  cN  *  p0;	  double    q2    =    a    *    hN    +    cN    *    dPrev;    timeout    	compilable	timeout	53	1	replace
65	[BUG]  [BUGGY]  double  q2)  =  a  *  hN  +  b  *  dPrev;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2)  =  a  *  hN  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2)  =  a  *  hN  +  b  *  dPrev;	  double    q2    =    a    *    hN    +    b    *    dPrev;    double    q2)    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  ';'  expected	64	None	replace
66	[BUG]  [BUGGY]  double  q2)  =  a  *  hN  +  b  *  cPrev;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2)  =  a  *  hN  +  b  *  cPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2)  =  a  *  hN  +  b  *  cPrev;	  double    q2    =    a    *    hN    +    b    *    dPrev;    double    q2)    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  ';'  expected	64	None	replace
67	[BUG]  [BUGGY]  double  cPrev  =  a  *  cN  +  b  *  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  cN  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  cN  +  b  *  dPrev;	  double    dPrev    =    a    *    cn    +    b    *    dPrev;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	40	None	replace
68	[BUG]  [BUGGY]  double  dPrev  =  a  *  cn  +  b  *  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  cn  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cn  +  b  *  cN;	  double    dPrev    =    a    *    cn    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	40	None	replace
69	[BUG]  [BUGGY]  timeout  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q2  =  a  *  hN  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	Double  q2  =  a  *  hN  +  b  *  dPrev;	  double    q2    =    a    *    hN    +    b    *    dPrev;    Double    q2    =    a    *    hN    +    b    *    dPrev;    	compilable	timeout	2	1	replace
70	[BUG]  [BUGGY]  Double  q2  =  a  *  hN  +  b  *  dPrev;  timeout  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q2  =  a  *  hN  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  q2  =  a  *  hN  +  b  *  dPrev;	  double    q2    =    a    *    hN    +    b    *    dPrev;    Double    q2    =    a    *    hN    +    b    *    dPrev;    	compilable	timeout	2	1	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  cPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hN  +  b  *  cPrev;	  double    q2    =    a    *    hN    +    b    *    dPrev;    Double    q2    =    a    *    hN    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	2	6	replace
72	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  cPrev;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  cPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hN  +  b  *  cPrev;	  double    q2    =    a    *    hN    +    b    *    dPrev;    Double    q2    =    a    *    hN    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	2	6	replace
73	[BUG]  [BUGGY]  q2  =  a  *  hN  +  b  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q2  =  a  *  hN  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q2  =  a  *  hN  +  b  *  dPrev;	  double    q2    =    a    *    hN    +    b    *    dPrev;    Double    q2    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	2	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  cN  +  cN  *  dPrev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2    =    a    *    q1    +    cN    *    dPrev;    	compilable	  [FE]  AssertionError  	37	6	replace
75	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  cN  *  dPrev;  [FE]  AssertionError  [FE]        OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  cN  *  dPrev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2    =    a    *    q1    +    cN    *    dPrev;    	compilable	  [FE]  AssertionError  	37	6	replace
76	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  double  q2  =  a  *  q1  +  b  *  hN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  double  q2  =  a  *  q1  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    b    *    hN;    double  q2  =  a  *  q1  +  b  *  hN;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
77	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  Double  q2  =  a  *  q1  +  b  *  hN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  Double  q2  =  a  *  q1  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    b    *    hN;    Double  q2  =  a  *  q1  +  b  *  hN;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
78	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  double  q2  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    b    *    hN;    double  q2  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
79	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  q2  =  a  *  q1  +  b  *  hN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  q2  =  a  *  q1  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    b    *    hN;    q2  =  a  *  q1  +  b  *  hN;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	9	None	add
80	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  q1  +  b  *  p0;	  double    cN    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
81	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN;  double  q2  =  a  *  hPrev  +  b  *  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN;  double  q2  =  a  *  hPrev  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    cN;    double  q2  =  a  *  hPrev  +  b  *  cN;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	46	None	add
82	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN;  Double  q2  =  a  *  hPrev  +  b  *  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN;  Double  q2  =  a  *  hPrev  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    cN;    Double  q2  =  a  *  hPrev  +  b  *  cN;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	46	None	add
83	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN;  double  q2)  =  a  *  hPrev  +  b  *  cN;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN;  double  q2)  =  a  *  hPrev  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    cN;    double  q2)  =  a  *  hPrev  +  b  *  cN;	  	non-compiled	[CE]  ';'  expected	46	None	add
84	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN;  double  q2  =  a  *  hprev  +  b  *  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  cN;  double  q2  =  a  *  hprev  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    cN;    double  q2  =  a  *  hprev  +  b  *  cN;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	46	None	add
85	[BUG]  [BUGGY]  double  cPrev  =  a  *  cN  +  1;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  cN  +  1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  cN  +  1;	  double    cPrev    =    a    *    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	80	None	replace
86	[BUG]  [BUGGY]  double  cPrev  =  a  *  hN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  hN;	  double    cPrev    =    a    *    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	80	None	replace
87	[BUG]  [BUGGY]  double  cPrev  =  a  *  dPrev;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  dPrev;	  double    cPrev    =    a    *    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	80	None	replace
88	[BUG]  [BUGGY]  q2  =  a  *  hPrev  +  b  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]        ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q2  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q2  =  a  *  hPrev  +  b  *  dPrev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    double    q2    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	33	None	replace
89	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  cPrev  +  b  *  p0;	  double    cN    =    a    *    cPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	56	None	replace
90	[BUG]  [BUGGY]  double  q2)  =  a  *  q1  +  cN  *  dPrev;  [CE]  ';'  expected  [FE]        OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2)  =  a  *  q1  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2)  =  a  *  q1  +  cN  *  dPrev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2)    =    a    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  ';'  expected	69	None	replace
91	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    cN    *    dPrev;    double  q2  =  a  *  hPrev  +  cN  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	89	None	add
92	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  Double  q2  =  a  *  hPrev  +  cN  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  Double  q2  =  a  *  hPrev  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    cN    *    dPrev;    Double  q2  =  a  *  hPrev  +  cN  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	89	None	add
93	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  double  q2  =  A  *  hPrev  +  cN  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  double  q2  =  A  *  hPrev  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    cN    *    dPrev;    double  q2  =  A  *  hPrev  +  cN  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	89	None	add
94	[BUG]  [BUGGY]  timeout  [FE]            OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  cN  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hN  +  cN  *  q1;	  double    q2    =    a    *    q1    +    cN    *    hN;    timeout    	compilable	timeout	55	1	replace
95	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  cN  *  q1;  timeout  [FE]            OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  cN  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hN  +  cN  *  q1;	  double    q2    =    a    *    q1    +    cN    *    hN;    timeout    	compilable	timeout	55	1	replace
96	[BUG]  [BUGGY]  timeout  [FE]              OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  hN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hPrev  +  cN  *  hN;	  double    q2    =    a    *    q1    +    cN    *    hN;    timeout    	compilable	timeout	55	1	replace
97	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  hN;  timeout  [FE]              OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  hN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  cN  *  hN;	  double    q2    =    a    *    q1    +    cN    *    hN;    timeout    	compilable	timeout	55	1	replace
98	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  p0  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  p0  +  b  *  cN;	  double    cN    =    a    *    cPrev    +    b    *    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	81	None	replace
99	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  dPrev  +  b  *  cN;	  double    cN    =    a    *    cPrev    +    b    *    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	81	None	replace
100	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  p0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    b    *    p0;    double  q2  =  a  *  q1  +  b  *  p0;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	66	None	add
101	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    b    *    p0;    double  q2  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	66	None	add
102	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  Double  q2  =  a  *  q1  +  b  *  p0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  Double  q2  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    b    *    p0;    Double  q2  =  a  *  q1  +  b  *  p0;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	66	None	add
103	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  c0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  c0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    b    *    p0;    double  q2  =  a  *  q1  +  b  *  c0;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	66	None	add
104	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  cN  +  b  *  hN;	  double    q2    =    a    *    q1    +    b    *    hN;    	compilable	timeout	10	1	replace
105	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  hN;  timeout  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  b  *  hN;	  double    q2    =    a    *    q1    +    b    *    hN;    	compilable	timeout	10	1	replace
106	[BUG]  [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  hPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cN  +  b  *  hPrev;	  double    dPrev    =    a    *    hPrev    +    b    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	58	None	replace
107	[BUG]  [BUGGY]  double  cPrev  =  a  *  hPrev  +  b  *  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  hPrev  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  hPrev  +  b  *  cN;	  double    dPrev    =    a    *    hPrev    +    b    *    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	58	None	replace
108	[BUG]  [BUGGY]  double  dPrev  =  a  *  cPrev  +  b  *  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  cPrev  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cPrev  +  b  *  p0;	  double    dPrev    =    a    *    cN    +    b    *    p0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	25	None	replace
109	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  p0  +  b  *  hPrev;	  double    cN    =    a    *    hPrev    +    b    *    p0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
110	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  hN  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  hN  +  b  *  p0;	  double    cN    =    a    *    hPrev    +    b    *    p0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
111	[BUG]  [BUGGY]  double  cN  =  a  *  p1  +  b  *  hPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                          AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  p1  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  p1  +  b  *  hPrev;	  double    cN    =    a    *    hPrev    +    b    *    p0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	18	None	replace
112	[BUG]  [BUGGY]  timeout  [FE]          ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  cPrev  +  b  *  q1;	  double    q2    =    a    *    cPrev    +    b    *    dPrev;    timeout    	compilable	timeout	49	1	replace
113	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  q1;  timeout  [FE]          ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cPrev  +  b  *  q1;	  double    q2    =    a    *    cPrev    +    b    *    dPrev;    timeout    	compilable	timeout	49	1	replace
114	[BUG]  [BUGGY]  double  q0  =  a  *  hN  +  b  *  cPrev;  [CE]  cannot  find  symbol  q2  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  hN  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  hN  +  b  *  cPrev;	  double    q0    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	14	None	replace
115	[BUG]  [BUGGY]  double  dPrev  =  a  *  p0  +  b  *  hPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  p0  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  p0  +  b  *  hPrev;	  double    dPrev    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	83	None	replace
116	[BUG]  [BUGGY]  double  cN  =  a  *  p1  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  p1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  p1  +  b  *  p0;	  double    cN    =    a    *    cN    +    b    *    p0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	75	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q2  =  a  *  cN  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	Double  q2  =  a  *  cN  +  b  *  dPrev;	  double    q2    =    a    *    cN    +    b    *    dPrev;    Double    q2    =    a    *    cN    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	44	6	replace
118	[BUG]  [BUGGY]  Double  q2  =  a  *  cN  +  b  *  dPrev;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q2  =  a  *  cN  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  q2  =  a  *  cN  +  b  *  dPrev;	  double    q2    =    a    *    cN    +    b    *    dPrev;    Double    q2    =    a    *    cN    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	44	6	replace
119	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  dprev;  [CE]  cannot  find  symbol  dprev  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  b  *  dprev;	  double    q2    =    a    *    cN    +    b    *    dPrev;    double    q2    =    a    *    cN    +    b    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	45	None	replace
120	[BUG]  [BUGGY]  q2  =  a  *  cN  +  b  *  dprev;  [CE]  cannot  find  symbol  q2  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q2  =  a  *  cN  +  b  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q2  =  a  *  cN  +  b  *  dprev;	  double    q2    =    a    *    cN    +    b    *    dPrev;    double    q2    =    a    *    cN    +    b    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  q2	45	None	replace
121	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  dprev;  [CE]  cannot  find  symbol  dprev  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hN  +  b  *  dprev;	  double    q2    =    a    *    cN    +    b    *    dPrev;    double    q2    =    a    *    cN    +    b    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	45	None	replace
122	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  cN  *  q0;  [CE]  cannot  find  symbol  q0  [FE]        OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  cN  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hN  +  cN  *  q0;	  double    q2    =    a    *    q1    +    cN    *    q0;    	non-compiled	[CE]  cannot  find  symbol  q0	70	None	replace
123	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  cN  *  q0;  [CE]  cannot  find  symbol  q0  [FE]          OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  cN  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  cN  *  q0;	  double    q2    =    a    *    q1    +    cN    *    q0;    	non-compiled	[CE]  cannot  find  symbol  q0	70	None	replace
124	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  double  q2  =  a  *  hN  +  b  *  q1;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  double  q2  =  a  *  hN  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    q1;    double  q2  =  a  *  hN  +  b  *  q1;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	4	None	add
125	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  Double  q2  =  a  *  hN  +  b  *  q1;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  Double  q2  =  a  *  hN  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    q1;    Double  q2  =  a  *  hN  +  b  *  q1;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	4	None	add
126	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  double  q2  =  a  *  hN  +  b  *  q1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  double  q2  =  a  *  hN  +  b  *  q1);  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    q1;    double  q2  =  a  *  hN  +  b  *  q1);	  timeout    	non-compiled	[CE]  ';'  expected	4	None	add
127	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  double  q2  =  a  *  hN  +  b  *  q0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  double  q2  =  a  *  hN  +  b  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    q1;    double  q2  =  a  *  hN  +  b  *  q0;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	4	None	add
128	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  double  q2  =  a  *  hN  +  b  *  q1.;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  q1;  double  q2  =  a  *  hN  +  b  *  q1.;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    q1;    double  q2  =  a  *  hN  +  b  *  q1.;	  timeout    	non-compiled	[CE]  <identifier>  expected	4	None	add
129	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  qN;  [CE]  cannot  find  symbol  qN  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  qN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  b  *  qN;	  double    q2    =    a    *    q1    +    b    *    qN;    	non-compiled	[CE]  cannot  find  symbol  qN	63	None	replace
130	[BUG]  [BUGGY]  double  dPrev  =  a  *  cPrev  +  b  *  d0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  cPrev  +  b  *  d0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cPrev  +  b  *  d0;	  double    dPrev    =    a    *    cN    +    b    *    d0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	74	None	replace
131	[BUG]  [BUGGY]  double  dPrev  =  a  *  hN  +  b  *  d0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  hN  +  b  *  d0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hN  +  b  *  d0;	  double    dPrev    =    a    *    cN    +    b    *    d0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	74	None	replace
132	[BUG]  [BUGGY]  double  q1  =  a  *  hPrev  +  b  *  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  hPrev  +  b  *  dPrev;	  double    q1    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	62	None	replace
133	[BUG]  [BUGGY]  double  q1  =  a  *  hN  +  b  *  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  hN  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  hN  +  b  *  cN;	  double    q1    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	62	None	replace
134	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q2  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	Double  q2  =  a  *  hPrev  +  b  *  dPrev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    Double    q2    =    a    *    hPrev    +    b    *    dPrev;    	compilable	  [FE]  ConvergenceException  	34	9	replace
135	[BUG]  [BUGGY]  Double  q2  =  a  *  hPrev  +  b  *  dPrev;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q2  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  q2  =  a  *  hPrev  +  b  *  dPrev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    Double    q2    =    a    *    hPrev    +    b    *    dPrev;    	compilable	  [FE]  ConvergenceException  	34	9	replace
136	[BUG]  [BUGGY]  double  q2)  =  a  *  hPrev  +  b  *  dPrev;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2)  =  a  *  hPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2)  =  a  *  hPrev  +  b  *  dPrev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    double    q2)    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  ';'  expected	36	None	replace
137	[BUG]  [BUGGY]  double  q2)  =  a  *  hPrev  +  b  *  cN;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2)  =  a  *  hPrev  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2)  =  a  *  hPrev  +  b  *  cN;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    double    q2)    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  ';'  expected	36	None	replace
138	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  double  q2  =  a  *  cPrev  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  double  q2  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cPrev    +    b    *    dPrev;    double  q2  =  a  *  cPrev  +  b  *  dPrev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
139	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  Double  q2  =  a  *  cPrev  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  Double  q2  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cPrev    +    b    *    dPrev;    Double  q2  =  a  *  cPrev  +  b  *  dPrev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
140	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  double  q2  =  A  *  cPrev  +  b  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]              ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  double  q2  =  A  *  cPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cPrev    +    b    *    dPrev;    double  q2  =  A  *  cPrev  +  b  *  dPrev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
141	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  c0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  hN  +  b  *  c0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  hN  +  b  *  c0;	  double    cN    =    a    *    hPrev    +    b    *    c0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
142	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  c0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  q1  +  b  *  c0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  q1  +  b  *  c0;	  double    cN    =    a    *    hPrev    +    b    *    c0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
143	[BUG]  [BUGGY]  double  q2  =  A  *  hPrev  +  b  *  dPrev;  [CE]  cannot  find  symbol  A  [FE]            ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  A  *  hPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  A  *  hPrev  +  b  *  dPrev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    double    q2    =    A    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  A	35	None	replace
144	[BUG]  [BUGGY]  q2  =  A  *  hPrev  +  b  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]              ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q2  =  A  *  hPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q2  =  A  *  hPrev  +  b  *  dPrev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    double    q2    =    A    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	35	None	replace
145	[BUG]  [BUGGY]  Double  q2  =  A  *  hPrev  +  b  *  dPrev;  [CE]  cannot  find  symbol  A  [FE]                ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q2  =  A  *  hPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  q2  =  A  *  hPrev  +  b  *  dPrev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    double    q2    =    A    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  A	35	None	replace
146	[BUG]  [BUGGY]  double  q2  =  A  *  hPrev  +  b  *  cN;  [CE]  cannot  find  symbol  A  [FE]                  ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  A  *  hPrev  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  A  *  hPrev  +  b  *  cN;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    double    q2    =    A    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  A	35	None	replace
147	[BUG]  [BUGGY]  double  dPrev  =  a  *  q1  +  b  *  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  q1  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  q1  +  b  *  cN;	  double    dPrev    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	73	None	replace
148	[BUG]  [BUGGY]  double  q2  =  A  *  q1  +  cN  *  dPrev;  [CE]  cannot  find  symbol  A  [FE]            OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  A  *  q1  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  A  *  q1  +  cN  *  dPrev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2    =    A    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  A	39	None	replace
149	[BUG]  [BUGGY]  q2  =  A  *  q1  +  cN  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]              OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q2  =  A  *  q1  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q2  =  A  *  q1  +  cN  *  dPrev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2    =    A    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	39	None	replace
150	[BUG]  [BUGGY]  double  q2  =  A  *  q1  +  cN  *  p0;  [CE]  cannot  find  symbol  A  [FE]                OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  A  *  q1  +  cN  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  A  *  q1  +  cN  *  p0;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2    =    A    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  A	39	None	replace
151	[BUG]  [BUGGY]  Double  q2  =  A  *  q1  +  cN  *  dPrev;  [CE]  cannot  find  symbol  A  [FE]                  OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q2  =  A  *  q1  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  q2  =  A  *  q1  +  cN  *  dPrev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2    =    A    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  A	39	None	replace
152	[BUG]  [BUGGY]  q2  =  a  *  hN  +  b  *  dprev;  [CE]  cannot  find  symbol  q2  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q2  =  a  *  hN  +  b  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q2  =  a  *  hN  +  b  *  dprev;	  double    q2    =    a    *    hN    +    b    *    dPrev;    double    q2    =    a    *    hN    +    b    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  q2	3	None	replace
153	[BUG]  [BUGGY]  double  dPrev  =  a  *  cN  +  1;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  cN  +  1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cN  +  1;	  double    dPrev    =    a    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	29	None	replace
154	[BUG]  [BUGGY]  double  cN  =  a  *  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  cN;	  double    dPrev    =    a    *    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	29	None	replace
155	[BUG]  [BUGGY]  double  dPrev  =  a  *  cN  +  2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  cN  +  2;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cN  +  2;	  double    dPrev    =    a    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	29	None	replace
156	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  q1  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  q1  +  b  *  cN;	  double    cN    =    a    *    hPrev    +    b    *    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	85	None	replace
157	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  b  *  dprev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    double    q2    =    a    *    hPrev    +    b    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	88	None	replace
158	[BUG]  [BUGGY]  q2  =  a  *  hPrev  +  b  *  dprev;  [CE]  cannot  find  symbol  q2  [FE]          ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q2  =  a  *  hPrev  +  b  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q2  =  a  *  hPrev  +  b  *  dprev;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    double    q2    =    a    *    hPrev    +    b    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  q2	88	None	replace
159	[BUG]  [BUGGY]  double  q2)  =  a  *  cN  +  b  *  dPrev;  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2)  =  a  *  cN  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2)  =  a  *  cN  +  b  *  dPrev;	  double    q2    =    a    *    cN    +    b    *    dPrev;    double    q2)    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  ';'  expected	78	None	replace
160	[BUG]  [BUGGY]  double  q2)  =  a  *  cN  +  b  *  p0;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2)  =  a  *  cN  +  b  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2)  =  a  *  cN  +  b  *  p0;	  double    q2    =    a    *    cN    +    b    *    dPrev;    double    q2)    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  ';'  expected	78	None	replace
161	[BUG]  [BUGGY]  double  q1  =  a  *  cN  +  b  *  q1;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  cN  +  b  *  q1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  cN  +  b  *  q1;	  double    q1    =    a    *    q1    +    b    *    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	60	None	replace
162	[BUG]  [BUGGY]  Double  dPrev  =  a  *  cN  +  1;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  dPrev  =  a  *  cN  +  1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  dPrev  =  a  *  cN  +  1;	  Double    dPrev    =    a    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	87	None	replace
163	[BUG]  [BUGGY]  Double  cN  =  a  *  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  cN  =  a  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  cN  =  a  *  cN;	  Double    dPrev    =    a    *    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	87	None	replace
164	[BUG]  [BUGGY]  Double  cPrev  =  a  *  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  cPrev  =  a  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  cPrev  =  a  *  cN;	  Double    dPrev    =    a    *    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	87	None	replace
165	[BUG]  [BUGGY]  Double  dPrev  =  cN  *  a;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  dPrev  =  cN  *  a;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  dPrev  =  cN  *  a;	  Double    dPrev    =    a    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	87	None	replace
166	[BUG]  [BUGGY]          double    q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;  double  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  q0  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]          double    q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;  double  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	                double        q0        =        a        *        q1        +        b        *        dPrev;        q0    =    a    *    q1    +    b    *    dPrev;    double  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  q0  is  already  defined  in  method  evaluate(double,double,int)	21	None	add
167	[BUG]  [BUGGY]          double    q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;  Double  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  q0  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]          double    q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;  Double  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	                double        q0        =        a        *        q1        +        b        *        dPrev;        q0    =    a    *    q1    +    b    *    dPrev;    Double  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  q0  is  already  defined  in  method  evaluate(double,double,int)	21	None	add
168	[BUG]  [BUGGY]          double    q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;  double  q0  =  a  *  q1  +  b  *  cN;  q0  =  a  *  q1  +  b  *  dPrev;  [CE]  variable  q0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]          double    q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;  double  q0  =  a  *  q1  +  b  *  cN;  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	                double        q0        =        a        *        q1        +        b        *        dPrev;        q0    =    a    *    q1    +    b    *    dPrev;    double  q0  =  a  *  q1  +  b  *  cN;  q0  =  a  *  q1  +  b  *  dPrev;	  	non-compiled	[CE]  variable  q0  is  already  defined  in  method  evaluate(double,double,int)	21	None	add
169	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]          double    q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	                double        q0        =        a        *        q1        +        b        *        dPrev;        q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;	  	compilable	  [FE]  AssertionError  	21	2	add
170	[BUG]  [BUGGY]          double    q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]          double    q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	                double        q0        =        a        *        q1        +        b        *        dPrev;        q0    =    a    *    q1    +    b    *    dPrev;    q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  dPrev;	  	compilable	  [FE]  AssertionError  	21	2	add
171	[BUG]  [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  hN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  cN  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cN  +  b  *  hN;	  double    dPrev    =    a    *    hN    +    b    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	59	None	replace
172	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN  +  1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hN  +  b  *  cN  +  1;	  double    q2    =    a    *    hN    +    b    *    cN;    timeout    	compilable	  [FE]  OutOfRangeException  	7	12	replace
173	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN  +  1;  [FE]  OutOfRangeException  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN  +  1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hN  +  b  *  cN  +  1;	  double    q2    =    a    *    hN    +    b    *    cN;    timeout    	compilable	  [FE]  OutOfRangeException  	7	12	replace
174	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  double  q2  =  a  *  hPrev  +  b  *  q1;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  double  q2  =  a  *  hPrev  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    q1;    double  q2  =  a  *  hPrev  +  b  *  q1;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	76	None	add
175	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  Double  q2  =  a  *  hPrev  +  b  *  q1;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  Double  q2  =  a  *  hPrev  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    q1;    Double  q2  =  a  *  hPrev  +  b  *  q1;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	76	None	add
176	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  double  q2  =  a  *  hPrev  +  b  *  q1);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  double  q2  =  a  *  hPrev  +  b  *  q1);  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    q1;    double  q2  =  a  *  hPrev  +  b  *  q1);	  	non-compiled	[CE]  ';'  expected	76	None	add
177	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  double  q2  =  a  *  hPrev  +  b  *  q0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  double  q2  =  a  *  hPrev  +  b  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    q1;    double  q2  =  a  *  hPrev  +  b  *  q0;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	76	None	add
178	[BUG]  [BUGGY]  double  q0  =  a  *  cN  +  b  *  hN;  [CE]  cannot  find  symbol  q2  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  cN  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  cN  +  b  *  hN;	  double    q0    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  cannot  find  symbol  q2	65	None	replace
179	[BUG]  [BUGGY]  double  q0  =  a  *  hN  +  b  *  q1;  [CE]  cannot  find  symbol  q2  [FE]          AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  hN  +  b  *  q1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  hN  +  b  *  q1;	  double    q0    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  cannot  find  symbol  q2	65	None	replace
180	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  b  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  b  +  b  *  p0;	  double    cN    =    a    *    b    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	57	None	replace
181	[BUG]  [BUGGY]  Double  q0  =  a  *  q1  +  b  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]          AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  q0  =  a  *  q1  +  b  *  dPrev;	          double    q0    =    a    *    q1    +    b    *    dPrev;    Double    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	20	None	replace
182	[BUG]  [BUGGY]  double  dPrev  =  b  *  cN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  b  *  cN;	  double    dPrev    =    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	31	None	replace
183	[BUG]  [BUGGY]  double  dPrev  =  a  *  b;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  b;	  double    dPrev    =    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	31	None	replace
184	[BUG]  [BUGGY]  double  dPrev  =  cN  *  hN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  cN  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  cN  *  hN;	  double    dPrev    =    cN    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	30	None	replace
185	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  double  q2  =  a  *  hN  +  cN  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  double  q2  =  a  *  hN  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    cN    *    dPrev;    double  q2  =  a  *  hN  +  cN  *  dPrev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
186	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  Double  q2  =  a  *  hN  +  cN  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]            OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  Double  q2  =  a  *  hN  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    cN    *    dPrev;    Double  q2  =  a  *  hN  +  cN  *  dPrev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
187	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  double  q2  =  a  *  hN  +  cN  *  dprev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]              OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  double  q2  =  a  *  hN  +  cN  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    cN    *    dPrev;    double  q2  =  a  *  hN  +  cN  *  dprev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
188	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  double  q2  =  A  *  hN  +  cN  *  dPrev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  double  q2  =  A  *  hN  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    cN    *    dPrev;    double  q2  =  A  *  hN  +  cN  *  dPrev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	52	None	add
189	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  double  q2  =  a  *  hN  +  b  *  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  double  q2  =  a  *  hN  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    cN;    double  q2  =  a  *  hN  +  b  *  cN;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
190	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  Double  q2  =  a  *  hN  +  b  *  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  Double  q2  =  a  *  hN  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    cN;    Double  q2  =  a  *  hN  +  b  *  cN;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
191	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  double  q2  =  a  *  hN  +  b  *  cN);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  double  q2  =  a  *  hN  +  b  *  cN);  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    cN;    double  q2  =  a  *  hN  +  b  *  cN);	  timeout    	non-compiled	[CE]  ';'  expected	6	None	add
192	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  double  q2)  =  a  *  hN  +  b  *  cN;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  double  q2)  =  a  *  hN  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    cN;    double  q2)  =  a  *  hN  +  b  *  cN;	  timeout    	non-compiled	[CE]  ';'  expected	6	None	add
193	[BUG]  [BUGGY]  double  q2  =  A  *  hPrev  +  b  *  p0;  [CE]  cannot  find  symbol  A  [FE]            ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  A  *  hPrev  +  b  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  A  *  hPrev  +  b  *  p0;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    double    q2    =    A    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  A	35	None	replace
194	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  c0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  c0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  dPrev  +  b  *  c0;	  double    cN    =    a    *    hPrev    +    b    *    c0;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	84	None	replace
195	[BUG]  [BUGGY]  double  q1  =  a  *  cPrev  +  b  *  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  cPrev  +  b  *  dPrev;	  double    q1    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	61	None	replace
196	[BUG]  [BUGGY]  double  q1  =  a  *  hN  +  b  *  q0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  hN  +  b  *  q0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  hN  +  b  *  q0;	  double    q1    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	62	None	replace
197	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  double  q2)  =  a  *  hPrev  +  b  *  q1;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  q1;  double  q2)  =  a  *  hPrev  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    b    *    q1;    double  q2)  =  a  *  hPrev  +  b  *  q1;	  	non-compiled	[CE]  ';'  expected	76	None	add
198	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  double  q2)  =  a  *  hPrev  +  cN  *  dPrev;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  double  q2)  =  a  *  hPrev  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    cN    *    dPrev;    double  q2)  =  a  *  hPrev  +  cN  *  dPrev;	  	non-compiled	[CE]  ';'  expected	89	None	add
199	[BUG]  [BUGGY]  double  cPrev  =  a  *  cPrev  +  b  *  p0;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  cPrev  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  cPrev  +  b  *  p0;	  double    dPrev    =    a    *    cN    +    b    *    p0;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	25	None	replace
200	[BUG]  [BUGGY]  double  dPrev  =  b  *  DEFAULT_EPSILON;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  b  *  DEFAULT_EPSILON;	  double    dPrev    =    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	31	None	replace
201	[BUG]  [BUGGY]  double  q1  =  a  *  q1  +  b  *  p0;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  q1  +  b  *  p0;	  double    q1    =    a    *    q1    +    b    *    cN;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	60	None	replace
202	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  double  q2)  =  a  *  cPrev  +  b  *  dPrev;  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  double  q2)  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cPrev    +    b    *    dPrev;    double  q2)  =  a  *  cPrev  +  b  *  dPrev;	  timeout    	non-compiled	[CE]  ';'  expected	48	None	add
203	[BUG]  [BUGGY]  double  q0  =  a  *  q1  +  b  *  cPrev;  [CE]  cannot  find  symbol  q2  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  q1  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  q1  +  b  *  cPrev;	          double    q0    =    a    *    q1    +    b    *    dPrev;    double    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	19	None	replace
204	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  double  q2  =  a  *  q1)  +  cN  *  hN;  [CE]  ';'  expected  [FE]            OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  hN;  double  q2  =  a  *  q1)  +  cN  *  hN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    hN;    double  q2  =  a  *  q1)  +  cN  *  hN;	  timeout    	non-compiled	[CE]  ';'  expected	54	None	add
205	[BUG]  [BUGGY]  Double  dPrev  =  a  *  cN  +  b;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  dPrev  =  a  *  cN  +  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  dPrev  =  a  *  cN  +  b;	  Double    dPrev    =    a    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	87	None	replace
206	[BUG]  [BUGGY]  Double  dPrev  =  a  *  cN  +  2;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  dPrev  =  a  *  cN  +  2;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  dPrev  =  a  *  cN  +  2;	  Double    dPrev    =    a    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	87	None	replace
207	[BUG]  [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  p0  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  p0  +  b  *  hN;	  double    cN    =    a    *    p0    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	16	None	replace
208	[BUG]  [BUGGY]  double  cPrev  =  a  *  b  +  b  *  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  b  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  b  +  b  *  cN;	  double    dPrev    =    a    *    b    +    b    *    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	41	None	replace
209	[BUG]  [BUGGY]  double  cN  =  a  *  cn  +  b  *  dPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  cn  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  cn  +  b  *  dPrev;	  double    dPrev    =    a    *    cn    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	40	None	replace
210	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  q1  +  cN  *  q1;	  double    q2    =    a    *    q1    +    cN    *    q0;    	compilable	  [FE]  OutOfRangeException  	70	12	replace
211	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  q1;  [FE]  OutOfRangeException  [FE]        OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q1  +  cN  *  q1;	  double    q2    =    a    *    q1    +    cN    *    q0;    	compilable	  [FE]  OutOfRangeException  	70	12	replace
212	[BUG]  [BUGGY]  double  q2)  =  a  *  hN  +  b  *  q0;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2)  =  a  *  hN  +  b  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2)  =  a  *  hN  +  b  *  q0;	  double    q2    =    a    *    hN    +    b    *    dPrev;    double    q2)    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  ';'  expected	64	None	replace
213	[BUG]  [BUGGY]  double  q2)  =  a  *  hN  +  b  *  q1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2)  =  a  *  hN  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2)  =  a  *  hN  +  b  *  q1;	  double    q2    =    a    *    hN    +    b    *    dPrev;    double    q2)    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  ';'  expected	64	None	replace
214	[BUG]  [BUGGY]  double  q0  =  a  *  q1  +  b  *  p0;  [CE]  cannot  find  symbol  q2  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  q1  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  q1  +  b  *  p0;	  double    q0    =    a    *    q1    +    b    *    cN;    	non-compiled	[CE]  cannot  find  symbol  q2	11	None	replace
215	[BUG]  [BUGGY]  double  q2  =  a  *  q2  +  b  *  cN;  [CE]  variable  q2  might  not  have  been  initialized  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q2  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q2  +  b  *  cN;	  double    q2    =    a    *    q2    +    b    *    dPrev;    	non-compiled	[CE]  variable  q2  might  not  have  been  initialized	79	None	replace
216	[BUG]  [BUGGY]  double  q0  =  a  *  cPrev  +  b  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  cPrev  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  cPrev  +  b  *  dPrev;	  double    q0    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	14	None	replace
217	[BUG]  [BUGGY]  double  q1  =  a  *  q2  +  cN  *  dPrev;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  q2  +  cN  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  q2  +  cN  *  dPrev;	  double    q1    =    a    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	86	None	replace
218	[BUG]  [BUGGY]  double  dPrev  =  p0  *  cN  +  b;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  p0  *  cN  +  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  p0  *  cN  +  b;	  double    dPrev    =    p0    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	32	None	replace
219	[BUG]  [BUGGY]  double  q0  =  a  *  q1  +  b  *  cN;  q0  =  a  *  q1  +  b  *  dPrev;  [CE]  cannot  find  symbol  q2  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  q1  +  b  *  cN;  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  q1  +  b  *  cN;  q0  =  a  *  q1  +  b  *  dPrev;	          double    q0    =    a    *    q1    +    b    *    dPrev;    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	22	None	replace
220	[BUG]  [BUGGY]  q0  =  a  *  q1  +  b  *  cN;  q0  =  a  *  q1  +  b  *  dPrev;  [CE]  cannot  find  symbol  q0  [FE]      AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q0  =  a  *  q1  +  b  *  cN;  q0  =  a  *  q1  +  b  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q0  =  a  *  q1  +  b  *  cN;  q0  =  a  *  q1  +  b  *  dPrev;	          double    q0    =    a    *    q1    +    b    *    dPrev;    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q0	22	None	replace
221	[BUG]  [BUGGY]  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  cN;  [CE]  cannot  find  symbol  q0  [FE]        AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  cN;	          double    q0    =    a    *    q1    +    b    *    dPrev;    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q0	22	None	replace
222	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  double  q2  =  a  *  q1.  +  b  *  hN;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  hN;  double  q2  =  a  *  q1.  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    b    *    hN;    double  q2  =  a  *  q1.  +  b  *  hN;	  	non-compiled	[CE]  <identifier>  expected	9	None	add
223	[BUG]  [BUGGY]  double  cPrev  =  a  *  b;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  b;	  double    cPrev    =    a    *    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	80	None	replace
224	[BUG]  [BUGGY]  double  cPrev  =  a  *  cN  +  b;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  cN  +  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  cN  +  b;	  double    cPrev    =    a    *    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	80	None	replace
225	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1  +  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  cN  +  b  *  q1  +  dPrev;	  double    q2    =    a    *    cN    +    b    *    q1;    	compilable	  [FE]  ConvergenceException  	24	12	replace
226	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1  +  dPrev;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  q1  +  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  b  *  q1  +  dPrev;	  double    q2    =    a    *    cN    +    b    *    q1;    	compilable	  [FE]  ConvergenceException  	24	12	replace
227	[BUG]  [BUGGY]  double  cN  =  a  *  b  +  b  *  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  b  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  b  +  b  *  cPrev;	  double    cN    =    a    *    b    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	57	None	replace
228	[BUG]  [BUGGY]  double  dPrev  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  hN  +  b  *  DEFAULT_EPSILON;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hN  +  b  *  DEFAULT_EPSILON;	  double    dPrev    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	28	None	replace
229	[BUG]  [BUGGY]  double  dPrev  =  a  *  cN  +  b;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  cN  +  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  cN  +  b;	  double    dPrev    =    a    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	29	None	replace
230	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  double  q2)  =  a  *  hN  +  cN  *  dPrev;  [CE]  ';'  expected  [FE]          OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  cN  *  dPrev;  double  q2)  =  a  *  hN  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    cN    *    dPrev;    double  q2)  =  a  *  hN  +  cN  *  dPrev;	  timeout    	non-compiled	[CE]  ';'  expected	52	None	add
231	[BUG]  [BUGGY]  double  q1  =  a  *  q1  +  b  *  q2;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  q1  +  b  *  q2;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  q1  +  b  *  q2;	  double    dPrev    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	73	None	replace
232	[BUG]  [BUGGY]  timeout  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  DEFAULT_EPSILON;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  cN  +  b  *  DEFAULT_EPSILON;	  double    q2    =    a    *    cN    +    b    *    q0;    	compilable	timeout	42	1	replace
233	[BUG]  [BUGGY]  double  q2  =  a  *  cN  +  b  *  DEFAULT_EPSILON;  timeout  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cN  +  b  *  DEFAULT_EPSILON;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cN  +  b  *  DEFAULT_EPSILON;	  double    q2    =    a    *    cN    +    b    *    q0;    	compilable	timeout	42	1	replace
234	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  hPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  hN  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  hN  +  b  *  hPrev;	  double    cN    =    a    *    hPrev    +    b    *    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	85	None	replace
235	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  cN;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  hN  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  hN  +  b  *  cN;	  double    cN    =    a    *    hPrev    +    b    *    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	85	None	replace
236	[BUG]  [BUGGY]  double  q2  =  A  *  q1  +  cN  *  hN;  [CE]  cannot  find  symbol  A  [FE]            OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  A  *  q1  +  cN  *  hN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  A  *  q1  +  cN  *  hN;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2    =    A    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  A	39	None	replace
237	[BUG]  [BUGGY]  double  q2  =  A  *  hN  +  cN  *  dPrev;  [CE]  cannot  find  symbol  A  [FE]              OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  A  *  hN  +  cN  *  dPrev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  A  *  hN  +  cN  *  dPrev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2    =    A    *    q1    +    cN    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  A	39	None	replace
238	[BUG]  [BUGGY]  double  cPrev  =  a  *  hN  +  b  *  cN;  [CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cPrev  =  a  *  hN  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cPrev  =  a  *  hN  +  b  *  cN;	  double    dPrev    =    a    *    hN    +    b    *    cN;    	non-compiled	[CE]  variable  cPrev  is  already  defined  in  method  evaluate(double,double,int)	59	None	replace
239	[BUG]  [BUGGY]  double  dPrev  =  a  *  hN  +  b  *  cN  +  1;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  hN  +  b  *  cN  +  1;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hN  +  b  *  cN  +  1;	  double    dPrev    =    a    *    hN    +    b    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	59	None	replace
240	[BUG]  [BUGGY]  double  dPrev  =  a  *  q1  +  b  *  hPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  q1  +  b  *  hPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  q1  +  b  *  hPrev;	  double    dPrev    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	83	None	replace
241	[BUG]  [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  double  q2  =  a  *  hN  +  b  *  p0;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hN  +  b  *  cN;  double  q2  =  a  *  hN  +  b  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hN    +    b    *    cN;    double  q2  =  a  *  hN  +  b  *  p0;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	6	None	add
242	[BUG]  [BUGGY]  double  q2)  =  a  *  cN  +  b  *  q0;  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2)  =  a  *  cN  +  b  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2)  =  a  *  cN  +  b  *  q0;	  double    q2    =    a    *    cN    +    b    *    dPrev;    double    q2)    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  ';'  expected	78	None	replace
243	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  double  q2  =  a  *  q1)  +  cN  *  p0;  [CE]  ';'  expected  [FE]        OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  double  q2  =  a  *  q1)  +  cN  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    p0;    double  q2  =  a  *  q1)  +  cN  *  p0;	  timeout    	non-compiled	[CE]  ';'  expected	50	None	add
244	[BUG]  [BUGGY]  double  q0  =  a  *  hN  +  b  *  hN;  [CE]  cannot  find  symbol  q2  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  hN  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  hN  +  b  *  hN;	  double    q0    =    a    *    q1    +    b    *    hN;    	non-compiled	[CE]  cannot  find  symbol  q2	65	None	replace
245	[BUG]  [BUGGY]  double  dPrev  =  a  *  hPrev  +  b  *  d0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  hPrev  +  b  *  d0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hPrev  +  b  *  d0;	  double    dPrev    =    a    *    cN    +    b    *    d0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	74	None	replace
246	[BUG]  [BUGGY]  double  q2)  =  a  *  hN  +  b  *  cN;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2)  =  a  *  hN  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2)  =  a  *  hN  +  b  *  cN;	  double    q2    =    a    *    hN    +    b    *    dPrev;    double    q2)    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  ';'  expected	64	None	replace
247	[BUG]  [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  q0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  hPrev  +  b  *  q0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  hPrev  +  b  *  q0;	  double    cN    =    a    *    hPrev    +    b    *    cN;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	85	None	replace
248	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  q0;  [CE]  cannot  find  symbol  q0  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  cPrev  +  b  *  q0;	  double    q2    =    a    *    cN    +    b    *    q0;    	non-compiled	[CE]  cannot  find  symbol  q0	42	None	replace
249	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  cN;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  p0;  double  q2  =  a  *  q1  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    b    *    p0;    double  q2  =  a  *  q1  +  b  *  cN;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	66	None	add
250	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  q0;  [CE]  cannot  find  symbol  q0  [FE]          OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  cN  *  q0;	  double    q2    =    a    *    hN    +    cN    *    dPrev;    timeout    	non-compiled	[CE]  cannot  find  symbol  q0	53	None	replace
251	[BUG]  [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  double  q2  =  a  *  cPrev  +  b  *  dprev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  cPrev  +  b  *  dPrev;  double  q2  =  a  *  cPrev  +  b  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    cPrev    +    b    *    dPrev;    double  q2  =  a  *  cPrev  +  b  *  dprev;	  timeout    	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	48	None	add
252	[BUG]  [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  d0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  cPrev  +  b  *  d0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  cPrev  +  b  *  d0;	  double    cN    =    a    *    cPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	56	None	replace
253	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  dPrev  +  b  *  cPrev;	  double    cN    =    a    *    cPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	56	None	replace
254	[BUG]  [BUGGY]  double  q2)  =  a  *  cN  +  b  *  q1;  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2)  =  a  *  cN  +  b  *  q1;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2)  =  a  *  cN  +  b  *  q1;	  double    q2    =    a    *    cN    +    b    *    dPrev;    double    q2)    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  ';'  expected	78	None	replace
255	[BUG]  [BUGGY]  double  q0  =  a  *  cN  +  b  *  cN;  [CE]  cannot  find  symbol  q2  [FE]        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  cN  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  cN  +  b  *  cN;	  double    q0    =    a    *    q1    +    b    *    cN;    	non-compiled	[CE]  cannot  find  symbol  q2	11	None	replace
256	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q2  =  a  *  hPrev  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	Double  q2  =  a  *  hPrev  +  b  *  cN;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    Double    q2    =    a    *    hPrev    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	34	10	replace
257	[BUG]  [BUGGY]  Double  q2  =  a  *  hPrev  +  b  *  cN;  [FE]  AssertionError  [FE]          ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  q2  =  a  *  hPrev  +  b  *  cN;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  q2  =  a  *  hPrev  +  b  *  cN;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    Double    q2    =    a    *    hPrev    +    b    *    dPrev;    	compilable	  [FE]  AssertionError  	34	10	replace
258	[BUG]  [BUGGY]  double  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  cN;  [CE]  cannot  find  symbol  q2  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q0  =  a  *  q1  +  b  *  dPrev;  q0  =  a  *  q1  +  b  *  cN;	          double    q0    =    a    *    q1    +    b    *    dPrev;    q0    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  cannot  find  symbol  q2	22	None	replace
259	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  b  *  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  b  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  q1  +  b  *  dprev;	  double    q2    =    a    *    q1    +    cN    *    dPrev;    double    q2    =    a    *    q1    +    cN    *    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	91	None	replace
260	[BUG]  [BUGGY]  Double  dPrev  =  a  *  b;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  Double  dPrev  =  a  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	Double  dPrev  =  a  *  b;	  Double    dPrev    =    a    *    cN;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	87	None	replace
261	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  double  q2  =  a  *  hPrev  +  cN  *  dprev;  [CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  cN  *  dPrev;  double  q2  =  a  *  hPrev  +  cN  *  dprev;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    hPrev    +    cN    *    dPrev;    double  q2  =  a  *  hPrev  +  cN  *  dprev;	  	non-compiled	[CE]  variable  q2  is  already  defined  in  method  evaluate(double,double,int)	89	None	add
262	[BUG]  [BUGGY]  double  q2  =  a  *  b  +  cN  *  q0;  [CE]  cannot  find  symbol  q0  [FE]        OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  b  +  cN  *  q0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  b  +  cN  *  q0;	  double    q2    =    a    *    q1    +    cN    *    q0;    	non-compiled	[CE]  cannot  find  symbol  q0	70	None	replace
263	[BUG]  [BUGGY]  double  dPrev  =  a  *  hPrev  +  b  *  p0;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  hPrev  +  b  *  p0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hPrev  +  b  *  p0;	  double    dPrev    =    a    *    cN    +    b    *    p0;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	25	None	replace
264	[BUG]  [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  b;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  dPrev  +  b  *  b;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  dPrev  +  b  *  b;	  double    cN    =    a    *    b    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	57	None	replace
265	[BUG]  [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  double  q2  =  a  *  q1.  +  cN  *  p0;  [CE]  <identifier>  expected  [FE]        OutOfRangeException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  q1  +  cN  *  p0;  double  q2  =  a  *  q1.  +  cN  *  p0;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double    q2    =    a    *    q1    +    cN    *    p0;    double  q2  =  a  *  q1.  +  cN  *  p0;	  timeout    	non-compiled	[CE]  <identifier>  expected	50	None	add
266	[BUG]  [BUGGY]  double  cN  =  a  *  hN  +  b  *  cPrev;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  hN  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  hN  +  b  *  cPrev;	  double    cN    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	15	None	replace
267	[BUG]  [BUGGY]  double  dPrev  =  a  *  hPrev  +  cN  *  dPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  hPrev  +  cN  *  dPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hPrev  +  cN  *  dPrev;	  double    dPrev    =    a    *    hPrev    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	83	None	replace
268	[BUG]  [BUGGY]  double  cN  =  a  *  q1  +  b  *  q0;  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  cN  =  a  *  q1  +  b  *  q0;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  cN  =  a  *  q1  +  b  *  q0;	  double    cN    =    a    *    q1    +    b    *    dPrev;    	non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	17	None	replace
269	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  epsilon;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	add	double  q2  =  a  *  hPrev  +  b  *  epsilon;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    double    q2    =    a    *    hPrev    +    b    *    dprev;    	compilable	timeout	88	1	replace
270	[BUG]  [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  epsilon;  timeout  [FE]        ConvergenceException      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q2  =  a  *  hPrev  +  b  *  epsilon;  [BUGGY]      if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q2  =  a  *  hPrev  +  b  *  epsilon;	  double    q2    =    a    *    hPrev    +    b    *    dPrev;    double    q2    =    a    *    hPrev    +    b    *    dprev;    	compilable	timeout	88	1	replace
271	[BUG]  [BUGGY]  double  dPrev  =  a  *  hPrev  +  b  *  hN;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  hPrev  +  b  *  hN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hPrev  +  b  *  hN;	  double    dPrev    =    a    *    hN    +    b    *    dPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	28	None	replace
272	[BUG]  [BUGGY]  double  dPrev  =  a  *  hPrev  +  b  *  cPrev;  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  dPrev  =  a  *  hPrev  +  b  *  cPrev;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  dPrev  =  a  *  hPrev  +  b  *  cPrev;	  double    dPrev    =    a    *    cN    +    b    *    cPrev;    	non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	82	None	replace
273	[BUG]  [BUGGY]  double  q1  =  a  *  cPrev  +  b  *  cN;  [CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      double  p0  =  1.0;  double  q1  =  1.0;  double  cPrev  =  hPrev;  double  hN  =  hPrev;  while  (n  <  maxIterations)  {  final  double  a  =  getA(n,  x);  final  double  b  =  getB(n,  x);  double  cN  =  a  *  hPrev  +  b  *  p0;      [BUGGY]  double  q1  =  a  *  cPrev  +  b  *  cN;  [BUGGY]      double  q2  =  a  *  q1  +  b  *  dPrev;  if  (Double.isInfinite(cN)  ||  Double.isInfinite(q2))  {  double  scaleFactor  =  1d;  double  lastScaleFactor  =  1d;  final  int  maxPower  =  5;  final  double  scale  =  FastMath.max(a,b);  if  (scale  <=  0)  {//  Can't  scale  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  for  (int  i  =  0;  i  <  maxPower;  i++)  {  lastScaleFactor  =  scaleFactor;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	144	144	2	replace	double  q1  =  a  *  cPrev  +  b  *  cN;	  double    q1    =    a    *    cN    +    b    *    dPrev;    	non-compiled	[CE]  variable  q1  is  already  defined  in  method  evaluate(double,double,int)	61	None	replace
