bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  dPrev  *  cN);  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  dPrev  *  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  *  dPrev;  hPrev  =  dPrev  *  cN);	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN);    	non-compiled	[CE]  ';'  expected	15	None	replace
2	[BUG]  [BUGGY]  hPrev  =  p0  *  cN;  hPrev  =  p0  *  cN);  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  cN;  hPrev  =  p0  *  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  *  cN;  hPrev  =  p0  *  cN);	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN);    	non-compiled	[CE]  ';'  expected	15	None	replace
3	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  dPrev;	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN);    	compilable	  [FE]  ConvergenceException  	15	11	replace
4	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  dPrev;  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  dPrev;	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN);    	compilable	  [FE]  ConvergenceException  	15	11	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	137	2	add
6	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	137	2	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	137	2	add
8	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	137	2	add
9	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  dPrev  =  cN  /  cN;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	137	11	add
10	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  dPrev  =  cN  /  cN;  hPrev  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  dPrev  =  cN  /  cN;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	137	11	add
11	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2);	  	non-compiled	[CE]  ';'  expected	137	None	add
12	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2,  n++;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2,  n++;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2,  n++;	  	non-compiled	[CE]  ';'  expected	137	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cN  *  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    cN    *    q2;    hPrev  =  cN  *  q2;	  	compilable	  [FE]  AssertionError  	128	2	add
14	[BUG]  [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cN  *  q2;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cN  *  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    q2;    hPrev  =  cN  *  q2;	  	compilable	  [FE]  AssertionError  	128	2	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cN  *  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    cN    *    q2;    hPrev  =  cN  *  q1;	  	compilable	  [FE]  AssertionError  	128	2	add
16	[BUG]  [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cN  *  q1;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cN  *  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    q2;    hPrev  =  cN  *  q1;	  	compilable	  [FE]  AssertionError  	128	2	add
17	[BUG]  [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cN  *  q2);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cN  *  q2);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    q2;    hPrev  =  cN  *  q2);	  	non-compiled	[CE]  ';'  expected	128	None	add
18	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  cPrev  =  cN  *  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    cN    *    q2;    cPrev  =  cN  *  q2;	  	compilable	  [FE]  ConvergenceException  	128	11	add
19	[BUG]  [BUGGY]  hPrev  =  cN  *  q2;  cPrev  =  cN  *  q2;  [FE]  ConvergenceException  [FE]          ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  cPrev  =  cN  *  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    q2;    cPrev  =  cN  *  q2;	  	compilable	  [FE]  ConvergenceException  	128	11	add
20	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0  =  cN  +  1;	  p0    =    cN;    	compilable	  [FE]  ConvergenceException  	2	12	replace
21	[BUG]  [BUGGY]  p0  =  cN  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  cN  +  1;	  p0    =    cN;    	compilable	  [FE]  ConvergenceException  	2	12	replace
22	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cPrev);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  /  cPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  /  cPrev);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
23	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cPrev  *  dPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cPrev  *  dPrev);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
24	[BUG]  [BUGGY]  n  =  Math.abs(p0  /  dPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(p0  /  dPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(p0  /  dPrev);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	95	None	replace
25	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  /  q1;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,;    	compilable	  [FE]  ConvergenceException  	116	11	replace
26	[BUG]  [BUGGY]  hPrev  =  cN  /  q1;  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  q1;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,;    	compilable	  [FE]  ConvergenceException  	116	11	replace
27	[BUG]  [BUGGY]  n  =  cN  /  q2;  hPrev  =  cN  /  q1;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN  /  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN  /  q2;  hPrev  =  cN  /  q1;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,;    	non-compiled	[CE]  possible  loss  of  precision	116	None	replace
28	[BUG]  [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,;  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,;    	non-compiled	[CE]  ';'  expected	116	None	replace
29	[BUG]  [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN);	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cN);    	non-compiled	[CE]  ';'  expected	32	None	replace
30	[BUG]  [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN);	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cN);    	non-compiled	[CE]  ';'  expected	32	None	replace
31	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        *        cN;        dPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;	  	compilable	  [FE]  OutOfRangeException  	16	11	add
32	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        dPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;	  	compilable	  [FE]  OutOfRangeException  	16	11	add
33	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        *        cN;        dPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;	  	compilable	  [FE]  OutOfRangeException  	16	11	add
34	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        dPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;	  	compilable	  [FE]  OutOfRangeException  	16	11	add
35	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  dPrev  =  dprev  *  cN;  [CE]  cannot  find  symbol  dprev  [FE]        OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  dPrev  =  dprev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        dPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  dPrev  =  dprev  *  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	16	None	add
36	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  n  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [CE]  possible  loss  of  precision  [FE]          OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  n  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        dPrev    =    dPrev    *    cN;    n  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;	  	non-compiled	[CE]  possible  loss  of  precision	16	None	add
37	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  n  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  n  *  cN;	  hPrev    =    dPrev    *    cN;    hPrev    =    dprev    *    cN;    	compilable	  [FE]  ConvergenceException  	118	11	replace
38	[BUG]  [BUGGY]  hPrev  =  n  *  cN;  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  n  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  n  *  cN;	  hPrev    =    dPrev    *    cN;    hPrev    =    dprev    *    cN;    	compilable	  [FE]  ConvergenceException  	118	11	replace
39	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  q1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0  =  q1;	  p0    =    q2;    	compilable	  [FE]  ConvergenceException  	134	11	replace
40	[BUG]  [BUGGY]  p0  =  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  q1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  q1;	  p0    =    q2;    	compilable	  [FE]  ConvergenceException  	134	11	replace
41	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  p0);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(cPrev,  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(cPrev,  p0);	  n    =    Math.max(cN,    p0);    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
42	[BUG]  [BUGGY]  n  =  Math.max(cN,  p0,  dPrev);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(cN,  p0,  dPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(cN,  p0,  dPrev);	  n    =    Math.max(cN,    p0);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	98	None	replace
43	[BUG]  [BUGGY]  p0  =  cN;  p1  =  p0;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p1  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  cN;  p1  =  p0;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	122	None	replace
44	[BUG]  [BUGGY]  p0  =  p1;  p1  =  p2;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p1;  p1  =  p2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p1;  p1  =  p2;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	122	None	replace
45	[BUG]  [BUGGY]  p0  =  p1;  p1  =  p0;  [CE]  cannot  find  symbol  p1  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p1;  p1  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p1;  p1  =  p0;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	122	None	replace
46	[BUG]  [BUGGY]  p0  =  p2;  p1  =  p0;  [CE]  cannot  find  symbol  p2  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p2;  p1  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p2;  p1  =  p0;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	122	None	replace
47	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	44	11	add
48	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	44	11	add
49	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	44	11	add
50	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	44	11	add
51	[BUG]  [BUGGY]  timeout  [FE]        OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;	  	compilable	timeout	44	1	add
52	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  timeout  [FE]        OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;	  	compilable	timeout	44	1	add
53	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  q1  =  cN  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    q1  =  cN  /  cN;  dPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	44	11	add
54	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  q1  =  cN  /  cN;  dPrev  =  cN  /  cN;  [FE]  OutOfRangeException  [FE]          OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  q1  =  cN  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    q1  =  cN  /  cN;  dPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	44	11	add
55	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  n  =  cN  /  cN;  dPrev  =  cN  /  cN;  [CE]  possible  loss  of  precision  [FE]            OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  n  =  cN  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    n  =  cN  /  cN;  dPrev  =  cN  /  cN;	  	non-compiled	[CE]  possible  loss  of  precision	44	None	add
56	[BUG]  [BUGGY]  int  hPrev  =  cN  /  cN;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  int  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	int  hPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    int    hPrev    =    cN    /    cN;    	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	105	None	replace
57	[BUG]  [BUGGY]  dPrev  =  cN  /  cN;  int  hPrev  =  cN  /  cN;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  cN  /  cN;  int  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  cN  /  cN;  int  hPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    int    hPrev    =    cN    /    cN;    	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	105	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	cPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    int    hPrev    =    cN    /    cN;    	compilable	  [FE]  AssertionError  	105	6	replace
59	[BUG]  [BUGGY]  cPrev  =  cN  /  cN;  [FE]  AssertionError  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	cPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    int    hPrev    =    cN    /    cN;    	compilable	  [FE]  AssertionError  	105	6	replace
60	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  -  cPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  -  cPrev);	  n    =    Math.abs(cPrev    -    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	72	None	replace
61	[BUG]  [BUGGY]  timeout  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    dPrev    =    cN    /    cN;    	compilable	timeout	45	1	replace
62	[BUG]  [BUGGY]  dPrev  =  cN  /  cN;  timeout  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    dPrev    =    cN    /    cN;    	compilable	timeout	45	1	replace
63	[BUG]  [BUGGY]  n  =  cN  /  cN;  dPrev  =  cN  /  cN;  [CE]  possible  loss  of  precision  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN  /  cN;  dPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    dPrev    =    cN    /    cN;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
64	[BUG]  [BUGGY]  n  =  cN  /  cN;  dPrev  =  cN  /  hN;  [CE]  possible  loss  of  precision  [FE]        OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN  /  cN;  dPrev  =  cN  /  hN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN  /  cN;  dPrev  =  cN  /  hN;	  hPrev    =    cN    /    cN;    dPrev    =    cN    /    cN;    	non-compiled	[CE]  possible  loss  of  precision	45	None	replace
65	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  cN  /  hN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  cN  /  hN;	  hPrev    =    cN    /    cN;    dPrev    =    cN    /    cN;    	compilable	  [FE]  ConvergenceException  	45	11	replace
66	[BUG]  [BUGGY]  dPrev  =  cN  /  hN;  [FE]  ConvergenceException  [FE]          OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  cN  /  hN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  cN  /  hN;	  hPrev    =    cN    /    cN;    dPrev    =    cN    /    cN;    	compilable	  [FE]  ConvergenceException  	45	11	replace
67	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0  =  cPrev;	  p0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	5	11	replace
68	[BUG]  [BUGGY]  p0  =  cPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  cPrev;	  p0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	5	11	replace
69	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  q1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  -  1.0)/  q1;	  n    =    Math.abs(deltaN    -    1.0)/    q1;    	non-compiled	[CE]  possible  loss  of  precision	111	None	replace
70	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  q1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cN  -  1.0)/  q1;	  n    =    Math.abs(deltaN    -    1.0)/    q1;    	non-compiled	[CE]  possible  loss  of  precision	111	None	replace
71	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(q1  -  1.0)/  deltaN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(q1  -  1.0)/  deltaN;	  n    =    Math.abs(deltaN    -    1.0)/    q1;    	non-compiled	[CE]  possible  loss  of  precision	111	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    /    q2;    hPrev  =  dPrev  /  q2;	  	compilable	  [FE]  AssertionError  	51	2	add
73	[BUG]  [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q2;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    q2;    hPrev  =  dPrev  /  q2;	  	compilable	  [FE]  AssertionError  	51	2	add
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    /    q2;    hPrev  =  dPrev  /  q1;	  	compilable	  [FE]  AssertionError  	51	2	add
75	[BUG]  [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q1;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    q2;    hPrev  =  dPrev  /  q1;	  	compilable	  [FE]  AssertionError  	51	2	add
76	[BUG]  [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q2);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q2);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    q2;    hPrev  =  dPrev  /  q2);	  	non-compiled	[CE]  ';'  expected	51	None	add
77	[BUG]  [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q2,;  [CE]  ';'  expected  [FE]          ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q2,;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    q2;    hPrev  =  dPrev  /  q2,;	  	non-compiled	[CE]  ';'  expected	51	None	add
78	[BUG]  [BUGGY]  n  =  Math.min(cN,  p0);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.min(cN,  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.min(cN,  p0);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	62	None	replace
79	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cN);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.min(dPrev,  cN);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.min(dPrev,  cN);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	62	None	replace
80	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  dPrev);  [CE]  possible  loss  of  precision  [FE]                          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.min(cPrev,  dPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.min(cPrev,  dPrev);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	62	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  p0;  hPrev  =  dPrev  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    *    p0;    hPrev  =  dPrev  *  p0;	  	compilable	  [FE]  AssertionError  	82	2	add
82	[BUG]  [BUGGY]  hPrev  =  dPrev  *  p0;  hPrev  =  dPrev  *  p0;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  p0;  hPrev  =  dPrev  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    *    p0;    hPrev  =  dPrev  *  p0;	  	compilable	  [FE]  AssertionError  	82	2	add
83	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  p0;  dPrev  =  dPrev  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    *    p0;    dPrev  =  dPrev  *  p0;	  	compilable	  [FE]  OutOfRangeException  	82	11	add
84	[BUG]  [BUGGY]  hPrev  =  dPrev  *  p0;  dPrev  =  dPrev  *  p0;  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  p0;  dPrev  =  dPrev  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    *    p0;    dPrev  =  dPrev  *  p0;	  	compilable	  [FE]  OutOfRangeException  	82	11	add
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  p0;  hPrev  =  cN  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    *    p0;    hPrev  =  cN  *  p0;	  	compilable	  [FE]  AssertionError  	82	2	add
86	[BUG]  [BUGGY]  hPrev  =  dPrev  *  p0;  hPrev  =  cN  *  p0;  [FE]  AssertionError  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  p0;  hPrev  =  cN  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    *    p0;    hPrev  =  cN  *  p0;	  	compilable	  [FE]  AssertionError  	82	2	add
87	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p2;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p1;  p0  =  p2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p1;  p0  =  p2;	          p0    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	67	None	replace
88	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p1;  p0  =  p1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p1;  p0  =  p1;	          p0    =    p0;    p0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	67	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        *        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	13	2	add
90	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	13	2	add
91	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        *        cN;        hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  OutOfRangeException  	13	11	add
92	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  OutOfRangeException  	13	11	add
93	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  dprev  *  cN;  [CE]  cannot  find  symbol  dprev  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  dprev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dprev  *  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	13	None	add
94	[BUG]  [BUGGY]  n  =  cN  /  cN;  cPrev  =  cN  /  cN;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN  /  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN  /  cN;  cPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    cPrev    =    cN    /    cN;    timeout    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
95	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  dPrev  /  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  dPrev  /  cN;  cPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    cPrev    =    cN    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	43	11	replace
96	[BUG]  [BUGGY]  dPrev  =  dPrev  /  cN;  cPrev  =  cN  /  cN;  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  dPrev  /  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  dPrev  /  cN;  cPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    cPrev    =    cN    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	43	11	replace
97	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p0  =  p1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  cN;  p0  =  p1;	          p0    =    p0;    p0    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p1	68	None	replace
98	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p0  =  p1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  dPrev;  p0  =  p1;	          p0    =    p0;    p0    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p1	68	None	replace
99	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p2;  [CE]  cannot  find  symbol  p2  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p0  =  p2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  dPrev;  p0  =  p2;	          p0    =    p0;    p0    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p2	68	None	replace
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  1;  hPrev  =  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    p0    +    1;    hPrev  =  p0  +  1;	  	compilable	  [FE]  AssertionError  	64	2	add
101	[BUG]  [BUGGY]  hPrev  =  p0  +  1;  hPrev  =  p0  +  1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  1;  hPrev  =  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    +    1;    hPrev  =  p0  +  1;	  	compilable	  [FE]  AssertionError  	64	2	add
102	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  1;  p0  =  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    p0    +    1;    p0  =  p0  +  1;	  	compilable	  [FE]  ConvergenceException  	64	11	add
103	[BUG]  [BUGGY]  hPrev  =  p0  +  1;  p0  =  p0  +  1;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  1;  p0  =  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    +    1;    p0  =  p0  +  1;	  	compilable	  [FE]  ConvergenceException  	64	11	add
104	[BUG]  [BUGGY]  hPrev  =  p0  +  1;  qPrev  =  p0  +  1;  [CE]  cannot  find  symbol  qPrev  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  1;  qPrev  =  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    +    1;    qPrev  =  p0  +  1;	  	non-compiled	[CE]  cannot  find  symbol  qPrev	64	None	add
105	[BUG]  [BUGGY]  hPrev  =  p0  +  1;  n  =  p0  +  1;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  1;  n  =  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    +    1;    n  =  p0  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	64	None	add
106	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  /  dPrev;	  hPrev    =    p0    /    q2;    	compilable	  [FE]  ConvergenceException  	54	11	replace
107	[BUG]  [BUGGY]  hPrev  =  p0  /  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  dPrev;	  hPrev    =    p0    /    q2;    	compilable	  [FE]  ConvergenceException  	54	11	replace
108	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  /  q1;	  hPrev    =    p0    /    q2;    	compilable	  [FE]  ConvergenceException  	54	11	replace
109	[BUG]  [BUGGY]  hPrev  =  p0  /  q1;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  q1;	  hPrev    =    p0    /    q2;    	compilable	  [FE]  ConvergenceException  	54	11	replace
110	[BUG]  [BUGGY]  timeout  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;	  timeout    	compilable	timeout	42	1	add
111	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  timeout  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;	  timeout    	compilable	timeout	42	1	add
112	[BUG]  [BUGGY]  timeout  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;	  timeout    	compilable	timeout	42	1	add
113	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  timeout  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;	  timeout    	compilable	timeout	42	1	add
114	[BUG]  [BUGGY]  timeout  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;	  timeout    	compilable	timeout	42	1	add
115	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  timeout  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;	  timeout    	compilable	timeout	42	1	add
116	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cP  /  cN;  cPrev  =  cN  /  cN;  [CE]  cannot  find  symbol  cP  [FE]                ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cP  /  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    hPrev  =  cP  /  cN;  cPrev  =  cN  /  cN;	  timeout    	non-compiled	[CE]  cannot  find  symbol  cP	42	None	add
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    p0  =  p0;  hPrev  =  p0;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        p0;        p0    =    p0;    hPrev  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	23	2	add
118	[BUG]  [BUGGY]  hPrev    =    p0;    p0  =  p0;  hPrev  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    p0  =  p0;  hPrev  =  p0;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        p0    =    p0;    hPrev  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	23	2	add
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	23	2	add
120	[BUG]  [BUGGY]  hPrev    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	23	2	add
121	[BUG]  [BUGGY]  hPrev    =    p0;    p0  =  p0;  int  hPrev  =  p0;  p0  =  p0;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    p0  =  p0;  int  hPrev  =  p0;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        p0    =    p0;    int  hPrev  =  p0;  p0  =  p0;	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	23	None	add
122	[BUG]  [BUGGY]  hPrev    =    p0;    p0  =  p0;  hPrev  =  p0;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    p0  =  p0;  hPrev  =  p0;  p0  =  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        p0    =    p0;    hPrev  =  p0;  p0  =  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	23	None	add
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  q2  /  dPrev;	  hPrev    =    dPrev    /    q2;    	compilable	  [FE]  AssertionError  	52	6	replace
124	[BUG]  [BUGGY]  hPrev  =  q2  /  dPrev;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q2  /  dPrev;	  hPrev    =    dPrev    /    q2;    	compilable	  [FE]  AssertionError  	52	6	replace
125	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN;    	compilable	  [FE]  ConvergenceException  	41	11	replace
126	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN;    	compilable	  [FE]  ConvergenceException  	41	11	replace
127	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN;    	compilable	  [FE]  ConvergenceException  	41	12	replace
128	[BUG]  [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN;    	compilable	  [FE]  ConvergenceException  	41	12	replace
129	[BUG]  [BUGGY]  n  =  cN  /  cN;  hPrev  =  cN  /  cN;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN  /  cN;  hPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN;    	non-compiled	[CE]  possible  loss  of  precision	41	None	replace
130	[BUG]  [BUGGY]  n  =  dPrev  /  cN;  [CE]  possible  loss  of  precision  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  dPrev  /  cN;	          n    =    cN    /    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	124	None	replace
131	[BUG]  [BUGGY]  n  =  cN  /  dPrev  +  1;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN  /  dPrev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN  /  dPrev  +  1;	          n    =    cN    /    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	124	None	replace
132	[BUG]  [BUGGY]  n  =  cPrev  /  dPrev;  [CE]  possible  loss  of  precision  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cPrev  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cPrev  /  dPrev;	          n    =    cN    /    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	124	None	replace
133	[BUG]  [BUGGY]  n  =  p0  /  dPrev;  [CE]  possible  loss  of  precision  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  p0  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  p0  /  dPrev;	          n    =    cN    /    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	124	None	replace
134	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  /  cN  +  1;	  hPrev    =    p0    /    cN;    	compilable	  [FE]  ConvergenceException  	39	12	replace
135	[BUG]  [BUGGY]  hPrev  =  p0  /  cN  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  cN  +  1;	  hPrev    =    p0    /    cN;    	compilable	  [FE]  ConvergenceException  	39	12	replace
136	[BUG]  [BUGGY]  p0  =  p1;  (p0  =  p0;  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p1;  (p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p1;  (p0  =  p0;	          p0    =    p0;    (p0    =    p0;    	non-compiled	[CE]  ')'  expected	115	None	replace
137	[BUG]  [BUGGY]  p0  =  p1;  (p0  =  p2;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p1;  (p0  =  p2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p1;  (p0  =  p2;	          p0    =    p0;    (p0    =    p0;    	non-compiled	[CE]  ')'  expected	115	None	replace
138	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  epsilon;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  -  1.0)/  epsilon;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	113	None	replace
139	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  epsilon;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cPrev  -  1.0)/  epsilon;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	113	None	replace
140	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  epsilon;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cN  -  1.0)/  epsilon;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	113	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  dPrev  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    /    cN    +    1;    hPrev  =  dPrev  /  cN  +  1;	  	compilable	  [FE]  AssertionError  	74	2	add
142	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  dPrev  /  cN  +  1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  dPrev  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    cN    +    1;    hPrev  =  dPrev  /  cN  +  1;	  	compilable	  [FE]  AssertionError  	74	2	add
143	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  dPrev  =  dPrev  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    /    cN    +    1;    dPrev  =  dPrev  /  cN  +  1;	  	compilable	  [FE]  ConvergenceException  	74	11	add
144	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  dPrev  =  dPrev  /  cN  +  1;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  dPrev  =  dPrev  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    cN    +    1;    dPrev  =  dPrev  /  cN  +  1;	  	compilable	  [FE]  ConvergenceException  	74	11	add
145	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  cPrev  =  dPrev  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    /    cN    +    1;    cPrev  =  dPrev  /  cN  +  1;	  	compilable	timeout	74	1	add
146	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  cPrev  =  dPrev  /  cN  +  1;  timeout  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  cPrev  =  dPrev  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    cN    +    1;    cPrev  =  dPrev  /  cN  +  1;	  	compilable	timeout	74	1	add
147	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  n  =  dPrev  /  cN  +  1;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  n  =  dPrev  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    cN    +    1;    n  =  dPrev  /  cN  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	74	None	add
148	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  hPrev  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        p0;        hPrev    =    p0;    hPrev  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  AssertionError  	20	2	add
149	[BUG]  [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  hPrev  =  p0;  hPrev  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  hPrev  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        hPrev    =    p0;    hPrev  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  AssertionError  	20	2	add
150	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  p0  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        p0;        hPrev    =    p0;    p0  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  AssertionError  	20	2	add
151	[BUG]  [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  p0  =  p0;  hPrev  =  p0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  p0  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        hPrev    =    p0;    p0  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  AssertionError  	20	2	add
152	[BUG]  [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  hPrev  =  p0;  hPrev  =  p1;  [CE]  cannot  find  symbol  p1  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  hPrev  =  p0;  hPrev  =  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        hPrev    =    p0;    hPrev  =  p0;  hPrev  =  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	20	None	add
153	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  dPrev  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        p0;        hPrev    =    p0;    dPrev  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  OutOfRangeException  	20	11	add
154	[BUG]  [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  dPrev  =  p0;  hPrev  =  p0;  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  dPrev  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        hPrev    =    p0;    dPrev  =  p0;  hPrev  =  p0;	  	compilable	  [FE]  OutOfRangeException  	20	11	add
155	[BUG]  [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  n  =  p0;  hPrev  =  p0;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  n  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        hPrev    =    p0;    n  =  p0;  hPrev  =  p0;	  	non-compiled	[CE]  possible  loss  of  precision	20	None	add
156	[BUG]  [BUGGY]  int  p0  =  cN;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  int  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	int  p0  =  cN;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	114	None	replace
157	[BUG]  [BUGGY]  int  p0  =  dPrev;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  int  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	int  p0  =  dPrev;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	114	None	replace
158	[BUG]  [BUGGY]  p0  =  dPrev;  int  p0  =  p0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  int  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  dPrev;  int  p0  =  p0;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	114	None	replace
159	[BUG]  [BUGGY]  n  =  Math.abs(cN  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cN  *  dPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cN  *  dPrev);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	97	None	replace
160	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  cN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  *  cN);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  *  cN);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	97	None	replace
161	[BUG]  [BUGGY]  n  =  Math.abs(p0  *  dPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(p0  *  dPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(p0  *  dPrev);	  n    =    Math.abs(dPrev    *    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	97	None	replace
162	[BUG]  [BUGGY]  hPrev  =  p0;  hPrev  =  p.epsilon;  [CE]  cannot  find  symbol  p  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0;  hPrev  =  p.epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0;  hPrev  =  p.epsilon;	  hPrev    =    p0;    hPrev    =    p0.epsilon;    	non-compiled	[CE]  cannot  find  symbol  p	132	None	replace
163	[BUG]  [BUGGY]  hPrev  =  p0;  hPrev  =  p1.epsilon;  [CE]  cannot  find  symbol  p1  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0;  hPrev  =  p1.epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0;  hPrev  =  p1.epsilon;	  hPrev    =    p0;    hPrev    =    p0.epsilon;    	non-compiled	[CE]  cannot  find  symbol  p1	132	None	replace
164	[BUG]  [BUGGY]  hPrev  =  p0;  hPrev  =  pN.epsilon;  [CE]  cannot  find  symbol  pN  [FE]                ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0;  hPrev  =  pN.epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0;  hPrev  =  pN.epsilon;	  hPrev    =    p0;    hPrev    =    p0.epsilon;    	non-compiled	[CE]  cannot  find  symbol  pN	132	None	replace
165	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  /  p0  +  1;	  hPrev    =    cN    /    p0;    	compilable	  [FE]  ConvergenceException  	56	12	replace
166	[BUG]  [BUGGY]  hPrev  =  cN  /  p0  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  p0  +  1;	  hPrev    =    cN    /    p0;    	compilable	  [FE]  ConvergenceException  	56	12	replace
167	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0  =  hPrev;	  hPrev    =    p0;    p0    =    p0;    	compilable	  [FE]  ConvergenceException  	24	11	replace
168	[BUG]  [BUGGY]  p0  =  hPrev;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  hPrev;	  hPrev    =    p0;    p0    =    p0;    	compilable	  [FE]  ConvergenceException  	24	11	replace
169	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  hPrev  =  dPrev;  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev;        hPrev    =    dPrev;    hPrev  =  dPrev;  hPrev  =  dPrev;	  	compilable	  [FE]  AssertionError  	88	2	add
170	[BUG]  [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  hPrev  =  dPrev;  hPrev  =  dPrev;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  hPrev  =  dPrev;  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev;        hPrev    =    dPrev;    hPrev  =  dPrev;  hPrev  =  dPrev;	  	compilable	  [FE]  AssertionError  	88	2	add
171	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  dPrev  =  dPrev;  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev;        hPrev    =    dPrev;    dPrev  =  dPrev;  hPrev  =  dPrev;	  	compilable	  [FE]  AssertionError  	88	2	add
172	[BUG]  [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  dPrev  =  dPrev;  hPrev  =  dPrev;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  dPrev  =  dPrev;  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev;        hPrev    =    dPrev;    dPrev  =  dPrev;  hPrev  =  dPrev;	  	compilable	  [FE]  AssertionError  	88	2	add
173	[BUG]  [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  int  hPrev  =  dPrev;  hPrev  =  dPrev;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  int  hPrev  =  dPrev;  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev;        hPrev    =    dPrev;    int  hPrev  =  dPrev;  hPrev  =  dPrev;	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	88	None	add
174	[BUG]  [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  hPrev  =  dPrev);  hPrev  =  dPrev;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  hPrev  =  dPrev);  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev;        hPrev    =    dPrev;    hPrev  =  dPrev);  hPrev  =  dPrev;	  	non-compiled	[CE]  ';'  expected	88	None	add
175	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	6	2	add
176	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	6	2	add
177	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	6	2	add
178	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	6	2	add
179	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	6	11	add
180	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  dPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    dPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  OutOfRangeException  	6	11	add
181	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cP  /  q2;  hPrev  =  cN  /  q2;  [CE]  cannot  find  symbol  cP  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cP  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  cP  /  q2;  hPrev  =  cN  /  q2;	  	non-compiled	[CE]  cannot  find  symbol  cP	6	None	add
182	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2,  hPrev  =  cN  /  q2;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2,  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2,  hPrev  =  cN  /  q2;	  	non-compiled	[CE]  ';'  expected	6	None	add
183	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2);    	compilable	  [FE]  ConvergenceException  	10	11	replace
184	[BUG]  [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2);    	compilable	  [FE]  ConvergenceException  	10	11	replace
185	[BUG]  [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2);  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2);	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2);    	non-compiled	[CE]  ';'  expected	10	None	replace
186	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2);    	compilable	  [FE]  ConvergenceException  	10	11	replace
187	[BUG]  [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]                ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2);    	compilable	  [FE]  ConvergenceException  	10	11	replace
188	[BUG]  [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2);  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2);	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2);    	non-compiled	[CE]  ';'  expected	10	None	replace
189	[BUG]  [BUGGY]  hPrev  =  dPrev;  hPrev  =  p1;  [CE]  cannot  find  symbol  p1  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev;  hPrev  =  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev;  hPrev  =  p1;	  hPrev    =    p0;    hPrev    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p1	25	None	replace
190	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  n;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  n;	  hPrev    =    p1;    	compilable	  [FE]  ConvergenceException  	63	12	replace
191	[BUG]  [BUGGY]  hPrev  =  n;  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  n;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  n;	  hPrev    =    p1;    	compilable	  [FE]  ConvergenceException  	63	12	replace
192	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  cN);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(p0  -  cN);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(p0  -  cN);	  n    =    Math.abs(dPrev    -    cN);    	non-compiled	[CE]  possible  loss  of  precision	73	None	replace
193	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  *  dPrev;	  hPrev    =    cN    *    dPrev;    	compilable	  [FE]  ConvergenceException  	79	11	replace
194	[BUG]  [BUGGY]  hPrev  =  p0  *  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  *  dPrev;	  hPrev    =    cN    *    dPrev;    	compilable	  [FE]  ConvergenceException  	79	11	replace
195	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  *  p0;	  hPrev    =    cN    *    dPrev;    	compilable	  [FE]  ConvergenceException  	79	11	replace
196	[BUG]  [BUGGY]  hPrev  =  cN  *  p0;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  *  p0;	  hPrev    =    cN    *    dPrev;    	compilable	  [FE]  ConvergenceException  	79	11	replace
197	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  *  dPrev  +  1;	  hPrev    =    cN    *    dPrev;    	compilable	  [FE]  ConvergenceException  	79	12	replace
198	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev  +  1;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  *  dPrev  +  1;	  hPrev    =    cN    *    dPrev;    	compilable	  [FE]  ConvergenceException  	79	12	replace
199	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    cN    /    dPrev;    hPrev  =  cN  /  dPrev;	  	compilable	  [FE]  AssertionError  	36	2	add
200	[BUG]  [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  /  dPrev;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    /    dPrev;    hPrev  =  cN  /  dPrev;	  	compilable	  [FE]  AssertionError  	36	2	add
201	[BUG]  [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  /  dPrev);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  /  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    /    dPrev;    hPrev  =  cN  /  dPrev);	  	non-compiled	[CE]  ';'  expected	36	None	add
202	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  dPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    cN    /    dPrev;    dPrev  =  cN  /  dPrev;	  	compilable	  [FE]  OutOfRangeException  	36	11	add
203	[BUG]  [BUGGY]  hPrev  =  cN  /  dPrev;  dPrev  =  cN  /  dPrev;  [FE]  OutOfRangeException  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  dPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    /    dPrev;    dPrev  =  cN  /  dPrev;	  	compilable	  [FE]  OutOfRangeException  	36	11	add
204	[BUG]  [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  /  dprev;  [CE]  cannot  find  symbol  dprev  [FE]          ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  /  dprev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    /    dPrev;    hPrev  =  cN  /  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	36	None	add
205	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  q2;  p0  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0    =    q2;    p0  =  q2;	  	compilable	  [FE]  ConvergenceException  	133	11	add
206	[BUG]  [BUGGY]  p0  =  q2;  p0  =  q2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  q2;  p0  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    q2;    p0  =  q2;	  	compilable	  [FE]  ConvergenceException  	133	11	add
207	[BUG]  [BUGGY]  p0  =  q2;  p0  =  q2);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  q2;  p0  =  q2);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    q2;    p0  =  q2);	  	non-compiled	[CE]  ';'  expected	133	None	add
208	[BUG]  [BUGGY]  p0  =  q2;  p0  =  q2,;  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  q2;  p0  =  q2,;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    q2;    p0  =  q2,;	  	non-compiled	[CE]  ';'  expected	133	None	add
209	[BUG]  [BUGGY]  p0  =  q2;  P0  =  q2;  [CE]  cannot  find  symbol  P0  [FE]          ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  q2;  P0  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    q2;    P0  =  q2;	  	non-compiled	[CE]  cannot  find  symbol  P0	133	None	add
210	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  /  cN  +  1;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN    +    1;    	compilable	  [FE]  ConvergenceException  	136	11	replace
211	[BUG]  [BUGGY]  hPrev  =  cN  /  cN  +  1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  cN  +  1;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN    +    1;    	compilable	  [FE]  ConvergenceException  	136	11	replace
212	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN  +  1;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN    +    1;    	compilable	  [FE]  ConvergenceException  	136	11	replace
213	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN  +  1;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN  +  1;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN    +    1;    	compilable	  [FE]  ConvergenceException  	136	11	replace
214	[BUG]  [BUGGY]  n  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN    +    1;    	non-compiled	[CE]  possible  loss  of  precision	136	None	replace
215	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev  -  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(cN,  dPrev  -  1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(cN,  dPrev  -  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
216	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  p0  -  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(dPrev,  p0  -  1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(dPrev,  p0  -  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
217	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  dPrev  -  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(cPrev,  dPrev  -  1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(cPrev,  dPrev  -  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
218	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN  *  1);  [CE]  possible  loss  of  precision  [FE]                        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(dPrev,  cN  *  1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(dPrev,  cN  *  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
219	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(cN,  dPrev  +  1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(cN,  dPrev  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
220	[BUG]  [BUGGY]  n  =  Math.max(cPrev,  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(cPrev,  dPrev  +  1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(cPrev,  dPrev  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
221	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  p0  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(dPrev,  p0  +  1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(dPrev,  p0  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
222	[BUG]  [BUGGY]  n  =  cN  /  p0;  [CE]  possible  loss  of  precision  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN  /  p0;	          n    =    cN    /    q2;    	non-compiled	[CE]  possible  loss  of  precision	110	None	replace
223	[BUG]  [BUGGY]  n  =  dPrev  /  q2;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  dPrev  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  dPrev  /  q2;	          n    =    cN    /    q2;    	non-compiled	[CE]  possible  loss  of  precision	110	None	replace
224	[BUG]  [BUGGY]  n  =  cN  /  q1;  [CE]  possible  loss  of  precision  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN  /  q1;	          n    =    cN    /    q2;    	non-compiled	[CE]  possible  loss  of  precision	110	None	replace
225	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;	  	compilable	  [FE]  AssertionError  	40	2	add
226	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;	  	compilable	  [FE]  AssertionError  	40	2	add
227	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	40	11	add
228	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	40	11	add
229	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;	  	compilable	timeout	40	1	add
230	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  timeout  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;	  	compilable	timeout	40	1	add
231	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cP  /  cN;  hPrev  =  cN  /  cN;  [CE]  cannot  find  symbol  cP  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cP  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    hPrev  =  cP  /  cN;  hPrev  =  cN  /  cN;	  	non-compiled	[CE]  cannot  find  symbol  cP	40	None	add
232	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  n  =  cN  /  cN;  hPrev  =  cN  /  cN;  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  n  =  cN  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    n  =  cN  /  cN;  hPrev  =  cN  /  cN;	  	non-compiled	[CE]  possible  loss  of  precision	40	None	add
233	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cN  -  1.0)/  dPrev;	  n    =    Math.abs(cN    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
234	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	7	11	replace
235	[BUG]  [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	7	11	replace
236	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  /  q2;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	7	11	replace
237	[BUG]  [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  q2;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	7	11	replace
238	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  dPrev;	  hPrev    =    dPrev    *    cN;    hPrev    =    cN    *    cN;    	compilable	  [FE]  ConvergenceException  	19	11	replace
239	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  dPrev;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  dPrev;	  hPrev    =    dPrev    *    cN;    hPrev    =    cN    *    cN;    	compilable	  [FE]  ConvergenceException  	19	11	replace
240	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  cN;  hPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  *  cN;  hPrev  =  cN  *  dPrev;	  hPrev    =    dPrev    *    cN;    hPrev    =    cN    *    cN;    	compilable	  [FE]  ConvergenceException  	19	11	replace
241	[BUG]  [BUGGY]  hPrev  =  p0  *  cN;  hPrev  =  cN  *  dPrev;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  cN;  hPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  *  cN;  hPrev  =  cN  *  dPrev;	  hPrev    =    dPrev    *    cN;    hPrev    =    cN    *    cN;    	compilable	  [FE]  ConvergenceException  	19	11	replace
242	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  cN;	  hPrev    =    dPrev    *    cN;    hPrev    =    cN    *    cN;    	compilable	  [FE]  ConvergenceException  	19	12	replace
243	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  cN;  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  cN;	  hPrev    =    dPrev    *    cN;    hPrev    =    cN    *    cN;    	compilable	  [FE]  ConvergenceException  	19	12	replace
244	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0;  hPrev  =  cN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    cN    /    p0;    hPrev  =  cN  /  p0;	  	compilable	  [FE]  AssertionError  	55	2	add
245	[BUG]  [BUGGY]  hPrev  =  cN  /  p0;  hPrev  =  cN  /  p0;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0;  hPrev  =  cN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    /    p0;    hPrev  =  cN  /  p0;	  	compilable	  [FE]  AssertionError  	55	2	add
246	[BUG]  [BUGGY]  timeout  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0;  cPrev  =  cN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    cN    /    p0;    cPrev  =  cN  /  p0;	  	compilable	timeout	55	1	add
247	[BUG]  [BUGGY]  hPrev  =  cN  /  p0;  cPrev  =  cN  /  p0;  timeout  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0;  cPrev  =  cN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    /    p0;    cPrev  =  cN  /  p0;	  	compilable	timeout	55	1	add
248	[BUG]  [BUGGY]  hPrev  =  cN  /  p0;  hPrev  =  cN  /  p1;  [CE]  cannot  find  symbol  p1  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0;  hPrev  =  cN  /  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    /    p0;    hPrev  =  cN  /  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	55	None	add
249	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0;  p0  =  cN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    cN    /    p0;    p0  =  cN  /  p0;	  	compilable	  [FE]  OutOfRangeException  	55	7	add
250	[BUG]  [BUGGY]  hPrev  =  cN  /  p0;  p0  =  cN  /  p0;  [FE]  OutOfRangeException  [FE]          ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0;  p0  =  cN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    /    p0;    p0  =  cN  /  p0;	  	compilable	  [FE]  OutOfRangeException  	55	7	add
251	[BUG]  [BUGGY]  dPrev  =  p0;  int  hPrev  =  p0;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  p0;  int  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  p0;  int  hPrev  =  p0;	  hPrev    =    p0;    int    hPrev    =    p0;    	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	22	None	replace
252	[BUG]  [BUGGY]  int  hPrev  =  p0;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  int  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	int  hPrev  =  p0;	  hPrev    =    p0;    int    hPrev    =    p0;    	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	22	None	replace
253	[BUG]  [BUGGY]  n  =  p0;  int  hPrev  =  p0;  [CE]  possible  loss  of  precision  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  p0;  int  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  p0;  int  hPrev  =  p0;	  hPrev    =    p0;    int    hPrev    =    p0;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
254	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	138	11	replace
255	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	138	11	replace
256	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  dPrev;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	compilable	  [FE]  ConvergenceException  	92	11	replace
257	[BUG]  [BUGGY]  dPrev  =  dPrev;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  dPrev;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	compilable	  [FE]  ConvergenceException  	92	11	replace
258	[BUG]  [BUGGY]  n  =  cN;  dPrev  =  dPrev;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN;  dPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN;  dPrev  =  dPrev;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	92	None	replace
259	[BUG]  [BUGGY]  n  =  hN;  dPrev  =  dPrev;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  hN;  dPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  hN;  dPrev  =  dPrev;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	92	None	replace
260	[BUG]  [BUGGY]  n  =  dPrev;  dPrev  =  hN;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  dPrev;  dPrev  =  hN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  dPrev;  dPrev  =  hN;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	92	None	replace
261	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  AssertionError  	135	2	add
262	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  AssertionError  	135	2	add
263	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  OutOfRangeException  	135	11	add
264	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [FE]  OutOfRangeException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  OutOfRangeException  	135	11	add
265	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	timeout	135	1	add
266	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  timeout  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	timeout	135	1	add
267	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  n  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  n  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    n  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	135	None	add
268	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  q1  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    q1  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  AssertionError  	135	2	add
269	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  q1  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  q1  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    q1  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  AssertionError  	135	2	add
270	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  p0;	  hPrev    =    dPrev    /    cN;    hPrev    =    cN    /    dPrev;    	compilable	  [FE]  ConvergenceException  	127	11	replace
271	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  p0;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  p0;	  hPrev    =    dPrev    /    cN;    hPrev    =    cN    /    dPrev;    	compilable	  [FE]  ConvergenceException  	127	11	replace
272	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  /  cN;  hPrev  =  cN  /  dPrev;	  hPrev    =    dPrev    /    cN;    hPrev    =    cN    /    dPrev;    	compilable	  [FE]  ConvergenceException  	127	11	replace
273	[BUG]  [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  cN  /  dPrev;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  cN;  hPrev  =  cN  /  dPrev;	  hPrev    =    dPrev    /    cN;    hPrev    =    cN    /    dPrev;    	compilable	  [FE]  ConvergenceException  	127	11	replace
274	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  p0  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  cN;  hPrev  =  p0  /  dPrev;	  hPrev    =    dPrev    /    cN;    hPrev    =    cN    /    dPrev;    	compilable	  [FE]  ConvergenceException  	127	11	replace
275	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  p0  /  dPrev;  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  p0  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  cN;  hPrev  =  p0  /  dPrev;	  hPrev    =    dPrev    /    cN;    hPrev    =    cN    /    dPrev;    	compilable	  [FE]  ConvergenceException  	127	11	replace
276	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN,  p0);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  /  cN,  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  /  cN,  p0);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	96	None	replace
277	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  p0;  hPrev  =  p0;	  hPrev    =    p0;    hPrev    =    p0;    }    hPrev    =    p0;    	compilable	timeout	130	1	replace
278	[BUG]  [BUGGY]  dPrev  =  p0;  hPrev  =  p0;  timeout  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  p0;  hPrev  =  p0;	  hPrev    =    p0;    hPrev    =    p0;    }    hPrev    =    p0;    	compilable	timeout	130	1	replace
279	[BUG]  [BUGGY]  n  =  p0;  hPrev  =  p0;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  p0;  hPrev  =  p0;	  hPrev    =    p0;    hPrev    =    p0;    }    hPrev    =    p0;    	non-compiled	[CE]  possible  loss  of  precision	130	None	replace
280	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0  =  p0;  hPrev  =  p0;	  hPrev    =    p0;    hPrev    =    p0;    }    hPrev    =    p0;    	compilable	  [FE]  ConvergenceException  	130	11	replace
281	[BUG]  [BUGGY]  p0  =  p0;  hPrev  =  p0;  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p0;  hPrev  =  p0;	  hPrev    =    p0;    hPrev    =    p0;    }    hPrev    =    p0;    	compilable	  [FE]  ConvergenceException  	130	11	replace
282	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev;  hPrev  =  p0;	  hPrev    =    p0;    hPrev    =    p0;    }    hPrev    =    p0;    	compilable	  [FE]  ConvergenceException  	130	11	replace
283	[BUG]  [BUGGY]  hPrev  =  dPrev;  hPrev  =  p0;  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev;  hPrev  =  p0;	  hPrev    =    p0;    hPrev    =    p0;    }    hPrev    =    p0;    	compilable	  [FE]  ConvergenceException  	130	11	replace
284	[BUG]  [BUGGY]  int  hPrev  =  dPrev;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  int  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	int  hPrev  =  dPrev;	  hPrev    =    dPrev;    int    hPrev    =    dPrev;    	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	90	None	replace
285	[BUG]  [BUGGY]  n  =  dPrev;  int  hPrev  =  dPrev;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  dPrev;  int  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  dPrev;  int  hPrev  =  dPrev;	  hPrev    =    dPrev;    int    hPrev    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
286	[BUG]  [BUGGY]  int  hPrev  =  cN;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  int  hPrev  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	int  hPrev  =  cN;	  hPrev    =    dPrev;    int    hPrev    =    dPrev;    	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	90	None	replace
287	[BUG]  [BUGGY]  n  =  dPrev;  int  hPrev  =  cN;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  dPrev;  int  hPrev  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  dPrev;  int  hPrev  =  cN;	  hPrev    =    dPrev;    int    hPrev    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
288	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;	  	compilable	  [FE]  AssertionError  	30	2	add
289	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;	  	compilable	  [FE]  AssertionError  	30	2	add
290	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  epsilon;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  epsilon;  hPrev  =  dPrev  /  cN;	  	compilable	  [FE]  AssertionError  	30	2	add
291	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  epsilon;  hPrev  =  dPrev  /  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  epsilon;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  epsilon;  hPrev  =  dPrev  /  cN;	  	compilable	  [FE]  AssertionError  	30	2	add
292	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dprev  /  cN;  [CE]  cannot  find  symbol  dprev  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dprev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dprev  /  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	30	None	add
293	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  dPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    dPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;	  	compilable	  [FE]  OutOfRangeException  	30	7	add
294	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  dPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  [FE]  OutOfRangeException  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  dPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    dPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;	  	compilable	  [FE]  OutOfRangeException  	30	7	add
295	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  /  cN;	  	compilable	  [FE]  AssertionError  	30	2	add
296	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  /  cN;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  /  cN;	  	compilable	  [FE]  AssertionError  	30	2	add
297	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p2;  [CE]  cannot  find  symbol  p2  [FE]        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p0  =  p2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  cN;  p0  =  p2;	          p0    =    p0;    p0    =    p2;    	non-compiled	[CE]  cannot  find  symbol  p2	121	None	replace
298	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cP;  [CE]  cannot  find  symbol  cP  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cP;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cP;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cP;    	non-compiled	[CE]  cannot  find  symbol  cP	139	None	replace
299	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	cPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cP;    	compilable	  [FE]  ConvergenceException  	139	11	replace
300	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	cPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cP;    	compilable	  [FE]  ConvergenceException  	139	11	replace
301	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	                p0        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	66	2	add
302	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p0;	  	compilable	  [FE]  AssertionError  	66	2	add
303	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p1;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p0  =  p1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  p0;  p0  =  p1;	  	non-compiled	[CE]  cannot  find  symbol  p1	66	None	add
304	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p1  =  p0;  [CE]  cannot  find  symbol  p1  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p0;  p1  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  p0;  p1  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  p1	66	None	add
305	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  P0  =  p0;  p0  =  p0;  [CE]  cannot  find  symbol  P0  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]          p0    =    p0;    p0  =  p0;  P0  =  p0;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	                p0        =        p0;        p0    =    p0;    P0  =  p0;  p0  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  P0	66	None	add
306	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cPrev);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(dPrev,  cPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(dPrev,  cPrev);	  n    =    Math.max(cPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
307	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  cPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.min(dPrev,  cPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.min(dPrev,  cPrev);	  n    =    Math.max(cPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
308	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  p0  +  1;	  hPrev    =    dPrev    *    p0;    	compilable	  [FE]  ConvergenceException  	83	12	replace
309	[BUG]  [BUGGY]  hPrev  =  dPrev  *  p0  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  p0  +  1;	  hPrev    =    dPrev    *    p0;    	compilable	  [FE]  ConvergenceException  	83	12	replace
310	[BUG]  [BUGGY]  hPrev  =  p1  *  dPrev;  [CE]  cannot  find  symbol  p1  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p1  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p1  *  dPrev;	  hPrev    =    dPrev    *    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	83	None	replace
311	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN;  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN;  hPrev  =  dPrev;	  hPrev    =    dPrev;    hPrev    =    dPrev;    	compilable	  [FE]  AssertionError  	89	10	replace
312	[BUG]  [BUGGY]  hPrev  =  cN;  hPrev  =  dPrev;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN;  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN;  hPrev  =  dPrev;	  hPrev    =    dPrev;    hPrev    =    dPrev;    	compilable	  [FE]  AssertionError  	89	10	replace
313	[BUG]  [BUGGY]  n  =  cN;  hPrev  =  dPrev;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN;  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN;  hPrev  =  dPrev;	  hPrev    =    dPrev;    hPrev    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	89	None	replace
314	[BUG]  [BUGGY]  n  =  dPrev;  hPrev  =  cN;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  dPrev;  hPrev  =  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  dPrev;  hPrev  =  cN;	  hPrev    =    dPrev;    hPrev    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	89	None	replace
315	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  +  2;	  hPrev    =    p0    +    1;    	compilable	  [FE]  ConvergenceException  	65	12	replace
316	[BUG]  [BUGGY]  hPrev  =  p0  +  2;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  +  2;	  hPrev    =    p0    +    1;    	compilable	  [FE]  ConvergenceException  	65	12	replace
317	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  3;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  +  3;	  hPrev    =    p0    +    1;    	compilable	  [FE]  ConvergenceException  	65	12	replace
318	[BUG]  [BUGGY]  hPrev  =  p0  +  3;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  3;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  +  3;	  hPrev    =    p0    +    1;    	compilable	  [FE]  ConvergenceException  	65	12	replace
319	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  dPrev  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    *    cN    +    1;    hPrev  =  dPrev  *  cN  +  1;	  	compilable	  [FE]  AssertionError  	84	2	add
320	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  dPrev  *  cN  +  1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  dPrev  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    *    cN    +    1;    hPrev  =  dPrev  *  cN  +  1;	  	compilable	  [FE]  AssertionError  	84	2	add
321	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  dPrev  =  dPrev  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    *    cN    +    1;    dPrev  =  dPrev  *  cN  +  1;	  	compilable	  [FE]  OutOfRangeException  	84	11	add
322	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  dPrev  =  dPrev  *  cN  +  1;  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  dPrev  =  dPrev  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    *    cN    +    1;    dPrev  =  dPrev  *  cN  +  1;	  	compilable	  [FE]  OutOfRangeException  	84	11	add
323	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  cPrev  =  dPrev  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    *    cN    +    1;    cPrev  =  dPrev  *  cN  +  1;	  	compilable	timeout	84	1	add
324	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  cPrev  =  dPrev  *  cN  +  1;  timeout  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  cPrev  =  dPrev  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    *    cN    +    1;    cPrev  =  dPrev  *  cN  +  1;	  	compilable	timeout	84	1	add
325	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  n  =  dPrev  *  cN  +  1;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  n  =  dPrev  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    *    cN    +    1;    n  =  dPrev  *  cN  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	84	None	add
326	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  dPrev  *  cN;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	17	11	replace
327	[BUG]  [BUGGY]  dPrev  =  dPrev  *  cN;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  dPrev  *  cN;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	17	11	replace
328	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  cN  *  dPrev;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	17	11	replace
329	[BUG]  [BUGGY]  dPrev  =  cN  *  dPrev;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  cN  *  dPrev;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	17	11	replace
330	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  *  dPrev;  dPrev  =  dPrev  *  cN;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	  [FE]  OutOfRangeException  	17	11	replace
331	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev;  dPrev  =  dPrev  *  cN;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  *  dPrev;  dPrev  =  dPrev  *  cN;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	  [FE]  OutOfRangeException  	17	11	replace
332	[BUG]  [BUGGY]  n  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [CE]  possible  loss  of  precision  [FE]          OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  dPrev  *  cN;  dPrev  =  dPrev  *  cN;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	non-compiled	[CE]  possible  loss  of  precision	17	None	replace
333	[BUG]  [BUGGY]  n  =  hPrev;  [CE]  possible  loss  of  precision  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  hPrev;	  hPrev    =    p2;    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
334	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  cN;  hPrev  =  p0  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  *  cN;  hPrev  =  p0  *  cN;	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	14	11	replace
335	[BUG]  [BUGGY]  hPrev  =  p0  *  cN;  hPrev  =  p0  *  cN;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  cN;  hPrev  =  p0  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  *  cN;  hPrev  =  p0  *  cN;	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	14	11	replace
336	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	34	2	add
337	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	34	2	add
338	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dprev  *  cN;  [CE]  cannot  find  symbol  dprev  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dprev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dprev  *  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	34	None	add
339	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  dPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  OutOfRangeException  	34	7	add
340	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  dPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  dPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  OutOfRangeException  	34	7	add
341	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN);	  	non-compiled	[CE]  ';'  expected	34	None	add
342	[BUG]  [BUGGY]  (hPrev  =  cN);  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  (hPrev  =  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	(hPrev  =  cN);	  hPrev    =    dPrev;    (    hPrev    =    dPrev);    	non-compiled	[CE]  not  a  statement	123	None	replace
343	[BUG]  [BUGGY]  (hPrev  =  dPrev);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  (hPrev  =  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	(hPrev  =  dPrev);	  hPrev    =    dPrev;    (    hPrev    =    dPrev);    	non-compiled	[CE]  not  a  statement	123	None	replace
344	[BUG]  [BUGGY]  (hPrev  =  p0);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  (hPrev  =  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	(hPrev  =  p0);	  hPrev    =    dPrev;    (    hPrev    =    dPrev);    	non-compiled	[CE]  not  a  statement	123	None	replace
345	[BUG]  [BUGGY]  (hPrev  =  epsilon);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  (hPrev  =  epsilon);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	(hPrev  =  epsilon);	  hPrev    =    dPrev;    (    hPrev    =    dPrev);    	non-compiled	[CE]  not  a  statement	123	None	replace
346	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  /  dPrev  +  1;	  hPrev    =    cN    /    dPrev;    	compilable	  [FE]  ConvergenceException  	37	12	replace
347	[BUG]  [BUGGY]  hPrev  =  cN  /  dPrev  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  dPrev  +  1;	  hPrev    =    cN    /    dPrev;    	compilable	  [FE]  ConvergenceException  	37	12	replace
348	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  1;	  hPrev    =    dPrev    +    1;    	compilable	  [FE]  AssertionError  	87	10	replace
349	[BUG]  [BUGGY]  hPrev  =  dPrev  *  1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  1;	  hPrev    =    dPrev    +    1;    	compilable	  [FE]  AssertionError  	87	10	replace
350	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  +  1;	  hPrev    =    dPrev    +    1;    	compilable	  [FE]  ConvergenceException  	87	12	replace
351	[BUG]  [BUGGY]  hPrev  =  cN  +  1;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  +  1;	  hPrev    =    dPrev    +    1;    	compilable	  [FE]  ConvergenceException  	87	12	replace
352	[BUG]  [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2);  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    /    q2;    hPrev  =  p0  /  q2);	  	non-compiled	[CE]  ';'  expected	53	None	add
353	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    p0    /    q2;    hPrev  =  p0  /  q1;	  	compilable	  [FE]  AssertionError  	53	2	add
354	[BUG]  [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q1;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    /    q2;    hPrev  =  p0  /  q1;	  	compilable	  [FE]  AssertionError  	53	2	add
355	[BUG]  [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2,;  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2,;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    /    q2;    hPrev  =  p0  /  q2,;	  	non-compiled	[CE]  ';'  expected	53	None	add
356	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        /        cN;        hPrev    =    cN    /    dPrev;    hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;	  	compilable	  [FE]  AssertionError  	126	2	add
357	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    cN    /    dPrev;    hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;	  	compilable	  [FE]  AssertionError  	126	2	add
358	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dprev;  [CE]  cannot  find  symbol  dprev  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dprev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    cN    /    dPrev;    hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	126	None	add
359	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  dPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        /        cN;        hPrev    =    cN    /    dPrev;    dPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;	  	compilable	  [FE]  OutOfRangeException  	126	7	add
360	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  dPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  dPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    cN    /    dPrev;    dPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;	  	compilable	  [FE]  OutOfRangeException  	126	7	add
361	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN);  hPrev  =  cN  /  dPrev;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN);  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    cN    /    dPrev;    hPrev  =  dPrev  /  cN);  hPrev  =  cN  /  dPrev;	  	non-compiled	[CE]  ';'  expected	126	None	add
362	[BUG]  [BUGGY]  n  =  Math.max(p0,  cPrev);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(p0,  cPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(p0,  cPrev);	  n    =    Math.max(p0,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	100	None	replace
363	[BUG]  [BUGGY]  n  =  Math.min(dPrev,  p0);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.min(dPrev,  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.min(dPrev,  p0);	  n    =    Math.max(p0,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	100	None	replace
364	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cPrev  -  1.0)/  dPrev;	  n    =    Math.abs(cPrev    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
365	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  /  dPrev)/  q2;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cPrev  /  dPrev)/  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cPrev  /  dPrev)/  q2;	  n    =    Math.abs(cPrev    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
366	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  p0;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cPrev  -  1.0)/  p0;	  n    =    Math.abs(cPrev    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
367	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  deltaN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cPrev  -  1.0)/  deltaN;	  n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  possible  loss  of  precision	112	None	replace
368	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  cN;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  -  1.0)/  cN;	  n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  possible  loss  of  precision	112	None	replace
369	[BUG]  [BUGGY]  n  =  Math.abs(cN  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cN  -  1.0)/  deltaN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cN  -  1.0)/  deltaN;	  n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  possible  loss  of  precision	112	None	replace
370	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  cN;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(epsilon  -  1.0)/  cN;	  n    =    Math.abs(deltaN    -    1.0)/    cN;    	non-compiled	[CE]  possible  loss  of  precision	112	None	replace
371	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  +  1;  hPrev  =  dPrev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    +    1;    hPrev  =  dPrev  +  1;	  	compilable	  [FE]  AssertionError  	86	2	add
372	[BUG]  [BUGGY]  hPrev  =  dPrev  +  1;  hPrev  =  dPrev  +  1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  +  1;  hPrev  =  dPrev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    +    1;    hPrev  =  dPrev  +  1;	  	compilable	  [FE]  AssertionError  	86	2	add
373	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  +  1;  dPrev  =  dPrev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    +    1;    dPrev  =  dPrev  +  1;	  	compilable	  [FE]  OutOfRangeException  	86	10	add
374	[BUG]  [BUGGY]  hPrev  =  dPrev  +  1;  dPrev  =  dPrev  +  1;  [FE]  OutOfRangeException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  +  1;  dPrev  =  dPrev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    +    1;    dPrev  =  dPrev  +  1;	  	compilable	  [FE]  OutOfRangeException  	86	10	add
375	[BUG]  [BUGGY]  hPrev  =  dPrev  +  1;  qPrev  =  dPrev  +  1;  [CE]  cannot  find  symbol  qPrev  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  +  1;  qPrev  =  dPrev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    +    1;    qPrev  =  dPrev  +  1;	  	non-compiled	[CE]  cannot  find  symbol  qPrev	86	None	add
376	[BUG]  [BUGGY]  hPrev  =  dPrev  +  1;  n  =  dPrev  +  1;  [CE]  possible  loss  of  precision  [FE]          ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  +  1;  n  =  dPrev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    +    1;    n  =  dPrev  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	86	None	add
377	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  cN,  p0);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(dPrev,  cN,  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(dPrev,  cN,  p0);	  n    =    Math.max(dPrev,    p0,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	99	None	replace
378	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  p0,  cN,  epsilon);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(dPrev,  p0,  cN,  epsilon);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(dPrev,  p0,  cN,  epsilon);	  n    =    Math.max(dPrev,    p0,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	99	None	replace
379	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2;  hPrev  =  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    q2;    hPrev  =  q2;	  	compilable	  [FE]  AssertionError  	106	2	add
380	[BUG]  [BUGGY]  hPrev  =  q2;  hPrev  =  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2;  hPrev  =  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    q2;    hPrev  =  q2;	  	compilable	  [FE]  AssertionError  	106	2	add
381	[BUG]  [BUGGY]  hPrev  =  q2;  int  hPrev  =  q2;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2;  int  hPrev  =  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    q2;    int  hPrev  =  q2;	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	106	None	add
382	[BUG]  [BUGGY]  hPrev  =  q2;  hPrev  =  q2);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2;  hPrev  =  q2);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    q2;    hPrev  =  q2);	  	non-compiled	[CE]  ';'  expected	106	None	add
383	[BUG]  [BUGGY]  hPrev  =  q2;  qPrev  =  q2;  [CE]  cannot  find  symbol  qPrev  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2;  qPrev  =  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    q2;    qPrev  =  q2;	  	non-compiled	[CE]  cannot  find  symbol  qPrev	106	None	add
384	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  n  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  n  /  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dprev    /    cN;    	compilable	  [FE]  ConvergenceException  	109	12	replace
385	[BUG]  [BUGGY]  hPrev  =  n  /  cN;  [FE]  ConvergenceException  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  n  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  n  /  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dprev    /    cN;    	compilable	  [FE]  ConvergenceException  	109	12	replace
386	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  p0);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cN  /  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cN  /  p0);	  n    =    Math.abs(cN    -    p0);    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
387	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN);  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN);	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN);    	non-compiled	[CE]  ';'  expected	46	None	replace
388	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0    =    cN;    p0  =  cN;	  	compilable	  [FE]  OutOfRangeException  	1	7	add
389	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    cN;    p0  =  cN;	  	compilable	  [FE]  OutOfRangeException  	1	7	add
390	[BUG]  [BUGGY]  p0  =  cN;  p1  =  cN;  [CE]  cannot  find  symbol  p1  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p1  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    cN;    p1  =  cN;	  	non-compiled	[CE]  cannot  find  symbol  p1	1	None	add
391	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN);  [CE]  ';'  expected  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p0  =  cN);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    cN;    p0  =  cN);	  	non-compiled	[CE]  ';'  expected	1	None	add
392	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN.;  [CE]  <identifier>  expected  [FE]          ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p0  =  cN.;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    cN;    p0  =  cN.;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
393	[BUG]  [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,  p0;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,  p0;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0;    	non-compiled	[CE]  ';'  expected	12	None	replace
394	[BUG]  [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  cN  /  q2,  p0;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  cN  /  q2,  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  cN;  hPrev  =  cN  /  q2,  p0;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0;    	non-compiled	[CE]  ';'  expected	12	None	replace
395	[BUG]  [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  cN  /  q2,  p0;  [CE]  ';'  expected  [FE]                    ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  cN  /  q2,  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  q2;  hPrev  =  cN  /  q2,  p0;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0;    	non-compiled	[CE]  ';'  expected	12	None	replace
396	[BUG]  [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  p0  /  q2,  p0;  [CE]  ';'  expected  [FE]                      ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  p0  /  q2,  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  q1;  hPrev  =  p0  /  q2,  p0;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0;    	non-compiled	[CE]  ';'  expected	12	None	replace
397	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q1;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	8	2	add
398	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q1;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	8	2	add
399	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q1;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1);	  	non-compiled	[CE]  ';'  expected	8	None	add
400	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	8	11	add
401	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  dPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q1;    dPrev  =  cN  /  q2;  hPrev  =  cN  /  q1;	  	compilable	  [FE]  OutOfRangeException  	8	11	add
402	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cP  /  q2;  hPrev  =  cN  /  q1;  [CE]  cannot  find  symbol  cP  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cP  /  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q1;    hPrev  =  cP  /  q2;  hPrev  =  cN  /  q1;	  	non-compiled	[CE]  cannot  find  symbol  cP	8	None	add
403	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1,  n);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1,  n);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q1;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1,  n);	  	non-compiled	[CE]  ';'  expected	8	None	add
404	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  dPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    cN    *    dPrev;    dPrev  =  cN  *  dPrev;	  	compilable	  [FE]  OutOfRangeException  	78	11	add
405	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev;  dPrev  =  cN  *  dPrev;  [FE]  OutOfRangeException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  dPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    dPrev;    dPrev  =  cN  *  dPrev;	  	compilable	  [FE]  OutOfRangeException  	78	11	add
406	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  dPrev);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    dPrev;    hPrev  =  cN  *  dPrev);	  	non-compiled	[CE]  ';'  expected	78	None	add
407	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  cPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    cN    *    dPrev;    cPrev  =  cN  *  dPrev;	  	compilable	  [FE]  ConvergenceException  	78	11	add
408	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev;  cPrev  =  cN  *  dPrev;  [FE]  ConvergenceException  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  cPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    dPrev;    cPrev  =  cN  *  dPrev;	  	compilable	  [FE]  ConvergenceException  	78	11	add
409	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q1;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q1;    	compilable	  [FE]  ConvergenceException  	9	11	replace
410	[BUG]  [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q1;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q1;    	compilable	  [FE]  ConvergenceException  	9	11	replace
411	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  /  q2;  hPrev  =  cN  /  q1;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q1;    	compilable	  [FE]  ConvergenceException  	9	11	replace
412	[BUG]  [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  cN  /  q1;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  q2;  hPrev  =  cN  /  q1;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q1;    	compilable	  [FE]  ConvergenceException  	9	11	replace
413	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        *        cN;        hPrev    =    cN    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  cN;	  	compilable	  [FE]  AssertionError  	18	2	add
414	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        hPrev    =    cN    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  cN;	  	compilable	  [FE]  AssertionError  	18	2	add
415	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  dPrev  *  epsilon;  hPrev  =  cN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        *        cN;        hPrev    =    cN    *    cN;    hPrev  =  dPrev  *  epsilon;  hPrev  =  cN  *  cN;	  	compilable	  [FE]  AssertionError  	18	2	add
416	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  dPrev  *  epsilon;  hPrev  =  cN  *  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  dPrev  *  epsilon;  hPrev  =  cN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        hPrev    =    cN    *    cN;    hPrev  =  dPrev  *  epsilon;  hPrev  =  cN  *  cN;	  	compilable	  [FE]  AssertionError  	18	2	add
417	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  dPrev  =  dPrev  *  cN;  hPrev  =  cN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        *        cN;        hPrev    =    cN    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  cN  *  cN;	  	compilable	  [FE]  OutOfRangeException  	18	11	add
418	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  dPrev  =  dPrev  *  cN;  hPrev  =  cN  *  cN;  [FE]  OutOfRangeException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  dPrev  =  dPrev  *  cN;  hPrev  =  cN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        hPrev    =    cN    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  cN  *  cN;	  	compilable	  [FE]  OutOfRangeException  	18	11	add
419	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  dPrev  *  cN);  hPrev  =  cN  *  cN;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  dPrev  *  cN);  hPrev  =  cN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        hPrev    =    cN    *    cN;    hPrev  =  dPrev  *  cN);  hPrev  =  cN  *  cN;	  	non-compiled	[CE]  ';'  expected	18	None	add
420	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  /  p0);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cPrev  /  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cPrev  /  p0);	  n    =    Math.abs(dPrev    /    p0);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
421	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  p0  +  1);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  /  p0  +  1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  /  p0  +  1);	  n    =    Math.abs(dPrev    /    p0);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
422	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0    =    dPrev;    p0  =  dPrev;	  	compilable	  [FE]  ConvergenceException  	4	11	add
423	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p0  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    dPrev;    p0  =  dPrev;	  	compilable	  [FE]  ConvergenceException  	4	11	add
424	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p0  =  dPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    dPrev;    p0  =  dPrev);	  	non-compiled	[CE]  ';'  expected	4	None	add
425	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0    =    dPrev;    p0  =  cN;	  	compilable	  [FE]  OutOfRangeException  	4	7	add
426	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  cN;  [FE]  OutOfRangeException  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    dPrev;    p0  =  cN;	  	compilable	  [FE]  OutOfRangeException  	4	7	add
427	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  q2  /  cN  +  1;	  hPrev    =    q2    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	103	12	replace
428	[BUG]  [BUGGY]  hPrev  =  q2  /  cN  +  1;  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q2  /  cN  +  1;	  hPrev    =    q2    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	103	12	replace
429	[BUG]  [BUGGY]  timeout  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  epsilon;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cS;    	compilable	timeout	33	1	replace
430	[BUG]  [BUGGY]  hPrev  =  dPrev  /  epsilon;  timeout  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  epsilon;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cS;    	compilable	timeout	33	1	replace
431	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  b;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  b;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cS;    	compilable	  [FE]  OutOfRangeException  	33	12	replace
432	[BUG]  [BUGGY]  hPrev  =  dPrev  /  b;  [FE]  OutOfRangeException  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  b;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  b;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cS;    	compilable	  [FE]  OutOfRangeException  	33	12	replace
433	[BUG]  [BUGGY]  n  =  hN;  n  =  hN;  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  hN;  n  =  hN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  hN;  n  =  hN;	  hPrev    =    dPrev;    hPrev    =    dprev;    	non-compiled	[CE]  possible  loss  of  precision	120	None	replace
434	[BUG]  [BUGGY]  n  =  cPrev;  n  =  hN;  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cPrev;  n  =  hN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cPrev;  n  =  hN;	  hPrev    =    dPrev;    hPrev    =    dprev;    	non-compiled	[CE]  possible  loss  of  precision	120	None	replace
435	[BUG]  [BUGGY]  n  =  cN;  hPrev  =  n;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN;  hPrev  =  n;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN;  hPrev  =  n;	  hPrev    =    dPrev;    hPrev    =    dprev;    	non-compiled	[CE]  possible  loss  of  precision	120	None	replace
436	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  dPrev  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    /    p0;    hPrev  =  dPrev  /  p0;	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
437	[BUG]  [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  dPrev  /  p0;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  dPrev  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    p0;    hPrev  =  dPrev  /  p0;	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
438	[BUG]  [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  dPrev  /  p1;  [CE]  cannot  find  symbol  p1  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  dPrev  /  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    p0;    hPrev  =  dPrev  /  p1;	  timeout    	non-compiled	[CE]  cannot  find  symbol  p1	76	None	add
439	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  cN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    /    p0;    hPrev  =  cN  /  p0;	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
440	[BUG]  [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  cN  /  p0;  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  cN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    p0;    hPrev  =  cN  /  p0;	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
441	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  dPrev  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    /    p0;    hPrev  =  dPrev  *  p0;	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
442	[BUG]  [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  dPrev  *  p0;  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  dPrev  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    p0;    hPrev  =  dPrev  *  p0;	  timeout    	compilable	  [FE]  AssertionError  	76	2	add
443	[BUG]  [BUGGY]  hPrev  =  cN;  hPrev  =  dPrev);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN;  hPrev  =  dPrev);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN;  hPrev  =  dPrev);	  hPrev    =    dPrev;    hPrev    =    dPrev);    	non-compiled	[CE]  ';'  expected	93	None	replace
444	[BUG]  [BUGGY]  hPrev  =  p0;  hPrev  =  p0);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0;  hPrev  =  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0;  hPrev  =  p0);	  hPrev    =    dPrev;    hPrev    =    dPrev);    	non-compiled	[CE]  ';'  expected	93	None	replace
445	[BUG]  [BUGGY]  hPrev  =  p0  *  cN;  int  hPrev  =  p0  *  cN;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  cN;  int  hPrev  =  p0  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    *    cN;    int  hPrev  =  p0  *  cN;	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	80	None	add
446	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  cN;  cPrev  =  p0  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    p0    *    cN;    cPrev  =  p0  *  cN;	  	compilable	  [FE]  ConvergenceException  	80	11	add
447	[BUG]  [BUGGY]  hPrev  =  p0  *  cN;  cPrev  =  p0  *  cN;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  cN;  cPrev  =  p0  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    *    cN;    cPrev  =  p0  *  cN;	  	compilable	  [FE]  ConvergenceException  	80	11	add
448	[BUG]  [BUGGY]  p0  =  cN;  P0  =  p0;  [CE]  cannot  find  symbol  P0  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  P0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  cN;  P0  =  p0;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  P0	69	None	replace
449	[BUG]  [BUGGY]  p0  =  p1;  P0  =  p2;  [CE]  cannot  find  symbol  p1  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p1;  P0  =  p2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p1;  P0  =  p2;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	69	None	replace
450	[BUG]  [BUGGY]  hPrev  =  p0;  hPrev  =  p1.doubleValue();  [CE]  cannot  find  symbol  p1  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0;  hPrev  =  p1.doubleValue();  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0;  hPrev  =  p1.doubleValue();	  hPrev    =    p0;    hPrev    =    p0.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  p1	131	None	replace
451	[BUG]  [BUGGY]  hPrev  =  p0;  hPrev  =  p.doubleValue();  [CE]  cannot  find  symbol  p  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0;  hPrev  =  p.doubleValue();  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0;  hPrev  =  p.doubleValue();	  hPrev    =    p0;    hPrev    =    p0.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  p	131	None	replace
452	[BUG]  [BUGGY]  hPrev  =  p0;  hPrev  =  cN.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0;  hPrev  =  cN.doubleValue();  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0;  hPrev  =  cN.doubleValue();	  hPrev    =    p0;    hPrev    =    p0.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	131	None	replace
453	[BUG]  [BUGGY]  hPrev  =  p0;  hPrev  =  p2.doubleValue();  [CE]  cannot  find  symbol  p2  [FE]                ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0;  hPrev  =  p2.doubleValue();  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0;  hPrev  =  p2.doubleValue();	  hPrev    =    p0;    hPrev    =    p0.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  p2	131	None	replace
454	[BUG]  [BUGGY]  hPrev  =  n  /  q2;  hPrev  =  cN  /  q2,  n++;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  n  /  q2;  hPrev  =  cN  /  q2,  n++;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  n  /  q2;  hPrev  =  cN  /  q2,  n++;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    n++;    	non-compiled	[CE]  ';'  expected	11	None	replace
455	[BUG]  [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,  n++;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,  n++;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,  n++;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    n++;    	non-compiled	[CE]  ';'  expected	11	None	replace
456	[BUG]  [BUGGY]  hPrev  =  cN  /  q2;  hPrev  =  p0  /  q2,  n++;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  q2;  hPrev  =  p0  /  q2,  n++;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  q2;  hPrev  =  p0  /  q2,  n++;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    n++;    	non-compiled	[CE]  ';'  expected	11	None	replace
457	[BUG]  [BUGGY]  n  =  cN  /  q2;  hPrev  =  cN  /  q2,  n++;  [CE]  ';'  expected  [FE]                    ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN  /  q2;  hPrev  =  cN  /  q2,  n++;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN  /  q2;  hPrev  =  cN  /  q2,  n++;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    n++;    	non-compiled	[CE]  ';'  expected	11	None	replace
458	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  q2;	  hPrev    =    cN    *    q2;    	compilable	  [FE]  AssertionError  	129	6	replace
459	[BUG]  [BUGGY]  hPrev  =  dPrev  *  q2;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  q2;	  hPrev    =    cN    *    q2;    	compilable	  [FE]  AssertionError  	129	6	replace
460	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cN;    	compilable	timeout	31	1	replace
461	[BUG]  [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;  timeout  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cN;    	compilable	timeout	31	1	replace
462	[BUG]  [BUGGY]  hPrev  =  p0  /  cN;  int  hPrev  =  p0  /  cN;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  int  hPrev  =  p0  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    /    cN;    int  hPrev  =  p0  /  cN;	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	38	None	add
463	[BUG]  [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p0  /  cS;  [CE]  cannot  find  symbol  cS  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p0  /  cS;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    /    cN;    hPrev  =  p0  /  cS;	  	non-compiled	[CE]  cannot  find  symbol  cS	38	None	add
464	[BUG]  [BUGGY]  hPrev  =  p1  /  p0;  [CE]  cannot  find  symbol  p1  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p1  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p1  /  p0;	  hPrev    =    dPrev    /    p0;    timeout    	non-compiled	[CE]  cannot  find  symbol  p1	77	None	replace
465	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  p0  +  1;	  hPrev    =    dPrev    /    p0;    timeout    	compilable	  [FE]  ConvergenceException  	77	12	replace
466	[BUG]  [BUGGY]  hPrev  =  dPrev  /  p0  +  1;  [FE]  ConvergenceException  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  p0  +  1;	  hPrev    =    dPrev    /    p0;    timeout    	compilable	  [FE]  ConvergenceException  	77	12	replace
467	[BUG]  [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,  p0);  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,  p0);	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0);    	non-compiled	[CE]  ';'  expected	141	None	replace
468	[BUG]  [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  cN  /  q2,  p0);  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  cN  /  q2,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  q2;  hPrev  =  cN  /  q2,  p0);	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0);    	non-compiled	[CE]  ';'  expected	141	None	replace
469	[BUG]  [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  cN  /  q2,  p0);  [CE]  ';'  expected  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  cN  /  q2,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  cN;  hPrev  =  cN  /  q2,  p0);	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0);    	non-compiled	[CE]  ';'  expected	141	None	replace
470	[BUG]  [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  p0  /  q2,  p0);  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  q1;  hPrev  =  p0  /  q2,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  q1;  hPrev  =  p0  /  q2,  p0);	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0);    	non-compiled	[CE]  ';'  expected	141	None	replace
471	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  q2  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    q2    /    cN;    hPrev  =  q2  /  cN;	  timeout    	compilable	  [FE]  AssertionError  	102	2	add
472	[BUG]  [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  q2  /  cN;  [FE]  AssertionError  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  q2  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    q2    /    cN;    hPrev  =  q2  /  cN;	  timeout    	compilable	  [FE]  AssertionError  	102	2	add
473	[BUG]  [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  q2  /  cN);  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  q2  /  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    q2    /    cN;    hPrev  =  q2  /  cN);	  timeout    	non-compiled	[CE]  ';'  expected	102	None	add
474	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  q2  /  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    q2    /    cN;    hPrev  =  q2  /  epsilon;	  timeout    	compilable	  [FE]  AssertionError  	102	2	add
475	[BUG]  [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  q2  /  epsilon;  [FE]  AssertionError  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  q2  /  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    q2    /    cN;    hPrev  =  q2  /  epsilon;	  timeout    	compilable	  [FE]  AssertionError  	102	2	add
476	[BUG]  [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  q2  /  cS;  [CE]  cannot  find  symbol  cS  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  q2  /  cS;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    q2    /    cN;    hPrev  =  q2  /  cS;	  timeout    	non-compiled	[CE]  cannot  find  symbol  cS	102	None	add
477	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  cPrev);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(p0  -  cPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(p0  -  cPrev);	  n    =    Math.abs(cPrev    -    p0);    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
478	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  *  cN  +  1;	  hPrev    =    dPrev    *    cN    +    1;    	compilable	  [FE]  ConvergenceException  	85	12	replace
479	[BUG]  [BUGGY]  hPrev  =  p0  *  cN  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  *  cN  +  1;	  hPrev    =    dPrev    *    cN    +    1;    	compilable	  [FE]  ConvergenceException  	85	12	replace
480	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  deltaN;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  -  1.0)/  deltaN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  -  1.0)/  deltaN;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
481	[BUG]  [BUGGY]  n  =  Math.abs(p0  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(p0  -  1.0)/  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(p0  -  1.0)/  dPrev;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
482	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  hPrev  =  dPrev;  dPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev;        dPrev    =    dPrev;    hPrev  =  dPrev;  dPrev  =  dPrev;	  	compilable	  [FE]  AssertionError  	91	2	add
483	[BUG]  [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  hPrev  =  dPrev;  dPrev  =  dPrev;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  hPrev  =  dPrev;  dPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev;        dPrev    =    dPrev;    hPrev  =  dPrev;  dPrev  =  dPrev;	  	compilable	  [FE]  AssertionError  	91	2	add
484	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  dPrev  =  dPrev;  dPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev;        dPrev    =    dPrev;    dPrev  =  dPrev;  dPrev  =  dPrev;	  	compilable	  [FE]  AssertionError  	91	2	add
485	[BUG]  [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  dPrev  =  dPrev;  dPrev  =  dPrev;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  dPrev  =  dPrev;  dPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev;        dPrev    =    dPrev;    dPrev  =  dPrev;  dPrev  =  dPrev;	  	compilable	  [FE]  AssertionError  	91	2	add
486	[BUG]  [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  int  hPrev  =  dPrev;  dPrev  =  dPrev;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  int  hPrev  =  dPrev;  dPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev;        dPrev    =    dPrev;    int  hPrev  =  dPrev;  dPrev  =  dPrev;	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	91	None	add
487	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN  +  1;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN    +    1;    	compilable	  [FE]  ConvergenceException  	136	12	replace
488	[BUG]  [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN  +  1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  cN;  hPrev  =  p0  /  cN  +  1;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN    +    1;    	compilable	  [FE]  ConvergenceException  	136	12	replace
489	[BUG]  [BUGGY]  hPrev  =  cN  *  q2;  int  hPrev  =  cN  *  q2;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  int  hPrev  =  cN  *  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    q2;    int  hPrev  =  cN  *  q2;	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	128	None	add
490	[BUG]  [BUGGY]  hPrev  =  cN  *  q2;  qPrev  =  cN  *  q2;  [CE]  cannot  find  symbol  qPrev  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  qPrev  =  cN  *  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    q2;    qPrev  =  cN  *  q2;	  	non-compiled	[CE]  cannot  find  symbol  qPrev	128	None	add
491	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cP;  [CE]  cannot  find  symbol  cP  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cP;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cP;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cP;    	non-compiled	[CE]  cannot  find  symbol  cP	139	None	replace
492	[BUG]  [BUGGY]  cPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cP;  [CE]  cannot  find  symbol  cP  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cP;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	cPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cP;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cP;    	non-compiled	[CE]  cannot  find  symbol  cP	139	None	replace
493	[BUG]  [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p0  /  cP;  [CE]  cannot  find  symbol  cP  [FE]                ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p0  /  cP;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  cN;  hPrev  =  p0  /  cP;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cP;    	non-compiled	[CE]  cannot  find  symbol  cP	139	None	replace
494	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  dprev  =  cN  /  cN;  [CE]  cannot  find  symbol  dprev  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  dprev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  dprev  =  cN  /  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	44	None	add
495	[BUG]  [BUGGY]  timeout  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  cN  =  cN  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    cN  =  cN  /  cN;  dPrev  =  cN  /  cN;	  	compilable	timeout	44	1	add
496	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  cN  =  cN  /  cN;  dPrev  =  cN  /  cN;  timeout  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  cN  =  cN  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    cN  =  cN  /  cN;  dPrev  =  cN  /  cN;	  	compilable	timeout	44	1	add
497	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2);    	compilable	  [FE]  ConvergenceException  	10	11	replace
498	[BUG]  [BUGGY]  hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2);    	compilable	  [FE]  ConvergenceException  	10	11	replace
499	[BUG]  [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  hPrev  =  dPrev;  hPrev  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  hPrev  =  dPrev;  hPrev  =  dprev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev;        hPrev    =    dPrev;    hPrev  =  dPrev;  hPrev  =  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	88	None	add
500	[BUG]  [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  hPrev  =  dprev;  hPrev  =  dPrev;  [CE]  cannot  find  symbol  dprev  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    hPrev  =  dPrev;  hPrev  =  dprev;  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev;        hPrev    =    dPrev;    hPrev  =  dprev;  hPrev  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	88	None	add
501	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  dprev  /  cN  +  1;  [CE]  cannot  find  symbol  dprev  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  dprev  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    cN    +    1;    hPrev  =  dprev  /  cN  +  1;	  	non-compiled	[CE]  cannot  find  symbol  dprev	74	None	add
502	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  dPrev  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    /    cN    +    1;    hPrev  =  dPrev  *  cN  +  1;	  	compilable	  [FE]  AssertionError  	74	2	add
503	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  dPrev  *  cN  +  1;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  dPrev  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    cN    +    1;    hPrev  =  dPrev  *  cN  +  1;	  	compilable	  [FE]  AssertionError  	74	2	add
504	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  q1;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cPrev  -  1.0)/  q1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cPrev  -  1.0)/  q1;	  n    =    Math.abs(cPrev    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
505	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  dPrev  /  cN;	  hPrev    =    cN    /    cN;    dPrev    =    cN    /    cN;    	compilable	  [FE]  ConvergenceException  	45	11	replace
506	[BUG]  [BUGGY]  dPrev  =  dPrev  /  cN;  [FE]  ConvergenceException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  dPrev  /  cN;	  hPrev    =    cN    /    cN;    dPrev    =    cN    /    cN;    	compilable	  [FE]  ConvergenceException  	45	11	replace
507	[BUG]  [BUGGY]  timeout  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  hN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  hN  /  cN;	  hPrev    =    cN    /    cN;    dPrev    =    cN    /    cN;    	compilable	timeout	45	1	replace
508	[BUG]  [BUGGY]  dPrev  =  hN  /  cN;  timeout  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  hN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  hN  /  cN;	  hPrev    =    cN    /    cN;    dPrev    =    cN    /    cN;    	compilable	timeout	45	1	replace
509	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2);  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2);	  	non-compiled	[CE]  ';'  expected	6	None	add
510	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2);  hPrev  =  cN  /  q2;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2);  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2);  hPrev  =  cN  /  q2;	  	non-compiled	[CE]  ';'  expected	6	None	add
511	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2,  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2,  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2,	  	non-compiled	[CE]  ';'  expected	6	None	add
512	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN;  dPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN;  dPrev  =  dPrev;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	compilable	  [FE]  AssertionError  	92	2	replace
513	[BUG]  [BUGGY]  hPrev  =  cN;  dPrev  =  dPrev;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN;  dPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN;  dPrev  =  dPrev;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	compilable	  [FE]  AssertionError  	92	2	replace
514	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  hN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  hN;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	compilable	timeout	92	1	replace
515	[BUG]  [BUGGY]  dPrev  =  hN;  timeout  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  hN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  hN;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	compilable	timeout	92	1	replace
516	[BUG]  [BUGGY]  n  =  hN;  dPrev  =  n;  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  hN;  dPrev  =  n;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  hN;  dPrev  =  n;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	92	None	replace
517	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  cN  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    cN  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  ConvergenceException  	135	11	add
518	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  cN  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  cN  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    cN  =  cN  /  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  ConvergenceException  	135	11	add
519	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  hPrev  =  cN  /  cN;  hprev  =  cN  /  cN  +  1;  [CE]  cannot  find  symbol  hprev  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  hPrev  =  cN  /  cN;  hprev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    hPrev  =  cN  /  cN;  hprev  =  cN  /  cN  +  1;	  	non-compiled	[CE]  cannot  find  symbol  hprev	135	None	add
520	[BUG]  [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2,  p0);  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2,  p0);	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0);    	non-compiled	[CE]  ';'  expected	141	None	replace
521	[BUG]  [BUGGY]  hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2,  p0);  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2,  p0);	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0);    	non-compiled	[CE]  ';'  expected	141	None	replace
522	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev;  hPrev  =  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev;  hPrev  =  hPrev;	  hPrev    =    p0;    hPrev    =    p1;    	compilable	  [FE]  AssertionError  	25	10	replace
523	[BUG]  [BUGGY]  hPrev  =  dPrev;  hPrev  =  hPrev;  [FE]  AssertionError  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev;  hPrev  =  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev;  hPrev  =  hPrev;	  hPrev    =    p0;    hPrev    =    p1;    	compilable	  [FE]  AssertionError  	25	10	replace
524	[BUG]  [BUGGY]  hPrev  =  p0;  hPrev  =  p2;  [CE]  cannot  find  symbol  p2  [FE]                ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0;  hPrev  =  p2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0;  hPrev  =  p2;	  hPrev    =    p0;    hPrev    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p2	25	None	replace
525	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN;  hPrev  =  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN;  hPrev  =  hPrev;	  hPrev    =    p0;    hPrev    =    p1;    	compilable	  [FE]  AssertionError  	25	2	replace
526	[BUG]  [BUGGY]  hPrev  =  cN;  hPrev  =  hPrev;  [FE]  AssertionError  [FE]                  ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN;  hPrev  =  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN;  hPrev  =  hPrev;	  hPrev    =    p0;    hPrev    =    p1;    	compilable	  [FE]  AssertionError  	25	2	replace
527	[BUG]  [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  q0  =  p0;  hPrev  =  p0;  [CE]  cannot  find  symbol  q0  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  q0  =  p0;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        hPrev    =    p0;    q0  =  p0;  hPrev  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  q0	20	None	add
528	[BUG]  [BUGGY]  p0  =  cN;  int  p0  =  p0;  [CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  int  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  cN;  int  p0  =  p0;	          p0    =    p0;    int    p0    =    p0;    	non-compiled	[CE]  variable  p0  is  already  defined  in  method  evaluate(double,double,int)	114	None	replace
529	[BUG]  [BUGGY]  n  =  dPrev;  int  hPrev  =  n;  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  dPrev;  int  hPrev  =  n;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  dPrev;  int  hPrev  =  n;	  hPrev    =    dPrev;    int    hPrev    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
530	[BUG]  [BUGGY]  dPrev  =  cN;  int  hPrev  =  dPrev;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  cN;  int  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  cN;  int  hPrev  =  dPrev;	  hPrev    =    dPrev;    int    hPrev    =    dPrev;    	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	90	None	replace
531	[BUG]  [BUGGY]  n  =  cN;  int  hPrev  =  dPrev;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN;  int  hPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN;  int  hPrev  =  dPrev;	  hPrev    =    dPrev;    int    hPrev    =    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	90	None	replace
532	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  dPrev);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.min(epsilon,  dPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.min(epsilon,  dPrev);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	62	None	replace
533	[BUG]  [BUGGY]  hPrev  =  dPrev  +  1;  hPrev  =  dprev  +  1;  [CE]  cannot  find  symbol  dprev  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  +  1;  hPrev  =  dprev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    +    1;    hPrev  =  dprev  +  1;	  	non-compiled	[CE]  cannot  find  symbol  dprev	86	None	add
534	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  cN  +  1);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  /  cN  +  1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  /  cN  +  1);	  n    =    Math.abs(dPrev    /    cN);    	non-compiled	[CE]  possible  loss  of  precision	96	None	replace
535	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  q2  *  cN;	  hPrev    =    cN    *    q2;    	compilable	  [FE]  ConvergenceException  	129	11	replace
536	[BUG]  [BUGGY]  hPrev  =  q2  *  cN;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q2  *  cN;	  hPrev    =    cN    *    q2;    	compilable	  [FE]  ConvergenceException  	129	11	replace
537	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  /  cN;  hPrev  =  cN  /  dPrev;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN);    	compilable	  [FE]  ConvergenceException  	46	11	replace
538	[BUG]  [BUGGY]  hPrev  =  cN  /  cN;  hPrev  =  cN  /  dPrev;  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  cN;  hPrev  =  cN  /  dPrev;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN);    	compilable	  [FE]  ConvergenceException  	46	11	replace
539	[BUG]  [BUGGY]  hPrev  =  q2;  (  hPrev  =  q2;  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2;  (  hPrev  =  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    q2;    (  hPrev  =  q2;	  	non-compiled	[CE]  ')'  expected	106	None	add
540	[BUG]  [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  q2)  /  cN;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  q2)  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    q2    /    cN;    hPrev  =  q2)  /  cN;	  timeout    	non-compiled	[CE]  ';'  expected	102	None	add
541	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  dprev;  [CE]  cannot  find  symbol  dprev  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  dprev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    dPrev;    hPrev  =  cN  *  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	78	None	add
542	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev;  n  =  cN  *  dPrev;  [CE]  possible  loss  of  precision  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  n  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    dPrev;    n  =  cN  *  dPrev;	  	non-compiled	[CE]  possible  loss  of  precision	78	None	add
543	[BUG]  [BUGGY]  hPrev  =  p1  /  dPrev;  [CE]  cannot  find  symbol  p1  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p1  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p1  /  dPrev;	  hPrev    =    cN    /    dPrev;    	non-compiled	[CE]  cannot  find  symbol  p1	37	None	replace
544	[BUG]  [BUGGY]  hPrev  =  p0  /  q2;  int  hPrev  =  p0  /  q2;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  int  hPrev  =  p0  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    /    q2;    int  hPrev  =  p0  /  q2;	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	53	None	add
545	[BUG]  [BUGGY]  p0  =  scaleFactor;  p1  =  scaleFactor;  [CE]  cannot  find  symbol  scaleFactor  [FE]          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  scaleFactor;  p1  =  scaleFactor;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  scaleFactor;  p1  =  scaleFactor;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	122	None	replace
546	[BUG]  [BUGGY]  n  =  p0;  p0  =  p0;  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  p0;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  p0;  p0  =  p0;	  hPrev    =    p0;    p0    =    p0;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
547	[BUG]  [BUGGY]  n  =  p0;  p0  =  p1;  [CE]  possible  loss  of  precision  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  p0;  p0  =  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  p0;  p0  =  p1;	  hPrev    =    p0;    p0    =    p0;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
548	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cN  *  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    hPrev  =  cN  *  cN;  hPrev  =  cN  /  cN;	  	compilable	  [FE]  AssertionError  	40	2	add
549	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cN  *  cN;  hPrev  =  cN  /  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cN  *  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    hPrev  =  cN  *  cN;  hPrev  =  cN  /  cN;	  	compilable	  [FE]  AssertionError  	40	2	add
550	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  q1  =  cN  /  cN;  h1  =  cN  /  cN;  [CE]  cannot  find  symbol  h1  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  q1  =  cN  /  cN;  h1  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    q1  =  cN  /  cN;  h1  =  cN  /  cN;	  	non-compiled	[CE]  cannot  find  symbol  h1	40	None	add
551	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(deltaN  -  1.0)/  epsilon  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	113	None	replace
552	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cPrev  =  cN  /  hN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	cPrev  =  cN  /  hN;	  hPrev    =    cN    /    cN;    cPrev    =    cN    /    cN;    timeout    	compilable	  [FE]  AssertionError  	43	6	replace
553	[BUG]  [BUGGY]  cPrev  =  cN  /  hN;  [FE]  AssertionError  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cPrev  =  cN  /  hN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	cPrev  =  cN  /  hN;	  hPrev    =    cN    /    cN;    cPrev    =    cN    /    cN;    timeout    	compilable	  [FE]  AssertionError  	43	6	replace
554	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cN  =  cN  /  hN;  cPrev  =  cN  /  hN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	cN  =  cN  /  hN;  cPrev  =  cN  /  hN;	  hPrev    =    cN    /    cN;    cPrev    =    cN    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	43	11	replace
555	[BUG]  [BUGGY]  cN  =  cN  /  hN;  cPrev  =  cN  /  hN;  [FE]  ConvergenceException  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cN  =  cN  /  hN;  cPrev  =  cN  /  hN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	cN  =  cN  /  hN;  cPrev  =  cN  /  hN;	  hPrev    =    cN    /    cN;    cPrev    =    cN    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	43	11	replace
556	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cPrev  =  cN  /  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	cPrev  =  cN  /  epsilon;	  hPrev    =    cN    /    cN;    cPrev    =    cN    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	43	12	replace
557	[BUG]  [BUGGY]  cPrev  =  cN  /  epsilon;  [FE]  ConvergenceException  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cPrev  =  cN  /  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	cPrev  =  cN  /  epsilon;	  hPrev    =    cN    /    cN;    cPrev    =    cN    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	43	12	replace
558	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q3;  [CE]  cannot  find  symbol  q3  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q3;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  q3;	  	non-compiled	[CE]  cannot  find  symbol  q3	137	None	add
559	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2,  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2,  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2,	  	non-compiled	[CE]  ';'  expected	137	None	add
560	[BUG]  [BUGGY]  hPrev  =  p0  *  cN;  (  hPrev  =  p0  *  cN;  [CE]  ')'  expected  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  cN;  (  hPrev  =  p0  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    *    cN;    (  hPrev  =  p0  *  cN;	  	non-compiled	[CE]  ')'  expected	80	None	add
561	[BUG]  [BUGGY]  hPrev  =  p0;  hPrev  =  p2.epsilon;  [CE]  cannot  find  symbol  p2  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0;  hPrev  =  p2.epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0;  hPrev  =  p2.epsilon;	  hPrev    =    p0;    hPrev    =    p0.epsilon;    	non-compiled	[CE]  cannot  find  symbol  p2	132	None	replace
562	[BUG]  [BUGGY]  hPrev  =  p0;  hPrev  =  cN.epsilon;  [CE]  double  cannot  be  dereferenced  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0;  hPrev  =  cN.epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0;  hPrev  =  cN.epsilon;	  hPrev    =    p0;    hPrev    =    p0.epsilon;    	non-compiled	[CE]  double  cannot  be  dereferenced	132	None	replace
563	[BUG]  [BUGGY]  p0  =  p2;  p0  =  p0;  [CE]  cannot  find  symbol  p2  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p2;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p2;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    }    	non-compiled	[CE]  cannot  find  symbol  p2	70	None	replace
564	[BUG]  [BUGGY]  p0  =  p1;  p0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p1;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p1;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    }    	non-compiled	[CE]  cannot  find  symbol  p1	70	None	replace
565	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0  =  dPrev;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    }    	compilable	  [FE]  ConvergenceException  	70	11	replace
566	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p0;  [FE]  ConvergenceException  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  dPrev;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    }    	compilable	  [FE]  ConvergenceException  	70	11	replace
567	[BUG]  [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(deltaN  -  1.0)/  dPrev  +  1;	  n    =    Math.abs(deltaN    -    1.0)/    dPrev;    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
568	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dprev  /  cN;  hPrev  =  dPrev  /  cN;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dprev  /  cN;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    hPrev  =  dprev  /  cN;  hPrev  =  dPrev  /  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	30	None	add
569	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	30	2	add
570	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	30	2	add
571	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  hPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  *  dPrev;  hPrev  =  hPrev  *  cN;	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	14	12	replace
572	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  hPrev  *  cN;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  hPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  *  dPrev;  hPrev  =  hPrev  *  cN;	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	14	12	replace
573	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  hPrev;	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	14	11	replace
574	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  hPrev;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  hPrev;	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	14	11	replace
575	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  hPrev;	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	14	12	replace
576	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  hPrev;  [FE]  ConvergenceException  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  hPrev;	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	14	12	replace
577	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  q2  /  cN;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	138	11	replace
578	[BUG]  [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q2  /  cN;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	138	11	replace
579	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q1  /  cN;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  q1  /  cN;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	138	11	replace
580	[BUG]  [BUGGY]  hPrev  =  q1  /  cN;  hPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q1  /  cN;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q1  /  cN;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	138	11	replace
581	[BUG]  [BUGGY]  n  =  Math.max(dPrev,  p0,  cN,  q2);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(dPrev,  p0,  cN,  q2);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(dPrev,  p0,  cN,  q2);	  n    =    Math.max(dPrev,    p0,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	99	None	replace
582	[BUG]  [BUGGY]  n  =  Math.max(p0,  dPrev,  cN);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(p0,  dPrev,  cN);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(p0,  dPrev,  cN);	  n    =    Math.max(dPrev,    p0,    cN);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	99	None	replace
583	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  dprev  *  cN;  dPrev  =  dPrev  *  cN;  [CE]  cannot  find  symbol  dprev  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  dprev  *  cN;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        dPrev    =    dPrev    *    cN;    hPrev  =  dprev  *  cN;  dPrev  =  dPrev  *  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	16	None	add
584	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  dprev  =  dPrev  *  cN;  [CE]  cannot  find  symbol  dprev  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  dprev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        dPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  dprev  =  dPrev  *  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	16	None	add
585	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  cN  +  1;  hPrev  =  cN  /  dPrev;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cN;    	compilable	  [FE]  ConvergenceException  	31	11	replace
586	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  cN  /  dPrev;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  cN  +  1;  hPrev  =  cN  /  dPrev;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cN;    	compilable	  [FE]  ConvergenceException  	31	11	replace
587	[BUG]  [BUGGY]  hPrev  =  p0  +  1;  int  hPrev  =  p0  +  1;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  1;  int  hPrev  =  p0  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    +    1;    int  hPrev  =  p0  +  1;	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	64	None	add
588	[BUG]  [BUGGY]  hPrev  =  cN  /  p1;  [CE]  cannot  find  symbol  p1  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  p1;	  hPrev    =    cN    /    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	56	None	replace
589	[BUG]  [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  dprev  /  p0;  [CE]  cannot  find  symbol  dprev  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  p0;  hPrev  =  dprev  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    p0;    hPrev  =  dprev  /  p0;	  timeout    	non-compiled	[CE]  cannot  find  symbol  dprev	76	None	add
590	[BUG]  [BUGGY]  p0  =  cN;  (p0  =  cN;  [CE]  ')'  expected  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  (p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    cN;    (p0  =  cN;	  	non-compiled	[CE]  ')'  expected	1	None	add
591	[BUG]  [BUGGY]  hPrev  =  dPrev  *  p0;  hPrev  =  dprev  *  p0;  [CE]  cannot  find  symbol  dprev  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  p0;  hPrev  =  dprev  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    *    p0;    hPrev  =  dprev  *  p0;	  	non-compiled	[CE]  cannot  find  symbol  dprev	82	None	add
592	[BUG]  [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  hPrev  /  cN);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  hPrev  /  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  dPrev;  hPrev  =  hPrev  /  cN);	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cN);    	non-compiled	[CE]  ';'  expected	32	None	replace
593	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  hPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  /  dPrev;  hPrev  =  hPrev  /  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cN);    	compilable	  [FE]  ConvergenceException  	32	11	replace
594	[BUG]  [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  hPrev  /  cN;  [FE]  ConvergenceException  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  hPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  dPrev;  hPrev  =  hPrev  /  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cN);    	compilable	  [FE]  ConvergenceException  	32	11	replace
595	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  hPrev;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cN);    	compilable	  [FE]  ConvergenceException  	32	12	replace
596	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  hPrev;  [FE]  ConvergenceException  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  hPrev;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    /    cN);    	compilable	  [FE]  ConvergenceException  	32	12	replace
597	[BUG]  [BUGGY]  p0  =  p2;  (p0  =  p0;  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p2;  (p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p2;  (p0  =  p0;	          p0    =    p0;    (p0    =    p0;    	non-compiled	[CE]  ')'  expected	115	None	replace
598	[BUG]  [BUGGY]  p0  =  dPrev;  (p0  =  p0;  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  (p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  dPrev;  (p0  =  p0;	          p0    =    p0;    (p0    =    p0;    	non-compiled	[CE]  ')'  expected	115	None	replace
599	[BUG]  [BUGGY]  p0  =  cN;  (p0  =  p0;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  (p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  cN;  (p0  =  p0;	          p0    =    p0;    (p0    =    p0;    	non-compiled	[CE]  ')'  expected	115	None	replace
600	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  cPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(epsilon,  cPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(epsilon,  cPrev);	  n    =    Math.max(epsilon,    p0);    	non-compiled	[CE]  possible  loss  of  precision	108	None	replace
601	[BUG]  [BUGGY]  n  =  Math.max(p0,  epsilon);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(p0,  epsilon);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(p0,  epsilon);	  n    =    Math.max(epsilon,    p0);    	non-compiled	[CE]  possible  loss  of  precision	108	None	replace
602	[BUG]  [BUGGY]  hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2,  n++;  [CE]  ';'  expected  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2,  n++;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2,  n++;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    n++;    	non-compiled	[CE]  ';'  expected	11	None	replace
603	[BUG]  [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  cN  /  q2,  n++;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  cN;  hPrev  =  cN  /  q2,  n++;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q2  /  cN;  hPrev  =  cN  /  q2,  n++;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    n++;    	non-compiled	[CE]  ';'  expected	11	None	replace
604	[BUG]  [BUGGY]  n  =  Math.max(cN,  p0  +  1);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(cN,  p0  +  1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(cN,  p0  +  1);	  n    =    Math.max(cN,    p0);    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
605	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dprev  /  cN;  hPrev  =  dPrev  *  cN;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dprev  /  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dprev  /  cN;  hPrev  =  dPrev  *  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	34	None	add
606	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  q2  /  p0;	  hPrev    =    q2    /    cN;    timeout    	compilable	  [FE]  AssertionError  	103	6	replace
607	[BUG]  [BUGGY]  hPrev  =  q2  /  p0;  [FE]  AssertionError  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q2  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q2  /  p0;	  hPrev    =    q2    /    cN;    timeout    	compilable	  [FE]  AssertionError  	103	6	replace
608	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  q1;	  hPrev    =    q2;    	compilable	  [FE]  AssertionError  	107	10	replace
609	[BUG]  [BUGGY]  hPrev  =  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q1;	  hPrev    =    q2;    	compilable	  [FE]  AssertionError  	107	10	replace
610	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  dprev  *  cN  +  1;  [CE]  cannot  find  symbol  dprev  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  dprev  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    *    cN    +    1;    hPrev  =  dprev  *  cN  +  1;	  	non-compiled	[CE]  cannot  find  symbol  dprev	84	None	add
611	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    *    cN    +    1;    hPrev  =  cN  *  cN  +  1;	  	compilable	  [FE]  AssertionError  	84	2	add
612	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  cN  +  1;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  hPrev  =  cN  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    *    cN    +    1;    hPrev  =  cN  *  cN  +  1;	  	compilable	  [FE]  AssertionError  	84	2	add
613	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  dprev  *  cN;  hPrev  =  cN  *  cN;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  dprev  *  cN;  hPrev  =  cN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        hPrev    =    cN    *    cN;    hPrev  =  dprev  *  cN;  hPrev  =  cN  *  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	18	None	add
614	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0  =  cN;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    	compilable	  [FE]  ConvergenceException  	67	11	replace
615	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p0;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  cN;  p0  =  p0;	          p0    =    p0;    p0    =    p0;    	compilable	  [FE]  ConvergenceException  	67	11	replace
616	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  dPrev;	  hPrev    =    dPrev    /    cN;    hPrev    =    cN    /    dPrev;    	compilable	  [FE]  ConvergenceException  	127	11	replace
617	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  dPrev;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  dPrev;	  hPrev    =    dPrev    /    cN;    hPrev    =    cN    /    dPrev;    	compilable	  [FE]  ConvergenceException  	127	11	replace
618	[BUG]  [BUGGY]  n  =  p0;  n  =  p0;  [CE]  possible  loss  of  precision  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  p0;  n  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  p0;  n  =  p0;	  hPrev    =    p0;    hPrev    =    p0;    }    hPrev    =    p0;    	non-compiled	[CE]  possible  loss  of  precision	130	None	replace
619	[BUG]  [BUGGY]  hPrev    =    p0;    p0  =  p0;  hPrev  =  p0;  p1  =  p0;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    p0  =  p0;  hPrev  =  p0;  p1  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        p0    =    p0;    hPrev  =  p0;  p1  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  p1	23	None	add
620	[BUG]  [BUGGY]  (hPrev  =  hN);  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  (hPrev  =  hN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	(hPrev  =  hN);	  hPrev    =    dPrev;    (    hPrev    =    dPrev);    	non-compiled	[CE]  not  a  statement	123	None	replace
621	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2);  hPrev  =  cN  /  q1;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2);  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q1;    hPrev  =  cN  /  q2);  hPrev  =  cN  /  q1;	  	non-compiled	[CE]  ';'  expected	8	None	add
622	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,  hPrev  =  cN  /  q1;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2,  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q1;    hPrev  =  cN  /  q2,  hPrev  =  cN  /  q1;	  	non-compiled	[CE]  ';'  expected	8	None	add
623	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1,  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1,  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q1;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q1,	  	non-compiled	[CE]  ';'  expected	8	None	add
624	[BUG]  [BUGGY]  cN  hPrev  =  cN  /  cN;  [CE]  cannot  find  symbol  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cN  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	cN  hPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    int    hPrev    =    cN    /    cN;    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
625	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dprev  *  cN;  hPrev  =  dPrev  *  cN;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dprev  *  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dprev  *  cN;  hPrev  =  dPrev  *  cN;	  	non-compiled	[CE]  cannot  find  symbol  dprev	13	None	add
626	[BUG]  [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  hPrev  =  dPrev;  dPrev  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  hPrev  =  dPrev;  dPrev  =  dprev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev;        dPrev    =    dPrev;    hPrev  =  dPrev;  dPrev  =  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	91	None	add
627	[BUG]  [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  hPrev  =  dPrev;  dprev  =  dPrev;  [CE]  cannot  find  symbol  dprev  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  hPrev  =  dPrev;  dprev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev;        dPrev    =    dPrev;    hPrev  =  dPrev;  dprev  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	91	None	add
628	[BUG]  [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  hPrev  =  dprev;  dPrev  =  dPrev;  [CE]  cannot  find  symbol  dprev  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev;    dPrev  =  dPrev;  hPrev  =  dprev;  dPrev  =  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev;        dPrev    =    dPrev;    hPrev  =  dprev;  dPrev  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	91	None	add
629	[BUG]  [BUGGY]  hPrev  =  cN;  hPrev  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN;  hPrev  =  dprev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN;  hPrev  =  dprev;	  hPrev    =    dPrev;    hPrev    =    dprev;    	non-compiled	[CE]  cannot  find  symbol  dprev	120	None	replace
630	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  *  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	35	11	replace
631	[BUG]  [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  *  cN;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  *  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	35	11	replace
632	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  /  dPrev;  hPrev  =  cN  *  dPrev;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	35	11	replace
633	[BUG]  [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  *  dPrev;  [FE]  ConvergenceException  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  dPrev;  hPrev  =  cN  *  dPrev;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	35	11	replace
634	[BUG]  [BUGGY]  hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2,  p0;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2,  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2,  p0;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0;    	non-compiled	[CE]  ';'  expected	12	None	replace
635	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  hPrev;	  hPrev    =    dPrev    *    cN;    hPrev    =    cN    *    cN;    	compilable	  [FE]  ConvergenceException  	19	12	replace
636	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  hPrev;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  hPrev;	  hPrev    =    dPrev    *    cN;    hPrev    =    cN    *    cN;    	compilable	  [FE]  ConvergenceException  	19	12	replace
637	[BUG]  [BUGGY]  n  =  b.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  b.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  b.doubleValue();	  n    =    cN.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	57	None	replace
638	[BUG]  [BUGGY]  timeout  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  cN  *  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  cN  *  hPrev;	  hPrev    =    cN    *    dPrev;    	compilable	timeout	79	1	replace
639	[BUG]  [BUGGY]  dPrev  =  cN  *  hPrev;  timeout  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  cN  *  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  cN  *  hPrev;	  hPrev    =    cN    *    dPrev;    	compilable	timeout	79	1	replace
640	[BUG]  [BUGGY]  p0  =  scaleFactor;  p0  =  scaleFactor;  [CE]  cannot  find  symbol  scaleFactor  [FE]        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  scaleFactor;  p0  =  scaleFactor;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  scaleFactor;  p0  =  scaleFactor;	          p0    =    p0;    p0    =    p2;    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	121	None	replace
641	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dprev  /  cN;  hPrev  =  cN  /  dPrev;  [CE]  cannot  find  symbol  dprev  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dprev  /  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    cN    /    dPrev;    hPrev  =  dprev  /  cN;  hPrev  =  cN  /  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	126	None	add
642	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        /        cN;        hPrev    =    cN    /    dPrev;    hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  dPrev;	  	compilable	  [FE]  AssertionError  	126	2	add
643	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  dPrev;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    cN    /    dPrev;    hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  dPrev;	  	compilable	  [FE]  AssertionError  	126	2	add
644	[BUG]  [BUGGY]  hPrev  =  p1;  hPrev  =  p0;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p1;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p1;  hPrev  =  p0;	  hPrev    =    p0;    hPrev    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	21	None	replace
645	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  hN  /  cN;  hPrev  =  hN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  hN  /  cN;  hPrev  =  hN  /  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dprev    /    cN;    	compilable	  [FE]  ConvergenceException  	109	11	replace
646	[BUG]  [BUGGY]  hPrev  =  hN  /  cN;  hPrev  =  hN  /  cN;  [FE]  ConvergenceException  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  hN  /  cN;  hPrev  =  hN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  hN  /  cN;  hPrev  =  hN  /  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dprev    /    cN;    	compilable	  [FE]  ConvergenceException  	109	11	replace
647	[BUG]  [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p1  /  cN;  [CE]  cannot  find  symbol  p1  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  hPrev  =  p1  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0  /  cN;  hPrev  =  p1  /  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dprev    /    cN;    	non-compiled	[CE]  cannot  find  symbol  p1	109	None	replace
648	[BUG]  [BUGGY]  timeout  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  *  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    hPrev  =  cN  *  cN;  cPrev  =  cN  /  cN;	  timeout    	compilable	timeout	42	1	add
649	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  *  cN;  cPrev  =  cN  /  cN;  timeout  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  *  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    hPrev  =  cN  *  cN;  cPrev  =  cN  /  cN;	  timeout    	compilable	timeout	42	1	add
650	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  cNext  =  cN  /  cN;  [CE]  cannot  find  symbol  cNext  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  /  cN;  cNext  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  cNext  =  cN  /  cN;	  timeout    	non-compiled	[CE]  cannot  find  symbol  cNext	42	None	add
651	[BUG]  [BUGGY]  hPrev  =  cN  /  p0;  int  hPrev  =  cN  /  p0;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0;  int  hPrev  =  cN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    /    p0;    int  hPrev  =  cN  /  p0;	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	55	None	add
652	[BUG]  [BUGGY]  p0  =  scaleFactor;  [CE]  cannot  find  symbol  scaleFactor  [FE]        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  scaleFactor;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  scaleFactor;	  p0    =    p2;    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	101	None	replace
653	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  hN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0  =  hN;	  p0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	5	11	replace
654	[BUG]  [BUGGY]  p0  =  hN;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  hN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  hN;	  p0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	5	11	replace
655	[BUG]  [BUGGY]  hPrev  =  p  *  dPrev;  [CE]  cannot  find  symbol  p  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p  *  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p  *  dPrev;	  hPrev    =    dPrev    *    p0;    	non-compiled	[CE]  cannot  find  symbol  p	83	None	replace
656	[BUG]  [BUGGY]  hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2,;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2,;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  q1  /  q2;  hPrev  =  cN  /  q2,;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,;    	non-compiled	[CE]  ';'  expected	116	None	replace
657	[BUG]  [BUGGY]  p0  =  p1;  P0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p1;  P0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p1;  P0  =  p0;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	69	None	replace
658	[BUG]  [BUGGY]  p0  =  dPrev;  P0  =  p0;  [CE]  cannot  find  symbol  P0  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  P0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  dPrev;  P0  =  p0;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  P0	69	None	replace
659	[BUG]  [BUGGY]  p0  =  p2;  P0  =  p0;  [CE]  cannot  find  symbol  p2  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p2;  P0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p2;  P0  =  p0;	          p0    =    p0;    P0    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p2	69	None	replace
660	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  /  dPrev;  hPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN;    	compilable	  [FE]  ConvergenceException  	41	11	replace
661	[BUG]  [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  /  cN;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  dPrev;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  /  dPrev;  hPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN;    	compilable	  [FE]  ConvergenceException  	41	11	replace
662	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  hPrev  *  cN);  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  hPrev  =  hPrev  *  cN);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  *  dPrev;  hPrev  =  hPrev  *  cN);	  hPrev    =    dPrev    *    cN;    hPrev    =    dPrev    *    cN);    	non-compiled	[CE]  ';'  expected	15	None	replace
663	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dprev;  [CE]  cannot  find  symbol  dprev  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p0  =  dprev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    dPrev;    p0  =  dprev;	  	non-compiled	[CE]  cannot  find  symbol  dprev	4	None	add
664	[BUG]  [BUGGY]  p0  =  dPrev;  p1  =  dPrev;  [CE]  cannot  find  symbol  p1  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p1  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    dPrev;    p1  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  p1	4	None	add
665	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  dPrev.;  [CE]  <identifier>  expected  [FE]        ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p0  =  dPrev.;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    dPrev;    p0  =  dPrev.;	  	non-compiled	[CE]  <identifier>  expected	4	None	add
666	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  dPrev  =  hPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  *  dPrev;  dPrev  =  hPrev  *  cN;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	  [FE]  OutOfRangeException  	17	11	replace
667	[BUG]  [BUGGY]  hPrev  =  cN  *  dPrev;  dPrev  =  hPrev  *  cN;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  dPrev;  dPrev  =  hPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  *  dPrev;  dPrev  =  hPrev  *  cN;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	  [FE]  OutOfRangeException  	17	11	replace
668	[BUG]  [BUGGY]  timeout  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  dPrev  =  cN  *  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  cN  +  1;  dPrev  =  cN  *  hPrev;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	timeout	17	1	replace
669	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  dPrev  =  cN  *  hPrev;  timeout  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  dPrev  =  cN  *  hPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  cN  +  1;  dPrev  =  cN  *  hPrev;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	timeout	17	1	replace
670	[BUG]  [BUGGY]  p0  =  p2;  p0  =  p1;  [CE]  cannot  find  symbol  p2  [FE]          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p2;  p0  =  p1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p2;  p0  =  p1;	          p0    =    p0;    p0    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p2	68	None	replace
671	[BUG]  [BUGGY]  hPrev  =  p0  /  cN;  (  hPrev  =  p0  /  cN;  [CE]  ')'  expected  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  cN;  (  hPrev  =  p0  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    /    cN;    (  hPrev  =  p0  /  cN;	  	non-compiled	[CE]  ')'  expected	38	None	add
672	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  hN  *  cN;  hPrev  =  hN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  hN  *  cN;  hPrev  =  hN  *  cN;	  hPrev    =    dPrev    *    cN;    hPrev    =    dprev    *    cN;    	compilable	  [FE]  ConvergenceException  	118	12	replace
673	[BUG]  [BUGGY]  hPrev  =  hN  *  cN;  hPrev  =  hN  *  cN;  [FE]  ConvergenceException  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  hN  *  cN;  hPrev  =  hN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  hN  *  cN;  hPrev  =  hN  *  cN;	  hPrev    =    dPrev    *    cN;    hPrev    =    dprev    *    cN;    	compilable	  [FE]  ConvergenceException  	118	12	replace
674	[BUG]  [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(epsilon  -  1.0)/  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(epsilon  -  1.0)/  dPrev;	  n    =    Math.abs(epsilon    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
675	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  *  p0);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  *  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  *  p0);	  n    =    Math.abs(dPrev    /    p0);    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
676	[BUG]  [BUGGY]  hPrev    =    p0;    p0  =  p0;  hPrev  =  p1;  p0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    p0  =  p0;  hPrev  =  p1;  p0  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        p0    =    p0;    hPrev  =  p1;  p0  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  p1	23	None	add
677	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	7	11	replace
678	[BUG]  [BUGGY]  hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2;    	compilable	  [FE]  ConvergenceException  	7	11	replace
679	[BUG]  [BUGGY]  n  =  Math.abs(q1  -  1.0)/  cPrev;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(q1  -  1.0)/  cPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(q1  -  1.0)/  cPrev;	  n    =    Math.abs(cPrev    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
680	[BUG]  [BUGGY]  n  =  dPrev,  cN.doubleValue();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  dPrev,  cN.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  dPrev,  cN.doubleValue();	  n    =    dPrev.doubleValue();    	non-compiled	[CE]  ';'  expected	104	None	replace
681	[BUG]  [BUGGY]  hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2,;  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2,;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2,;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,;    	non-compiled	[CE]  ';'  expected	116	None	replace
682	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  cN  *  dPrev;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        *        cN;        dPrev    =    dPrev    *    cN;    hPrev  =  cN  *  dPrev;  dPrev  =  dPrev  *  cN;	  	compilable	  [FE]  OutOfRangeException  	16	11	add
683	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  cN  *  dPrev;  dPrev  =  dPrev  *  cN;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    dPrev  =  dPrev  *  cN;  hPrev  =  cN  *  dPrev;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        dPrev    =    dPrev    *    cN;    hPrev  =  cN  *  dPrev;  dPrev  =  dPrev  *  cN;	  	compilable	  [FE]  OutOfRangeException  	16	11	add
684	[BUG]  [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q2,  p0;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q2,  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    q2;    hPrev  =  dPrev  /  q2,  p0;	  	non-compiled	[CE]  ';'  expected	51	None	add
685	[BUG]  [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q2,  p0);  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q2;  hPrev  =  dPrev  /  q2,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    q2;    hPrev  =  dPrev  /  q2,  p0);	  	non-compiled	[CE]  ';'  expected	51	None	add
686	[BUG]  [BUGGY]  n  =  Math.min(cPrev,  p0);  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.min(cPrev,  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.min(cPrev,  p0);	  n    =    Math.max(cPrev,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	61	None	replace
687	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cPrev;	  hPrev    =    dPrev;    hPrev    =    dprev;    	compilable	  [FE]  ConvergenceException  	120	11	replace
688	[BUG]  [BUGGY]  hPrev  =  cPrev;  [FE]  ConvergenceException  [FE]        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cPrev;	  hPrev    =    dPrev;    hPrev    =    dprev;    	compilable	  [FE]  ConvergenceException  	120	11	replace
689	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q1;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q1;    	compilable	  [FE]  ConvergenceException  	9	11	replace
690	[BUG]  [BUGGY]  hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q1;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q1;    	compilable	  [FE]  ConvergenceException  	9	11	replace
691	[BUG]  [BUGGY]  (hPrev  =  dPrev));  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  (hPrev  =  dPrev));  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	(hPrev  =  dPrev));	  hPrev    =    dPrev;    (    hPrev    =    dPrev);    	non-compiled	[CE]  not  a  statement	123	None	replace
692	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev  -  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.min(cN,  dPrev  -  1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.min(cN,  dPrev  -  1);	  n    =    Math.max(dPrev,    cN    -    1);    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
693	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  epsilon;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    hPrev  =  cN  /  epsilon;  dPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	44	11	add
694	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  epsilon;  dPrev  =  cN  /  cN;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  /  epsilon;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    hPrev  =  cN  /  epsilon;  dPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	44	11	add
695	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  *  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    hPrev  =  cN  *  cN;  dPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	44	11	add
696	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  *  cN;  dPrev  =  cN  /  cN;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  cN  *  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    hPrev  =  cN  *  cN;  dPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	44	11	add
697	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  q1  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    hPrev  =  q1  /  cN;  dPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	44	11	add
698	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  q1  /  cN;  dPrev  =  cN  /  cN;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    dPrev  =  cN  /  cN;  hPrev  =  q1  /  cN;  dPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        dPrev    =    cN    /    cN;    hPrev  =  q1  /  cN;  dPrev  =  cN  /  cN;	  	compilable	  [FE]  OutOfRangeException  	44	11	add
699	[BUG]  [BUGGY]  n  =  Math.abs(cPrev  /  dPrev,  p0);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cPrev  /  dPrev,  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cPrev  /  dPrev,  p0);	  n    =    Math.abs(cPrev    /    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	95	None	replace
700	[BUG]  [BUGGY]  int  hPrev  =  cN  /  dPrev;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  int  hPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	int  hPrev  =  cN  /  dPrev;	  hPrev    =    cN    /    cN;    int    hPrev    =    cN    /    cN;    	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	105	None	replace
701	[BUG]  [BUGGY]  int  hPrev  =  cN  /  epsilon;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  int  hPrev  =  cN  /  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	int  hPrev  =  cN  /  epsilon;	  hPrev    =    cN    /    cN;    int    hPrev    =    cN    /    cN;    	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	105	None	replace
702	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  *  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  cN  *  q2;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	6	2	add
703	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  *  q2;  hPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  *  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  cN  *  q2;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	6	2	add
704	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	6	2	add
705	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q2;    hPrev  =  dPrev  /  q2;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	6	2	add
706	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  hPrev  =  cN  *  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    hPrev  =  cN  *  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  AssertionError  	135	2	add
707	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  hPrev  =  cN  *  cN;  hPrev  =  cN  /  cN  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  hPrev  =  cN  *  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    hPrev  =  cN  *  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  AssertionError  	135	2	add
708	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  AssertionError  	135	2	add
709	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN  +  1;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN  +  1;  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN    +    1;    hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  AssertionError  	135	2	add
710	[BUG]  [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  hPrev  =  p1;  hPrev  =  p0;  [CE]  cannot  find  symbol  p1  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    p0;    hPrev  =  p0;  hPrev  =  p1;  hPrev  =  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        p0;        hPrev    =    p0;    hPrev  =  p1;  hPrev  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  p1	20	None	add
711	[BUG]  [BUGGY]  hPrev  =  dPrev;  hPrev  =  p2;  [CE]  cannot  find  symbol  p2  [FE]              ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev;  hPrev  =  p2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev;  hPrev  =  p2;	  hPrev    =    p0;    hPrev    =    p1;    	non-compiled	[CE]  cannot  find  symbol  p2	25	None	replace
712	[BUG]  [BUGGY]  timeout  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  epsilon;	  hPrev    =    p2;    	compilable	timeout	117	1	replace
713	[BUG]  [BUGGY]  hPrev  =  epsilon;  timeout  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  epsilon;	  hPrev    =    p2;    	compilable	timeout	117	1	replace
714	[BUG]  [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2,  q1;  [CE]  ';'  expected  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2,  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    /    q2;    hPrev  =  p0  /  q2,  q1;	  	non-compiled	[CE]  ';'  expected	53	None	add
715	[BUG]  [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2,  n++;  [CE]  ';'  expected  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  /  q2;  hPrev  =  p0  /  q2,  n++;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    /    q2;    hPrev  =  p0  /  q2,  n++;	  	non-compiled	[CE]  ';'  expected	53	None	add
716	[BUG]  [BUGGY]  n  =  Math.min(cN,  dPrev  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.min(cN,  dPrev  +  1);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.min(cN,  dPrev  +  1);	  n    =    Math.max(dPrev,    cN    +    1);    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
717	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev;  dPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev;  dPrev  =  cN  /  dPrev;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	compilable	timeout	92	1	replace
718	[BUG]  [BUGGY]  hPrev  =  dPrev;  dPrev  =  cN  /  dPrev;  timeout  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev;  dPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev;  dPrev  =  cN  /  dPrev;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	compilable	timeout	92	1	replace
719	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  cN  /  dPrev;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	compilable	timeout	92	1	replace
720	[BUG]  [BUGGY]  dPrev  =  cN  /  dPrev;  timeout  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  cN  /  dPrev;	  hPrev    =    dPrev;    dPrev    =    dPrev;    	compilable	timeout	92	1	replace
721	[BUG]  [BUGGY]  p0  =  q2;  p1  =  q2;  [CE]  cannot  find  symbol  p1  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  q2;  p1  =  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    q2;    p1  =  q2;	  	non-compiled	[CE]  cannot  find  symbol  p1	133	None	add
722	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        *        cN;        hPrev    =    cN    *    cN;    hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  cN;	  	compilable	  [FE]  AssertionError  	18	2	add
723	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  cN;  hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        hPrev    =    cN    *    cN;    hPrev  =  cN  *  dPrev;  hPrev  =  cN  *  cN;	  	compilable	  [FE]  AssertionError  	18	2	add
724	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  b  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  b  /  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dprev    /    cN;    	compilable	  [FE]  ConvergenceException  	109	12	replace
725	[BUG]  [BUGGY]  hPrev  =  b  /  cN;  [FE]  ConvergenceException  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  b  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  b  /  cN;	  hPrev    =    dPrev    /    cN;    hPrev    =    dprev    /    cN;    	compilable	  [FE]  ConvergenceException  	109	12	replace
726	[BUG]  [BUGGY]  n  =  cN  *  q2;  [CE]  possible  loss  of  precision  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  cN  *  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  cN  *  q2;	          n    =    cN    /    q2;    	non-compiled	[CE]  possible  loss  of  precision	110	None	replace
727	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN  -  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0  =  cN  -  1;	  p0    =    cN;    	compilable	  [FE]  ConvergenceException  	2	12	replace
728	[BUG]  [BUGGY]  p0  =  cN  -  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN  -  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  cN  -  1;	  p0    =    cN;    	compilable	  [FE]  ConvergenceException  	2	12	replace
729	[BUG]  [BUGGY]  timeout  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  dPrev  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	dPrev  =  dPrev  *  cN  +  1;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	timeout	17	1	replace
730	[BUG]  [BUGGY]  dPrev  =  dPrev  *  cN  +  1;  timeout  [FE]    OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  dPrev  =  dPrev  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	dPrev  =  dPrev  *  cN  +  1;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	timeout	17	1	replace
731	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  cN  +  1;  dPrev  =  dPrev  *  cN;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	17	12	replace
732	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  dPrev  =  dPrev  *  cN;  [FE]  ConvergenceException  [FE]      OutOfRangeException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  +  1;  dPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  cN  +  1;  dPrev  =  dPrev  *  cN;	  hPrev    =    dPrev    *    cN;    dPrev    =    dPrev    *    cN;    	compilable	  [FE]  ConvergenceException  	17	12	replace
733	[BUG]  [BUGGY]  n  =  Math.abs(x  -  1.0)/  q2;  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(x  -  1.0)/  q2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(x  -  1.0)/  q2;	  n    =    Math.abs(epsilon    -    1.0)/    q2;    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
734	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;	  	compilable	  [FE]  AssertionError  	30	2	add
735	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    /    cN;    hPrev  =  cN  /  dPrev;  hPrev  =  dPrev  /  cN;	  	compilable	  [FE]  AssertionError  	30	2	add
736	[BUG]  [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cmN  *  q2;  [CE]  cannot  find  symbol  cmN  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cmN  *  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    q2;    hPrev  =  cmN  *  q2;	  	non-compiled	[CE]  cannot  find  symbol  cmN	128	None	add
737	[BUG]  [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  CN  *  q2;  [CE]  cannot  find  symbol  CN  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  CN  *  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    *    q2;    hPrev  =  CN  *  q2;	  	non-compiled	[CE]  cannot  find  symbol  CN	128	None	add
738	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  1;  hPrev  =  p0  +  2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    p0    +    1;    hPrev  =  p0  +  2;	  	compilable	  [FE]  AssertionError  	64	2	add
739	[BUG]  [BUGGY]  hPrev  =  p0  +  1;  hPrev  =  p0  +  2;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  +  1;  hPrev  =  p0  +  2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    +    1;    hPrev  =  p0  +  2;	  	compilable	  [FE]  AssertionError  	64	2	add
740	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN;    	compilable	  [FE]  ConvergenceException  	41	11	replace
741	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  cN;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  cN;  hPrev  =  cN  /  cN;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN;    	compilable	  [FE]  ConvergenceException  	41	11	replace
742	[BUG]  [BUGGY]  n  =  Math.min(cN,  epsilon);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.min(cN,  epsilon);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.min(cN,  epsilon);	  n    =    Math.min(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	62	None	replace
743	[BUG]  [BUGGY]  n  =  Math.max(cN,  epsilon);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(cN,  epsilon);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(cN,  epsilon);	  n    =    Math.max(cN,    dPrev);    	non-compiled	[CE]  possible  loss  of  precision	60	None	replace
744	[BUG]  [BUGGY]  n  =  Math.max(cN,  dPrev,  p0);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(cN,  dPrev,  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(cN,  dPrev,  p0);	  n    =    Math.max(cN,    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	60	None	replace
745	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  cN;  hPrev  =  cN  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  cN  *  cN;  hPrev  =  cN  *  cN  +  1;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN    +    1;    	compilable	  [FE]  ConvergenceException  	136	12	replace
746	[BUG]  [BUGGY]  hPrev  =  cN  *  cN;  hPrev  =  cN  *  cN  +  1;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  cN;  hPrev  =  cN  *  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  *  cN;  hPrev  =  cN  *  cN  +  1;	  hPrev    =    cN    /    cN;    hPrev    =    cN    /    cN    +    1;    	compilable	  [FE]  ConvergenceException  	136	12	replace
747	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN;	  	compilable	  [FE]  AssertionError  	40	2	add
748	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    hPrev  =  dPrev  /  cN;  hPrev  =  cN  /  cN;	  	compilable	  [FE]  AssertionError  	40	2	add
749	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  epsilon;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    hPrev  =  cN  /  epsilon;  hPrev  =  cN  /  cN;	  	compilable	  [FE]  AssertionError  	40	2	add
750	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  epsilon;  hPrev  =  cN  /  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  epsilon;  hPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    cN;    hPrev  =  cN  /  epsilon;  hPrev  =  cN  /  cN;	  	compilable	  [FE]  AssertionError  	40	2	add
751	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	34	2	add
752	[BUG]  [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    /    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        /        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	34	2	add
753	[BUG]  [BUGGY]  hPrev  =  p0;  hPrev  =  cPrev.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0;  hPrev  =  cPrev.doubleValue();  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p0;  hPrev  =  cPrev.doubleValue();	  hPrev    =    p0;    hPrev    =    p0.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	131	None	replace
754	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  *  1  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  cN  *  1  +  1;	  hPrev    =    dPrev    /    cN    +    1;    	compilable	  [FE]  ConvergenceException  	75	12	replace
755	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN  *  1  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  *  1  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  cN  *  1  +  1;	  hPrev    =    dPrev    /    cN    +    1;    	compilable	  [FE]  ConvergenceException  	75	12	replace
756	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  }  p0  =  cN;  [CE]  illegal  start  of  type  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p0  =  cN;  }  p0  =  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    cN;    p0  =  cN;  }  p0  =  cN;	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
757	[BUG]  [BUGGY]  p0  =  cN;  p0  =  cN;  this.n  =  dPrev;  [CE]  cannot  find  symbol  n  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p0  =  cN;  this.n  =  dPrev;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0    =    cN;    p0  =  cN;  this.n  =  dPrev;	  	non-compiled	[CE]  cannot  find  symbol  n	1	None	add
758	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  -  cN,  p0);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  -  cN,  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  -  cN,  p0);	  n    =    Math.abs(dPrev    -    cN);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	73	None	replace
759	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  1;	  hPrev    =    dPrev    +    1;    	compilable	  [FE]  AssertionError  	87	10	replace
760	[BUG]  [BUGGY]  hPrev  =  dPrev  /  1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  1;	  hPrev    =    dPrev    +    1;    	compilable	  [FE]  AssertionError  	87	10	replace
761	[BUG]  [BUGGY]  n  =  Math.abs(x  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(x  -  1.0)/  epsilon;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(x  -  1.0)/  epsilon;	  n    =    Math.abs(deltaN    -    1.0)/    epsilon;    	non-compiled	[CE]  possible  loss  of  precision	113	None	replace
762	[BUG]  [BUGGY]  timeout  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  /  epsilon;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    hPrev  =  cN  /  epsilon;  cPrev  =  cN  /  cN;	  timeout    	compilable	timeout	42	1	add
763	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  /  epsilon;  cPrev  =  cN  /  cN;  timeout  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  cN  /  epsilon;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    hPrev  =  cN  /  epsilon;  cPrev  =  cN  /  cN;	  timeout    	compilable	timeout	42	1	add
764	[BUG]  [BUGGY]  timeout  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  dPrev  /  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    hPrev  =  dPrev  /  cN;  cPrev  =  cN  /  cN;	  timeout    	compilable	timeout	42	1	add
765	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  dPrev  /  cN;  cPrev  =  cN  /  cN;  timeout  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    cPrev  =  cN  /  cN;  hPrev  =  dPrev  /  cN;  cPrev  =  cN  /  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        cPrev    =    cN    /    cN;    hPrev  =  dPrev  /  cN;  cPrev  =  cN  /  cN;	  timeout    	compilable	timeout	42	1	add
766	[BUG]  [BUGGY]  p0  =  dPrev;  p1  =  p2;  [CE]  cannot  find  symbol  p1  [FE]          AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p1  =  p2;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  dPrev;  p1  =  p2;	          p0    =    p0;    p1    =    p0;    	non-compiled	[CE]  cannot  find  symbol  p1	122	None	replace
767	[BUG]  [BUGGY]  hPrev  =  p2  /  dPrev;  [CE]  cannot  find  symbol  p2  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p2  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  p2  /  dPrev;	  hPrev    =    dPrev    /    p0;    timeout    	non-compiled	[CE]  cannot  find  symbol  p2	77	None	replace
768	[BUG]  [BUGGY]  hPrev  =  d0;  hPrev  =  d0;  [CE]  cannot  find  symbol  d0  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  d0;  hPrev  =  d0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  d0;  hPrev  =  d0;	  hPrev    =    dPrev;    hPrev    =    dPrev;    	non-compiled	[CE]  cannot  find  symbol  d0	89	None	replace
769	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    dPrev    /    cN    +    1;    hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  AssertionError  	74	2	add
770	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  cN  /  cN  +  1;  [FE]  AssertionError  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  +  1;  hPrev  =  cN  /  cN  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    /    cN    +    1;    hPrev  =  cN  /  cN  +  1;	  	compilable	  [FE]  AssertionError  	74	2	add
771	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  /  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  *  cN  /  1;	  hPrev    =    dPrev    *    cN    +    1;    	compilable	  [FE]  ConvergenceException  	85	11	replace
772	[BUG]  [BUGGY]  hPrev  =  dPrev  *  cN  /  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  cN  /  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  cN  /  1;	  hPrev    =    dPrev    *    cN    +    1;    	compilable	  [FE]  ConvergenceException  	85	11	replace
773	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  dPrev;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	                p0        =        p0;        p0    =    p0;    p0  =  dPrev;  p0  =  p0;	  	compilable	  [FE]  ConvergenceException  	66	11	add
774	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  dPrev;  p0  =  p0;  [FE]  ConvergenceException  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  dPrev;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  dPrev;  p0  =  p0;	  	compilable	  [FE]  ConvergenceException  	66	11	add
775	[BUG]  [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p1;  p0  =  p0;  [CE]  cannot  find  symbol  p1  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]          p0    =    p0;    p0  =  p0;  p0  =  p1;  p0  =  p0;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	                p0        =        p0;        p0    =    p0;    p0  =  p1;  p0  =  p0;	  	non-compiled	[CE]  cannot  find  symbol  p1	66	None	add
776	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  dPrev;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        *        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  dPrev;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	13	2	add
777	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  dPrev;  hPrev  =  dPrev  *  cN;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  cN  *  dPrev;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  cN  *  dPrev;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	13	2	add
778	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  epsilon;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        dPrev        *        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  epsilon;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	13	2	add
779	[BUG]  [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  epsilon;  hPrev  =  dPrev  *  cN;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  cN;  hPrev  =  dPrev  *  epsilon;  hPrev  =  dPrev  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        dPrev        *        cN;        hPrev    =    dPrev    *    cN;    hPrev  =  dPrev  *  epsilon;  hPrev  =  dPrev  *  cN;	  	compilable	  [FE]  AssertionError  	13	2	add
780	[BUG]  [BUGGY]  hPrev  =  dPrev  +  1;  int  hPrev  =  dPrev  +  1;  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  +  1;  int  hPrev  =  dPrev  +  1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    dPrev    +    1;    int  hPrev  =  dPrev  +  1;	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	86	None	add
781	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	cPrev  =  cN  /  dPrev;	  hPrev    =    cN    /    cN;    cPrev    =    cN    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	43	11	replace
782	[BUG]  [BUGGY]  cPrev  =  cN  /  dPrev;  [FE]  ConvergenceException  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  cPrev  =  cN  /  dPrev;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	cPrev  =  cN  /  dPrev;	  hPrev    =    cN    /    cN;    cPrev    =    cN    /    cN;    timeout    	compilable	  [FE]  ConvergenceException  	43	11	replace
783	[BUG]  [BUGGY]  hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2,  p0);  [CE]  ';'  expected  [FE]        ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2,  p0);	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0);    	non-compiled	[CE]  ';'  expected	141	None	replace
784	[BUG]  [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cN  *  q2,  p0);  [CE]  ';'  expected  [FE]          ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cN  *  q2,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  *  q2;  hPrev  =  cN  *  q2,  p0);	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0);    	non-compiled	[CE]  ';'  expected	141	None	replace
785	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  *  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q1;    hPrev  =  cN  *  q2;  hPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	8	2	add
786	[BUG]  [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  *  q2;  hPrev  =  cN  /  q1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    q2;    hPrev  =  cN  /  q1;  hPrev  =  cN  *  q2;  hPrev  =  cN  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        q2;        hPrev    =    cN    /    q1;    hPrev  =  cN  *  q2;  hPrev  =  cN  /  q1;	  	compilable	  [FE]  AssertionError  	8	2	add
787	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0  =  dPrev  +  1;	  p0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	5	12	replace
788	[BUG]  [BUGGY]  p0  =  dPrev  +  1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev  +  1;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  dPrev  +  1;	  p0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	5	12	replace
789	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev  *  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	p0  =  dPrev  *  cN;	  p0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	5	11	replace
790	[BUG]  [BUGGY]  p0  =  dPrev  *  cN;  [FE]  ConvergenceException  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev  *  cN;  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  dPrev  *  cN;	  p0    =    dPrev;    	compilable	  [FE]  ConvergenceException  	5	11	replace
791	[BUG]  [BUGGY]  hPrev  =  p0  *  cN;  hPrev  =  p1  *  cN;  [CE]  cannot  find  symbol  p1  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  p0  *  cN;  hPrev  =  p1  *  cN;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    p0    *    cN;    hPrev  =  p1  *  cN;	  	non-compiled	[CE]  cannot  find  symbol  p1	80	None	add
792	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	137	2	add
793	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	137	2	add
794	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  *  cN;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  *  cN;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	137	2	add
795	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  *  cN;  hPrev  =  cN  /  q2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  *  cN;  hPrev  =  cN  /  q2;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  *  cN;  hPrev  =  cN  /  q2;	  	compilable	  [FE]  AssertionError  	137	2	add
796	[BUG]  [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2,  p0);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev    =    cN    /    cN;    hPrev  =  cN  /  q2;  hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2,  p0);  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev        =        cN        /        cN;        hPrev    =    cN    /    q2;    hPrev  =  cN  /  cN;  hPrev  =  cN  /  q2,  p0);	  	non-compiled	[CE]  ';'  expected	137	None	add
797	[BUG]  [BUGGY]  n  =  Math.abs(dPrev  /  p0,  cN);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                    AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(dPrev  /  p0,  cN);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(dPrev  /  p0,  cN);	  n    =    Math.abs(dPrev    /    p0);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	29	None	replace
798	[BUG]  [BUGGY]  n  =  dPrev,  cPrev.doubleValue();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  dPrev,  cPrev.doubleValue();  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  dPrev,  cPrev.doubleValue();	  n    =    cPrev.doubleValue();    	non-compiled	[CE]  ';'  expected	59	None	replace
799	[BUG]  [BUGGY]  hPrev  =  dPrev;  hPrev  =  p0.epsilon;  [CE]  double  cannot  be  dereferenced  [FE]            ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev;  hPrev  =  p0.epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev;  hPrev  =  p0.epsilon;	  hPrev    =    p0;    hPrev    =    p0.epsilon;    	non-compiled	[CE]  double  cannot  be  dereferenced	132	None	replace
800	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  *  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  cN  *  epsilon;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    *    cN;    	compilable	timeout	35	1	replace
801	[BUG]  [BUGGY]  hPrev  =  dPrev  /  cN  *  epsilon;  timeout  [FE]    AssertionError    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  cN  *  epsilon;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  cN  *  epsilon;	  hPrev    =    dPrev    /    cN;    hPrev    =    dPrev    *    cN;    	compilable	timeout	35	1	replace
802	[BUG]  [BUGGY]  p0  =  dPrev;  p0  =  p0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  dPrev;  p0  =  p0;  }  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  dPrev;  p0  =  p0;  }	          p0    =    p0;    p0    =    p0;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
803	[BUG]  [BUGGY]  p0  =  p2;  p0  =  p0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  p2;  p0  =  p0;  }  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  p2;  p0  =  p0;  }	          p0    =    p0;    p0    =    p0;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
804	[BUG]  [BUGGY]  p0  =  cN;  p0  =  p0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  p0  =  cN;  p0  =  p0;  }  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	p0  =  cN;  p0  =  p0;  }	          p0    =    p0;    p0    =    p0;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
805	[BUG]  [BUGGY]  hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2,  p0;  [CE]  ';'  expected  [FE]                ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2,  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  *  q2;  hPrev  =  cN  /  q2,  p0;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0;    	non-compiled	[CE]  ';'  expected	12	None	replace
806	[BUG]  [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cN  *  q2,  p0;  [CE]  ';'  expected  [FE]                  ConvergenceException      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  *  q2;  hPrev  =  cN  *  q2,  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  cN  *  q2;  hPrev  =  cN  *  q2,  p0;	  hPrev    =    cN    /    q2;    hPrev    =    cN    /    q2,    p0;    	non-compiled	[CE]  ';'  expected	12	None	replace
807	[BUG]  [BUGGY]  hPrev  =  cN  /  p0;  hPrev  =  cmN  /  p0;  [CE]  cannot  find  symbol  cmN  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0;  hPrev  =  cmN  /  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    /    p0;    hPrev  =  cmN  /  p0;	  	non-compiled	[CE]  cannot  find  symbol  cmN	55	None	add
808	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0;  hPrev  =  cN  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev    =    cN    /    p0;    hPrev  =  cN  *  p0;	  	compilable	  [FE]  AssertionError  	55	2	add
809	[BUG]  [BUGGY]  hPrev  =  cN  /  p0;  hPrev  =  cN  *  p0;  [FE]  AssertionError  [FE]      ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  cN  /  p0;  hPrev  =  cN  *  p0;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev    =    cN    /    p0;    hPrev  =  cN  *  p0;	  	compilable	  [FE]  AssertionError  	55	2	add
810	[BUG]  [BUGGY]  n  =  Math.max(cN,  p0  -  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(cN,  p0  -  dPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(cN,  p0  -  dPrev);	  n    =    Math.max(cN,    p0);    	non-compiled	[CE]  possible  loss  of  precision	98	None	replace
811	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	hPrev  =  dPrev  /  q1;	  hPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	52	11	replace
812	[BUG]  [BUGGY]  hPrev  =  dPrev  /  q1;  [FE]  ConvergenceException  [FE]    ConvergenceException    [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  hPrev  =  dPrev  /  q1;  [BUGGY]      q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	hPrev  =  dPrev  /  q1;	  hPrev    =    dPrev    /    q2;    	compilable	  [FE]  ConvergenceException  	52	11	replace
813	[BUG]  [BUGGY]  n  =  Math.abs(cN  /  dPrev,  p0);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.abs(cN  /  dPrev,  p0);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.abs(cN  /  dPrev,  p0);	  n    =    Math.abs(cN    /    dPrev);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	94	None	replace
814	[BUG]  [BUGGY]  n  =  Math.max(epsilon,  dPrev);  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;      [BUGGY]  n  =  Math.max(epsilon,  dPrev);  [BUGGY]      hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	n  =  Math.max(epsilon,  dPrev);	  n    =    Math.max(epsilon,    p0);    	non-compiled	[CE]  possible  loss  of  precision	108	None	replace
