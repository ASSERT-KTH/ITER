bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,   x); [FE] AssertionError testMath785 [CONTEXT] } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { [BUGGY] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x); [BUGGY] x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError testMath785 [CONTEXT] } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { [BUGGY] [BUGGY] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x); x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	
3	[BUG] [BUGGY] dPrev = q1; [FE] AssertionError testMath785 [CONTEXT] } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } [BUGGY] dPrev = q1; [BUGGY] cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError testMath785 [CONTEXT] } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } [BUGGY] [BUGGY] dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	185	185	2	add	
5	[BUG] [BUGGY] cPrev = cN / q2; [FE] AssertionError testMath785 [CONTEXT] if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; [BUGGY] cPrev = cN / q2; [BUGGY] p0 = hPrev; hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError testMath785 [CONTEXT] if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; [BUGGY] [BUGGY] cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	
7	[BUG] [BUGGY] p0 = hPrev; [FE] AssertionError testMath785 [CONTEXT] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; [BUGGY] p0 = hPrev; [BUGGY] hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); }  [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError testMath785 [CONTEXT] throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; [BUGGY] [BUGGY] p0 = hPrev; hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); }  [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	187	187	2	add	
9	[BUG] [BUGGY] hPrev = cN; [FE] AssertionError testMath785 [CONTEXT] x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; [BUGGY] hPrev = cN; [BUGGY] q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError testMath785 [CONTEXT] x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; [BUGGY] [BUGGY] hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	188	188	2	add	
11	[BUG] [BUGGY] q1 = q2; [FE] AssertionError testMath785 [CONTEXT] } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; [BUGGY] q1 = q2; [BUGGY] n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError testMath785 [CONTEXT] } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; [BUGGY] [BUGGY] q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	add	
13	[BUG] [BUGGY] n++; [FE] AssertionError testMath785 [CONTEXT] if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; [BUGGY] n++; [BUGGY] } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError testMath785 [CONTEXT] if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; [BUGGY] [BUGGY] n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	190	190	2	add	
15	[BUG] [BUGGY] } [FE] AssertionError testMath785 [CONTEXT] if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; [BUGGY] } [BUGGY]  if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError testMath785 [CONTEXT] if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; [BUGGY] [BUGGY] } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; } [CLASS] ContinuedFraction [METHOD] evaluate [RETURN_TYPE] double  double x double epsilon int maxIterations [VARIABLES] double DEFAULT_EPSILON a b cN cPrev dPrev deltaN epsilon hN hPrev lastScaleFactor p0 q1 q2 scale scaleFactor small x int i maxIterations maxPower n boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	191	191	2	add	
17	[BUG] [BUGGY] super(); [FE] AssertionError testMath785 [CONTEXT] protected ContinuedFraction() { [BUGGY] super(); [BUGGY] } [CLASS] ContinuedFraction [METHOD] <init> [RETURN_TYPE] ContinuedFraction()  [VARIABLES] double DEFAULT_EPSILON boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	45	45	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError testMath785 [CONTEXT] protected ContinuedFraction() { [BUGGY] [BUGGY] super(); } [CLASS] ContinuedFraction [METHOD] <init> [RETURN_TYPE] ContinuedFraction()  [VARIABLES] double DEFAULT_EPSILON boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	45	45	2	add	
19	[BUG] [BUGGY] } [FE] AssertionError testMath785 [CONTEXT] protected ContinuedFraction() { super(); [BUGGY] } [BUGGY]  [CLASS] ContinuedFraction [METHOD] <init> [RETURN_TYPE] ContinuedFraction()  [VARIABLES] double DEFAULT_EPSILON boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	46	46	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError testMath785 [CONTEXT] protected ContinuedFraction() { super(); [BUGGY] [BUGGY] } [CLASS] ContinuedFraction [METHOD] <init> [RETURN_TYPE] ContinuedFraction()  [VARIABLES] double DEFAULT_EPSILON boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	46	46	2	add	
