bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action2	[BUG]  [BUGGY]  [FE]  AssertionError  testMath785  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x  +  1);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x  +  1);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  testMath785	1	2
3	[BUG]  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x  +  1);  [FE]  AssertionError  testMath785  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x  +  1);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x  +  1);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  testMath785	1	2	replace
3	[BUG]  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NON_DIVERGENCE,  x);  [CE]  cannot  find  symbol  CONTINUED_FRACTION_NON_DIVERGENCE  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NON_DIVERGENCE,  x);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NON_DIVERGENCE,  x);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	non-compiled	[CE]  cannot  find  symbol  CONTINUED_FRACTION_NON_DIVERGENCE	1	None	replace
4	[BUG]  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FIRACTION_NAN_DIVERGENCE,  x);  [CE]  cannot  find  symbol  CONTINUED_FIRACTION_NAN_DIVERGENCE  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FIRACTION_NAN_DIVERGENCE,  x);  [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FIRACTION_NAN_DIVERGENCE,  x);	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	non-compiled	[CE]  cannot  find  symbol  CONTINUED_FIRACTION_NAN_DIVERGENCE	1	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  testMath785  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	add	  	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  testMath785	1	2
6	[BUG]  [BUGGY]    [FE]  AssertionError  testMath785  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    [BUGGY]  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	  	throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,      x);  	compilable	  [FE]  AssertionError  testMath785	1	2	replace
11	[BUG]  [BUGGY]    x  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  scaleFactor.doubleValue();  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  scaleFactor.doubleValue();		non-compiled	[CE]  cannot  find  symbol  scaleFactor	2	None	add
12	[BUG]  [BUGGY]    x  =  scaleFactor.computeScale(x,  hN);  [CE]  cannot  find  symbol  scaleFactor  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  scaleFactor.computeScale(x,  hN);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  scaleFactor.computeScale(x,  hN);		non-compiled	[CE]  cannot  find  symbol  scaleFactor	2	None	add
13	[BUG]  [BUGGY]    x  =  scaleFactor.evaluate(x,  deltaN);  [CE]  cannot  find  symbol  scaleFactor  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  scaleFactor.evaluate(x,  deltaN);  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  scaleFactor.evaluate(x,  deltaN);		non-compiled	[CE]  cannot  find  symbol  scaleFactor	2	None	add
14	[BUG]  [BUGGY]    x  =  scaleFactor.evaluate(x,  deltaN));  [CE]  ';'  expected  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  scaleFactor.evaluate(x,  deltaN));  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  scaleFactor.evaluate(x,  deltaN));		non-compiled	[CE]  ';'  expected	2	None	add
15	[BUG]  [BUGGY]    x  =  scaleFactor.scale();  [CE]  cannot  find  symbol  scaleFactor  [CONTEXT]  }  final  double  deltaN  =  cN  /  q2  /  cPrev;  hN  =  cPrev  *  deltaN;  if  (Double.isInfinite(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,  x);  }  if  (Double.isNaN(hN))  {  [BUGGY]    x  =  scaleFactor.scale();  [BUGGY]  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,            x);  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	1.0	177	178	2	replace	    x  =  scaleFactor.scale();		non-compiled	[CE]  cannot  find  symbol  scaleFactor	2	None	add
21	[BUG]  [BUGGY]    n  =  Math.abs(dPrev  -  dPrev);  [CE]  possible  loss  of  precision  [CONTEXT]  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  [BUGGY]    n  =  Math.abs(dPrev  -  dPrev);  [BUGGY]  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	    n  =  Math.abs(dPrev  -  dPrev);		non-compiled	[CE]  possible  loss  of  precision	12	None	add
22	[BUG]  [BUGGY]    n  =  scaleFactor.evaluate(x,  epsilon));  [CE]  ';'  expected  [CONTEXT]  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  [BUGGY]    n  =  scaleFactor.evaluate(x,  epsilon));  [BUGGY]  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	    n  =  scaleFactor.evaluate(x,  epsilon));		non-compiled	[CE]  ';'  expected	12	None	add
23	[BUG]  [BUGGY]    n  =  Math.abs(hN  -  deltaN)%  epsilon;  [CE]  possible  loss  of  precision  [CONTEXT]  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  [BUGGY]    n  =  Math.abs(hN  -  deltaN)%  epsilon;  [BUGGY]  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	    n  =  Math.abs(hN  -  deltaN)%  epsilon;		non-compiled	[CE]  possible  loss  of  precision	12	None	add
24	[BUG]  [BUGGY]    n  =  Math.abs(dPrev  -  dPrev)/  epsilon;  [CE]  possible  loss  of  precision  [CONTEXT]  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  [BUGGY]    n  =  Math.abs(dPrev  -  dPrev)/  epsilon;  [BUGGY]  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	    n  =  Math.abs(dPrev  -  dPrev)/  epsilon;		non-compiled	[CE]  possible  loss  of  precision	12	None	add
25	[BUG]  [BUGGY]    n  =  scaleFactor.evaluate(x,  epsilon);  [CE]  cannot  find  symbol  scaleFactor  [CONTEXT]  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  [BUGGY]    n  =  scaleFactor.evaluate(x,  epsilon);  [BUGGY]  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  return  hN;  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	189	189	2	replace	    n  =  scaleFactor.evaluate(x,  epsilon);		non-compiled	[CE]  cannot  find  symbol  scaleFactor	12	None	add
