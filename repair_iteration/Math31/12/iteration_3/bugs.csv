bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  x  +  1,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  x  +  1,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  x  +  1,  epsilon,  maxIterations);	  double    hPrev    =    getScaleFactor(0,    x    +    1,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
2	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  x  +  1,  epsilon);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  x  +  1,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  x  +  1,  epsilon);	  double    hPrev    =    getScaleFactor(0,    x    +    1,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
3	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  y  +  1,  maxIterations);  [CE]  cannot  find  symbol  y  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  y  +  1,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  y  +  1,  maxIterations);	  double    hPrev    =    getScaleFactor(0,    x    +    1,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  y	90	None	replace
4	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(x,  epsilon  +  1,  maxIterations);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(x,  epsilon  +  1,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(x,  epsilon  +  1,  maxIterations);	  double    hPrev    =    getScaleFactor(0,    x    +    1,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
5	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getB(0,  x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	add	double  hPrev  =  getB(0,  x  +  1);	  double    hPrev    =    getA(0,    x    +    1);    double    hPrev    =    getB(0,    x    +    1);    	compilable	  [FE]  OutOfRangeException  	70	9	replace
6	[BUG]  [BUGGY]  double  hPrev  =  getB(0,  x  +  1);  [FE]  OutOfRangeException  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getB(0,  x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getB(0,  x  +  1);	  double    hPrev    =    getA(0,    x    +    1);    double    hPrev    =    getB(0,    x    +    1);    	compilable	  [FE]  OutOfRangeException  	70	9	replace
7	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x  +  1,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  x  +  1,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  x  +  1,  maxIterations);	  double    hPrev    =    getA(0,    x    +    1);    double    hPrev    =    getB(0,    x    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	70	None	replace
8	[BUG]  [BUGGY]  double  hPrev  =  getX(0,  epsilon  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getX(0,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(0,  epsilon  +  1);	  double    hPrev    =    getX(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
9	[BUG]  [BUGGY]  double  hPrev  =  getX(x,  epsilon  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getX(x,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(x,  epsilon  +  1);	  double    hPrev    =    getX(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
10	[BUG]  [BUGGY]  double  hPrev  =  getY(0,  x  +  1);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getY(0,  x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getY(0,  x  +  1);	  double    hPrev    =    getX(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
11	[BUG]  [BUGGY]  double  hPrev  =  getX(0,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getX(0,  x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(0,  x,  epsilon,  maxIterations);	  double    hPrev    =    getX(0,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
12	[BUG]  [BUGGY]  double  hPrev  =  getX(0,  small,  epsilon);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getX(0,  small,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(0,  small,  epsilon);	  double    hPrev    =    getX(0,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
13	[BUG]  [BUGGY]  double  hPrev  =  getY(0,  x,  epsilon);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getY(0,  x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getY(0,  x,  epsilon);	  double    hPrev    =    getX(0,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
14	[BUG]  [BUGGY]  int  n  =  small.equals(x,  epsilon,  maxIterations);  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  small.equals(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  small.equals(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.equals(x,    epsilon,    maxIterations);    	non-compiled	[CE]  double  cannot  be  dereferenced	75	None	replace
15	[BUG]  [BUGGY]  int  n  =  this.scaleFactor.equals(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  this.scaleFactor.equals(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  this.scaleFactor.equals(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.equals(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	75	None	replace
16	[BUG]  [BUGGY]  int  n  =  size.equals(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  size  [FE]                            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  size.equals(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  size.equals(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.equals(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  size	75	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  small  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	add	double  hPrev  =  getA(0,  small  +  1);	  double    hPrev    =    getA(0,    n    +    1);    	compilable	  [FE]  AssertionError  	17	2	replace
18	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  small  +  1);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  small  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  small  +  1);	  double    hPrev    =    getA(0,    n    +    1);    	compilable	  [FE]  AssertionError  	17	2	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  maxIterations  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	add	double  hPrev  =  getA(0,  maxIterations  +  1);	  double    hPrev    =    getA(0,    n    +    1);    	compilable	  [FE]  AssertionError  	17	2	replace
20	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  maxIterations  +  1);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  maxIterations  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  maxIterations  +  1);	  double    hPrev    =    getA(0,    n    +    1);    	compilable	  [FE]  AssertionError  	17	2	replace
21	[BUG]  [BUGGY]  Double  hPrev  =  getScaleFactor(small,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getScaleFactor(small,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getScaleFactor(small,  epsilon,  maxIterations);	  Double    hPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
22	[BUG]  [BUGGY]  Double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  Double    hPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
23	[BUG]  [BUGGY]  Double  hPrev  =  getScaleFactor(short,  x,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getScaleFactor(short,  x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getScaleFactor(short,  x,  epsilon,  maxIterations);	  Double    hPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	80	None	replace
24	[BUG]  [BUGGY]  double  hPrev  =  getX(0,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getX(0,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(0,  epsilon,  maxIterations);	  double    hPrev    =    getX(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
25	[BUG]  [BUGGY]  double  hPrev  =  getY(0,  epsilon);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getY(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getY(0,  epsilon);	  double    hPrev    =    getX(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
26	[BUG]  [BUGGY]  int  n  =  this.scaleFactor.evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  this.scaleFactor.evaluate(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  this.scaleFactor.evaluate(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	73	None	replace
27	[BUG]  [BUGGY]  int  n  =  small.evaluate(x,  epsilon,  maxIterations);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  small.evaluate(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  small.evaluate(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  double  cannot  be  dereferenced	73	None	replace
28	[BUG]  [BUGGY]  int  n  =  size.evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  size  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  size.evaluate(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  size.evaluate(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  size	73	None	replace
29	[BUG]  [BUGGY]  double  cN  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(x,  epsilon,  maxIterations);	  double    cN    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	20	None	replace
30	[BUG]  [BUGGY]  double  cN  =  getA(x,  small,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getA(x,  small,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(x,  small,  epsilon);	  double    cN    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	20	None	replace
31	[BUG]  [BUGGY]  Double  cN  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  cN  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  cN  =  getA(x,  epsilon,  maxIterations);	  double    cN    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	20	None	replace
32	[BUG]  [BUGGY]  double  cN  =  getA(small,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getA(small,  x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(small,  x,  epsilon);	  double    cN    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	20	None	replace
33	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  small,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  small,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon  +  small,  maxIterations);	  double    hPrev    =    getA(x,    epsilon    +    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	93	None	replace
34	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  1,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  1,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon  +  1,  maxIterations);	  double    hPrev    =    getA(x,    epsilon    +    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	93	None	replace
35	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  maxIterations,  scaleFactor);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon  +  maxIterations,  scaleFactor);	  double    hPrev    =    getA(x,    epsilon    +    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	93	None	replace
36	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  double  hPrev  =  getA(0,  epsilon  +  1);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  double  hPrev  =  getA(0,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon    +    1);    double  hPrev  =  getA(0,  epsilon  +  1);	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	15	None	add
37	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  Double  hPrev  =  getA(0,  epsilon  +  1);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  Double  hPrev  =  getA(0,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon    +    1);    Double  hPrev  =  getA(0,  epsilon  +  1);	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	15	None	add
38	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  int  epsilon  =  getA(0,  epsilon  +  1);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  int  epsilon  =  getA(0,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon    +    1);    int  epsilon  =  getA(0,  epsilon  +  1);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	15	None	add
39	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  double  epsilon  =  getA(0,  epsilon  +  1);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  double  epsilon  =  getA(0,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon    +    1);    double  epsilon  =  getA(0,  epsilon  +  1);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	15	None	add
40	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  epsilon,  maxIterations);	  double    hPrev    =    getScaleFactor(0,    x,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
41	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  x,  epsilon,  maxIterations);	  double    hPrev    =    getScaleFactor(0,    x,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
42	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  y,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  y  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  y,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  y,  epsilon,  maxIterations);	  double    hPrev    =    getScaleFactor(0,    x,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  y	38	None	replace
43	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  d,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  d  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  d,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  d,  epsilon,  maxIterations);	  double    hPrev    =    getScaleFactor(0,    x,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  d	38	None	replace
44	[BUG]  [BUGGY]  double  x  =  getA(1,  epsilon,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(1,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(1,  epsilon,  maxIterations);	  double    x    =    getA(1,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	12	None	replace
45	[BUG]  [BUGGY]  double  x  =  getA(2,  epsilon);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(2,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(2,  epsilon);	  double    x    =    getA(1,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	12	None	replace
46	[BUG]  [BUGGY]  double  x  =  getA(1,  small);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(1,  small);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(1,  small);	  double    x    =    getA(1,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	12	None	replace
47	[BUG]  [BUGGY]  int  n  =  getScaleFactor(maxIterations,  epsilon,  small);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getScaleFactor(maxIterations,  epsilon,  small);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor(maxIterations,  epsilon,  small);	  int    n    =    getScaleFactor(small,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
48	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  x  +  2);  [CE]  cannot  find  symbol  hPrev  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  dPrev  =  getA(0,  x  +  2);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  dPrev  =  getA(0,  x  +  2);	  double    dPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol  hPrev	88	None	replace
49	[BUG]  [BUGGY]  double  n  =  getA(0,  small);  [CE]  cannot  find  symbol  hPrev  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(0,  small);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(0,  small);	  double    n    =    getA(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  hPrev	46	None	replace
50	[BUG]  [BUGGY]  double  n  =  getA(1,  epsilon);  [CE]  cannot  find  symbol  hPrev  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(1,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(1,  epsilon);	  double    n    =    getA(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  hPrev	46	None	replace
51	[BUG]  [BUGGY]  n  =  getA(0,  epsilon);  n  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  n  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  n  =  getA(0,  epsilon);  n  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	n  =  getA(0,  epsilon);  n  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    hPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  n	50	None	replace
52	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  epsilon,  maxIterations);	  double    hPrev    =    getA(0,    epsilon);    hPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	50	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(0,  x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	add	Double  hPrev  =  getA(0,  x  +  1);	  double    hPrev    =    getA(0,    x    +    1);    Double    hPrev    =    getA(0,    x    +    1);    	compilable	  [FE]  AssertionError  	7	2	replace
54	[BUG]  [BUGGY]  Double  hPrev  =  getA(0,  x  +  1);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(0,  x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(0,  x  +  1);	  double    hPrev    =    getA(0,    x    +    1);    Double    hPrev    =    getA(0,    x    +    1);    	compilable	  [FE]  AssertionError  	7	2	replace
55	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon  +  1);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(x,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon  +  1);	  double    hPrev    =    getA(0,    x    +    1);    Double    hPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	7	None	replace
56	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x);  int  epsilon  =  getA(0,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  x);  int  epsilon  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  x);  int  epsilon  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    int    epsilon    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
57	[BUG]  [BUGGY]  int  epsilon  =  getA(0,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  epsilon  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  epsilon  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    int    epsilon    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
58	[BUG]  [BUGGY]  int  epsilon  =  getA(0,  x);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  epsilon  =  getA(0,  x);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  epsilon  =  getA(0,  x);	  double    hPrev    =    getA(0,    epsilon);    int    epsilon    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
59	[BUG]  [BUGGY]  epsilon  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  hPrev  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  epsilon  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	epsilon  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    int    epsilon    =    getA(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  hPrev	49	None	replace
60	[BUG]  [BUGGY]  double  n  =  getA(x,  small,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(x,  small,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(x,  small,  epsilon);	  double    n    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	44	None	replace
61	[BUG]  [BUGGY]  Double  n  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  n  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  n  =  getA(x,  epsilon,  maxIterations);	  double    n    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	44	None	replace
62	[BUG]  [BUGGY]  double  n  =  getA(small,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(small,  x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(small,  x,  epsilon);	  double    n    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	44	None	replace
63	[BUG]  [BUGGY]  double  n  =  getA(1,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(1,  x),  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(1,  x),  epsilon,  maxIterations);	  double    n    =    getA(0,    x),    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	85	None	replace
64	[BUG]  [BUGGY]  double  n  =  getScaleFactor(0,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getScaleFactor(0,  x),  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getScaleFactor(0,  x),  epsilon,  maxIterations);	  double    n    =    getA(0,    x),    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	85	None	replace
65	[BUG]  [BUGGY]  double  n  =  getA(0,  x),  epsilon,  maxIterations  +  1);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(0,  x),  epsilon,  maxIterations  +  1);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(0,  x),  epsilon,  maxIterations  +  1);	  double    n    =    getA(0,    x),    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	85	None	replace
66	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  small);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  small);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  small);	  double    hPrev    =    getScaleFactor(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
67	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  Double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	55	None	replace
68	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon,  maxIterations,  scaleFactor);	  Double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	55	None	replace
69	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  small);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  small);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon,  maxIterations,  small);	  Double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	55	None	replace
70	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  0);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon,  maxIterations,  0);	  Double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	55	None	replace
71	[BUG]  [BUGGY]  double  cPrev  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  hPrev  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cPrev  =  getA(0,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cPrev  =  getA(0,  epsilon);	  double    cPrev    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	72	None	replace
72	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	53	None	replace
73	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon,  maxIterations,  scaleFactor);	  double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	53	None	replace
74	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  small);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  small);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon,  maxIterations,  small);	  double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	53	None	replace
75	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  0);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon,  maxIterations,  0);	  double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	53	None	replace
76	[BUG]  [BUGGY]  int  n  =  getScaleFactor(int,  x,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getScaleFactor(int,  x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor(int,  x,  epsilon,  maxIterations);	  int    n    =    getScaleFactor(short,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	59	None	replace
77	[BUG]  [BUGGY]  int  n  =  this.scaleFactor.calculateScale(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  this.scaleFactor.calculateScale(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  this.scaleFactor.calculateScale(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.calculateScale(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	86	None	replace
78	[BUG]  [BUGGY]  int  n  =  small.calculateScale(x,  epsilon,  maxIterations);  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  small.calculateScale(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  small.calculateScale(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.calculateScale(x,    epsilon,    maxIterations);    	non-compiled	[CE]  double  cannot  be  dereferenced	86	None	replace
79	[BUG]  [BUGGY]  int  n  =  size.calculateScale(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  size  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  size.calculateScale(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  size.calculateScale(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.calculateScale(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  size	86	None	replace
80	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  small,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  small,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor().evaluate(x,  small,  epsilon,  maxIterations);	  int    n    =    getScaleFactor().evaluate(small,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
81	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon,  small);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon,  small);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon,  small);	  double    hPrev    =    getA(x,    small,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	56	None	replace
82	[BUG]  [BUGGY]  double  hPrev  =  getA(short,  x,  epsilon);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(short,  x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(short,  x,  epsilon);	  double    hPrev    =    getA(x,    small,    epsilon);    	non-compiled	[CE]  '.class'  expected	56	None	replace
83	[BUG]  [BUGGY]  double  n  =  getA(0,  x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(0,  x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(0,  x,  epsilon,  maxIterations);	  double    n    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	45	None	replace
84	[BUG]  [BUGGY]  double  n  =  getA(1,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(1,  x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(1,  x,  epsilon);	  double    n    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	45	None	replace
85	[BUG]  [BUGGY]  double  n  =  getA(0,  x,  small,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(0,  x,  small,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(0,  x,  small,  epsilon);	  double    n    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	45	None	replace
86	[BUG]  [BUGGY]  double  x  =  getA(0,  epsilon  +  1);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  epsilon  +  1);	  double    hPrev    =    getA(0,    x    +    1);    double    x    =    getA(0,    x    +    1);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	71	None	replace
87	[BUG]  [BUGGY]  double  x  =  getA(0,  x  +  1);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0,  x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  x  +  1);	  double    hPrev    =    getA(0,    x    +    1);    double    x    =    getA(0,    x    +    1);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	71	None	replace
88	[BUG]  [BUGGY]  Double  x  =  getA(0,  epsilon  +  1);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  x  =  getA(0,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  x  =  getA(0,  epsilon  +  1);	  double    hPrev    =    getA(0,    x    +    1);    double    x    =    getA(0,    x    +    1);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	71	None	replace
89	[BUG]  [BUGGY]  double  x  =  getA(0,  y  +  1);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0,  y  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  y  +  1);	  double    hPrev    =    getA(0,    x    +    1);    double    x    =    getA(0,    x    +    1);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	71	None	replace
90	[BUG]  [BUGGY]  Double  hPrev  =  getScaleFactor(x,  epsilon);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getScaleFactor(x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getScaleFactor(x,  epsilon);	  double    hPrev    =    getScaleFactor(small,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
91	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(y,  epsilon);  [CE]  cannot  find  symbol  y  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(y,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(y,  epsilon);	  double    hPrev    =    getScaleFactor(small,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  y	32	None	replace
92	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x  +  1));  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  x  +  1));  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  x  +  1));	  double    hPrev    =    getA(0,    x    +    1);    double    hPrev    =    getA(0,    x    +    1));    	non-compiled	[CE]  ';'  expected	8	None	replace
93	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(x,  epsilon  +  1);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(x,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(x,  epsilon  +  1);	  double    hPrev    =    getScaleFactor(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
94	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  x  +  2);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  x  +  2);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  x  +  2);	  double    hPrev    =    getScaleFactor(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
95	[BUG]  [BUGGY]  Double  x  =  getA(0,  epsilon);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  x  =  getA(0,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  x  =  getA(0,  epsilon);	  double    x    =    getA(0,    small);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	10	None	replace
96	[BUG]  [BUGGY]  double  epsilon  =  getA(0,  x);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  epsilon  =  getA(0,  x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  epsilon  =  getA(0,  x);	  double    dPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
97	[BUG]  [BUGGY]  double  cN  =  getA(1,  epsilon);  [CE]  cannot  find  symbol  hPrev  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getA(1,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(1,  epsilon);	  double    cN    =    getA(1,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	92	None	replace
98	[BUG]  [BUGGY]  double  cN  =  getA(1,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getA(1,  x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(1,  x,  epsilon);	  double    cN    =    getA(1,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	92	None	replace
99	[BUG]  [BUGGY]  int  n  =  size()  +  1;  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  size()  +  1;  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  size()  +  1;	  int    n    =    size();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
100	[BUG]  [BUGGY]  int  n  =  scaleFactor.size();  [CE]  cannot  find  symbol  scaleFactor  [FE]                            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  scaleFactor.size();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  scaleFactor.size();	  int    n    =    size();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	30	None	replace
101	[BUG]  [BUGGY]  int  n  =  size()  -  1;  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  size()  -  1;  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  size()  -  1;	  int    n    =    size();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
102	[BUG]  [BUGGY]  double  hPrev  =  getA(a,  b,  epsilon);  [CE]  cannot  find  symbol  a  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(a,  b,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(a,  b,  epsilon);	  double    hPrev    =    getA(a,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  a	83	None	replace
103	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    double    hPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	47	None	replace
104	[BUG]  [BUGGY]  int  n  =  small.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  small.doubleValue();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  small.doubleValue();	  int    n    =    epsilon.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	27	None	replace
105	[BUG]  [BUGGY]  double  n  =  epsilon.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  epsilon.doubleValue();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  epsilon.doubleValue();	  int    n    =    epsilon.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	27	None	replace
106	[BUG]  [BUGGY]  int  n  =  x.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  x.doubleValue();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  x.doubleValue();	  int    n    =    epsilon.doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	27	None	replace
107	[BUG]  [BUGGY]  int  n  =  this.scaleFactor.calculate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  this.scaleFactor.calculate(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  this.scaleFactor.calculate(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.calculate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	74	None	replace
108	[BUG]  [BUGGY]  int  n  =  small.calculate(x,  epsilon,  maxIterations);  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  small.calculate(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  small.calculate(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.calculate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  double  cannot  be  dereferenced	74	None	replace
109	[BUG]  [BUGGY]  int  n  =  scaleFactor.calculate(x,  small,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  scaleFactor.calculate(x,  small,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  scaleFactor.calculate(x,  small,  maxIterations);	  int    n    =    scaleFactor.calculate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	74	None	replace
110	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(small,  x);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(small,  x);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(small,  x);	  double    hPrev    =    getScaleFactor(x,    small);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
111	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(short,  x);  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(short,  x);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(short,  x);	  double    hPrev    =    getScaleFactor(x,    small);    	non-compiled	[CE]  '.class'  expected	33	None	replace
112	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getB(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	add	double  hPrev  =  getB(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    double    hPrev    =    getB(0,    epsilon);    	compilable	  [FE]  OutOfRangeException  	79	9	replace
113	[BUG]  [BUGGY]  double  hPrev  =  getB(0,  epsilon);  [FE]  OutOfRangeException  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getB(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getB(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    double    hPrev    =    getB(0,    epsilon);    	compilable	  [FE]  OutOfRangeException  	79	9	replace
114	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon);  double  hPrev  =  getB(0,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon);  double  hPrev  =  getB(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon);  double  hPrev  =  getB(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    double    hPrev    =    getB(0,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	79	None	replace
115	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon);  double  hPrev  =  getB(0,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(x,  epsilon);  double  hPrev  =  getB(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon);  double  hPrev  =  getB(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    double    hPrev    =    getB(0,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	79	None	replace
116	[BUG]  [BUGGY]  Double  hPrev  =  getW(small,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getW(small,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getW(small,  epsilon,  maxIterations);	  Double    hPrev    =    getW(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
117	[BUG]  [BUGGY]  Double  hPrev  =  getW(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getW(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getW(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  Double    hPrev    =    getW(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
118	[BUG]  [BUGGY]  Double  hPrev  =  getW(short,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getW(short,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getW(short,  epsilon,  maxIterations);	  Double    hPrev    =    getW(x,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	65	None	replace
119	[BUG]  [BUGGY]  double  x  =  getA(0.0,  small);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0.0,  small);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0.0,  small);	  double    x    =    getA(0.0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	13	None	replace
120	[BUG]  [BUGGY]  double  x  =  getA(0.0,  epsilon,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0.0,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0.0,  epsilon,  maxIterations);	  double    x    =    getA(0.0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	13	None	replace
121	[BUG]  [BUGGY]  double  x  =  getA(1.0,  epsilon);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(1.0,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(1.0,  epsilon);	  double    x    =    getA(0.0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	13	None	replace
122	[BUG]  [BUGGY]  double  epsilon  =  getW(x,  epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  epsilon  =  getW(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  epsilon  =  getW(x,  epsilon,  maxIterations);	  double    epsilon    =    getW(x,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	23	None	replace
123	[BUG]  [BUGGY]  double  epsilon  =  getW(x,  small);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  epsilon  =  getW(x,  small);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  epsilon  =  getW(x,  small);	  double    epsilon    =    getW(x,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	23	None	replace
124	[BUG]  [BUGGY]  Double  epsilon  =  getW(x,  epsilon,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  epsilon  =  getW(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  epsilon  =  getW(x,  epsilon,  maxIterations);	  double    epsilon    =    getW(x,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	23	None	replace
125	[BUG]  [BUGGY]  double  epsilon  =  getW(x,  maxIterations);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  epsilon  =  getW(x,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  epsilon  =  getW(x,  maxIterations);	  double    epsilon    =    getW(x,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	23	None	replace
126	[BUG]  [BUGGY]  double  x  =  getA(1,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(1,  x),  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(1,  x),  epsilon,  maxIterations);	  double    x    =    getA(0,    x),    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	87	None	replace
127	[BUG]  [BUGGY]  double  x  =  getA(0,  small),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0,  small),  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  small),  epsilon,  maxIterations);	  double    x    =    getA(0,    x),    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	87	None	replace
128	[BUG]  [BUGGY]  double  x  =  getA(0,  x),  epsilon,  maxIterations  +  1);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0,  x),  epsilon,  maxIterations  +  1);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  x),  epsilon,  maxIterations  +  1);	  double    x    =    getA(0,    x),    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	87	None	replace
129	[BUG]  [BUGGY]  double  hPrev  =  getWS(x,  epsilon);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getWS(x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getWS(x,  epsilon);	  double    hPrev    =    getW(short,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
130	[BUG]  [BUGGY]  double  hPrev  =  getHeight(x,  epsilon);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getHeight(x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getHeight(x,  epsilon);	  double    hPrev    =    getW(short,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
131	[BUG]  [BUGGY]  int  n  =  small.intValue();  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  small.intValue();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  small.intValue();	  int    n    =    epsilon.intValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
132	[BUG]  [BUGGY]  int  n  =  scaleFactor.intValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  scaleFactor.intValue();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  scaleFactor.intValue();	  int    n    =    epsilon.intValue();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	28	None	replace
133	[BUG]  [BUGGY]  int  n  =  x.intValue();  [CE]  double  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  x.intValue();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  x.intValue();	  int    n    =    epsilon.intValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
134	[BUG]  [BUGGY]  Double  hPrev  =  getA(0,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(0,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(0,  epsilon,  maxIterations);	  double    hPrev    =    getA(0,    epsilon);    Double    hPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	48	None	replace
135	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations  +  1);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon,  maxIterations  +  1);	  double    hPrev    =    getA(x,    epsilon    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	14	None	replace
136	[BUG]  [BUGGY]  int  n  =  scaleFactor.getMaximumScale();  [CE]  cannot  find  symbol  scaleFactor  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  scaleFactor.getMaximumScale();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  scaleFactor.getMaximumScale();	  int    n    =    epsilon.getMaximumScale();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	29	None	replace
137	[BUG]  [BUGGY]  int  n  =  epsilon.getMinimumScale();  [CE]  double  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  epsilon.getMinimumScale();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  epsilon.getMinimumScale();	  int    n    =    epsilon.getMaximumScale();    	non-compiled	[CE]  double  cannot  be  dereferenced	29	None	replace
138	[BUG]  [BUGGY]  int  n  =  size.getMaximumScale();  [CE]  cannot  find  symbol  size  [FE]                            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  size.getMaximumScale();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  size.getMaximumScale();	  int    n    =    epsilon.getMaximumScale();    	non-compiled	[CE]  cannot  find  symbol  size	29	None	replace
139	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  small,  epsilon);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  small,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  small,  epsilon);	  double    hPrev    =    getScaleFactor(0,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
140	[BUG]  [BUGGY]  Double  hPrev  =  getScaleFactor(0,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getScaleFactor(0,  x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getScaleFactor(0,  x,  epsilon,  maxIterations);	  double    hPrev    =    getScaleFactor(0,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
141	[BUG]  [BUGGY]  double  hPrev  =  getW(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getW(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getW(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  double    hPrev    =    getW(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
142	[BUG]  [BUGGY]  double  hPrev  =  getW(small,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getW(small,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getW(small,  epsilon,  maxIterations);	  double    hPrev    =    getW(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
143	[BUG]  [BUGGY]  double  hPrev  =  getW(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getW(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getW(x,  epsilon,  maxIterations,  scaleFactor);	  double    hPrev    =    getW(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	21	None	replace
144	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(y,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  y  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getScaleFactor().evaluate(y,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor().evaluate(y,  epsilon,  maxIterations);	  int    n    =    getScaleFactor().evaluate(x,    scaleFactor,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  y	68	None	replace
145	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  small);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  small);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  small);	  int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	42	None	replace
146	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	42	None	replace
147	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  large);  [CE]  cannot  find  symbol  large  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  large);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  large);	  int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  large	42	None	replace
148	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  big);  [CE]  cannot  find  symbol  big  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  big);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON,  big);	  int    n    =    getA(x,    epsilon,    maxIterations,    DEFAULT_EPSILON);    	non-compiled	[CE]  cannot  find  symbol  big	42	None	replace
149	[BUG]  [BUGGY]  int  n  =  getA(small,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getA(small,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(small,  epsilon,  maxIterations);	  int    n    =    getA(x,    epsilon,    maxIterations,    small);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	43	None	replace
150	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  small,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  small,  DEFAULT_EPSILON);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  small,  DEFAULT_EPSILON);	  int    n    =    getA(x,    epsilon,    maxIterations,    small);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	43	None	replace
151	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  1);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  1);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  1);	  int    n    =    getA(x,    epsilon,    maxIterations,    small);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	43	None	replace
152	[BUG]  [BUGGY]  Double  n  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  hPrev  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  n  =  getA(0,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  n  =  getA(0,  epsilon);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	81	None	replace
153	[BUG]  [BUGGY]  Double  n  =  getA(0,  small);  [CE]  cannot  find  symbol  hPrev  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  n  =  getA(0,  small);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  n  =  getA(0,  small);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	81	None	replace
154	[BUG]  [BUGGY]  Double  n  =  getN(0,  x);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  n  =  getN(0,  x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  n  =  getN(0,  x);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
155	[BUG]  [BUGGY]  double  hPrev  =  getA(small,  x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(small,  x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(small,  x,  epsilon,  maxIterations);	  double    hPrev    =    getA(small,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	54	None	replace
156	[BUG]  [BUGGY]  double  hPrev  =  getA(small,  epsilon,  x);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(small,  epsilon,  x);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(small,  epsilon,  x);	  double    hPrev    =    getA(small,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	54	None	replace
157	[BUG]  [BUGGY]  double  cN  =  getA(0,  x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getA(0,  x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(0,  x,  epsilon,  maxIterations);	  double    cN    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	19	None	replace
158	[BUG]  [BUGGY]  double  cN  =  getA(0,  small,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getA(0,  small,  x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(0,  small,  x,  epsilon);	  double    cN    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	19	None	replace
159	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  scalePower);  [CE]  cannot  find  symbol  scalePower  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  scalePower);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  scalePower);	  int    n    =    getA(x,    epsilon,    maxIterations,    scaleFactor);    	non-compiled	[CE]  cannot  find  symbol  scalePower	40	None	replace
160	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(x,  maxIterations);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(x,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(x,  maxIterations);	  double    hPrev    =    getScaleFactor(x,    scaleFactor);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
161	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(small,  x,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getScaleFactor().evaluate(small,  x,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor().evaluate(small,  x,  maxIterations);	  int    n    =    getScaleFactor().evaluate(x,    small,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
162	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(cN,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  cN  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getScaleFactor().evaluate(cN,  x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor().evaluate(cN,  x,  epsilon,  maxIterations);	  int    n    =    getScaleFactor().evaluate(x,    small,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  cN	1	None	replace
163	[BUG]  [BUGGY]  Double  hPrev  =  getW(x,  epsilon);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getW(x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getW(x,  epsilon);	  double    hPrev    =    getW(small,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
164	[BUG]  [BUGGY]  double  n  =  getA(x);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(x);	  double    n    =    getA(0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	51	None	replace
165	[BUG]  [BUGGY]  double  n  =  getA(0).evaluate(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(0).evaluate(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(0).evaluate(x,  epsilon,  maxIterations);	  double    n    =    getA(0);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	51	None	replace
166	[BUG]  [BUGGY]  double  hPrev  =  getB(x,  epsilon,  maxIterations);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getB(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getB(x,  epsilon,  maxIterations);	  double    hPrev    =    getB(x,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	36	None	replace
167	[BUG]  [BUGGY]  double  hPrev  =  getB(small,  x,  epsilon);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getB(small,  x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getB(small,  x,  epsilon);	  double    hPrev    =    getB(x,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	36	None	replace
168	[BUG]  [BUGGY]  double  hPrev  =  getB(short,  x,  epsilon);  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getB(short,  x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getB(short,  x,  epsilon);	  double    hPrev    =    getB(x,    epsilon);    	non-compiled	[CE]  '.class'  expected	36	None	replace
169	[BUG]  [BUGGY]  double  hPrev  =  getB(x,  small,  epsilon);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getB(x,  small,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getB(x,  small,  epsilon);	  double    hPrev    =    getB(x,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	36	None	replace
170	[BUG]  [BUGGY]  int  n  =  getA(0,  epsilon);  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    int    n    =    getA(0,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	89	None	replace
171	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon);  int  n  =  getA(0,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  epsilon);  int  n  =  getA(0,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  epsilon);  int  n  =  getA(0,  epsilon,  maxIterations);	  double    hPrev    =    getA(0,    epsilon);    int    n    =    getA(0,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	89	None	replace
172	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x);  double  epsilon  =  getA(0,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  x);  double  epsilon  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  x);  double  epsilon  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    double    epsilon    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	78	None	replace
173	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon);  double  epsilon  =  getA(0,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon);  double  epsilon  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon);  double  epsilon  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    double    epsilon    =    getA(0,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	78	None	replace
174	[BUG]  [BUGGY]  Double  epsilon  =  getA(0,  x);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  epsilon  =  getA(0,  x);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  epsilon  =  getA(0,  x);	  double    hPrev    =    getA(0,    epsilon);    double    epsilon    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	78	None	replace
175	[BUG]  [BUGGY]  double  hPrev  =  getX(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getX(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(x,  epsilon,  maxIterations);	  double    hPrev    =    getX(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
176	[BUG]  [BUGGY]  double  hPrev  =  getY(x,  epsilon);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getY(x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getY(x,  epsilon);	  double    hPrev    =    getX(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
177	[BUG]  [BUGGY]  double  hPrev  =  getX(x,  small);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getX(x,  small);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(x,  small);	  double    hPrev    =    getX(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
178	[BUG]  [BUGGY]  double  epsilon  =  getX(x,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  epsilon  =  getX(x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  epsilon  =  getX(x,  epsilon);	  double    hPrev    =    getX(x,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	62	None	replace
179	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  dPrev  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  dPrev  =  getA(x,  epsilon,  maxIterations);	  double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	4	None	replace
180	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  small,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  dPrev  =  getA(x,  small,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  dPrev  =  getA(x,  small,  epsilon);	  double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	4	None	replace
181	[BUG]  [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  dPrev  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  dPrev  =  getA(x,  epsilon,  maxIterations);	  double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	4	None	replace
182	[BUG]  [BUGGY]  double  dPrev  =  getA(short,  x,  epsilon);  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  dPrev  =  getA(short,  x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  dPrev  =  getA(short,  x,  epsilon);	  double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  '.class'  expected	4	None	replace
183	[BUG]  [BUGGY]  int  n  =  getScaleFactor(x,  small,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getScaleFactor(x,  small,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor(x,  small,  epsilon,  maxIterations);	  int    n    =    getScaleFactor(small,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
184	[BUG]  [BUGGY]  int  n  =  getScaleFactor(small,  x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getScaleFactor(small,  x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor(small,  x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  int    n    =    getScaleFactor(small,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
185	[BUG]  [BUGGY]  double  x  =  getA(0,  small,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0,  small,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  small,  maxIterations);	  double    x    =    getA(0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	11	None	replace
186	[BUG]  [BUGGY]  double  x  =  getA(0,  small,  epsilon,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0,  small,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  small,  epsilon,  maxIterations);	  double    x    =    getA(0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	11	None	replace
187	[BUG]  [BUGGY]  double  x  =  getX(0,  small);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getX(0,  small);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getX(0,  small);	  double    x    =    getX(0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	69	None	replace
188	[BUG]  [BUGGY]  double  x  =  getX(0,  epsilon,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getX(0,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getX(0,  epsilon,  maxIterations);	  double    x    =    getX(0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	69	None	replace
189	[BUG]  [BUGGY]  double  x  =  getX(1,  epsilon);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getX(1,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getX(1,  epsilon);	  double    x    =    getX(0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	69	None	replace
190	[BUG]  [BUGGY]  double  x  =  getX(0.0,  epsilon);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getX(0.0,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getX(0.0,  epsilon);	  double    x    =    getX(0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	69	None	replace
191	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	  double    hPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
192	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(small,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(small,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(small,  epsilon,  maxIterations);	  double    hPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
193	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations,  scaleFactor);	  double    hPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	31	None	replace
194	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);	  double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	41	None	replace
195	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  small);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  small);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(x,  epsilon,  maxIterations,  small);	  double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	41	None	replace
196	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  0);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(x,  epsilon,  maxIterations,  0);	  double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	41	None	replace
197	[BUG]  [BUGGY]  double  cN  =  getA(0,  small);  [CE]  cannot  find  symbol  hPrev  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getA(0,  small);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(0,  small);	  double    cN    =    getA(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  hPrev	18	None	replace
198	[BUG]  [BUGGY]  double  n  =  getA0(x,  epsilon);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA0(x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA0(x,  epsilon);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
199	[BUG]  [BUGGY]  double  n  =  getA0(0,  x),  epsilon);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA0(0,  x),  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA0(0,  x),  epsilon);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  ';'  expected	52	None	replace
200	[BUG]  [BUGGY]  double  n  =  getA0(0,  epsilon);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA0(0,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA0(0,  epsilon);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
201	[BUG]  [BUGGY]  double  x  =  getA(0,  n,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0,  n,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  n,  maxIterations);	  double    x    =    getA(0,    n);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	25	None	replace
202	[BUG]  [BUGGY]  double  hPrev  =  getW(x,  epsilon,  maxIterations  +  1);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getW(x,  epsilon,  maxIterations  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getW(x,  epsilon,  maxIterations  +  1);	  double    hPrev    =    getW(x,    epsilon    +    1);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
203	[BUG]  [BUGGY]  double  hPrev  =  getW(x,  epsilon  +  2);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getW(x,  epsilon  +  2);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getW(x,  epsilon  +  2);	  double    hPrev    =    getW(x,    epsilon    +    1);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
204	[BUG]  [BUGGY]  double  hPrev  =  getW(x,  epsilon  +  1,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getW(x,  epsilon  +  1,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getW(x,  epsilon  +  1,  maxIterations);	  double    hPrev    =    getW(x,    epsilon    +    1);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
205	[BUG]  [BUGGY]  double  hPrev  =  calculateW(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  calculateW(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  calculateW(x,  epsilon,  maxIterations);	  double    hPrev    =    calculateW(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
206	[BUG]  [BUGGY]  double  hPrev  =  calculateW(small,  epsilon);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  calculateW(small,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  calculateW(small,  epsilon);	  double    hPrev    =    calculateW(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
207	[BUG]  [BUGGY]  double  hPrev  =  calculateW(maxIterations,  epsilon);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  calculateW(maxIterations,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  calculateW(maxIterations,  epsilon);	  double    hPrev    =    calculateW(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
208	[BUG]  [BUGGY]  double  hPrev  =  calculateW(short,  epsilon);  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  calculateW(short,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  calculateW(short,  epsilon);	  double    hPrev    =    calculateW(x,    epsilon);    	non-compiled	[CE]  '.class'  expected	91	None	replace
209	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  dPrev  =  getA(0,  x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  dPrev  =  getA(0,  x,  epsilon,  maxIterations);	  double    dPrev    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	3	None	replace
210	[BUG]  [BUGGY]  Double  dPrev  =  getA(0,  x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  dPrev  =  getA(0,  x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  dPrev  =  getA(0,  x,  epsilon,  maxIterations);	  double    dPrev    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	3	None	replace
211	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  x,  small,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  dPrev  =  getA(0,  x,  small,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  dPrev  =  getA(0,  x,  small,  epsilon);	  double    dPrev    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	3	None	replace
212	[BUG]  [BUGGY]  double  dPrev  =  getA(1,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  dPrev  =  getA(1,  x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  dPrev  =  getA(1,  x,  epsilon);	  double    dPrev    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	3	None	replace
213	[BUG]  [BUGGY]  double  hPrev  =  getA(x  +  1,  epsilon  +  1);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x  +  1,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x  +  1,  epsilon  +  1);	  double    hPrev    =    getA(0,    epsilon    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
214	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  epsilon  +  1);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  epsilon  +  1);	  double    hPrev    =    getA(0,    epsilon    +    1);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
215	[BUG]  [BUGGY]  int  n  =  small.equals(x,  epsilon);  [CE]  double  cannot  be  dereferenced  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  small.equals(x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  small.equals(x,  epsilon);	  int    n    =    scaleFactor.equals(x,    epsilon);    	non-compiled	[CE]  double  cannot  be  dereferenced	76	None	replace
216	[BUG]  [BUGGY]  int  n  =  this.scaleFactor.equals(x,  epsilon);  [CE]  cannot  find  symbol  scaleFactor  [FE]                            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  this.scaleFactor.equals(x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  this.scaleFactor.equals(x,  epsilon);	  int    n    =    scaleFactor.equals(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	76	None	replace
217	[BUG]  [BUGGY]  int  n  =  size.equals(x,  epsilon);  [CE]  cannot  find  symbol  size  [FE]                              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  size.equals(x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  size.equals(x,  epsilon);	  int    n    =    scaleFactor.equals(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  size	76	None	replace
218	[BUG]  [BUGGY]  n  =  getA(0,  x  +  1);  n  =  getA(0,  x  +  1);  [CE]  cannot  find  symbol  n  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  n  =  getA(0,  x  +  1);  n  =  getA(0,  x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	n  =  getA(0,  x  +  1);  n  =  getA(0,  x  +  1);	  double    hPrev    =    getA(0,    x    +    1);    hPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol  n	9	None	replace
219	[BUG]  [BUGGY]  hPrev  =  getA(0,  x  +  1);  [CE]  cannot  find  symbol  hPrev  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  hPrev  =  getA(0,  x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	hPrev  =  getA(0,  x  +  1);	  double    hPrev    =    getA(0,    x    +    1);    hPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol  hPrev	9	None	replace
220	[BUG]  [BUGGY]  int  hPrev  =  getA(0,  x  +  1);  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  hPrev  =  getA(0,  x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  hPrev  =  getA(0,  x  +  1);	  double    hPrev    =    getA(0,    x    +    1);    hPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  possible  loss  of  precision	9	None	replace
221	[BUG]  [BUGGY]  int  hPrev  =  getA(0,  epsilon);  int  n  =  getA(0,  epsilon);  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  hPrev  =  getA(0,  epsilon);  int  n  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  hPrev  =  getA(0,  epsilon);  int  n  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    int    n    =    getA(0,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	89	None	replace
222	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(short,  x,  maxIterations);  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getScaleFactor().evaluate(short,  x,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor().evaluate(short,  x,  maxIterations);	  int    n    =    getScaleFactor().evaluate(x,    small,    maxIterations);    	non-compiled	[CE]  '.class'  expected	1	None	replace
223	[BUG]  [BUGGY]  double  hN  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  hPrev  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hN  =  getA(0,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hN  =  getA(0,  epsilon);	  double    dPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  hPrev	5	None	replace
224	[BUG]  [BUGGY]  double  epsilon  =  getA(0,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  epsilon  =  getA(0,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  epsilon  =  getA(0,  epsilon);	  double    dPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	5	None	replace
225	[BUG]  [BUGGY]  n  =  getA(x  +  1);  n  =  getA(0,  x  +  1);  [CE]  cannot  find  symbol  n  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  n  =  getA(x  +  1);  n  =  getA(0,  x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	n  =  getA(x  +  1);  n  =  getA(0,  x  +  1);	  double    hPrev    =    getA(0,    x    +    1);    hPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol  n	9	None	replace
226	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  size);  [CE]  cannot  find  symbol  size  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  size);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(x,  epsilon,  maxIterations,  size);	  double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  size	41	None	replace
227	[BUG]  [BUGGY]  Double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations)+  1;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations)+  1;  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations)+  1;	  Double    hPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
228	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  1));  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  1));  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon  +  1));	  double    hPrev    =    getA(0,    x    +    1);    double    hPrev    =    getA(0,    x    +    1));    	non-compiled	[CE]  ';'  expected	8	None	replace
229	[BUG]  [BUGGY]  double  x  =  getA(1,  n);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(1,  n);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(1,  n);	  double    x    =    getA(0,    n);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	25	None	replace
230	[BUG]  [BUGGY]  double  x  =  getX(0,  n);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getX(0,  n);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getX(0,  n);	  double    x    =    getA(0,    n);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	25	None	replace
231	[BUG]  [BUGGY]  double  hPrev  =  getW(x,  epsilon,  maxIterations)+  1;  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getW(x,  epsilon,  maxIterations)+  1;  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getW(x,  epsilon,  maxIterations)+  1;	  double    hPrev    =    getW(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
232	[BUG]  [BUGGY]  int  n  =  size()  +  maxIterations;  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  size()  +  maxIterations;  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  size()  +  maxIterations;	  int    n    =    size();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
233	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon,  maxIterations,  epsilon);	  Double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	55	None	replace
234	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  cN);  [CE]  cannot  find  symbol  cN  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  cN);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon,  maxIterations,  cN);	  Double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  cN	55	None	replace
235	[BUG]  [BUGGY]  double  hPrev  =  getA(x);  double  epsilon  =  getA(0,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x);  double  epsilon  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x);  double  epsilon  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    double    epsilon    =    getA(0,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	78	None	replace
236	[BUG]  [BUGGY]  int  n  =  DEFAULT_EPSILON.equals(x,  epsilon,  maxIterations);  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  DEFAULT_EPSILON.equals(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  DEFAULT_EPSILON.equals(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.equals(x,    epsilon,    maxIterations);    	non-compiled	[CE]  double  cannot  be  dereferenced	75	None	replace
237	[BUG]  [BUGGY]  double  n  =  getB(0,  x);  [CE]  cannot  find  symbol  hPrev  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getB(0,  x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getB(0,  x);	  float    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	82	None	replace
238	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  double  hPrev  =  getB(0,  epsilon  +  1);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  double  hPrev  =  getB(0,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon    +    1);    double  hPrev  =  getB(0,  epsilon  +  1);	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	15	None	add
239	[BUG]  [BUGGY]  double  hPrev  =  getH(x,  epsilon);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getH(x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getH(x,  epsilon);	  double    hPrev    =    getW(short,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
240	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon,  maxIterations,  epsilon);	  double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	53	None	replace
241	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  cN);  [CE]  cannot  find  symbol  cN  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  cN);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon,  maxIterations,  cN);	  double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  cN	53	None	replace
242	[BUG]  [BUGGY]  double  hPrev  =  getA(x  +  1);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x  +  1);	  double    hPrev    =    getA(0,    epsilon    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
243	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations  +  1);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon,  maxIterations  +  1);	  double    hPrev    =    getA(x,    epsilon    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	14	None	replace
244	[BUG]  [BUGGY]  double  y  =  getY(0,  epsilon);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  y  =  getY(0,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  y  =  getY(0,  epsilon);	  double    x    =    getA(0,    y);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
245	[BUG]  [BUGGY]  double  x  =  getX(0,  y);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getX(0,  y);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getX(0,  y);	  double    x    =    getA(0,    y);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	26	None	replace
246	[BUG]  [BUGGY]  Double  hPrev  =  calculateW(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  calculateW(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  calculateW(x,  epsilon,  maxIterations);	  double    hPrev    =    calculateW(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
247	[BUG]  [BUGGY]  double  hPrev  =  calculateH(x,  epsilon);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  calculateH(x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  calculateH(x,  epsilon);	  double    hPrev    =    calculateW(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
248	[BUG]  [BUGGY]  int  n  =  this.lastScaleFactor.calculateScale(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  lastScaleFactor  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  this.lastScaleFactor.calculateScale(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  this.lastScaleFactor.calculateScale(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.calculateScale(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	86	None	replace
249	[BUG]  [BUGGY]  int  n  =  sizeFactor.calculateScale(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  sizeFactor  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  sizeFactor.calculateScale(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  sizeFactor.calculateScale(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.calculateScale(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  sizeFactor	86	None	replace
250	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  x  +  1,  maxIterations,  epsilon);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  x  +  1,  maxIterations,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  x  +  1,  maxIterations,  epsilon);	  double    hPrev    =    getScaleFactor(0,    x    +    1,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
251	[BUG]  [BUGGY]  int  n  =  epsilon.intValue()  +  maxIterations;  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  epsilon.intValue()  +  maxIterations;  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  epsilon.intValue()  +  maxIterations;	  int    n    =    epsilon.intValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
252	[BUG]  [BUGGY]  int  n  =  epsilon.equals(x,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  epsilon.equals(x,  scaleFactor);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  epsilon.equals(x,  scaleFactor);	  int    n    =    scaleFactor.equals(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	76	None	replace
253	[BUG]  [BUGGY]  double  n  =  getA0(1,  x);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA0(1,  x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA0(1,  x);	  double    n    =    getA0(0,    x);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
254	[BUG]  [BUGGY]  Double  hPrev  =  getX(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getX(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getX(x,  epsilon,  maxIterations);	  double    hPrev    =    getX(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
255	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  0);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  0);	  int    n    =    getA(x,    epsilon,    maxIterations,    small);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	43	None	replace
256	[BUG]  [BUGGY]  double  hPrev  =  getX(0,  x  +  1,  maxIterations);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getX(0,  x  +  1,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(0,  x  +  1,  maxIterations);	  double    hPrev    =    getX(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
257	[BUG]  [BUGGY]  Double  n  =  getA(0,  x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  n  =  getA(0,  x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  n  =  getA(0,  x,  epsilon,  maxIterations);	  double    n    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	45	None	replace
258	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  maxIterations);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  maxIterations);	  double    hPrev    =    getScaleFactor(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
259	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(small,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getScaleFactor().evaluate(small,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor().evaluate(small,  epsilon,  maxIterations);	  int    n    =    getScaleFactor().evaluate(x,    scaleFactor,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
260	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	add	Double  hPrev  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    Double    hPrev    =    getA(0,    epsilon);    	compilable	  [FE]  AssertionError  	48	2	replace
261	[BUG]  [BUGGY]  Double  hPrev  =  getA(0,  epsilon);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    Double    hPrev    =    getA(0,    epsilon);    	compilable	  [FE]  AssertionError  	48	2	replace
262	[BUG]  [BUGGY]  int  n  =  epsilon.getMaximumScale()  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  epsilon.getMaximumScale()  +  1;  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  epsilon.getMaximumScale()  +  1;	  int    n    =    epsilon.getMaximumScale();    	non-compiled	[CE]  double  cannot  be  dereferenced	29	None	replace
263	[BUG]  [BUGGY]  double  n  =  getB(0,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getB(0,  x),  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getB(0,  x),  epsilon,  maxIterations);	  double    n    =    getA(0,    x),    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	85	None	replace
264	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  small);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  small);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon,  small);	  double    hPrev    =    getA(x,    small,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	56	None	replace
265	[BUG]  [BUGGY]  Double  cN  =  getA(0,  x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  cN  =  getA(0,  x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  cN  =  getA(0,  x,  epsilon,  maxIterations);	  double    cN    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	19	None	replace
266	[BUG]  [BUGGY]  int  n  =  sizeFactor.evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  sizeFactor  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  sizeFactor.evaluate(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  sizeFactor.evaluate(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  sizeFactor	73	None	replace
267	[BUG]  [BUGGY]  int  n  =  evaluate(x,  epsilon,  maxIterations);  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  evaluate(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  evaluate(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  possible  loss  of  precision	73	None	replace
268	[BUG]  [BUGGY]  Double  n  =  getA(0,  x  +  1);  [CE]  cannot  find  symbol  hPrev  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  n  =  getA(0,  x  +  1);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  n  =  getA(0,  x  +  1);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	81	None	replace
269	[BUG]  [BUGGY]  Double  n  =  getA(1,  x);  [CE]  cannot  find  symbol  hPrev  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  n  =  getA(1,  x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  n  =  getA(1,  x);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	81	None	replace
270	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon);  int  epsilon  =  getA(0,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon);  int  epsilon  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon);  int  epsilon  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    int    epsilon    =    getA(0,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	49	None	replace
271	[BUG]  [BUGGY]  Double  hPrev  =  getA(0,  x);  int  epsilon  =  getA(0,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(0,  x);  int  epsilon  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(0,  x);  int  epsilon  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    int    epsilon    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
272	[BUG]  [BUGGY]  int  n  =  sizeFactor.calculate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  sizeFactor  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  sizeFactor.calculate(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  sizeFactor.calculate(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.calculate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  sizeFactor	74	None	replace
273	[BUG]  [BUGGY]  int  n  =  this.lastScaleFactor.calculate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  lastScaleFactor  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  this.lastScaleFactor.calculate(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  this.lastScaleFactor.calculate(x,  epsilon,  maxIterations);	  int    n    =    scaleFactor.calculate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  lastScaleFactor	74	None	replace
274	[BUG]  [BUGGY]  double  cN  =  getC(0,  epsilon);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getC(0,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getC(0,  epsilon);	  double    cN    =    getA(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
275	[BUG]  [BUGGY]  int  n  =  scaleFactor.doubleValue();  [CE]  cannot  find  symbol  scaleFactor  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  scaleFactor.doubleValue();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  scaleFactor.doubleValue();	  int    n    =    epsilon.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	27	None	replace
276	[BUG]  [BUGGY]  double  cPrev  =  getC(0,  x);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cPrev  =  getC(0,  x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cPrev  =  getC(0,  x);	  double    cPrev    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
277	[BUG]  [BUGGY]  double  hN  =  getA(0,  x  +  1);  [CE]  cannot  find  symbol  hPrev  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hN  =  getA(0,  x  +  1);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hN  =  getA(0,  x  +  1);	  double    dPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol  hPrev	88	None	replace
278	[BUG]  [BUGGY]  double  x  =  getX(small,  epsilon);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getX(small,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getX(small,  epsilon);	  double    x    =    getX(0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	69	None	replace
279	[BUG]  [BUGGY]  double  x  =  getX(short,  epsilon);  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getX(short,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getX(short,  epsilon);	  double    x    =    getX(0,    epsilon);    	non-compiled	[CE]  '.class'  expected	69	None	replace
280	[BUG]  [BUGGY]  double  x  =  getX(0,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getX(0,  x),  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getX(0,  x),  epsilon,  maxIterations);	  double    x    =    getA(0,    x),    epsilon,    maxIterations);    	non-compiled	[CE]  ';'  expected	87	None	replace
281	[BUG]  [BUGGY]  Double  hPrev  =  getB(x,  epsilon,  maxIterations);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getB(x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getB(x,  epsilon,  maxIterations);	  double    hPrev    =    getB(x,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	36	None	replace
282	[BUG]  [BUGGY]  double  cN  =  getA(1,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getA(1,  x),  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(1,  x),  epsilon,  maxIterations);	  double    cN    =    getA(1,    x);    	non-compiled	[CE]  ';'  expected	92	None	replace
283	[BUG]  [BUGGY]  double  cN  =  getA(1,  x),  epsilon);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getA(1,  x),  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(1,  x),  epsilon);	  double    cN    =    getA(1,    x);    	non-compiled	[CE]  ';'  expected	92	None	replace
284	[BUG]  [BUGGY]  double  hPrev  =  getX(small,  epsilon);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getX(small,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(small,  epsilon);	  double    hPrev    =    getX(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
285	[BUG]  [BUGGY]  double  x  =  getA(0,  x,  epsilon,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0,  x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  x,  epsilon,  maxIterations);	  double    x    =    getA(0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	11	None	replace
286	[BUG]  [BUGGY]  double  x  =  getA(0,  y,  epsilon,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0,  y,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  y,  epsilon,  maxIterations);	  double    x    =    getA(0,    epsilon,    maxIterations);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	11	None	replace
287	[BUG]  [BUGGY]  double  hPrev  =  getB(a,  x,  epsilon);  [CE]  cannot  find  symbol  a  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getB(a,  x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getB(a,  x,  epsilon);	  double    hPrev    =    getB(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  a	36	None	replace
288	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0.0,  epsilon);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0.0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0.0,  epsilon);	  double    hPrev    =    getScaleFactor(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
289	[BUG]  [BUGGY]  double  hPrev  =  getA(a,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  a  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(a,  x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(a,  x,  epsilon,  maxIterations);	  double    hPrev    =    getA(x,    small,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  a	56	None	replace
290	[BUG]  [BUGGY]  double  cN  =  getA(0,  x,  small,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getA(0,  x,  small,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(0,  x,  small,  epsilon);	  double    cN    =    getA(0,    x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	19	None	replace
291	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  a);  [CE]  cannot  find  symbol  a  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations,  a);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon,  maxIterations,  a);	  Double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  a	55	None	replace
292	[BUG]  [BUGGY]  Double  hPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations);	  Double    hPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
293	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(short,  x,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getScaleFactor().evaluate(short,  x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor().evaluate(short,  x,  epsilon,  maxIterations);	  int    n    =    getScaleFactor().evaluate(x,    small,    maxIterations);    	non-compiled	[CE]  '.class'  expected	1	None	replace
294	[BUG]  [BUGGY]  double  n  =  epsilon.intValue();  [CE]  double  cannot  be  dereferenced  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  epsilon.intValue();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  epsilon.intValue();	  int    n    =    epsilon.intValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	28	None	replace
295	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x);  Double  hPrev  =  getA(0,  epsilon);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  x);  Double  hPrev  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  x);  Double  hPrev  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    Double    hPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	48	None	replace
296	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(x,  epsilon,  maxIterations,  epsilon);	  double    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	41	None	replace
297	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  double  hPrev  =  getA(0,  epsilon  +  1));  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  double  hPrev  =  getA(0,  epsilon  +  1));  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon    +    1);    double  hPrev  =  getA(0,  epsilon  +  1));	  	non-compiled	[CE]  ';'  expected	15	None	add
298	[BUG]  [BUGGY]  double  hPrev  =  getX(1,  x,  epsilon);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getX(1,  x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(1,  x,  epsilon);	  double    hPrev    =    getX(0,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
299	[BUG]  [BUGGY]  double  hPrev  =  getX(0,  y,  epsilon);  [CE]  cannot  find  symbol  y  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getX(0,  y,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(0,  y,  epsilon);	  double    hPrev    =    getX(0,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  y	61	None	replace
300	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(x,  DEFAULT_EPSILON);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(x,  DEFAULT_EPSILON);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(x,  DEFAULT_EPSILON);	  double    hPrev    =    getScaleFactor(x,    scaleFactor);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
301	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x);  int  n  =  getA(0,  epsilon);  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  x);  int  n  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  x);  int  n  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    int    n    =    getA(0,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	89	None	replace
302	[BUG]  [BUGGY]  Integer  epsilon  =  getA(0,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Integer  epsilon  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Integer  epsilon  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    int    epsilon    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	49	None	replace
303	[BUG]  [BUGGY]  int  n  =  this.scaleFactor.getMaximumScale();  [CE]  cannot  find  symbol  scaleFactor  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  this.scaleFactor.getMaximumScale();  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  this.scaleFactor.getMaximumScale();	  int    n    =    epsilon.getMaximumScale();    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	29	None	replace
304	[BUG]  [BUGGY]  int  n  =  scaleFactor.calculateScale(x,  small,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  scaleFactor.calculateScale(x,  small,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  scaleFactor.calculateScale(x,  small,  maxIterations);	  int    n    =    scaleFactor.calculateScale(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	86	None	replace
305	[BUG]  [BUGGY]  double  hPrev  =  getA(scale,  x,  epsilon);  [CE]  cannot  find  symbol  scale  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(scale,  x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(scale,  x,  epsilon);	  double    hPrev    =    getA(a,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scale	83	None	replace
306	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(small,  x,  epsilon);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(small,  x,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(small,  x,  epsilon);	  double    hPrev    =    getScaleFactor(small,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
307	[BUG]  [BUGGY]  double  x  =  getX(0,  x);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getX(0,  x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getX(0,  x);	  double    x    =    getX(0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	69	None	replace
308	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  y  +  1);  [CE]  cannot  find  symbol  y  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  y  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  y  +  1);	  double    hPrev    =    getA(0,    n    +    1);    	non-compiled	[CE]  cannot  find  symbol  y	17	None	replace
309	[BUG]  [BUGGY]  double  dPrev  =  getA(small,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  dPrev  =  getA(small,  x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  dPrev  =  getA(small,  x,  epsilon);	  double    dPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	4	None	replace
310	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  y,  epsilon);  [CE]  cannot  find  symbol  y  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(0,  y,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  y,  epsilon);	  double    hPrev    =    getScaleFactor(0,    x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  y	37	None	replace
311	[BUG]  [BUGGY]  double  cN  =  getA(a,  x,  epsilon);  [CE]  cannot  find  symbol  a  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cN  =  getA(a,  x,  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(a,  x,  epsilon);	  double    cN    =    getA(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  a	20	None	replace
312	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(small,  x,  epsilon,  maxIterations);	  double    hPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
313	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(short,  x,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getScaleFactor(short,  x,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(short,  x,  epsilon,  maxIterations);	  double    hPrev    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	31	None	replace
314	[BUG]  [BUGGY]  double  cPrev  =  getA(0,  x  +  1);  [CE]  cannot  find  symbol  hPrev  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  cPrev  =  getA(0,  x  +  1);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cPrev  =  getA(0,  x  +  1);	  double    cPrev    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	72	None	replace
315	[BUG]  [BUGGY]  double  x  =  getA(1,  x);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(1,  x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(1,  x);	  double    x    =    getA(1,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	12	None	replace
316	[BUG]  [BUGGY]  double  hPrev  =  getB(x,  epsilon  +  1);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getB(x,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getB(x,  epsilon  +  1);	  double    hPrev    =    getA(0,    epsilon    +    1);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
317	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  y);  double  epsilon  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  y  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(0,  y);  double  epsilon  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  y);  double  epsilon  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    double    epsilon    =    getA(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  y	78	None	replace
318	[BUG]  [BUGGY]  double  hPrev  =  getA(small,  x,  epsilon  +  1);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(small,  x,  epsilon  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(small,  x,  epsilon  +  1);	  double    hPrev    =    getA(x,    epsilon    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	14	None	replace
319	[BUG]  [BUGGY]  Integer  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Integer  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Integer  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);	  int    n    =    getScaleFactor().evaluate(x,    scaleFactor,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
320	[BUG]  [BUGGY]  Double  hPrev  =  getScaleFactor(0,  x  +  1,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hPrev  =  getScaleFactor(0,  x  +  1,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getScaleFactor(0,  x  +  1,  epsilon,  maxIterations);	  double    hPrev    =    getScaleFactor(0,    x    +    1,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
321	[BUG]  [BUGGY]  int  n  =  scaleFactor.calculate(small,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                      AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  scaleFactor.calculate(small,  epsilon,  maxIterations);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  scaleFactor.calculate(small,  epsilon,  maxIterations);	  int    n    =    scaleFactor.calculate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	74	None	replace
322	[BUG]  [BUGGY]  int  n  =  getScaleFactor(small,  y,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  y  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  n  =  getScaleFactor(small,  y,  epsilon,  maxIterations);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor(small,  y,  epsilon,  maxIterations);	  int    n    =    getScaleFactor(small,    x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  y	58	None	replace
323	[BUG]  [BUGGY]  double  x  =  getA(0.0,  x);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  x  =  getA(0.0,  x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0.0,  x);	  double    x    =    getA(0.0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	13	None	replace
324	[BUG]  [BUGGY]  double  n  =  getA(1,  x),  epsilon);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  n  =  getA(1,  x),  epsilon);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(1,  x),  epsilon);	  double    n    =    getA(1,    x);    	non-compiled	[CE]  ';'  expected	66	None	replace
325	[BUG]  [BUGGY]  int  hPrev  =  getA(0,  epsilon);  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  int  hPrev  =  getA(0,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  hPrev  =  getA(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    hPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  possible  loss  of  precision	50	None	replace
326	[BUG]  [BUGGY]  Double  x  =  getA(0,  x  +  1);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  x  =  getA(0,  x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  x  =  getA(0,  x  +  1);	  double    hPrev    =    getA(0,    x    +    1);    double    x    =    getA(0,    x    +    1);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	71	None	replace
327	[BUG]  [BUGGY]  x  =  getA(0,  x  +  1);  [CE]  cannot  find  symbol  hPrev  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  x  =  getA(0,  x  +  1);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	x  =  getA(0,  x  +  1);	  double    hPrev    =    getA(0,    x    +    1);    double    x    =    getA(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol  hPrev	71	None	replace
328	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  a);  [CE]  cannot  find  symbol  a  [FE]            AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations,  a);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon,  maxIterations,  a);	  double    hPrev    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  a	53	None	replace
329	[BUG]  [BUGGY]  Double  hN  =  getA(0,  x);  [CE]  cannot  find  symbol  hPrev  [FE]                AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  hN  =  getA(0,  x);  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hN  =  getA(0,  x);	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	81	None	replace
330	[BUG]  [BUGGY]  Double  n  =  getA(0,  x)-  1;  [CE]  cannot  find  symbol  hPrev  [FE]                  AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  Double  n  =  getA(0,  x)-  1;  [BUGGY]      double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  n  =  getA(0,  x)-  1;	  Double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	81	None	replace
331	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  maxIterations,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  maxIterations,  epsilon);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon  +  maxIterations,  epsilon);	  double    hPrev    =    getA(x,    epsilon    +    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	93	None	replace
332	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;      [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  maxIterations,  DEFAULT_EPSILON);  [BUGGY]        if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon  +  maxIterations,  DEFAULT_EPSILON);	  double    hPrev    =    getA(x,    epsilon    +    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	93	None	replace
