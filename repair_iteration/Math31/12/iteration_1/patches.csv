bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  small,  maxIterations);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  small,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor().evaluate(x,  small,  maxIterations);	      int    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
2	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(small,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  getScaleFactor().evaluate(small,  x,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor().evaluate(small,  x,  epsilon,  maxIterations);	      int    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
3	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  dPrev  =  getA(0,  x,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  dPrev  =  getA(0,  x,  epsilon);	      double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	8	None	replace
4	[BUG]  [BUGGY]  double  dPrev  =  getA(x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  dPrev  =  getA(x,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  dPrev  =  getA(x,  epsilon);	      double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	8	None	replace
5	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  hPrev  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  dPrev  =  getA(0,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  dPrev  =  getA(0,  epsilon);	      double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	8	None	replace
6	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  double  hPrev  =  getA(0,  x  +  1);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  double  hPrev  =  getA(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    x    +    1);    double  hPrev  =  getA(0,  x  +  1);	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	add
7	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  Double  hPrev  =  getA(0,  x  +  1);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  Double  hPrev  =  getA(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    x    +    1);    Double  hPrev  =  getA(0,  x  +  1);	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	add
8	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  double  hPrev  =  getA(0,  x  +  1));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  double  hPrev  =  getA(0,  x  +  1));  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    x    +    1);    double  hPrev  =  getA(0,  x  +  1));	  	non-compiled	[CE]  ';'  expected	18	None	add
9	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  hPrev  =  getA(0,  x  +  1);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  hPrev  =  getA(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    x    +    1);    hPrev  =  getA(0,  x  +  1);	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	add
10	[BUG]  [BUGGY]  double  x  =  getA(0,  small);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  x  =  getA(0,  small);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  small);	      double    x    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	11	None	replace
11	[BUG]  [BUGGY]  double  x  =  getA(0,  epsilon,  maxIterations);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  x  =  getA(0,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  epsilon,  maxIterations);	      double    x    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	11	None	replace
12	[BUG]  [BUGGY]  double  x  =  getA(1,  epsilon);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  x  =  getA(1,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(1,  epsilon);	      double    x    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	11	None	replace
13	[BUG]  [BUGGY]  double  x  =  getA(0.0,  epsilon);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  x  =  getA(0.0,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0.0,  epsilon);	      double    x    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	11	None	replace
14	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  1);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon  +  1);	  double    hPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	19	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	add	double  hPrev  =  getA(0,  epsilon  +  1);	  double    hPrev    =    getA(0,    x    +    1);    	compilable	  [FE]  AssertionError  	19	2	replace
16	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  epsilon  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  epsilon  +  1);	  double    hPrev    =    getA(0,    x    +    1);    	compilable	  [FE]  AssertionError  	19	2	replace
17	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  n  +  1);  [CE]  cannot  find  symbol  n  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  n  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  n  +  1);	  double    hPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol  n	19	None	replace
18	[BUG]  [BUGGY]  double  cN  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  hPrev  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  cN  =  getA(0,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(0,  epsilon);	      double    cN    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	17	None	replace
19	[BUG]  [BUGGY]  double  cN  =  getA(0,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  cN  =  getA(0,  x,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(0,  x,  epsilon);	      double    cN    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	17	None	replace
20	[BUG]  [BUGGY]  double  cN  =  getA(x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  cN  =  getA(x,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(x,  epsilon);	      double    cN    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	17	None	replace
21	[BUG]  [BUGGY]  double  hPrev  =  getW(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getW(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getW(x,  epsilon,  maxIterations);	  double    hPrev    =    getW(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
22	[BUG]  [BUGGY]  double  hPrev  =  getW(small,  epsilon);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getW(small,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getW(small,  epsilon);	  double    hPrev    =    getW(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
23	[BUG]  [BUGGY]  double  epsilon  =  getW(x,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  epsilon  =  getW(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  epsilon  =  getW(x,  epsilon);	  double    hPrev    =    getW(x,    epsilon);    	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	12	None	replace
24	[BUG]  [BUGGY]  double  hPrev  =  getW(short,  epsilon);  [CE]  '.class'  expected  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getW(short,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getW(short,  epsilon);	  double    hPrev    =    getW(x,    epsilon);    	non-compiled	[CE]  '.class'  expected	12	None	replace
25	[BUG]  [BUGGY]  double  x  =  getA(0,  n);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  x  =  getA(0,  n);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  n);	      double    x    =    getA(0,    x);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	10	None	replace
26	[BUG]  [BUGGY]  double  x  =  getA(0,  y);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  x  =  getA(0,  y);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  y);	      double    x    =    getA(0,    x);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	10	None	replace
27	[BUG]  [BUGGY]  int  n  =  epsilon.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  epsilon.doubleValue();  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  epsilon.doubleValue();	      	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
28	[BUG]  [BUGGY]  int  n  =  epsilon.intValue();  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  epsilon.intValue();  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  epsilon.intValue();	      	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
29	[BUG]  [BUGGY]  int  n  =  epsilon.getMaximumScale();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  epsilon.getMaximumScale();  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  epsilon.getMaximumScale();	      	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
30	[BUG]  [BUGGY]  int  n  =  size();  [CE]  cannot  find  symbol  [FE]                      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  size();  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  size();	      	non-compiled	[CE]  cannot  find  symbol	6	None	replace
31	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations);	  double    hPrev    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
32	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(small,  epsilon);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getScaleFactor(small,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(small,  epsilon);	  double    hPrev    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
33	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(x,  small);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getScaleFactor(x,  small);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(x,  small);	  double    hPrev    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
34	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(x,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]                    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getScaleFactor(x,  scaleFactor);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(x,  scaleFactor);	  double    hPrev    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	5	None	replace
35	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  epsilon);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getScaleFactor(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
36	[BUG]  [BUGGY]  double  hPrev  =  getB(x,  epsilon);  [CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getB(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getB(x,  epsilon);	  double    hPrev    =    getA(0,    epsilon);    	non-compiled	[CE]  method  getB  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	3	None	replace
37	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  x,  epsilon);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getScaleFactor(0,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  x,  epsilon);	  double    hPrev    =    getScaleFactor(0,    x);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
38	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  x,  maxIterations);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getScaleFactor(0,  x,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  x,  maxIterations);	  double    hPrev    =    getScaleFactor(0,    x);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
39	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  x  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getScaleFactor(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  x  +  1);	  double    hPrev    =    getScaleFactor(0,    x);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
40	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [CE]  cannot  find  symbol  scaleFactor  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  scaleFactor);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	16	None	replace
41	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  n  =  getA(x,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(x,  epsilon,  maxIterations);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
42	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  DEFAULT_EPSILON);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
43	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  small);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  small);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  small);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	16	None	replace
44	[BUG]  [BUGGY]  double  n  =  getA(x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  n  =  getA(x,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(x,  epsilon);	      double    n    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	7	None	replace
45	[BUG]  [BUGGY]  double  n  =  getA(0,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  n  =  getA(0,  x,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(0,  x,  epsilon);	      double    n    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	7	None	replace
46	[BUG]  [BUGGY]  double  n  =  getA(0,  epsilon);  [CE]  cannot  find  symbol  hPrev  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  n  =  getA(0,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(0,  epsilon);	      double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	7	None	replace
47	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon);  double  hPrev  =  getA(0,  epsilon);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  epsilon);  double  hPrev  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon);    double  hPrev  =  getA(0,  epsilon);	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	2	None	add
48	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon);  Double  hPrev  =  getA(0,  epsilon);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  epsilon);  Double  hPrev  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon);    Double  hPrev  =  getA(0,  epsilon);	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	2	None	add
49	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon);  int  epsilon  =  getA(0,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  epsilon);  int  epsilon  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon);    int  epsilon  =  getA(0,  epsilon);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	2	None	add
50	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon);  hPrev  =  getA(0,  epsilon);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  epsilon);  hPrev  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon);    hPrev  =  getA(0,  epsilon);	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	2	None	add
51	[BUG]  [BUGGY]  double  n  =  getA(0);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  n  =  getA(0);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(0);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	9	None	replace
52	[BUG]  [BUGGY]  double  n  =  getA0(0,  x);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  n  =  getA0(0,  x);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA0(0,  x);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
53	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon,  maxIterations);	  double    hPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	1	None	replace
54	[BUG]  [BUGGY]  double  hPrev  =  getA(small,  x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(small,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(small,  x,  epsilon);	  double    hPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	1	None	replace
55	[BUG]  [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  Double  hPrev  =  getA(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getA(x,  epsilon,  maxIterations);	  double    hPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	1	None	replace
56	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  small,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(x,  small,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  small,  epsilon);	  double    hPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	1	None	replace
57	[BUG]  [BUGGY]  int  n  =  getScaleFactor(small,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  getScaleFactor(small,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor(small,  epsilon,  maxIterations);	      int    n    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
58	[BUG]  [BUGGY]  int  n  =  getScaleFactor(small,  x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  getScaleFactor(small,  x,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor(small,  x,  epsilon,  maxIterations);	      int    n    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
59	[BUG]  [BUGGY]  int  n  =  getScaleFactor(short,  x,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  getScaleFactor(short,  x,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor(short,  x,  epsilon,  maxIterations);	      int    n    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	15	None	replace
60	[BUG]  [BUGGY]  double  hPrev  =  getX(0,  epsilon);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getX(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(0,  epsilon);	  double    hPrev    =    getX(0,    x);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
61	[BUG]  [BUGGY]  double  hPrev  =  getX(0,  x,  epsilon);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getX(0,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(0,  x,  epsilon);	  double    hPrev    =    getX(0,    x);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
62	[BUG]  [BUGGY]  double  hPrev  =  getX(x,  epsilon);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getX(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(x,  epsilon);	  double    hPrev    =    getX(0,    x);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
63	[BUG]  [BUGGY]  double  hPrev  =  getY(0,  x);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getY(0,  x);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getY(0,  x);	  double    hPrev    =    getX(0,    x);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
64	[BUG]  [BUGGY]  double  hPrev  =  getW(x,  epsilon  +  1);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getW(x,  epsilon  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getW(x,  epsilon  +  1);	  double    hPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
65	[BUG]  [BUGGY]  Double  hPrev  =  getW(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  Double  hPrev  =  getW(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getW(x,  epsilon,  maxIterations);	  double    hPrev    =    getW(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
66	[BUG]  [BUGGY]  double  n  =  getA(1,  x);  [CE]  cannot  find  symbol  hPrev  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  n  =  getA(1,  x);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(1,  x);	      double    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	7	None	replace
67	[BUG]  [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  size);  [CE]  cannot  find  symbol  size  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  getA(x,  epsilon,  maxIterations,  size);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getA(x,  epsilon,  maxIterations,  size);	      int    n    =    getA(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  size	16	None	replace
68	[BUG]  [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  scaleFactor,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  getScaleFactor().evaluate(x,  scaleFactor,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor().evaluate(x,  scaleFactor,  maxIterations);	      int    n    =    getScaleFactor().evaluate(x,    epsilon,    maxIterations);    	non-compiled	[CE]  cannot  find  symbol  scaleFactor	14	None	replace
69	[BUG]  [BUGGY]  double  x  =  getX(0,  epsilon);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  x  =  getX(0,  epsilon);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getX(0,  epsilon);	      double    x    =    getA(0,    epsilon);    	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	11	None	replace
70	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  double  hPrev  =  getB(0,  x  +  1);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  double  hPrev  =  getB(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    x    +    1);    double  hPrev  =  getB(0,  x  +  1);	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	18	None	add
71	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  double  x  =  getA(0,  x  +  1);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  double  x  =  getA(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    x    +    1);    double  x  =  getA(0,  x  +  1);	  	non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	18	None	add
72	[BUG]  [BUGGY]  double  cPrev  =  getA(0,  x);  [CE]  cannot  find  symbol  hPrev  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  cPrev  =  getA(0,  x);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cPrev  =  getA(0,  x);	      double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	8	None	replace
73	[BUG]  [BUGGY]  int  n  =  scaleFactor.evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  scaleFactor.evaluate(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  scaleFactor.evaluate(x,  epsilon,  maxIterations);	      	non-compiled	[CE]  cannot  find  symbol  scaleFactor	6	None	replace
74	[BUG]  [BUGGY]  int  n  =  scaleFactor.calculate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                  AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  scaleFactor.calculate(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  scaleFactor.calculate(x,  epsilon,  maxIterations);	      	non-compiled	[CE]  cannot  find  symbol  scaleFactor	6	None	replace
75	[BUG]  [BUGGY]  int  n  =  scaleFactor.equals(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  scaleFactor.equals(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  scaleFactor.equals(x,  epsilon,  maxIterations);	      	non-compiled	[CE]  cannot  find  symbol  scaleFactor	6	None	replace
76	[BUG]  [BUGGY]  int  n  =  scaleFactor.equals(x,  epsilon);  [CE]  cannot  find  symbol  scaleFactor  [FE]                      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  scaleFactor.equals(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  scaleFactor.equals(x,  epsilon);	      	non-compiled	[CE]  cannot  find  symbol  scaleFactor	6	None	replace
77	[BUG]  [BUGGY]  int  n  =  getScaleFactor(short,  epsilon,  maxIterations);  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  getScaleFactor(short,  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  getScaleFactor(short,  epsilon,  maxIterations);	      int    n    =    getScaleFactor(x,    epsilon,    maxIterations);    	non-compiled	[CE]  '.class'  expected	15	None	replace
78	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon);  double  epsilon  =  getA(0,  epsilon);  [CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  epsilon);  double  epsilon  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon);    double  epsilon  =  getA(0,  epsilon);	  	non-compiled	[CE]  variable  epsilon  is  already  defined  in  method  evaluate(double,double,int)	2	None	add
79	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon);  double  hPrev  =  getB(0,  epsilon);  [CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  epsilon);  double  hPrev  =  getB(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon);    double  hPrev  =  getB(0,  epsilon);	  	non-compiled	[CE]  variable  hPrev  is  already  defined  in  method  evaluate(double,double,int)	2	None	add
80	[BUG]  [BUGGY]  Double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  Double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  hPrev  =  getScaleFactor(x,  epsilon,  maxIterations);	  double    hPrev    =    getScaleFactor(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
81	[BUG]  [BUGGY]  Double  n  =  getA(0,  x);  [CE]  cannot  find  symbol  hPrev  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  Double  n  =  getA(0,  x);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	Double  n  =  getA(0,  x);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	9	None	replace
82	[BUG]  [BUGGY]  float  n  =  getA(0,  x);  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  float  n  =  getA(0,  x);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	float  n  =  getA(0,  x);	      int    n    =    getA(0,    x);    	non-compiled	[CE]  possible  loss  of  precision	9	None	replace
83	[BUG]  [BUGGY]  double  hPrev  =  getA(a,  x,  epsilon);  [CE]  cannot  find  symbol  a  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(a,  x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(a,  x,  epsilon);	  double    hPrev    =    getA(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol  a	1	None	replace
84	[BUG]  [BUGGY]  double  hPrev  =  getX(0,  x  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getX(0,  x  +  1);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(0,  x  +  1);	  double    hPrev    =    getX(0,    x);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
85	[BUG]  [BUGGY]  double  n  =  getA(0,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  n  =  getA(0,  x),  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  n  =  getA(0,  x),  epsilon,  maxIterations);	      double    n    =    getA(0,    x);    	non-compiled	[CE]  ';'  expected	7	None	replace
86	[BUG]  [BUGGY]  int  n  =  scaleFactor.calculateScale(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  scaleFactor  [FE]                AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  int  n  =  scaleFactor.calculateScale(x,  epsilon,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	int  n  =  scaleFactor.calculateScale(x,  epsilon,  maxIterations);	      	non-compiled	[CE]  cannot  find  symbol  scaleFactor	6	None	replace
87	[BUG]  [BUGGY]  double  x  =  getA(0,  x),  epsilon,  maxIterations);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  x  =  getA(0,  x),  epsilon,  maxIterations);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  x  =  getA(0,  x),  epsilon,  maxIterations);	      double    x    =    getA(0,    x);    	non-compiled	[CE]  ';'  expected	10	None	replace
88	[BUG]  [BUGGY]  double  dPrev  =  getA(0,  x  +  1);  [CE]  cannot  find  symbol  hPrev  [FE]          AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  dPrev  =  getA(0,  x  +  1);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  dPrev  =  getA(0,  x  +  1);	      double    dPrev    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	8	None	replace
89	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon);  int  n  =  getA(0,  epsilon);  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(0,  epsilon);  int  n  =  getA(0,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double    hPrev    =    getA(0,    epsilon);    int  n  =  getA(0,  epsilon);	  	non-compiled	[CE]  possible  loss  of  precision	2	None	add
90	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  x  +  1,  maxIterations);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getScaleFactor(0,  x  +  1,  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  x  +  1,  maxIterations);	  double    hPrev    =    getScaleFactor(0,    x);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
91	[BUG]  [BUGGY]  double  hPrev  =  calculateW(x,  epsilon);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  calculateW(x,  epsilon);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  calculateW(x,  epsilon);	  double    hPrev    =    getW(x,    epsilon);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
92	[BUG]  [BUGGY]  double  cN  =  getA(1,  x);  [CE]  cannot  find  symbol  hPrev  [FE]        AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  cN  =  getA(1,  x);  [BUGGY]    double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  cN  =  getA(1,  x);	      double    cN    =    getA(0,    x);    	non-compiled	[CE]  cannot  find  symbol  hPrev	17	None	replace
93	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;    [BUGGY]  double  hPrev  =  getA(x,  epsilon  +  maxIterations);  [BUGGY]      if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon  +  maxIterations);	  double    hPrev    =    getA(0,    x    +    1);    	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	19	None	replace
