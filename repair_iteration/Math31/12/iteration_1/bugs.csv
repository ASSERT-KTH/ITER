bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  hPrev  =  getA(x,  epsilon);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]  double  hPrev  =  getA(x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(x,  epsilon);	double  hPrev  =  getA(0,  x);  	non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	23	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]  double  hPrev  =  getA(0,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	add	double  hPrev  =  getA(0,  epsilon);	double  hPrev  =  getA(0,  x);  	compilable	  [FE]  AssertionError  	23	2	replace
3	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  epsilon);  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]  double  hPrev  =  getA(0,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  epsilon);	double  hPrev  =  getA(0,  x);  	compilable	  [FE]  AssertionError  	23	2	replace
4	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(0,  x);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]  double  hPrev  =  getScaleFactor(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(0,  x);	double  hPrev  =  getA(0,  x);  	non-compiled	[CE]  cannot  find  symbol	23	None	replace
5	[BUG]  [BUGGY]  double  hPrev  =  getScaleFactor(x,  epsilon);  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]  double  hPrev  =  getScaleFactor(x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getScaleFactor(x,  epsilon);	double  hPrev  =  getA(0,  x);  	non-compiled	[CE]  cannot  find  symbol	23	None	replace
6	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  hPrev  [FE]            AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]    [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	  	double  hPrev  =  getA(0,  x);  	non-compiled	[CE]  cannot  find  symbol  hPrev	23	None	replace
7	[BUG]  [BUGGY]    double  n  =  getA(0,  x);  [CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]    double  n  =  getA(0,  x);  [BUGGY]  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	    double  n  =  getA(0,  x);		non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluate(double,double,int)	24	None	add
8	[BUG]  [BUGGY]    double  dPrev  =  getA(0,  x);  [CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)  [FE]      AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]    double  dPrev  =  getA(0,  x);  [BUGGY]  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	    double  dPrev  =  getA(0,  x);		non-compiled	[CE]  variable  dPrev  is  already  defined  in  method  evaluate(double,double,int)	24	None	add
9	[BUG]  [BUGGY]    int  n  =  getA(0,  x);  [CE]  possible  loss  of  precision  [FE]        AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]    int  n  =  getA(0,  x);  [BUGGY]  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	    int  n  =  getA(0,  x);		non-compiled	[CE]  possible  loss  of  precision	24	None	add
10	[BUG]  [BUGGY]    double  x  =  getA(0,  x);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]          AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]    double  x  =  getA(0,  x);  [BUGGY]  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	    double  x  =  getA(0,  x);		non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	24	None	add
11	[BUG]  [BUGGY]    double  x  =  getA(0,  epsilon);  [CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)  [FE]            AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]    double  x  =  getA(0,  epsilon);  [BUGGY]  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	    double  x  =  getA(0,  epsilon);		non-compiled	[CE]  variable  x  is  already  defined  in  method  evaluate(double,double,int)	24	None	add
12	[BUG]  [BUGGY]  double  hPrev  =  getW(x,  epsilon);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]  double  hPrev  =  getW(x,  epsilon);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getW(x,  epsilon);	double  hPrev  =  getA(0,  x);  	non-compiled	[CE]  cannot  find  symbol	23	None	replace
13	[BUG]  [BUGGY]  double  hPrev  =  getX(0,  x);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]  double  hPrev  =  getX(0,  x);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getX(0,  x);	double  hPrev  =  getA(0,  x);  	non-compiled	[CE]  cannot  find  symbol	23	None	replace
14	[BUG]  [BUGGY]    int  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]    int  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);  [BUGGY]  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	    int  n  =  getScaleFactor().evaluate(x,  epsilon,  maxIterations);		non-compiled	[CE]  cannot  find  symbol	24	None	add
15	[BUG]  [BUGGY]    int  n  =  getScaleFactor(x,  epsilon,  maxIterations);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]    int  n  =  getScaleFactor(x,  epsilon,  maxIterations);  [BUGGY]  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	    int  n  =  getScaleFactor(x,  epsilon,  maxIterations);		non-compiled	[CE]  cannot  find  symbol	24	None	add
16	[BUG]  [BUGGY]    int  n  =  getA(x,  epsilon,  maxIterations);  [CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;  [FE]        AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]    int  n  =  getA(x,  epsilon,  maxIterations);  [BUGGY]  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	    int  n  =  getA(x,  epsilon,  maxIterations);		non-compiled	[CE]  method  getA  in  class  ContinuedFraction  cannot  be  applied  to  given  types;	24	None	add
17	[BUG]  [BUGGY]    double  cN  =  getA(0,  x);  [CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]    double  cN  =  getA(0,  x);  [BUGGY]  double  hPrev  =  getA(0,  x);  if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	    double  cN  =  getA(0,  x);		non-compiled	[CE]  variable  cN  is  already  defined  in  method  evaluate(double,double,int)	24	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	add	double  hPrev  =  getA(0,  x  +  1);	double  hPrev  =  getA(0,  x);  	compilable	  [FE]  AssertionError  	23	2	replace
19	[BUG]  [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  evaluate(double  x,  double  epsilon,  int  maxIterations)  {  final  double  small  =  1e-50;  [BUGGY]  double  hPrev  =  getA(0,  x  +  1);  [BUGGY]    if  (Precision.equals(hPrev,  0.0,  small))  {  hPrev  =  small;  }  int  n  =  1;  double  dPrev  =  0.0;  double  p0  =  1.0;  double  q1  =  1.0;  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.3779644730092272	125	125	2	replace	double  hPrev  =  getA(0,  x  +  1);	double  hPrev  =  getA(0,  x);  	compilable	  [FE]  AssertionError  	23	2	replace
