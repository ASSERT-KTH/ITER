bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]  cPrev  =  dPrev  /  q2;  [BUGGY]  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  /  q2;	cPrev  =  cN  /  q2;  	compilable	timeout	5	1	replace
2	[BUG]  [BUGGY]  cPrev  =  dPrev  /  q2;  timeout  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]  cPrev  =  dPrev  /  q2;  [BUGGY]  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  /  q2;	cPrev  =  cN  /  q2;  	compilable	timeout	5	1	replace
3	[BUG]  [BUGGY]  timeout  [FE]      AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]  cPrev  =  q2  /  cN;  [BUGGY]  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q2  /  cN;	cPrev  =  cN  /  q2;  	compilable	timeout	5	1	replace
4	[BUG]  [BUGGY]  cPrev  =  q2  /  cN;  timeout  [FE]      AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]  cPrev  =  q2  /  cN;  [BUGGY]  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q2  /  cN;	cPrev  =  cN  /  q2;  	compilable	timeout	5	1	replace
5	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]  cPrev  =  dPrev  *  q2;  [BUGGY]  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  dPrev  *  q2;	cPrev  =  cN  /  q2;  	compilable	  [FE]  ConvergenceException  	5	12	replace
6	[BUG]  [BUGGY]  cPrev  =  dPrev  *  q2;  [FE]  ConvergenceException  [FE]        AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]  cPrev  =  dPrev  *  q2;  [BUGGY]  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  dPrev  *  q2;	cPrev  =  cN  /  q2;  	compilable	  [FE]  ConvergenceException  	5	12	replace
7	[BUG]  [BUGGY]  timeout  [FE]          AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]  cPrev  =  q1  /  cN;  [BUGGY]  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  q1  /  cN;	cPrev  =  cN  /  q2;  	compilable	timeout	5	1	replace
8	[BUG]  [BUGGY]  cPrev  =  q1  /  cN;  timeout  [FE]          AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]  cPrev  =  q1  /  cN;  [BUGGY]  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  q1  /  cN;	cPrev  =  cN  /  q2;  	compilable	timeout	5	1	replace
9	[BUG]  [BUGGY]  timeout  [FE]            AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    [BUGGY]  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	  	cPrev  =  cN  /  q2;  	compilable	timeout	5	1	replace
10	[BUG]  [BUGGY]    timeout  [FE]            AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    [BUGGY]  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	  	cPrev  =  cN  /  q2;  	compilable	timeout	5	1	replace
11	[BUG]  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  dPrev;  [CE]  possible  loss  of  precision  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  dPrev;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    n  =  Math.abs(deltaN  -  1.0)/  dPrev;		non-compiled	[CE]  possible  loss  of  precision	6	None	add
12	[BUG]  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  epsilon;  [CE]  possible  loss  of  precision  [FE]      AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  epsilon;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    n  =  Math.abs(deltaN  -  1.0)/  epsilon;		non-compiled	[CE]  possible  loss  of  precision	6	None	add
13	[BUG]  [BUGGY]    n  =  Math.max(dPrev,  dPrev);  [CE]  possible  loss  of  precision  [FE]        AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    n  =  Math.max(dPrev,  dPrev);  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    n  =  Math.max(dPrev,  dPrev);		non-compiled	[CE]  possible  loss  of  precision	6	None	add
14	[BUG]  [BUGGY]    n  =  Math.abs(deltaN  -  dPrev);  [CE]  possible  loss  of  precision  [FE]          AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    n  =  Math.abs(deltaN  -  dPrev);  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    n  =  Math.abs(deltaN  -  dPrev);		non-compiled	[CE]  possible  loss  of  precision	6	None	add
15	[BUG]  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  q2;  [CE]  possible  loss  of  precision  [FE]            AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    n  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    n  =  Math.abs(deltaN  -  1.0)/  q2;		non-compiled	[CE]  possible  loss  of  precision	6	None	add
16	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	    cN  =  Math.abs(deltaN  -  1.0)/  q2;		compilable	  [FE]  ConvergenceException  	6	11	add
17	[BUG]  [BUGGY]    cN  =  Math.abs(deltaN  -  1.0)/  q2;  [FE]  ConvergenceException  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    cN  =  Math.abs(deltaN  -  1.0)/  q2;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    cN  =  Math.abs(deltaN  -  1.0)/  q2;		compilable	  [FE]  ConvergenceException  	6	11	add
18	[BUG]  [BUGGY]    n  =  Math.min(deltaN,  q2);  [CE]  possible  loss  of  precision  [FE]      AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    n  =  Math.min(deltaN,  q2);  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    n  =  Math.min(deltaN,  q2);		non-compiled	[CE]  possible  loss  of  precision	6	None	add
19	[BUG]  [BUGGY]    n  =  Math.min(deltaN,  dPrev);  [CE]  possible  loss  of  precision  [FE]        AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    n  =  Math.min(deltaN,  dPrev);  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    n  =  Math.min(deltaN,  dPrev);		non-compiled	[CE]  possible  loss  of  precision	6	None	add
20	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]  cPrev  =  hN  /  q2;  [BUGGY]  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	cPrev  =  hN  /  q2;	cPrev  =  cN  /  q2;  	compilable	  [FE]  ConvergenceException  	5	11	replace
21	[BUG]  [BUGGY]  cPrev  =  hN  /  q2;  [FE]  ConvergenceException  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]  cPrev  =  hN  /  q2;  [BUGGY]  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	cPrev  =  hN  /  q2;	cPrev  =  cN  /  q2;  	compilable	  [FE]  ConvergenceException  	5	11	replace
22	[BUG]  [BUGGY]    n  =  cN  /  q2;  [CE]  possible  loss  of  precision  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    n  =  cN  /  q2;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    n  =  cN  /  q2;		non-compiled	[CE]  possible  loss  of  precision	6	None	add
23	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]      AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    cN  =  cN  /  q2;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	    cN  =  cN  /  q2;		compilable	  [FE]  ConvergenceException  	6	11	add
24	[BUG]  [BUGGY]    cN  =  cN  /  q2;  [FE]  ConvergenceException  [FE]      AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    cN  =  cN  /  q2;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    cN  =  cN  /  q2;		compilable	  [FE]  ConvergenceException  	6	11	add
25	[BUG]  [BUGGY]  [FE]  ConvergenceException  [FE]        AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    cN  =  cN  /  q2;  n  =  0;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	add	    cN  =  cN  /  q2;  n  =  0;		compilable	  [FE]  ConvergenceException  	6	12	add
26	[BUG]  [BUGGY]    cN  =  cN  /  q2;  n  =  0;  [FE]  ConvergenceException  [FE]        AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    cN  =  cN  /  q2;  n  =  0;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    cN  =  cN  /  q2;  n  =  0;		compilable	  [FE]  ConvergenceException  	6	12	add
27	[BUG]  [BUGGY]    cN  =  cN  /  q2;  n  =  dPrev;  [CE]  possible  loss  of  precision  [FE]          AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    cN  =  cN  /  q2;  n  =  dPrev;  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    cN  =  cN  /  q2;  n  =  dPrev;		non-compiled	[CE]  possible  loss  of  precision	6	None	add
28	[BUG]  [BUGGY]    n  =  Math.abs(dPrev  *  q2);  [CE]  possible  loss  of  precision  [FE]            AssertionError  [CONTEXT]  if  (Double.isNaN(hN))  {  throw  new  ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,  x);  }  if  (FastMath.abs(deltaN  -  1.0)  <  epsilon)  {  break;  }  dPrev  =  q1;  [BUGGY]    n  =  Math.abs(dPrev  *  q2);  [BUGGY]  cPrev  =  cN  /  q2;  p0  =  hPrev;  hPrev  =  cN;  q1  =  q2;  n++;  }  if  (n  >=  maxIterations)  {  throw  new  MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,  maxIterations,  x);  }  [CLASS]  ContinuedFraction  [METHOD]  evaluate  [RETURN_TYPE]  double  double  x  double  epsilon  int  maxIterations  [VARIABLES]  double  DEFAULT_EPSILON  a  b  cN  cPrev  dPrev  deltaN  epsilon  hN  hPrev  lastScaleFactor  p0  q1  q2  scale  scaleFactor  small  x  int  i  maxIterations  maxPower  n  boolean  	projects/Math31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java	0.4082482904638631	186	186	2	replace	    n  =  Math.abs(dPrev  *  q2);		non-compiled	[CE]  possible  loss  of  precision	6	None	add
